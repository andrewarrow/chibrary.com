253 messages, 0 in cache, adding 253
--- !ruby/object:ThreadSet
sym: &507 !ruby/object:Sym
  slug: mud-dev
  year: 2000
  month: 1
containers:
  ? &1 !ruby/object:MessageId
    raw: Jzmy2yC8@generated-message-id.chibrary.org
  : &3 !ruby/object:MessageContainer
    key: *1
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: \"Jon A. Lambert\" <jlsysinc@ix.netcom.com>\nDate: Sun, 2 Jan
          2000 20:13:24 -0500\nSubject: Re: [MUD-Dev] Storing tokens with flex & bison\n\nChrister
          Enfors wrote:\n>On Sat, 1 Jan 2000, Jon A. Lambert wrote:\n>> Christer Enfors
          wrote:\n>> On Sat, 1 Jan 2000, Chris Turner wrote:\n>> >> \n>> >> The O'Reilly
          Lex & Yacc book is well written and contains many tutorials.\n>> >\n>> >Right,
          but it doesn't have a tutorial that involves storing the source\n>> >code
          in any format for later execution, which is what I'm looking for in\n>>
          >this case.\n>> \n>> \n>> Nod.  In order to use a byte code, one must first
          design and implement\n>> a virtual machine, or target it for an existing
          VM (i.e. Java)\n>> I think what you are looking for is documentation on
          designing Virtual\n>> Machines.  The way I learned was by snooping through
          all the notes,\n>> examples, and syllabus (syllabi?) left out on the net
          by university professors\n>> teaching it.  For some reason the CS course
          numbers (505 and 565) seem\n>> familar, though it has been a couple years.
          \ :-( \n>> There's Sun's Java VM doc, the Smart tiny VM, the Luck VM, the
          ANTLR \n>> tutorial by Scott Stanchfield(?) that implements a language called\n>>
          X.  I don't know offhand of any books that cover VM design in depth.  \n>\n>Ah,
          now the pieces are starting to fall into place.\n>\n>I am not supposed to
          use lex & yacc for the execution at all, am I? I\n>thought I was. \n\nWell,
          Bison can act as an executable interpreter, but it's probably not an\nideal
          vehicle for processing a mud programming language/script.\nAlso, you might
          want to take a look at the Interlude server.  I think Chris has\na copy
          on ftp.kanga.nu.  Interlude uses lex as a scanner but implements\nan RD
          parser by hand.   \n\n>All I should use lex & yacc for is the source code
          to byte\n>code compilation, right? And since my byte code is so clever /
          simple, I\n>can code the VM manually in C, without needing lex & yacc? Am
          I on the\n>right track now? =)\n\nYes. :-)  BTW, writing scanners and recusive
          descent parsers is easy.\nDefinitely read the Crenshaw tutorial.   The CoolMUD
          VM is a simple\nand well-written example of a VM.\n\nLike JC Lawrence and
          Chris Gray I've written my own scanners and recursive \ndescent parsers.
          \ Personally, I'm a bit anal about not using globals, having \nreadable
          and debugable code.  Yacc and Bison generate extremely ugly\ncode.  \n\nOn
          the other hand, ANTLR (formerly PCCTS) generates fairly readable and \npassable
          object-oriented C++ code.  I wrote the grammar for Aphrodite using\nANTLR
          and debugged it using ANTLR's Parseview tool.  ANTLR's notation \nis better
          than Bison/Yacc because you can write a handmade RDP by hand \nby just looking
          at the grammar notation itself.   Crenshaw talks about how to do \nthis
          with BNF notation.  Bison/yacc grammars use very confusing notations to\nshow
          precedence and resolve syntax conflicts.    \n\nOh and here's the link to
          Stanchfield's XL compiler/Antlr tutorial :\n<URL: http://www.javadude.com/articles/antlrtut/>\n\n\n--\n--*
          \    Jon A. Lambert - TychoMUD Email: jlsysinc@nospam.ix.netcom.com     *--\n--*
          \    Mud Server Developer's Page <http://jlsysinc.home.netcom.com>      *--\n--*
          \"No Free man shall ever be debarred the use of arms.\" Thomas Jefferson
          *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: "Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                name: From
                value: '"Jon A. Lambert" <jlsysinc@ix.netcom.com>'
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Sun, 2 Jan 2000 20:13:24 -0500'
                name: Date
                value: Sun, 2 Jan 2000 20:13:24 -0500
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex & bison'
                name: Subject
                value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
              mbox_from: 
            body: "Christer Enfors wrote:\n>On Sat, 1 Jan 2000, Jon A. Lambert wrote:\n>>
              Christer Enfors wrote:\n>> On Sat, 1 Jan 2000, Chris Turner wrote:\n>>
              >> \n>> >> The O'Reilly Lex & Yacc book is well written and contains
              many tutorials.\n>> >\n>> >Right, but it doesn't have a tutorial that
              involves storing the source\n>> >code in any format for later execution,
              which is what I'm looking for in\n>> >this case.\n>> \n>> \n>> Nod.
              \ In order to use a byte code, one must first design and implement\n>>
              a virtual machine, or target it for an existing VM (i.e. Java)\n>> I
              think what you are looking for is documentation on designing Virtual\n>>
              Machines.  The way I learned was by snooping through all the notes,\n>>
              examples, and syllabus (syllabi?) left out on the net by university
              professors\n>> teaching it.  For some reason the CS course numbers (505
              and 565) seem\n>> familar, though it has been a couple years.  :-( \n>>
              There's Sun's Java VM doc, the Smart tiny VM, the Luck VM, the ANTLR
              \n>> tutorial by Scott Stanchfield(?) that implements a language called\n>>
              X.  I don't know offhand of any books that cover VM design in depth.
              \ \n>\n>Ah, now the pieces are starting to fall into place.\n>\n>I am
              not supposed to use lex & yacc for the execution at all, am I? I\n>thought
              I was. \n\nWell, Bison can act as an executable interpreter, but it's
              probably not an\nideal vehicle for processing a mud programming language/script.\nAlso,
              you might want to take a look at the Interlude server.  I think Chris
              has\na copy on ftp.kanga.nu.  Interlude uses lex as a scanner but implements\nan
              RD parser by hand.   \n\n>All I should use lex & yacc for is the source
              code to byte\n>code compilation, right? And since my byte code is so
              clever / simple, I\n>can code the VM manually in C, without needing
              lex & yacc? Am I on the\n>right track now? =)\n\nYes. :-)  BTW, writing
              scanners and recusive descent parsers is easy.\nDefinitely read the
              Crenshaw tutorial.   The CoolMUD VM is a simple\nand well-written example
              of a VM.\n\nLike JC Lawrence and Chris Gray I've written my own scanners
              and recursive \ndescent parsers.  Personally, I'm a bit anal about not
              using globals, having \nreadable and debugable code.  Yacc and Bison
              generate extremely ugly\ncode.  \n\nOn the other hand, ANTLR (formerly
              PCCTS) generates fairly readable and \npassable object-oriented C++
              code.  I wrote the grammar for Aphrodite using\nANTLR and debugged it
              using ANTLR's Parseview tool.  ANTLR's notation \nis better than Bison/Yacc
              because you can write a handmade RDP by hand \nby just looking at the
              grammar notation itself.   Crenshaw talks about how to do \nthis with
              BNF notation.  Bison/yacc grammars use very confusing notations to\nshow
              precedence and resolve syntax conflicts.    \n\nOh and here's the link
              to Stanchfield's XL compiler/Antlr tutorial :\n<URL: http://www.javadude.com/articles/antlrtut/>\n\n\n--\n--*
              \    Jon A. Lambert - TychoMUD Email: jlsysinc@nospam.ix.netcom.com
              \    *--\n--*     Mud Server Developer's Page <http://jlsysinc.home.netcom.com>
              \     *--\n--* \"No Free man shall ever be debarred the use of arms.\"
              Thomas Jefferson *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
        from: Jon A. Lambert <jlsysinc@ix.netcom.com>
        references: []
        date: 2000-01-03 01:13:24.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jzmy2yC8
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *1
    parent: 
    children:
    - &5 !ruby/object:MessageContainer
      key: &2 !ruby/object:MessageId
        raw: JzUMT8Vc@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Tue, 18 Jan 2000 00:55:30
            -0800\nSubject: Re: [MUD-Dev] Storing tokens with flex & bison\n\nOn Sun,
            2 Jan 2000 20:13:24 -0500 \nJon A Lambert <jlsysinc@ix.netcom.com> wrote:\n\n>
            Also, you might want to take a look at the Interlude server.  I\n> think
            Chris has a copy on ftp.kanga.nu.  Interlude uses lex as a\n> scanner
            but implements an RD parser by hand.\n\nYup.  Interluds does a bunch of
            rather intersting bits design-wise.\n\n> Yes. :-) BTW, writing scanners
            and recusive descent parsers is\n> easy.  Definitely read the Crenshaw
            tutorial.  The CoolMUD VM is a\n> simple and well-written example of a
            VM.\n\nIts worth noting the massive differences between COOLMUD and\nLambdaMOO
            and before that MOO (Stephen White wrote all of them\n(Pavel Curtis taking
            over LambdaMOO fairly eary on when Stephen\nmoved on to COOL)) that clearly
            show the lessons he learned en route\n(oughta catalog them for posterity
            some time).  I'm actually rather\nintersted in digging thru his recent
            Java based server just to see\nwhat basic design changes he's made now...\n\n>
            At some po Like JC Lawrence and Chris Gray I've written my own\n> scanners
            and recursive descent parsers.  Personally, I'm a bit\n> anal about not
            using globals, having readable and debugable code.\n\nJoin the club.  I'm
            digging thru some inherited C++ at work that is\nextremely well written,
            beatufiully executed, reasonably well\ncommented, very cleanly designed,
            and almost utterly obtuse.\n\nI've spent days trying to figure out what
            a couple classes do.\n\nNo thanks.\n\n> Yacc and Bison generate extremely
            ugly code.\n\n<kof>  Really?  <kof>\n\n--\nJ C Lawrence                                 Home:
            claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
            A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: J C Lawrence <claw@kanga.nu>'
                  name: From
                  value: J C Lawrence <claw@kanga.nu>
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Tue, 18 Jan 2000 00:55:30 -0800'
                  name: Date
                  value: Tue, 18 Jan 2000 00:55:30 -0800
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex & bison'
                  name: Subject
                  value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                mbox_from: 
              body: "On Sun, 2 Jan 2000 20:13:24 -0500 \nJon A Lambert <jlsysinc@ix.netcom.com>
                wrote:\n\n> Also, you might want to take a look at the Interlude server.
                \ I\n> think Chris has a copy on ftp.kanga.nu.  Interlude uses lex
                as a\n> scanner but implements an RD parser by hand.\n\nYup.  Interluds
                does a bunch of rather intersting bits design-wise.\n\n> Yes. :-)
                BTW, writing scanners and recusive descent parsers is\n> easy.  Definitely
                read the Crenshaw tutorial.  The CoolMUD VM is a\n> simple and well-written
                example of a VM.\n\nIts worth noting the massive differences between
                COOLMUD and\nLambdaMOO and before that MOO (Stephen White wrote all
                of them\n(Pavel Curtis taking over LambdaMOO fairly eary on when Stephen\nmoved
                on to COOL)) that clearly show the lessons he learned en route\n(oughta
                catalog them for posterity some time).  I'm actually rather\nintersted
                in digging thru his recent Java based server just to see\nwhat basic
                design changes he's made now...\n\n> At some po Like JC Lawrence and
                Chris Gray I've written my own\n> scanners and recursive descent parsers.
                \ Personally, I'm a bit\n> anal about not using globals, having readable
                and debugable code.\n\nJoin the club.  I'm digging thru some inherited
                C++ at work that is\nextremely well written, beatufiully executed,
                reasonably well\ncommented, very cleanly designed, and almost utterly
                obtuse.\n\nI've spent days trying to figure out what a couple classes
                do.\n\nNo thanks.\n\n> Yacc and Bison generate extremely ugly code.\n\n<kof>
                \ Really?  <kof>\n\n--\nJ C Lawrence                                 Home:
                claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
                A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
          from: J C Lawrence <claw@kanga.nu>
          references: []
          date: 2000-01-18 08:55:30.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: JzUMT8Vc
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *2
      parent: *3
      children:
      - &7 !ruby/object:MessageContainer
        key: &4 !ruby/object:MessageId
          raw: 000DlgQ4@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: \"Dominic J. Eidson\" <sauron@the-infinite.org>\nDate: Fri,
              7 Jan 2000 16:13:53 -0600 (CST)\nSubject: Re: [MUD-Dev] Storing tokens
              with flex & bison\n\nOn Fri, 7 Jan 2000, Phillip Lenhardt wrote:\n\n>
              On Sun, Jan 02, 2000, cg@ami-cg.GraySage.Edmonton.AB.CA wrote:\n> >
              My personal experience with my byte-code, and how it affected run-time\n>
              > speed, can be found in:\n> > \n> >     http://www.GraySage.Edmonton.AB.CA/cg/MUD/AmigaMUD/ByteCode.txt\n>
              \n> Stop taunting me with all the goodies to be found on\n> www.GraySage.Edmonton.AB.CA!
              I can't resolve that\n> host name. In fact, I can find the following
              nameservers\n> for .ca:\n\n[Snip]\n\n> Does anyone else have this problem?
              If not, does anyone just know\n> the ip address of www.GraySage.Edmonton.AB.CA?\n\nmorannon:~>host
              ami-cg.GraySage.Edmonton.AB.CA\nami-cg.GraySage.Edmonton.AB.CA has address
              24.65.146.32\n\n\n--\nDominic J. Eidson\n                                         \"Baruk
              Khazad! Khazad ai-menu!\" - Gimli\n--------------------------------------------------------------------------------\nhttp://www.the-infinite.org/
              \              http://www.the-infinite.org/~dominic/\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: "Dominic J. Eidson" <sauron@the-infinite.org>'
                    name: From
                    value: '"Dominic J. Eidson" <sauron@the-infinite.org>'
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Fri, 7 Jan 2000 16:13:53 -0600 (CST)'
                    name: Date
                    value: Fri, 7 Jan 2000 16:13:53 -0600 (CST)
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex & bison'
                    name: Subject
                    value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                  mbox_from: 
                body: "On Fri, 7 Jan 2000, Phillip Lenhardt wrote:\n\n> On Sun, Jan
                  02, 2000, cg@ami-cg.GraySage.Edmonton.AB.CA wrote:\n> > My personal
                  experience with my byte-code, and how it affected run-time\n> >
                  speed, can be found in:\n> > \n> >     http://www.GraySage.Edmonton.AB.CA/cg/MUD/AmigaMUD/ByteCode.txt\n>
                  \n> Stop taunting me with all the goodies to be found on\n> www.GraySage.Edmonton.AB.CA!
                  I can't resolve that\n> host name. In fact, I can find the following
                  nameservers\n> for .ca:\n\n[Snip]\n\n> Does anyone else have this
                  problem? If not, does anyone just know\n> the ip address of www.GraySage.Edmonton.AB.CA?\n\nmorannon:~>host
                  ami-cg.GraySage.Edmonton.AB.CA\nami-cg.GraySage.Edmonton.AB.CA has
                  address 24.65.146.32\n\n\n--\nDominic J. Eidson\n                                         \"Baruk
                  Khazad! Khazad ai-menu!\" - Gimli\n--------------------------------------------------------------------------------\nhttp://www.the-infinite.org/
                  \              http://www.the-infinite.org/~dominic/\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
            from: Dominic J. Eidson <sauron@the-infinite.org>
            references: []
            date: 2000-01-07 22:13:53.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 000DlgQ4
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *4
        parent: *5
        children:
        - &9 !ruby/object:MessageContainer
          key: &6 !ruby/object:MessageId
            raw: 00IySrZI@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: cg@ami-cg.GraySage.Edmonton.AB.CA\nDate: Sun, 2 Jan 2000
                23:16:55 -0700\nSubject: Re: [MUD-Dev] Storing tokens with flex &
                bison\n\n[Jon A. Lambert:]\n\n[Oh dear, I'm running on again. Sorry
                about that!]\n\n> I've noticed that you can obtain lots of little
                optimization tweaks by just using \n> \"lazy evaluation\".  That is
                instead of emitting an opcode as soon as it is \n> identified, pass
                that opcode along as an integer to the next routine in the \n> parse
                tree as you begin to evaluate the next token.   Based on the next\n>
                token you may be able to output code that handles that special case\n>
                rather than the general case.  \n>\n> For instance in the general
                case, you might evaluate and generate:\n> x+y --> pushvar(x) pushvar(y)
                addop()\n> x+1 --> pushvar(x) pushint(1) addop()\n>\n> The second
                case can be optimized as a special case if instead of\n> immediately
                emiting pushvar(x), you wait until the next expression is \n> identified.
                \ Thus it could become:\n>\n> x+1 --> pushvar(x) increment()\n> or
                \n> x+1 --> pushvar(x+1) \n>\n> I imagine something similar goes on
                in C compilers which recognize\n> that forms like 'x++' and 'x=x+1'
                as equivalent.\n\nNormally, you just do the special-case check at
                the place where you have\nall of the needed information. In this case,
                it would be in the processing\nfor the '+' operation. I don't have
                an 'add1' opcode, so this particular\nexample doesn't work for me,
                but here is a more generic one, which is\na minor kind of \"compile-time
                expression evaluation\":\n\n    case ex_negate:\n    case ex_fNegate:\n\tex
                = ex->ex_v.ex_expressionPtr->ex_right;\n\tif (ex->ex_kind == ex_int)
                {\n\t    bcGenConst(- ex->ex_v.ex_integer);\n\t} else {\n\t    bcComp(ex);\n\t
                \   bcWriteOp(bc_neg);\n\t}\n\tbreak;\n\nIf the operand for the unary
                '-' operator is a constant, then just generate\nthe negative of that
                constant, rather than generating the positive\nvalue and then a 'neg'
                byte-code instruction.\n\nSome compilers do a lot of special cases
                like this. Others have a lot\nof \"tree rewriting rules\". They work
                through the built-up parse trees,\napplying various rewriting rules
                wherever their patterns match. The result\nis still a valid parse
                tree, but it has been optimized with a bunch of\nspecial cases.\n\n>
                Another possible optimization is for the parser to generate code for\n>
                a virtual machine that uses a combination of register and stack instructions.\n>
                The parser can be made smart enough to know to use registers.\n\nI
                thought about that a bit for my system. If you step back a bit and
                look\nat what a modern CPU is actually doing, you find that the register
                set is\nvery much like a stack - they will both end up in the processor's
                data\ncache. The key thing to look at is how many native machine instructions\nit
                takes to execute the sequence you want to look at. With a register\nset,
                you are going to have to extract a register number from the byte-code\nstream,
                and use that to index the array of registers in the virtual machine.\nThat
                takes native machine instructions, perhaps more than are needed to\ndo
                stack operations, given that many real CPU's have post-increment and\npre-decrement
                addressing modes that the native compiler can generate.\n\n> And finally,
                there are optimizations that you just can't do with a RD parser. \n>
                You can pass the generated byte-code into a post processor that rescans\n>
                it for patterns that can be simplified.  Call it a byte-code optimizer,
                or\n> peephole optimizer.  The only problem with this last bit is
                that pretty printing\n> or reverse disassembly to source becomes rather
                difficult.  I've noticed a\n> lot of mud servers do not do this and
                seek to support reverse code generation\n> instead of storing the
                source code somewhere.  Perhaps they are missing\n> out on some major
                optimization possibilities.\n\nThose can readily be done in conjunction
                with recursive descent parsing.\nLet's make sure we understand the
                context here. Recursive descent parsing\nnormally only means the parsing
                of the input token sequence into complete\nstatements and functions
                understood by the language parser as a whole.\nThat parser can be
                tied into direct code generation which emits byte-codes,\nor can produce
                a \"parse-tree\" data structure.\n\nIn the latter case, a recursive
                walk over that tree will produce a byte-code\nstream. That recursive
                walk is *not* known as recursive descent parsing.\nI don't think I've
                seen the term \"recursive descent\" used for things other\nthan parsing,
                just to avoid the possible confusions.\n\nIn any case, optimizations
                can be done regardless of what parsing or\ncode-generation techniques
                are used. In my MUD, I build a parse tree,\nbecause that is the form
                that non-byte-code-compiled code runs from,\ndirectly. In my Draco
                compiler for 8080 and later for MC68000, the recursive\ndescent parser
                directly emitted native machine code, which was filtered\nthrough
                a pretty good peephole optimizer. Peephole optimizers, and special\ncases
                like we've been discussing, can make for pretty reasonable generated\ncode.
                Nothing like gcc and commercial compilers which do things like\nregister
                colouring and full program restructuring, of course!\n\n> >Byte-code
                execution really only makes sense, I believe, for a strongly\n> >typed
                language. If run-time checks and conversions are needed, they will\n>
                >likely cost far more time than the basic interpretation of the code,
                and\n> >so going to byte-code instead of staying with something more
                direct, could\n> >be a waste of time, in that byte-code won't speed
                execution up much.\n\n> I don't know about whether it makes sense
                or not.   You are paying for\n> something in the subjective area of
                \"ease of user programming\" that is \n> difficult to quantify.  I
                agree that evaluations at runtime is definitely going to be \n> slower,
                than compile time evaluation.   I don't agree that it will be slower
                than \n> interpreted execution though.  Certainly some of the optimizations
                I talked about \n> above are operative with strong type checking.\n\nEither
                I'm not understanding what you are getting at, or you are\nmisinterpreting
                what I was getting at. I was not referring to evaluation\nat compile
                time (e.g. my example above of the compile-time versus\nrun-time evaluation
                of the unary negation operator). I was referring to\nthe work needed
                to do type-checking in a non-strongly-typed language.\nI understand
                that lots of people prefer dynamic typing, but my point is\nthat,
                having made that choice, you have to put up with the run-time cost\nof
                it, regardless of what kind of run-time you have: direct interpretation\nof
                program source, tree interpretation, byte-code execution, native code\nexecution.
                For example, lets say you have a language which does not use\nstrong
                typing (variables have no types at parse/compile time). You then\nwrite
                something like this:\n\n    a = \"hello\";\n    ...\n    a = a + func();\n\nAssociated
                with variable 'a', at run-time, must be information about what\ntype
                of value is currently stored in the variable. That type information\nmust
                be examined in the second line, in order to know what to do with the\n'+'
                operation. If the language uses '+' for string concatenation, and\n'func'
                happens to return a string, then that statement does string\nconcatenation.
                If there had been some other assignment to 'a', the\nstatement might
                do integer (or perhaps floating point) addition. The\npoint is that
                the check for what to do must be made at run-time. The\nonly way around
                this that I'm familiar with is that of having a very\nsmart compiler,
                which attempts to deduce the correct type, so that it\ncan get away
                without the run-time checks. That would be *very* fancy\nstuff for
                a MUD system!\n\nIn a strongly typed language, 'a' would have a declared
                type. If the\nparser allowed the second assignment, it would know,
                at compile time,\nexactly what has to happen at run-time, and so would
                emit byte-code\nthat does just that. Also, the byte-code interpretation
                does not have\nto do any checking - it just directly does what needs
                to be done.\n\nLets follow a simple example in more detail:\n\n    int
                a, b;\n    ...\n    a = a + b;\n\ngenerated bytecode:\n\n    pshl
                a\n    pshl b\n    iadd\n    popl a\n\nIf the byte-code engine has
                the stack pointer in a local variable called\n'sp', then the C code
                for the 'iadd' byte-code can be just:\n\n    int *sp;\n    int temp;\n
                \   ...\n    temp = *sp++;\n    *sp += temp;\n\n(Ignoring any code
                for fetching opcodes and dispatching to the proper\nC code for the
                byte-codes.)\n\nWith a non-strongly-typed language (assuming no smart
                compiler that can\ndeduce the types), either the byte-code emitted
                is considerably more\ncomplex, or the C code for the byte-code engine
                is considerably more\ncomplex. Either way, it runs slower, perhaps
                significantly slower.\nRemember that in today's processors, conditional
                branches ('if' statements)\ncan slow things down a *lot*. You also
                need to store the current type of\neach variable, as well as the current
                value of it. That adds statements\nto your byte-code machine source,
                and uses more registers/memory.\n\n--\nDon't design inefficiency in
                - it'll happen in the implementation.\n\nChris Gray     cg@ami-cg.GraySage.Edmonton.AB.CA\n
                \              http://www.GraySage.Edmonton.AB.CA/cg/\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: cg@ami-cg.GraySage.Edmonton.AB.CA'
                      name: From
                      value: cg@ami-cg.GraySage.Edmonton.AB.CA
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Sun, 2 Jan 2000 23:16:55 -0700'
                      name: Date
                      value: Sun, 2 Jan 2000 23:16:55 -0700
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex & bison'
                      name: Subject
                      value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                    mbox_from: 
                  body: "[Jon A. Lambert:]\n\n[Oh dear, I'm running on again. Sorry
                    about that!]\n\n> I've noticed that you can obtain lots of little
                    optimization tweaks by just using \n> \"lazy evaluation\".  That
                    is instead of emitting an opcode as soon as it is \n> identified,
                    pass that opcode along as an integer to the next routine in the
                    \n> parse tree as you begin to evaluate the next token.   Based
                    on the next\n> token you may be able to output code that handles
                    that special case\n> rather than the general case.  \n>\n> For
                    instance in the general case, you might evaluate and generate:\n>
                    x+y --> pushvar(x) pushvar(y) addop()\n> x+1 --> pushvar(x) pushint(1)
                    addop()\n>\n> The second case can be optimized as a special case
                    if instead of\n> immediately emiting pushvar(x), you wait until
                    the next expression is \n> identified.  Thus it could become:\n>\n>
                    x+1 --> pushvar(x) increment()\n> or \n> x+1 --> pushvar(x+1)
                    \n>\n> I imagine something similar goes on in C compilers which
                    recognize\n> that forms like 'x++' and 'x=x+1' as equivalent.\n\nNormally,
                    you just do the special-case check at the place where you have\nall
                    of the needed information. In this case, it would be in the processing\nfor
                    the '+' operation. I don't have an 'add1' opcode, so this particular\nexample
                    doesn't work for me, but here is a more generic one, which is\na
                    minor kind of \"compile-time expression evaluation\":\n\n    case
                    ex_negate:\n    case ex_fNegate:\n\tex = ex->ex_v.ex_expressionPtr->ex_right;\n\tif
                    (ex->ex_kind == ex_int) {\n\t    bcGenConst(- ex->ex_v.ex_integer);\n\t}
                    else {\n\t    bcComp(ex);\n\t    bcWriteOp(bc_neg);\n\t}\n\tbreak;\n\nIf
                    the operand for the unary '-' operator is a constant, then just
                    generate\nthe negative of that constant, rather than generating
                    the positive\nvalue and then a 'neg' byte-code instruction.\n\nSome
                    compilers do a lot of special cases like this. Others have a lot\nof
                    \"tree rewriting rules\". They work through the built-up parse
                    trees,\napplying various rewriting rules wherever their patterns
                    match. The result\nis still a valid parse tree, but it has been
                    optimized with a bunch of\nspecial cases.\n\n> Another possible
                    optimization is for the parser to generate code for\n> a virtual
                    machine that uses a combination of register and stack instructions.\n>
                    The parser can be made smart enough to know to use registers.\n\nI
                    thought about that a bit for my system. If you step back a bit
                    and look\nat what a modern CPU is actually doing, you find that
                    the register set is\nvery much like a stack - they will both end
                    up in the processor's data\ncache. The key thing to look at is
                    how many native machine instructions\nit takes to execute the
                    sequence you want to look at. With a register\nset, you are going
                    to have to extract a register number from the byte-code\nstream,
                    and use that to index the array of registers in the virtual machine.\nThat
                    takes native machine instructions, perhaps more than are needed
                    to\ndo stack operations, given that many real CPU's have post-increment
                    and\npre-decrement addressing modes that the native compiler can
                    generate.\n\n> And finally, there are optimizations that you just
                    can't do with a RD parser. \n> You can pass the generated byte-code
                    into a post processor that rescans\n> it for patterns that can
                    be simplified.  Call it a byte-code optimizer, or\n> peephole
                    optimizer.  The only problem with this last bit is that pretty
                    printing\n> or reverse disassembly to source becomes rather difficult.
                    \ I've noticed a\n> lot of mud servers do not do this and seek
                    to support reverse code generation\n> instead of storing the source
                    code somewhere.  Perhaps they are missing\n> out on some major
                    optimization possibilities.\n\nThose can readily be done in conjunction
                    with recursive descent parsing.\nLet's make sure we understand
                    the context here. Recursive descent parsing\nnormally only means
                    the parsing of the input token sequence into complete\nstatements
                    and functions understood by the language parser as a whole.\nThat
                    parser can be tied into direct code generation which emits byte-codes,\nor
                    can produce a \"parse-tree\" data structure.\n\nIn the latter
                    case, a recursive walk over that tree will produce a byte-code\nstream.
                    That recursive walk is *not* known as recursive descent parsing.\nI
                    don't think I've seen the term \"recursive descent\" used for
                    things other\nthan parsing, just to avoid the possible confusions.\n\nIn
                    any case, optimizations can be done regardless of what parsing
                    or\ncode-generation techniques are used. In my MUD, I build a
                    parse tree,\nbecause that is the form that non-byte-code-compiled
                    code runs from,\ndirectly. In my Draco compiler for 8080 and later
                    for MC68000, the recursive\ndescent parser directly emitted native
                    machine code, which was filtered\nthrough a pretty good peephole
                    optimizer. Peephole optimizers, and special\ncases like we've
                    been discussing, can make for pretty reasonable generated\ncode.
                    Nothing like gcc and commercial compilers which do things like\nregister
                    colouring and full program restructuring, of course!\n\n> >Byte-code
                    execution really only makes sense, I believe, for a strongly\n>
                    >typed language. If run-time checks and conversions are needed,
                    they will\n> >likely cost far more time than the basic interpretation
                    of the code, and\n> >so going to byte-code instead of staying
                    with something more direct, could\n> >be a waste of time, in that
                    byte-code won't speed execution up much.\n\n> I don't know about
                    whether it makes sense or not.   You are paying for\n> something
                    in the subjective area of \"ease of user programming\" that is
                    \n> difficult to quantify.  I agree that evaluations at runtime
                    is definitely going to be \n> slower, than compile time evaluation.
                    \  I don't agree that it will be slower than \n> interpreted execution
                    though.  Certainly some of the optimizations I talked about \n>
                    above are operative with strong type checking.\n\nEither I'm not
                    understanding what you are getting at, or you are\nmisinterpreting
                    what I was getting at. I was not referring to evaluation\nat compile
                    time (e.g. my example above of the compile-time versus\nrun-time
                    evaluation of the unary negation operator). I was referring to\nthe
                    work needed to do type-checking in a non-strongly-typed language.\nI
                    understand that lots of people prefer dynamic typing, but my point
                    is\nthat, having made that choice, you have to put up with the
                    run-time cost\nof it, regardless of what kind of run-time you
                    have: direct interpretation\nof program source, tree interpretation,
                    byte-code execution, native code\nexecution. For example, lets
                    say you have a language which does not use\nstrong typing (variables
                    have no types at parse/compile time). You then\nwrite something
                    like this:\n\n    a = \"hello\";\n    ...\n    a = a + func();\n\nAssociated
                    with variable 'a', at run-time, must be information about what\ntype
                    of value is currently stored in the variable. That type information\nmust
                    be examined in the second line, in order to know what to do with
                    the\n'+' operation. If the language uses '+' for string concatenation,
                    and\n'func' happens to return a string, then that statement does
                    string\nconcatenation. If there had been some other assignment
                    to 'a', the\nstatement might do integer (or perhaps floating point)
                    addition. The\npoint is that the check for what to do must be
                    made at run-time. The\nonly way around this that I'm familiar
                    with is that of having a very\nsmart compiler, which attempts
                    to deduce the correct type, so that it\ncan get away without the
                    run-time checks. That would be *very* fancy\nstuff for a MUD system!\n\nIn
                    a strongly typed language, 'a' would have a declared type. If
                    the\nparser allowed the second assignment, it would know, at compile
                    time,\nexactly what has to happen at run-time, and so would emit
                    byte-code\nthat does just that. Also, the byte-code interpretation
                    does not have\nto do any checking - it just directly does what
                    needs to be done.\n\nLets follow a simple example in more detail:\n\n
                    \   int a, b;\n    ...\n    a = a + b;\n\ngenerated bytecode:\n\n
                    \   pshl a\n    pshl b\n    iadd\n    popl a\n\nIf the byte-code
                    engine has the stack pointer in a local variable called\n'sp',
                    then the C code for the 'iadd' byte-code can be just:\n\n    int
                    *sp;\n    int temp;\n    ...\n    temp = *sp++;\n    *sp += temp;\n\n(Ignoring
                    any code for fetching opcodes and dispatching to the proper\nC
                    code for the byte-codes.)\n\nWith a non-strongly-typed language
                    (assuming no smart compiler that can\ndeduce the types), either
                    the byte-code emitted is considerably more\ncomplex, or the C
                    code for the byte-code engine is considerably more\ncomplex. Either
                    way, it runs slower, perhaps significantly slower.\nRemember that
                    in today's processors, conditional branches ('if' statements)\ncan
                    slow things down a *lot*. You also need to store the current type
                    of\neach variable, as well as the current value of it. That adds
                    statements\nto your byte-code machine source, and uses more registers/memory.\n\n--\nDon't
                    design inefficiency in - it'll happen in the implementation.\n\nChris
                    Gray     cg@ami-cg.GraySage.Edmonton.AB.CA\n               http://www.GraySage.Edmonton.AB.CA/cg/\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
              from: cg@ami-cg.GraySage.Edmonton.AB.CA
              references: []
              date: 2000-01-03 06:16:55.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: 00IySrZI
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *6
          parent: *7
          children:
          - &11 !ruby/object:MessageContainer
            key: &8 !ruby/object:MessageId
              raw: JzUMQw76@generated-message-id.chibrary.org
            value: !ruby/object:Message
              email: !ruby/object:Email
                raw: "From: Kevin Littlejohn <darius@connect.com.au>\nDate: Mon, 03
                  Jan 2000 05:25:40 +1100\nSubject: Re: [MUD-Dev] Storing tokens with
                  flex & bison\n\n>>> cg@ami-cg.GraySage.Edmonton.AB.CA wrote\n \n>
                  Byte-code execution really only makes sense, I believe, for a strongly\n>
                  typed language. If run-time checks and conversions are needed, they
                  will\n> likely cost far more time than the basic interpretation
                  of the code, and\n> so going to byte-code instead of staying with
                  something more direct, could\n> be a waste of time, in that byte-code
                  won't speed execution up much.\n\n...python seems to gain from using
                  byte-code rather than straight\ninterpretation, and it's most definately
                  _not_ strongly typed or static\nin it's variable definitions.\n\nI
                  think there's a step or two there in just tokenising the code, and
                  wrapping\nit in the appropriate references to global namespaces,
                  function/object\nstructures, and so forth, that you win on by pre-tokenising/bytecoding.
                  \ It\nalso makes a nice compact way to shovel code around, if you're
                  db'ing/undb'ing\nit.\n\nWhat about LPC?  Does it do the same thing
                  - I seem to recall the words\n\"semi-compiled\", from my vague memories
                  of working with it...?\n\nKevinL\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                header: !ruby/object:Headers
                  rmail: !ruby/object:RMail::Message
                    header: !ruby/object:RMail::Header
                      fields:
                      - !ruby/object:RMail::Header::Field
                        raw: 'From: Kevin Littlejohn <darius@connect.com.au>'
                        name: From
                        value: Kevin Littlejohn <darius@connect.com.au>
                      - !ruby/object:RMail::Header::Field
                        raw: 'Date: Mon, 03 Jan 2000 05:25:40 +1100'
                        name: Date
                        value: Mon, 03 Jan 2000 05:25:40 +1100
                      - !ruby/object:RMail::Header::Field
                        raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex & bison'
                        name: Subject
                        value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                      mbox_from: 
                    body: ">>> cg@ami-cg.GraySage.Edmonton.AB.CA wrote\n \n> Byte-code
                      execution really only makes sense, I believe, for a strongly\n>
                      typed language. If run-time checks and conversions are needed,
                      they will\n> likely cost far more time than the basic interpretation
                      of the code, and\n> so going to byte-code instead of staying
                      with something more direct, could\n> be a waste of time, in
                      that byte-code won't speed execution up much.\n\n...python seems
                      to gain from using byte-code rather than straight\ninterpretation,
                      and it's most definately _not_ strongly typed or static\nin
                      it's variable definitions.\n\nI think there's a step or two
                      there in just tokenising the code, and wrapping\nit in the appropriate
                      references to global namespaces, function/object\nstructures,
                      and so forth, that you win on by pre-tokenising/bytecoding.
                      \ It\nalso makes a nice compact way to shovel code around, if
                      you're db'ing/undb'ing\nit.\n\nWhat about LPC?  Does it do the
                      same thing - I seem to recall the words\n\"semi-compiled\",
                      from my vague memories of working with it...?\n\nKevinL\n\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    epilogue: 
                    preamble: 
                message_id: !ruby/object:MessageId
                  raw: "[invalid or missing message id]"
                subject: !ruby/object:Subject
                  original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                from: Kevin Littlejohn <darius@connect.com.au>
                references: []
                date: 2000-01-02 18:25:40.000000000 Z
                no_archive: false
              call_number: !ruby/object:CallNumber
                str: JzUMQw76
              source: archive
              list: !ruby/object:List
                slug: mud-dev
                name: 
                description: 
                homepage: 
                footer: 
              message_id: *8
            parent: *9
            children:
            - &13 !ruby/object:MessageContainer
              key: &10 !ruby/object:MessageId
                raw: JzBbo9jM@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: |
                    From: cg@ami-cg.GraySage.Edmonton.AB.CA
                    Date: Sun, 2 Jan 2000 19:30:23 -0700
                    Subject: Re: [MUD-Dev] Storing tokens with flex & bison

                    [Kevin Littlejohn:]

                    > ...python seems to gain from using byte-code rather than straight
                    > interpretation, and it's most definately _not_ strongly typed or static
                    > in it's variable definitions.

                    Perhaps their interpretation scheme wasn't as efficient as it could be?
                    Hard to say without looking into how it all works. However, as with any
                    attempt to speed things up, you have to be aware of all of the things
                    that are costing you lots of time, and try to fix all of them.

                    > What about LPC?  Does it do the same thing - I seem to recall the words
                    > "semi-compiled", from my vague memories of working with it...?

                    Way back, it wasn't very fast, is my recollection. I've heard since then,
                    however, that the newer versions have a byte-code machine of some kind, and
                    it is now lots faster.

                    My personal experience with my byte-code, and how it affected run-time
                    speed, can be found in:

                        http://www.GraySage.Edmonton.AB.CA/cg/MUD/AmigaMUD/ByteCode.txt

                    --
                    Don't design inefficiency in - it'll happen in the implementation.

                    Chris Gray     cg@ami-cg.GraySage.Edmonton.AB.CA
                                   http://www.GraySage.Edmonton.AB.CA/cg/



                    _______________________________________________
                    MUD-Dev maillist  -  MUD-Dev@kanga.nu
                    http://www.kanga.nu/lists/listinfo/mud-dev
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: cg@ami-cg.GraySage.Edmonton.AB.CA'
                          name: From
                          value: cg@ami-cg.GraySage.Edmonton.AB.CA
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Sun, 2 Jan 2000 19:30:23 -0700'
                          name: Date
                          value: Sun, 2 Jan 2000 19:30:23 -0700
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex &
                            bison'
                          name: Subject
                          value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                        mbox_from: 
                      body: |
                        [Kevin Littlejohn:]

                        > ...python seems to gain from using byte-code rather than straight
                        > interpretation, and it's most definately _not_ strongly typed or static
                        > in it's variable definitions.

                        Perhaps their interpretation scheme wasn't as efficient as it could be?
                        Hard to say without looking into how it all works. However, as with any
                        attempt to speed things up, you have to be aware of all of the things
                        that are costing you lots of time, and try to fix all of them.

                        > What about LPC?  Does it do the same thing - I seem to recall the words
                        > "semi-compiled", from my vague memories of working with it...?

                        Way back, it wasn't very fast, is my recollection. I've heard since then,
                        however, that the newer versions have a byte-code machine of some kind, and
                        it is now lots faster.

                        My personal experience with my byte-code, and how it affected run-time
                        speed, can be found in:

                            http://www.GraySage.Edmonton.AB.CA/cg/MUD/AmigaMUD/ByteCode.txt

                        --
                        Don't design inefficiency in - it'll happen in the implementation.

                        Chris Gray     cg@ami-cg.GraySage.Edmonton.AB.CA
                                       http://www.GraySage.Edmonton.AB.CA/cg/



                        _______________________________________________
                        MUD-Dev maillist  -  MUD-Dev@kanga.nu
                        http://www.kanga.nu/lists/listinfo/mud-dev
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                  from: cg@ami-cg.GraySage.Edmonton.AB.CA
                  references: []
                  date: 2000-01-03 02:30:23.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: JzBbo9jM
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *10
              parent: *11
              children:
              - &455 !ruby/object:MessageContainer
                key: &12 !ruby/object:MessageId
                  raw: 00bj5f1c@generated-message-id.chibrary.org
                value: !ruby/object:Message
                  email: !ruby/object:Email
                    raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Tue, 18 Jan 2000
                      00:47:19 -0800\nSubject: Re: [MUD-Dev] Storing tokens with flex
                      & bison\n\nOn Sun, 2 Jan 2000 19:30:23 -0700 \ncg  <cg@ami-cg.GraySage.Edmonton.AB.CA>
                      wrote:\n\n> Way back, it wasn't very fast, is my recollection.
                      I've heard\n> since then, however, that the newer versions have
                      a byte-code\n> machine of some kind, and it is now lots faster.\n\nLPC
                      went thru a rather heavy bout of optimisation a while back\n(Hollenbeck
                      et al).  The results were impressive, and rather, umm,\nunjustifiable
                      (the ratio of code size and complexity versus\nperformance).
                      \ I don't have any absolute figures to hand, but you\nshould
                      be able to find references on rec.games.mud.lp and *.pike.\n\n--\nJ
                      C Lawrence                                 Home: claw@kanga.nu\n----------(*)
                      \                             Other: coder@kanga.nu\n--=| A
                      man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    header: !ruby/object:Headers
                      rmail: !ruby/object:RMail::Message
                        header: !ruby/object:RMail::Header
                          fields:
                          - !ruby/object:RMail::Header::Field
                            raw: 'From: J C Lawrence <claw@kanga.nu>'
                            name: From
                            value: J C Lawrence <claw@kanga.nu>
                          - !ruby/object:RMail::Header::Field
                            raw: 'Date: Tue, 18 Jan 2000 00:47:19 -0800'
                            name: Date
                            value: Tue, 18 Jan 2000 00:47:19 -0800
                          - !ruby/object:RMail::Header::Field
                            raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex
                              & bison'
                            name: Subject
                            value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                          mbox_from: 
                        body: "On Sun, 2 Jan 2000 19:30:23 -0700 \ncg  <cg@ami-cg.GraySage.Edmonton.AB.CA>
                          wrote:\n\n> Way back, it wasn't very fast, is my recollection.
                          I've heard\n> since then, however, that the newer versions
                          have a byte-code\n> machine of some kind, and it is now
                          lots faster.\n\nLPC went thru a rather heavy bout of optimisation
                          a while back\n(Hollenbeck et al).  The results were impressive,
                          and rather, umm,\nunjustifiable (the ratio of code size
                          and complexity versus\nperformance).  I don't have any absolute
                          figures to hand, but you\nshould be able to find references
                          on rec.games.mud.lp and *.pike.\n\n--\nJ C Lawrence                                 Home:
                          claw@kanga.nu\n----------(*)                              Other:
                          coder@kanga.nu\n--=| A man is as sane as he is dangerous
                          to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                        epilogue: 
                        preamble: 
                    message_id: !ruby/object:MessageId
                      raw: "[invalid or missing message id]"
                    subject: !ruby/object:Subject
                      original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                    from: J C Lawrence <claw@kanga.nu>
                    references: []
                    date: 2000-01-18 08:47:19.000000000 Z
                    no_archive: false
                  call_number: !ruby/object:CallNumber
                    str: 00bj5f1c
                  source: archive
                  list: !ruby/object:List
                    slug: mud-dev
                    name: 
                    description: 
                    homepage: 
                    footer: 
                  message_id: *12
                parent: *13
                children: []
          - &16 !ruby/object:MessageContainer
            key: &14 !ruby/object:MessageId
              raw: 00IyQfC4@generated-message-id.chibrary.org
            value: !ruby/object:Message
              email: !ruby/object:Email
                raw: "From: \"Jon A. Lambert\" <jlsysinc@ix.netcom.com>\nDate: Wed,
                  19 Jan 2000 04:32:32 -0500\nSubject: Re: [MUD-Dev] Storing tokens
                  with flex & bison\n\nChris Gray wrote:\n>[Jon A. Lambert:]\n>\n>{My,
                  we're certainly getting into some low level technical stuff here.\n>Those
                  not interested, please skip all this! Marian, there will be a\n>test
                  on the details tomorrow! :-)}\n\n\nWarning: This post contains even
                  more graphic and explicit implementation \ndetails that some might
                  find offensive (or hilarious).  ;-)   \n\n>> BTW, this\n>> technique
                  might have been useful in the DevMUD project for dynamically\n>>
                  loading and registering new function libraries (DLLs).\n>\n>Nod.
                  I've done that when I needed the database to be stable, and didn't\n>want
                  the key values for the builtins changing. A new major release lets\n>me
                  clean 'em up again, however.\n\n\nI wonder if there be commercial
                  possibilities for mud library writers in \ndistributing obfuscated
                  portable byte code.    Gotta have a stable VM\nlike Java.  Sorry...
                  I'm always thinking about exploitation.  ;-)\n\n>What's your stack
                  size? Mine is currently 8K. That allows 2048 local\n>variables,
                  parameters and return addresses - I figure it'll do. Doesn't\n>take
                  too long to hit that with deep recursion. Recursive Towers of Hanoi\n>has
                  no trouble, however.\n>\n\nIt's 1K and will grow at 1K increments.
                  \ Each variable occupies 12 bytes\non the stack regardless of type.
                  \  More on this below.  I'm going to have to\nadd TOH to my test
                  scripts.  \n\n>Me too on the locals. However, I was aiming for maximum
                  speed here, so was\n>happy to relax my style to get it. Here's some
                  snippets of my main byte-\n>code interpreter, to show the gcc dynamic
                  goto stuff, along with the\n>alternative for non-gcc compilers.\n\n\n[snip]\n>#define
                  BREAK goto *(codeTable[*pc++])     <== funny gcc stuff\n\n\nOk I
                  have seen this, or that is an equivalent.   I can only do this with
                  my compiler \nby using the inline assembler. \n\n>I did the add1/sub1
                  experiment. It would have taken less than 10 minutes\n>if I hadn't
                  left out a couple of 'break's in a code-generation switch. :-(\n>\n>Unfortunately,
                  there was no noticeable change in run speed with or without\n>them.
                  However, with this version of gcc/egcs and RedHat Linux, the tests\n>all
                  run slower than on the previous version (same machine). Grrrrrr!\n\n\nHmm..
                  on its face, you would think it would be an operation that would
                  occur\nfrequently in loop blocks.  A few instructions saved in each
                  iteration should \nin theory add up fast. \n\n>Sure, I'll buy some
                  of those. The nature of my parse-tree interpreter is\n>such that
                  those weren't issues with it, however. I just have a file-static\n>variable
                  that says when to get out of any loops, and let the recursive\n>interpretation
                  just dribble its way back to the top. 'interpreter.c' in\n>my ToyMUD
                  sources is sort-of like that - it uses the return value in the\n>recursive
                  calls to say whether or not to quit. As for multiple input\n>languages
                  - well, I might have to add one or two new parse-tree node\n>types,
                  but that would be about it.\n\n\nNod.\n\n>> Ok, I'll pull back the
                  covers.  And your guess is pretty accurate.  ;)\n>\n>Do I win a
                  cookie? :-)\n>\n\nSure, why not.  I'm going to get long-winded here
                  and maybe you'll toss \nthat cookie.  And anyone else who doesn't
                  fall asleep yet, feel free to attack\nviciously.  ;-)\n\nFor all
                  my talk about readability, my TMVar class is probably one of \nthe
                  most obtuses one and does do violence to the OO model.  \n\nIf I
                  was really OOey, I'd probably implement a class heirarchy like so:\n\nVar\n
                  |\n  \\--- Integer\n   \\--- Float\n    \\--- String\n     \\---
                  List\n      \\--- Array\n       \\--- Object\n        \\--- Error\n
                  \        \\--- Buffer\n          \\--- Queue\n           \\--- Method\n
                  \           \\--- KA             \n\nThe Var class would wrap and
                  subclass all the possible data types.  \nIn early versions, I did
                  this and wound up with lots of overhead.  All\nthat stuff you read
                  about in \"1000 reasons why I don't use C++\"\n\nSo this came to
                  mind:\n\nclass TMVar {\n   Type type;\n   union {\n      int       i;\n
                  \     float     f;\n      TMError   e;\n      TMString  s;\n      TMBuffer
                  \ b;\n      TMList    l;\n      TMQueue   q;\n      TMArray   a;\n
                  \     TMObject  o;\n      TMKA     k;\n      TMMethod m;\n   } value;\n}\n\nNote:
                  I use TM as a prefix in front of most classes to avoid namespace
                  \ncollisions.  Most of these are self-explanatory types.  I bet
                  a few might make\nbe curious.   TMMethod is a wrapper object for
                  an online version control system\nand TMKA is a special data structure
                  short for \"Knowledge Area\" which is\nintended attached to objects
                  and used by a procedural reasoning system.\nIt's bytecode that has
                  been compiled by a PRS compiler.  \n\nThe big union is reminiscent
                  of Bison/Yacc tokens (and CoolMUD too).  \nSuch an abomination is
                  of course illegal in C++.  One solution was to use \npointers to
                  the classes and invoke their respective allocation and construction
                  \nroutines.  However, I didn't like this idea since it played havoc
                  with my reference \ncounting schemes.  \n\nAnyways I came across
                  this notion of split-phase construction and\nsplit-phase destruction
                  as documented by James Coplien I believe.\n\nclass TMVar {\n  Type
                  type;\n  // Allocation pool - should hold just enough room\n  //
                  for class vtable ptr + class member variables\n  // All classes
                  have one member variable, a pointer.\n  // So two ints should be
                  more than enough\n  unsigned char value[8];\n}\n\nAll my data type
                  classes are 4-bytes in size, 8-bytes if they\nhave a vtable.   Float,
                  int and ObjectId's fit nicely into 8 bytes\ntoo.\n\nSo the new operator
                  is overloaded (short circuited) to return a \npointer to \"value\".
                  \ It does nothing, ergo no allocation is done\nat all, yet the constructors
                  are called.  :-) \n\nHere it is in my String class:\ninline void*
                  TMString::operator new(size_t, void* p)\n  { return p; }\n\nAnd
                  here is the TMVar default constructor:\n\ninline TMVar::TMVar(Type
                  t = NUM) : type(t) {\n   switch(t) {\n      case NUM:\n         *(int*)value
                  = 0;\n      case STRING:\n         new(value) TMString;\n      case
                  LIST:\n         new(value) TMList;\n      ... etc...\n}\n\nAnd split-phase
                  destruction is not done with 'delete', it's handled by \ncalling
                  the destructors directly.\n\nTMVar::~TMVar() {\n   switch(type)
                  {\n      case STRING:\n        ((TMString*)value)->~TMString();\n
                  \     case LIST:\n        ((TMList*)value)->~TMList();\n      ...
                  etc...\n}\n\nAnd finally all my data type classes are just pointers
                  to the real\ninformation.  I implement copy-on-write reference counting
                  semantics\nin all my classes.  \n\nclass TMString {\n  struct Strdata
                  {\n    int     len;    // length of string\n    int     mem;    //
                  memory allocated\n    int     ref;    // reference count\n    char
                  \   *str;   // string itself\n\n    Strdata(int _mem = STRING_INITIAL_SIZE)
                  : ref(1), len(0)\n    {\n      mem = MAX(_mem, STRING_INITIAL_SIZE);\n
                  \     str = new char[mem];\n      str[0] = '\\0';\n    }\n    ~Strdata()\n
                  \   {\n      delete[] str;\n      str = 0;\n    }\n  };\n  Strdata
                  *mpValue;  \n}\n\nThe default constructor is cheap, it just nulls
                  the pointer.  All\nthe other String functions recognize the null
                  pointer as \nequivalent to a null String.\n\nTMString::TMString()
                  : mpValue(0) {}\n\nAnd copy constructors are cheap too.  I just
                  increment the\nreference counter and share the data.\n\nTMString::TMString(const
                  TMString& r_source_str)\n{\n  if (r_source_str.mpValue)  {   \n
                  \   r_source_str.mpValue->ref++;\n    mpValue = r_source_str.mpValue;\n
                  \ } else {\n    mpValue = 0;\n  }\n}\n\nSo there's my explanation
                  for all the fugly casting that's going on below \nand the unusual
                  use of the new() operator.\n\n\n>> TMVar operator+(const TMVar&
                  v1,const TMVar& v2) throw(Error)\n>> {\n>>   if ((v1.type != v2.type)
                  && (v1.type != LIST)) {\n>>     throw (E_TYPE);\n>>   }\n>>   if
                  ((v1.type == ARRAY) || (v1.type == ERROR) || (v1.type == OBJECT))
                  {\n>>     throw (E_TYPE);\n>>   }\n>>\n>>   TMVar ret(v1.type);\n>\n>As
                  I've mentioned, my C++ is lacking, but I think I'm OK with this.
                  It's\n>semantically the same as\n>\n>    TMVar ret = v1.type;\n>\n>but
                  without any possibility of a copy constructor call?\n>\n\nAye.  It's
                  the default constructor overriding the default type.\nTMVar ret;
                  \   // by default creates an integer type variable loaded with 0\n\nIn
                  the case of other types, the default constructors create classes
                  with\nnull pointers (see TMString above)\n\n\n>> And heres the native
                  code.   I have register optimizations on, but I turned\n>> off constructor
                  inlines so it could be followed.  Pardon the line breaks.\n>\n>OK.
                  Ouch, those exceptions are expensive!\n>\n\nOh yes.  But currently
                  when we hit them we are done for anyway.  I've yet\nto implement
                  ignoring and/or catching exceptions in the programming \nlanguage
                  though it is in my spec and at the top of the todo list.   And when
                  \nI do, writing functions that expect exceptions will incur the
                  expense <waah!> :-(\n\n[much snippage]\n>>       c:\\tychomud\\tmvar.cpp,
                  484: return ret;\n>>       00403B44 E871F1FFFF               call
                  \ TMVar::TMVar(const TMVar &)\n>>       00403B5C E896F2FFFF               call
                  \ TMVar::~TMVar()\n>\n>I think this bit is what I was getting at
                  with my worry about temporaries\n>with reference variables. But
                  again, I'm far from an expert. This pair\n>of constructor/destructor
                  calls on the 'return' seems to be undesireable.\n\nYep.  Your criticism
                  is spot on.  Hrrm... That's one of those BIG ones, eh?\nLots of
                  instructions that can be cut out there.   \n\n>If you rewrote the
                  operator routines to take a 3rd reference parameter\n>that is where
                  to store the result, would not this extra stuff go away?\n>This
                  isn't a reference case here, but perhaps something similar.\n\nThat's
                  a good idea.  I can't use the \"operator+()\" signature since it\nwon't
                  take a 3rd parameter unless I've missed some C++ trivia.\nIt really
                  isn't a necessity, just syntactic sugar.  I'd use something like
                  \n\"add(left,right,ret)\" instead.   <bops head>  Thanks!\n\n>>
                  Passing by reference is the same as passing by pointer as far as
                  the\n>> machine code that is generated by the compiler.  Of course,
                  as a general rule,\n>> I only use const reference parameters for
                  safety.\n>\n>Well, from a non C++ expert, my understanding is that
                  it is fairly easy\n>to accidentally pass a non-lvalue to a routine
                  that requires a reference\n>parameter. The compiler will silently
                  proceed to create the needed lvalue\n>by creating a new temporary
                  value of the required type, and doing an\n>assigment of the expression
                  to the new temporary. It then passes the\n>address of the new temporary
                  to the routine. This is a bug if in this\n>particular call, a value
                  stored into that reference parameter matters.\n>It is a performance
                  hit because of possible constructor/destructor calls\n>on the temporary
                  variable, in addition to the value copy.\n>\n\nA made a few mental
                  mistakes early on with casting which are very similar to \nthe above.
                  \ \n\nWriting things like:\n     ((TMList)ret.value).rSetAdd(v2);\nInstead
                  of:\n     ((TMList*)ret.value)->rSetAdd(v2);\n\nThe former creates
                  a brand new copy of TMList, performs the operation on\nit, with
                  the result promptly vanishing into oblivion leading to much head
                  \nscratching and gnashing of teeth.  \n\nAnother danger to earlier
                  is in returning references to variables \ncreated on the stack.
                  \ Pretty much the same as the C error of returning\npointers to
                  locals.  I would _never_ever do that.  <grin>\n\n>Just for geek
                  fun, here is the code gcc generated for my addition case.\n>This
                  includes the final 'goto' thingy.\n>\n> CASE(bc_add) {\n>     ULONG_T
                  ul;\n>\n>     ul = *sp++;\n>0xc72 <bcRun+1298>: movl   (%esi),%eax\n>0xc74
                  <bcRun+1300>: addl   $0x4,%esi\n>     *sp += ul;\n>0xc77 <bcRun+1303>:
                  addl   %eax,(%esi)\n>     BREAK;\n>0xc79 <bcRun+1305>: movzbl (%edi),%eax\n>0xc7c
                  <bcRun+1308>: incl   %edi\n>0xc7d <bcRun+1309>: jmp    *0x0(,%eax,4)\n>
                  }\n>\n>(This is an unlinked .o file - there would normally be a
                  non-zero offset\n>in that last 'jmp' instruction.)\n>\n\nOh that
                  is slick.  Can't beat that.  Only left for you to do is start \nwriting
                  code that will execute in parallel.  :-)\n\n--\n--*     Jon A. Lambert
                  - TychoMUD Email: jlsysinc@nospam.ix.netcom.com     *--\n--*     Mud
                  Server Developer's Page <http://jlsysinc.home.netcom.com>      *--\n--*
                  \"No Free man shall ever be debarred the use of arms.\" Thomas Jefferson
                  *--\n\n\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                header: !ruby/object:Headers
                  rmail: !ruby/object:RMail::Message
                    header: !ruby/object:RMail::Header
                      fields:
                      - !ruby/object:RMail::Header::Field
                        raw: 'From: "Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                        name: From
                        value: '"Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                      - !ruby/object:RMail::Header::Field
                        raw: 'Date: Wed, 19 Jan 2000 04:32:32 -0500'
                        name: Date
                        value: Wed, 19 Jan 2000 04:32:32 -0500
                      - !ruby/object:RMail::Header::Field
                        raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex & bison'
                        name: Subject
                        value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                      mbox_from: 
                    body: "Chris Gray wrote:\n>[Jon A. Lambert:]\n>\n>{My, we're certainly
                      getting into some low level technical stuff here.\n>Those not
                      interested, please skip all this! Marian, there will be a\n>test
                      on the details tomorrow! :-)}\n\n\nWarning: This post contains
                      even more graphic and explicit implementation \ndetails that
                      some might find offensive (or hilarious).  ;-)   \n\n>> BTW,
                      this\n>> technique might have been useful in the DevMUD project
                      for dynamically\n>> loading and registering new function libraries
                      (DLLs).\n>\n>Nod. I've done that when I needed the database
                      to be stable, and didn't\n>want the key values for the builtins
                      changing. A new major release lets\n>me clean 'em up again,
                      however.\n\n\nI wonder if there be commercial possibilities
                      for mud library writers in \ndistributing obfuscated portable
                      byte code.    Gotta have a stable VM\nlike Java.  Sorry... I'm
                      always thinking about exploitation.  ;-)\n\n>What's your stack
                      size? Mine is currently 8K. That allows 2048 local\n>variables,
                      parameters and return addresses - I figure it'll do. Doesn't\n>take
                      too long to hit that with deep recursion. Recursive Towers of
                      Hanoi\n>has no trouble, however.\n>\n\nIt's 1K and will grow
                      at 1K increments.  Each variable occupies 12 bytes\non the stack
                      regardless of type.   More on this below.  I'm going to have
                      to\nadd TOH to my test scripts.  \n\n>Me too on the locals.
                      However, I was aiming for maximum speed here, so was\n>happy
                      to relax my style to get it. Here's some snippets of my main
                      byte-\n>code interpreter, to show the gcc dynamic goto stuff,
                      along with the\n>alternative for non-gcc compilers.\n\n\n[snip]\n>#define
                      BREAK goto *(codeTable[*pc++])     <== funny gcc stuff\n\n\nOk
                      I have seen this, or that is an equivalent.   I can only do
                      this with my compiler \nby using the inline assembler. \n\n>I
                      did the add1/sub1 experiment. It would have taken less than
                      10 minutes\n>if I hadn't left out a couple of 'break's in a
                      code-generation switch. :-(\n>\n>Unfortunately, there was no
                      noticeable change in run speed with or without\n>them. However,
                      with this version of gcc/egcs and RedHat Linux, the tests\n>all
                      run slower than on the previous version (same machine). Grrrrrr!\n\n\nHmm..
                      on its face, you would think it would be an operation that would
                      occur\nfrequently in loop blocks.  A few instructions saved
                      in each iteration should \nin theory add up fast. \n\n>Sure,
                      I'll buy some of those. The nature of my parse-tree interpreter
                      is\n>such that those weren't issues with it, however. I just
                      have a file-static\n>variable that says when to get out of any
                      loops, and let the recursive\n>interpretation just dribble its
                      way back to the top. 'interpreter.c' in\n>my ToyMUD sources
                      is sort-of like that - it uses the return value in the\n>recursive
                      calls to say whether or not to quit. As for multiple input\n>languages
                      - well, I might have to add one or two new parse-tree node\n>types,
                      but that would be about it.\n\n\nNod.\n\n>> Ok, I'll pull back
                      the covers.  And your guess is pretty accurate.  ;)\n>\n>Do
                      I win a cookie? :-)\n>\n\nSure, why not.  I'm going to get long-winded
                      here and maybe you'll toss \nthat cookie.  And anyone else who
                      doesn't fall asleep yet, feel free to attack\nviciously.  ;-)\n\nFor
                      all my talk about readability, my TMVar class is probably one
                      of \nthe most obtuses one and does do violence to the OO model.
                      \ \n\nIf I was really OOey, I'd probably implement a class heirarchy
                      like so:\n\nVar\n |\n  \\--- Integer\n   \\--- Float\n    \\---
                      String\n     \\--- List\n      \\--- Array\n       \\--- Object\n
                      \       \\--- Error\n         \\--- Buffer\n          \\---
                      Queue\n           \\--- Method\n            \\--- KA             \n\nThe
                      Var class would wrap and subclass all the possible data types.
                      \ \nIn early versions, I did this and wound up with lots of
                      overhead.  All\nthat stuff you read about in \"1000 reasons
                      why I don't use C++\"\n\nSo this came to mind:\n\nclass TMVar
                      {\n   Type type;\n   union {\n      int       i;\n      float
                      \    f;\n      TMError   e;\n      TMString  s;\n      TMBuffer
                      \ b;\n      TMList    l;\n      TMQueue   q;\n      TMArray
                      \  a;\n      TMObject  o;\n      TMKA     k;\n      TMMethod
                      m;\n   } value;\n}\n\nNote: I use TM as a prefix in front of
                      most classes to avoid namespace \ncollisions.  Most of these
                      are self-explanatory types.  I bet a few might make\nbe curious.
                      \  TMMethod is a wrapper object for an online version control
                      system\nand TMKA is a special data structure short for \"Knowledge
                      Area\" which is\nintended attached to objects and used by a
                      procedural reasoning system.\nIt's bytecode that has been compiled
                      by a PRS compiler.  \n\nThe big union is reminiscent of Bison/Yacc
                      tokens (and CoolMUD too).  \nSuch an abomination is of course
                      illegal in C++.  One solution was to use \npointers to the classes
                      and invoke their respective allocation and construction \nroutines.
                      \ However, I didn't like this idea since it played havoc with
                      my reference \ncounting schemes.  \n\nAnyways I came across
                      this notion of split-phase construction and\nsplit-phase destruction
                      as documented by James Coplien I believe.\n\nclass TMVar {\n
                      \ Type type;\n  // Allocation pool - should hold just enough
                      room\n  // for class vtable ptr + class member variables\n  //
                      All classes have one member variable, a pointer.\n  // So two
                      ints should be more than enough\n  unsigned char value[8];\n}\n\nAll
                      my data type classes are 4-bytes in size, 8-bytes if they\nhave
                      a vtable.   Float, int and ObjectId's fit nicely into 8 bytes\ntoo.\n\nSo
                      the new operator is overloaded (short circuited) to return a
                      \npointer to \"value\".  It does nothing, ergo no allocation
                      is done\nat all, yet the constructors are called.  :-) \n\nHere
                      it is in my String class:\ninline void* TMString::operator new(size_t,
                      void* p)\n  { return p; }\n\nAnd here is the TMVar default constructor:\n\ninline
                      TMVar::TMVar(Type t = NUM) : type(t) {\n   switch(t) {\n      case
                      NUM:\n         *(int*)value = 0;\n      case STRING:\n         new(value)
                      TMString;\n      case LIST:\n         new(value) TMList;\n      ...
                      etc...\n}\n\nAnd split-phase destruction is not done with 'delete',
                      it's handled by \ncalling the destructors directly.\n\nTMVar::~TMVar()
                      {\n   switch(type) {\n      case STRING:\n        ((TMString*)value)->~TMString();\n
                      \     case LIST:\n        ((TMList*)value)->~TMList();\n      ...
                      etc...\n}\n\nAnd finally all my data type classes are just pointers
                      to the real\ninformation.  I implement copy-on-write reference
                      counting semantics\nin all my classes.  \n\nclass TMString {\n
                      \ struct Strdata {\n    int     len;    // length of string\n
                      \   int     mem;    // memory allocated\n    int     ref;    //
                      reference count\n    char    *str;   // string itself\n\n    Strdata(int
                      _mem = STRING_INITIAL_SIZE) : ref(1), len(0)\n    {\n      mem
                      = MAX(_mem, STRING_INITIAL_SIZE);\n      str = new char[mem];\n
                      \     str[0] = '\\0';\n    }\n    ~Strdata()\n    {\n      delete[]
                      str;\n      str = 0;\n    }\n  };\n  Strdata *mpValue;  \n}\n\nThe
                      default constructor is cheap, it just nulls the pointer.  All\nthe
                      other String functions recognize the null pointer as \nequivalent
                      to a null String.\n\nTMString::TMString() : mpValue(0) {}\n\nAnd
                      copy constructors are cheap too.  I just increment the\nreference
                      counter and share the data.\n\nTMString::TMString(const TMString&
                      r_source_str)\n{\n  if (r_source_str.mpValue)  {   \n    r_source_str.mpValue->ref++;\n
                      \   mpValue = r_source_str.mpValue;\n  } else {\n    mpValue
                      = 0;\n  }\n}\n\nSo there's my explanation for all the fugly
                      casting that's going on below \nand the unusual use of the new()
                      operator.\n\n\n>> TMVar operator+(const TMVar& v1,const TMVar&
                      v2) throw(Error)\n>> {\n>>   if ((v1.type != v2.type) && (v1.type
                      != LIST)) {\n>>     throw (E_TYPE);\n>>   }\n>>   if ((v1.type
                      == ARRAY) || (v1.type == ERROR) || (v1.type == OBJECT)) {\n>>
                      \    throw (E_TYPE);\n>>   }\n>>\n>>   TMVar ret(v1.type);\n>\n>As
                      I've mentioned, my C++ is lacking, but I think I'm OK with this.
                      It's\n>semantically the same as\n>\n>    TMVar ret = v1.type;\n>\n>but
                      without any possibility of a copy constructor call?\n>\n\nAye.
                      \ It's the default constructor overriding the default type.\nTMVar
                      ret;    // by default creates an integer type variable loaded
                      with 0\n\nIn the case of other types, the default constructors
                      create classes with\nnull pointers (see TMString above)\n\n\n>>
                      And heres the native code.   I have register optimizations on,
                      but I turned\n>> off constructor inlines so it could be followed.
                      \ Pardon the line breaks.\n>\n>OK. Ouch, those exceptions are
                      expensive!\n>\n\nOh yes.  But currently when we hit them we
                      are done for anyway.  I've yet\nto implement ignoring and/or
                      catching exceptions in the programming \nlanguage though it
                      is in my spec and at the top of the todo list.   And when \nI
                      do, writing functions that expect exceptions will incur the
                      expense <waah!> :-(\n\n[much snippage]\n>>       c:\\tychomud\\tmvar.cpp,
                      484: return ret;\n>>       00403B44 E871F1FFFF               call
                      \ TMVar::TMVar(const TMVar &)\n>>       00403B5C E896F2FFFF
                      \              call  TMVar::~TMVar()\n>\n>I think this bit is
                      what I was getting at with my worry about temporaries\n>with
                      reference variables. But again, I'm far from an expert. This
                      pair\n>of constructor/destructor calls on the 'return' seems
                      to be undesireable.\n\nYep.  Your criticism is spot on.  Hrrm...
                      That's one of those BIG ones, eh?\nLots of instructions that
                      can be cut out there.   \n\n>If you rewrote the operator routines
                      to take a 3rd reference parameter\n>that is where to store the
                      result, would not this extra stuff go away?\n>This isn't a reference
                      case here, but perhaps something similar.\n\nThat's a good idea.
                      \ I can't use the \"operator+()\" signature since it\nwon't
                      take a 3rd parameter unless I've missed some C++ trivia.\nIt
                      really isn't a necessity, just syntactic sugar.  I'd use something
                      like \n\"add(left,right,ret)\" instead.   <bops head>  Thanks!\n\n>>
                      Passing by reference is the same as passing by pointer as far
                      as the\n>> machine code that is generated by the compiler.  Of
                      course, as a general rule,\n>> I only use const reference parameters
                      for safety.\n>\n>Well, from a non C++ expert, my understanding
                      is that it is fairly easy\n>to accidentally pass a non-lvalue
                      to a routine that requires a reference\n>parameter. The compiler
                      will silently proceed to create the needed lvalue\n>by creating
                      a new temporary value of the required type, and doing an\n>assigment
                      of the expression to the new temporary. It then passes the\n>address
                      of the new temporary to the routine. This is a bug if in this\n>particular
                      call, a value stored into that reference parameter matters.\n>It
                      is a performance hit because of possible constructor/destructor
                      calls\n>on the temporary variable, in addition to the value
                      copy.\n>\n\nA made a few mental mistakes early on with casting
                      which are very similar to \nthe above.  \n\nWriting things like:\n
                      \    ((TMList)ret.value).rSetAdd(v2);\nInstead of:\n     ((TMList*)ret.value)->rSetAdd(v2);\n\nThe
                      former creates a brand new copy of TMList, performs the operation
                      on\nit, with the result promptly vanishing into oblivion leading
                      to much head \nscratching and gnashing of teeth.  \n\nAnother
                      danger to earlier is in returning references to variables \ncreated
                      on the stack.  Pretty much the same as the C error of returning\npointers
                      to locals.  I would _never_ever do that.  <grin>\n\n>Just for
                      geek fun, here is the code gcc generated for my addition case.\n>This
                      includes the final 'goto' thingy.\n>\n> CASE(bc_add) {\n>     ULONG_T
                      ul;\n>\n>     ul = *sp++;\n>0xc72 <bcRun+1298>: movl   (%esi),%eax\n>0xc74
                      <bcRun+1300>: addl   $0x4,%esi\n>     *sp += ul;\n>0xc77 <bcRun+1303>:
                      addl   %eax,(%esi)\n>     BREAK;\n>0xc79 <bcRun+1305>: movzbl
                      (%edi),%eax\n>0xc7c <bcRun+1308>: incl   %edi\n>0xc7d <bcRun+1309>:
                      jmp    *0x0(,%eax,4)\n> }\n>\n>(This is an unlinked .o file
                      - there would normally be a non-zero offset\n>in that last 'jmp'
                      instruction.)\n>\n\nOh that is slick.  Can't beat that.  Only
                      left for you to do is start \nwriting code that will execute
                      in parallel.  :-)\n\n--\n--*     Jon A. Lambert - TychoMUD Email:
                      jlsysinc@nospam.ix.netcom.com     *--\n--*     Mud Server Developer's
                      Page <http://jlsysinc.home.netcom.com>      *--\n--* \"No Free
                      man shall ever be debarred the use of arms.\" Thomas Jefferson
                      *--\n\n\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    epilogue: 
                    preamble: 
                message_id: !ruby/object:MessageId
                  raw: "[invalid or missing message id]"
                subject: !ruby/object:Subject
                  original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                from: Jon A. Lambert <jlsysinc@ix.netcom.com>
                references: []
                date: 2000-01-19 09:32:32.000000000 Z
                no_archive: false
              call_number: !ruby/object:CallNumber
                str: 00IyQfC4
              source: archive
              list: !ruby/object:List
                slug: mud-dev
                name: 
                description: 
                homepage: 
                footer: 
              message_id: *14
            parent: *9
            children:
            - &243 !ruby/object:MessageContainer
              key: &15 !ruby/object:MessageId
                raw: 00uTmp9M@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: "From: cg@ami-cg.GraySage.Edmonton.AB.CA\nDate: Tue, 18 Jan
                    2000 20:20:12 -0700\nSubject: Re: [MUD-Dev] Storing tokens with
                    flex & bison\n\n[Jon A. Lambert:]\n\n{My, we're certainly getting
                    into some low level technical stuff here.\nThose not interested,
                    please skip all this! Marian, there will be a\ntest on the details
                    tomorrow! :-)}\n\n> I'm familiar with the Z-80, though I'm not
                    sure how closely related it was to the\n> 8080.  I know the Z-80
                    had over 400 instructions (if you count the modes), a\n> much
                    much larger set than the 6502.\n\nZ-80 is a superset of the 8080.
                    CP/M stuff (like all my Draco system)\ntargetted the 8080 stuff
                    only, for maximum compatibility.\n\n> In particular, I recall
                    the 'RST n'  opcode, which is pretty much the way I\n> implement
                    calls to built-in functions/library calls in my bytecode.  It
                    allows\n> me to add new built-in functions without recompiling
                    old bytecode, as long\n> as I don't change 'n' which is the index
                    into a definition table.  BTW, this\n> technique might have been
                    useful in the DevMUD project for dynamically\n> loading and registering
                    new function libraries (DLLs).\n\nNod. I've done that when I needed
                    the database to be stable, and didn't\nwant the key values for
                    the builtins changing. A new major release lets\nme clean 'em
                    up again, however.\n\n> Good point.  I could probably remove my
                    check for underflow!  I'm dubious\n> about removing the stack
                    overflow check since I allow infinite recursion,\n> theoretically
                    at least.  My VM will timeout and cancel task long before any\n>
                    ridiculously huge stack size is reached.\n\nWhat's your stack
                    size? Mine is currently 8K. That allows 2048 local\nvariables,
                    parameters and return addresses - I figure it'll do. Doesn't\ntake
                    too long to hit that with deep recursion. Recursive Towers of
                    Hanoi\nhas no trouble, however.\n\n> I'm not familiar with how
                    the gcc dynamic goto stuff works.  I've included\n> my Borland
                    output near the end of this post.  Usually I do include locals\n>
                    at the very top of routines, for personal readability.  The only
                    time I embed\n> locals in block scope is with the C++ for-loop
                    counters and those that have\n> a high construction cost (classes).
                    \  I know that it is not necessarily optimal.\n\nMe too on the
                    locals. However, I was aiming for maximum speed here, so was\nhappy
                    to relax my style to get it. Here's some snippets of my main byte-\ncode
                    interpreter, to show the gcc dynamic goto stuff, along with the\nalternative
                    for non-gcc compilers.\n\nstatic void\nbcRun(QValue_t *pRes)\n{\n
                    \   BYTE_T *pc;\n    ULONG_T *sp, *fp;\n#ifdef GCC\n    static
                    void *(codeTable[]) = {\n\t&&label_bc_error,\t\t\t    <== funny
                    gcc syntax\n\t&&label_bc_ret,\n\t&&label_bc_ret1,\n\t&&label_bc_spDec,\n\t&&label_bc_bi,\n\t[snip]\n\t&&label_bc_caseI,\n\t&&label_bc_caseS\n
                    \   };\n#define CASE(x)\tlabel_ ## x:\n#define BREAK\tgoto *(codeTable[*pc++])\t
                    \   <== funny gcc stuff\n#else\n    BcCode_t op;\t/* make it enum
                    to try to avoid switch range check */\n#define CASE(x) case x:\n#define
                    BREAK\tbreak\n#endif\n    [snip FETCH_AND_INC... macros - they
                    fetch to 'ui', 'ul']\n\n    pc = PC;\n    sp = SP;\n    fp = FP;\n#ifdef
                    GCC\n    BREAK;\n#else\n    while (B_TRUE) {\n\top = *pc++ + bc_error;\n\tswitch
                    (op) {\n#endif\n\tCASE(bc_error)\n\t    PC = pc;\n\t    runError(\"error
                    1 in byte-code execution\");\n\t    return;\n\tCASE(bc_ret) {\n\t
                    \   ULONG_T ul;\n\t    UINT_T ui;\n\n\t    FETCH_AND_INC_UINT();\n\t
                    \   sp = (ULONG_T *) ((BYTE_T *) sp + ui);  /* pop locals */\n\t
                    \   ul = *sp++;\t\t\t\t/* pop return addr */\n\t    fp = (ULONG_T
                    *) *sp++;\t\t/* pop caller frame pointer */\n\t    FETCH_AND_INC_UINT();\n\t
                    \   sp = (ULONG_T *) ((BYTE_T *) sp + ui);  /* pop parameters
                    */\n\t    pc = (BYTE_T *) ul;\t\t\t/* return */\n\t    FP = fp;\n\t
                    \   if (sp == StackTop || BcAbort) {\n\t\t/* Have returned from
                    an outer call - return from bcRun */\n\t\tPC = pc;\n\t\treturn;\n\t
                    \   }\n\t    BREAK;\n\t}\n\n> >I say go for the special-case ones.
                    I have some like 'pshz', 'psh1', etc.\n> >They are very easy to
                    do and use, and can have a noticeable speedup. I'm\n> >real tempted
                    to go add 'add1' and 'sub1', as in our earlier discussion,\n>
                    >to see what effect they have. Should take about 15 minutes.\n>\n>
                    I tend to agree.  I would note that my weak-typeing of variables
                    prevents\n> my use of specialized bytecodes except in the case
                    of constants.  :(\n\nBummer!\n\nI did the add1/sub1 experiment.
                    It would have taken less than 10 minutes\nif I hadn't left out
                    a couple of 'break's in a code-generation switch. :-(\n\nUnfortunately,
                    there was no noticeable change in run speed with or without\nthem.
                    However, with this version of gcc/egcs and RedHat Linux, the tests\nall
                    run slower than on the previous version (same machine). Grrrrrr!\n\n>
                    Sure, but there are other considerations beyond a small(?) performance\n>
                    gain that make it \"sensible\".   Design goals for instance.  Like
                    providing a\n> common target for multiple languages.  Implementing
                    and debugging a new\n> parser is half the cost of a new interpreter,
                    since the execution piece is\n> reusable.  Multi-tasking for another.
                    \ It's a good deal easier to interrupt a\n> running VM externally
                    and save its state than an executing Interpreter.\n> Although
                    I must admit using threads might simplify it.\n>\n> Or perhaps
                    the idea of safely unwinding the native stack in an interpreter
                    in\n> order to flag an error and get back to square one just frightens
                    me, and I find\n> it easier to debug something after it has been
                    be decomposed into the\n> simplest of functions.  For some reason
                    I associate interpreters with\n> monolithic code.\n\nSure, I'll
                    buy some of those. The nature of my parse-tree interpreter is\nsuch
                    that those weren't issues with it, however. I just have a file-static\nvariable
                    that says when to get out of any loops, and let the recursive\ninterpretation
                    just dribble its way back to the top. 'interpreter.c' in\nmy ToyMUD
                    sources is sort-of like that - it uses the return value in the\nrecursive
                    calls to say whether or not to quit. As for multiple input\nlanguages
                    - well, I might have to add one or two new parse-tree node\ntypes,
                    but that would be about it.\n\n> Ok, I'll pull back the covers.
                    \ And your guess is pretty accurate.  ;)\n\nDo I win a cookie?
                    :-)\n\n> TMVar operator+(const TMVar& v1,const TMVar& v2) throw(Error)\n>
                    {\n>   if ((v1.type != v2.type) && (v1.type != LIST)) {\n>     throw
                    (E_TYPE);\n>   }\n>   if ((v1.type == ARRAY) || (v1.type == ERROR)
                    || (v1.type == OBJECT)) {\n>     throw (E_TYPE);\n>   }\n>\n>
                    \  TMVar ret(v1.type);\n\nAs I've mentioned, my C++ is lacking,
                    but I think I'm OK with this. It's\nsemantically the same as\n\n
                    \   TMVar ret = v1.type;\n\nbut without any possibility of a copy
                    constructor call?\n\n>   switch (v1.type) {\n>     case NUM:\n>
                    \       *((int*)ret.value) = *((int*)v1.value) + *((int*)v2.value);\n>
                    \       break;\n>     case LIST:\n>        new(ret.v) TMList(*(TMList*)v1.value);\n\nHere
                    you've got me, however, and looking at the disassembly didn't
                    help.\nI grok the TMList construction and the use of 'new' to
                    create a new object,\nbut what's the combination do?\n\n> And
                    heres the native code.   I have register optimizations on, but
                    I turned\n> off constructor inlines so it could be followed.  Pardon
                    the line breaks.\n\nOK. Ouch, those exceptions are expensive!\n\n[much
                    snippage]\n>       c:\\tychomud\\tmvar.cpp, 484: return ret;\n>
                    \      00403B37 66C745D85C00             mov   word ptr [ebp-0x28],0x005c\n>
                    \      00403B3D 8D55F0                   lea   edx,[ebp-0x10]\n>
                    \      00403B40 52                       push  edx\n>       00403B41
                    FF7508                   push  [ebp+0x08]\n>       00403B44 E871F1FFFF
                    \              call  TMVar::TMVar(const TMVar &)\n>       00403B49
                    83C408                   add   esp,0x08\n>       00403B4C 8B4508
                    \                  mov   eax,[ebp+0x08]\n>       00403B4F 66C745D86800
                    \            mov   word ptr [ebp-0x28],0x0068\n>       00403B55
                    50                       push  eax\n>       00403B56 6A02                     push
                    \ 0x02\n>       00403B58 8D55F0                   lea   edx,[ebp-0x10]\n>
                    \      00403B5B 52                       push  edx\n>       00403B5C
                    E896F2FFFF               call  TMVar::~TMVar()\n>       00403B61
                    83C408                   add   esp,0x08\n>       00403B64 58                       pop
                    \  eax\n>       00403B65 66C745D85C00             mov   word ptr
                    [ebp-0x28],0x005c\n>       00403B6B FF45E4                   inc
                    \  [ebp-0x1c]\n>       00403B6E 8B55C8                   mov   edx,[ebp-0x38]\n>
                    \      00403B71 64891500000000           mov   fs:[0x00000000],edx\n>
                    \      c:\\tychomud\\tmvar.cpp, 485: }\n\nI think this bit is
                    what I was getting at with my worry about temporaries\nwith reference
                    variables. But again, I'm far from an expert. This pair\nof constructor/destructor
                    calls on the 'return' seems to be undesireable.\nIf you rewrote
                    the operator routines to take a 3rd reference parameter\nthat
                    is where to store the result, would not this extra stuff go away?\nThis
                    isn't a reference case here, but perhaps something similar.\n\n>
                    Passing by reference is the same as passing by pointer as far
                    as the\n> machine code that is generated by the compiler.  Of
                    course, as a general rule,\n> I only use const reference parameters
                    for safety.\n\nWell, from a non C++ expert, my understanding is
                    that it is fairly easy\nto accidentally pass a non-lvalue to a
                    routine that requires a reference\nparameter. The compiler will
                    silently proceed to create the needed lvalue\nby creating a new
                    temporary value of the required type, and doing an\nassigment
                    of the expression to the new temporary. It then passes the\naddress
                    of the new temporary to the routine. This is a bug if in this\nparticular
                    call, a value stored into that reference parameter matters.\nIt
                    is a performance hit because of possible constructor/destructor
                    calls\non the temporary variable, in addition to the value copy.\n\nJust
                    for geek fun, here is the code gcc generated for my addition case.\nThis
                    includes the final 'goto' thingy.\n\n\tCASE(bc_add) {\n\t    ULONG_T
                    ul;\n\n\t    ul = *sp++;\n0xc72 <bcRun+1298>:\tmovl   (%esi),%eax\n0xc74
                    <bcRun+1300>:\taddl   $0x4,%esi\n\t    *sp += ul;\n0xc77 <bcRun+1303>:\taddl
                    \  %eax,(%esi)\n\t    BREAK;\n0xc79 <bcRun+1305>:\tmovzbl (%edi),%eax\n0xc7c
                    <bcRun+1308>:\tincl   %edi\n0xc7d <bcRun+1309>:\tjmp    *0x0(,%eax,4)\n\t}\n\n(This
                    is an unlinked .o file - there would normally be a non-zero offset\nin
                    that last 'jmp' instruction.)\n\n--\nDon't design inefficiency
                    in - it'll happen in the implementation.\n\nChris Gray     cg@ami-cg.GraySage.Edmonton.AB.CA\n
                    \              http://www.GraySage.Edmonton.AB.CA/cg/\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: cg@ami-cg.GraySage.Edmonton.AB.CA'
                          name: From
                          value: cg@ami-cg.GraySage.Edmonton.AB.CA
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Tue, 18 Jan 2000 20:20:12 -0700'
                          name: Date
                          value: Tue, 18 Jan 2000 20:20:12 -0700
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex &
                            bison'
                          name: Subject
                          value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                        mbox_from: 
                      body: "[Jon A. Lambert:]\n\n{My, we're certainly getting into
                        some low level technical stuff here.\nThose not interested,
                        please skip all this! Marian, there will be a\ntest on the
                        details tomorrow! :-)}\n\n> I'm familiar with the Z-80, though
                        I'm not sure how closely related it was to the\n> 8080.  I
                        know the Z-80 had over 400 instructions (if you count the
                        modes), a\n> much much larger set than the 6502.\n\nZ-80 is
                        a superset of the 8080. CP/M stuff (like all my Draco system)\ntargetted
                        the 8080 stuff only, for maximum compatibility.\n\n> In particular,
                        I recall the 'RST n'  opcode, which is pretty much the way
                        I\n> implement calls to built-in functions/library calls in
                        my bytecode.  It allows\n> me to add new built-in functions
                        without recompiling old bytecode, as long\n> as I don't change
                        'n' which is the index into a definition table.  BTW, this\n>
                        technique might have been useful in the DevMUD project for
                        dynamically\n> loading and registering new function libraries
                        (DLLs).\n\nNod. I've done that when I needed the database
                        to be stable, and didn't\nwant the key values for the builtins
                        changing. A new major release lets\nme clean 'em up again,
                        however.\n\n> Good point.  I could probably remove my check
                        for underflow!  I'm dubious\n> about removing the stack overflow
                        check since I allow infinite recursion,\n> theoretically at
                        least.  My VM will timeout and cancel task long before any\n>
                        ridiculously huge stack size is reached.\n\nWhat's your stack
                        size? Mine is currently 8K. That allows 2048 local\nvariables,
                        parameters and return addresses - I figure it'll do. Doesn't\ntake
                        too long to hit that with deep recursion. Recursive Towers
                        of Hanoi\nhas no trouble, however.\n\n> I'm not familiar with
                        how the gcc dynamic goto stuff works.  I've included\n> my
                        Borland output near the end of this post.  Usually I do include
                        locals\n> at the very top of routines, for personal readability.
                        \ The only time I embed\n> locals in block scope is with the
                        C++ for-loop counters and those that have\n> a high construction
                        cost (classes).   I know that it is not necessarily optimal.\n\nMe
                        too on the locals. However, I was aiming for maximum speed
                        here, so was\nhappy to relax my style to get it. Here's some
                        snippets of my main byte-\ncode interpreter, to show the gcc
                        dynamic goto stuff, along with the\nalternative for non-gcc
                        compilers.\n\nstatic void\nbcRun(QValue_t *pRes)\n{\n    BYTE_T
                        *pc;\n    ULONG_T *sp, *fp;\n#ifdef GCC\n    static void *(codeTable[])
                        = {\n\t&&label_bc_error,\t\t\t    <== funny gcc syntax\n\t&&label_bc_ret,\n\t&&label_bc_ret1,\n\t&&label_bc_spDec,\n\t&&label_bc_bi,\n\t[snip]\n\t&&label_bc_caseI,\n\t&&label_bc_caseS\n
                        \   };\n#define CASE(x)\tlabel_ ## x:\n#define BREAK\tgoto
                        *(codeTable[*pc++])\t    <== funny gcc stuff\n#else\n    BcCode_t
                        op;\t/* make it enum to try to avoid switch range check */\n#define
                        CASE(x) case x:\n#define BREAK\tbreak\n#endif\n    [snip FETCH_AND_INC...
                        macros - they fetch to 'ui', 'ul']\n\n    pc = PC;\n    sp
                        = SP;\n    fp = FP;\n#ifdef GCC\n    BREAK;\n#else\n    while
                        (B_TRUE) {\n\top = *pc++ + bc_error;\n\tswitch (op) {\n#endif\n\tCASE(bc_error)\n\t
                        \   PC = pc;\n\t    runError(\"error 1 in byte-code execution\");\n\t
                        \   return;\n\tCASE(bc_ret) {\n\t    ULONG_T ul;\n\t    UINT_T
                        ui;\n\n\t    FETCH_AND_INC_UINT();\n\t    sp = (ULONG_T *)
                        ((BYTE_T *) sp + ui);  /* pop locals */\n\t    ul = *sp++;\t\t\t\t/*
                        pop return addr */\n\t    fp = (ULONG_T *) *sp++;\t\t/* pop
                        caller frame pointer */\n\t    FETCH_AND_INC_UINT();\n\t    sp
                        = (ULONG_T *) ((BYTE_T *) sp + ui);  /* pop parameters */\n\t
                        \   pc = (BYTE_T *) ul;\t\t\t/* return */\n\t    FP = fp;\n\t
                        \   if (sp == StackTop || BcAbort) {\n\t\t/* Have returned
                        from an outer call - return from bcRun */\n\t\tPC = pc;\n\t\treturn;\n\t
                        \   }\n\t    BREAK;\n\t}\n\n> >I say go for the special-case
                        ones. I have some like 'pshz', 'psh1', etc.\n> >They are very
                        easy to do and use, and can have a noticeable speedup. I'm\n>
                        >real tempted to go add 'add1' and 'sub1', as in our earlier
                        discussion,\n> >to see what effect they have. Should take
                        about 15 minutes.\n>\n> I tend to agree.  I would note that
                        my weak-typeing of variables prevents\n> my use of specialized
                        bytecodes except in the case of constants.  :(\n\nBummer!\n\nI
                        did the add1/sub1 experiment. It would have taken less than
                        10 minutes\nif I hadn't left out a couple of 'break's in a
                        code-generation switch. :-(\n\nUnfortunately, there was no
                        noticeable change in run speed with or without\nthem. However,
                        with this version of gcc/egcs and RedHat Linux, the tests\nall
                        run slower than on the previous version (same machine). Grrrrrr!\n\n>
                        Sure, but there are other considerations beyond a small(?)
                        performance\n> gain that make it \"sensible\".   Design goals
                        for instance.  Like providing a\n> common target for multiple
                        languages.  Implementing and debugging a new\n> parser is
                        half the cost of a new interpreter, since the execution piece
                        is\n> reusable.  Multi-tasking for another.  It's a good deal
                        easier to interrupt a\n> running VM externally and save its
                        state than an executing Interpreter.\n> Although I must admit
                        using threads might simplify it.\n>\n> Or perhaps the idea
                        of safely unwinding the native stack in an interpreter in\n>
                        order to flag an error and get back to square one just frightens
                        me, and I find\n> it easier to debug something after it has
                        been be decomposed into the\n> simplest of functions.  For
                        some reason I associate interpreters with\n> monolithic code.\n\nSure,
                        I'll buy some of those. The nature of my parse-tree interpreter
                        is\nsuch that those weren't issues with it, however. I just
                        have a file-static\nvariable that says when to get out of
                        any loops, and let the recursive\ninterpretation just dribble
                        its way back to the top. 'interpreter.c' in\nmy ToyMUD sources
                        is sort-of like that - it uses the return value in the\nrecursive
                        calls to say whether or not to quit. As for multiple input\nlanguages
                        - well, I might have to add one or two new parse-tree node\ntypes,
                        but that would be about it.\n\n> Ok, I'll pull back the covers.
                        \ And your guess is pretty accurate.  ;)\n\nDo I win a cookie?
                        :-)\n\n> TMVar operator+(const TMVar& v1,const TMVar& v2)
                        throw(Error)\n> {\n>   if ((v1.type != v2.type) && (v1.type
                        != LIST)) {\n>     throw (E_TYPE);\n>   }\n>   if ((v1.type
                        == ARRAY) || (v1.type == ERROR) || (v1.type == OBJECT)) {\n>
                        \    throw (E_TYPE);\n>   }\n>\n>   TMVar ret(v1.type);\n\nAs
                        I've mentioned, my C++ is lacking, but I think I'm OK with
                        this. It's\nsemantically the same as\n\n    TMVar ret = v1.type;\n\nbut
                        without any possibility of a copy constructor call?\n\n>   switch
                        (v1.type) {\n>     case NUM:\n>        *((int*)ret.value)
                        = *((int*)v1.value) + *((int*)v2.value);\n>        break;\n>
                        \    case LIST:\n>        new(ret.v) TMList(*(TMList*)v1.value);\n\nHere
                        you've got me, however, and looking at the disassembly didn't
                        help.\nI grok the TMList construction and the use of 'new'
                        to create a new object,\nbut what's the combination do?\n\n>
                        And heres the native code.   I have register optimizations
                        on, but I turned\n> off constructor inlines so it could be
                        followed.  Pardon the line breaks.\n\nOK. Ouch, those exceptions
                        are expensive!\n\n[much snippage]\n>       c:\\tychomud\\tmvar.cpp,
                        484: return ret;\n>       00403B37 66C745D85C00             mov
                        \  word ptr [ebp-0x28],0x005c\n>       00403B3D 8D55F0                   lea
                        \  edx,[ebp-0x10]\n>       00403B40 52                       push
                        \ edx\n>       00403B41 FF7508                   push  [ebp+0x08]\n>
                        \      00403B44 E871F1FFFF               call  TMVar::TMVar(const
                        TMVar &)\n>       00403B49 83C408                   add   esp,0x08\n>
                        \      00403B4C 8B4508                   mov   eax,[ebp+0x08]\n>
                        \      00403B4F 66C745D86800             mov   word ptr [ebp-0x28],0x0068\n>
                        \      00403B55 50                       push  eax\n>       00403B56
                        6A02                     push  0x02\n>       00403B58 8D55F0
                        \                  lea   edx,[ebp-0x10]\n>       00403B5B
                        52                       push  edx\n>       00403B5C E896F2FFFF
                        \              call  TMVar::~TMVar()\n>       00403B61 83C408
                        \                  add   esp,0x08\n>       00403B64 58                       pop
                        \  eax\n>       00403B65 66C745D85C00             mov   word
                        ptr [ebp-0x28],0x005c\n>       00403B6B FF45E4                   inc
                        \  [ebp-0x1c]\n>       00403B6E 8B55C8                   mov
                        \  edx,[ebp-0x38]\n>       00403B71 64891500000000           mov
                        \  fs:[0x00000000],edx\n>       c:\\tychomud\\tmvar.cpp, 485:
                        }\n\nI think this bit is what I was getting at with my worry
                        about temporaries\nwith reference variables. But again, I'm
                        far from an expert. This pair\nof constructor/destructor calls
                        on the 'return' seems to be undesireable.\nIf you rewrote
                        the operator routines to take a 3rd reference parameter\nthat
                        is where to store the result, would not this extra stuff go
                        away?\nThis isn't a reference case here, but perhaps something
                        similar.\n\n> Passing by reference is the same as passing
                        by pointer as far as the\n> machine code that is generated
                        by the compiler.  Of course, as a general rule,\n> I only
                        use const reference parameters for safety.\n\nWell, from a
                        non C++ expert, my understanding is that it is fairly easy\nto
                        accidentally pass a non-lvalue to a routine that requires
                        a reference\nparameter. The compiler will silently proceed
                        to create the needed lvalue\nby creating a new temporary value
                        of the required type, and doing an\nassigment of the expression
                        to the new temporary. It then passes the\naddress of the new
                        temporary to the routine. This is a bug if in this\nparticular
                        call, a value stored into that reference parameter matters.\nIt
                        is a performance hit because of possible constructor/destructor
                        calls\non the temporary variable, in addition to the value
                        copy.\n\nJust for geek fun, here is the code gcc generated
                        for my addition case.\nThis includes the final 'goto' thingy.\n\n\tCASE(bc_add)
                        {\n\t    ULONG_T ul;\n\n\t    ul = *sp++;\n0xc72 <bcRun+1298>:\tmovl
                        \  (%esi),%eax\n0xc74 <bcRun+1300>:\taddl   $0x4,%esi\n\t
                        \   *sp += ul;\n0xc77 <bcRun+1303>:\taddl   %eax,(%esi)\n\t
                        \   BREAK;\n0xc79 <bcRun+1305>:\tmovzbl (%edi),%eax\n0xc7c
                        <bcRun+1308>:\tincl   %edi\n0xc7d <bcRun+1309>:\tjmp    *0x0(,%eax,4)\n\t}\n\n(This
                        is an unlinked .o file - there would normally be a non-zero
                        offset\nin that last 'jmp' instruction.)\n\n--\nDon't design
                        inefficiency in - it'll happen in the implementation.\n\nChris
                        Gray     cg@ami-cg.GraySage.Edmonton.AB.CA\n               http://www.GraySage.Edmonton.AB.CA/cg/\n\n\n\n_______________________________________________\nMUD-Dev
                        maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                  from: cg@ami-cg.GraySage.Edmonton.AB.CA
                  references: []
                  date: 2000-01-19 03:20:12.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: 00uTmp9M
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *15
              parent: *16
              children: []
            - &315 !ruby/object:MessageContainer
              key: &17 !ruby/object:MessageId
                raw: JzBSgoFs@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: |
                    From: "Jon A. Lambert" <jlsysinc@ix.netcom.com>
                    Date: Mon, 17 Jan 2000 23:38:28 -0500
                    Subject: Re: [MUD-Dev] Storing tokens with flex & bison

                    Chris Gray wrote:
                    >[Jon A. Lambert:]
                    >

                    >> Hmm, I was thinking in terms of how many instructions my VM will be traversing
                    >> rather than how the hardware is going to handle those instructions.
                    >> Now I could implement my VM class as a 3 register machine using the
                    >> members:
                    >
                    >Ah, OK. That makes sense. If your register count is small, that works fine.
                    >Now reminded, my 8080 emulator on x86 simply used the one-byte opcode as
                    >a direct index into a 256 entry dispatch table.
                    >

                    I'm familiar with the Z-80, though I'm not sure how closely related it was to the
                    8080.  I know the Z-80 had over 400 instructions (if you count the modes), a
                    much much larger set than the 6502.
                    In particular, I recall the 'RST n'  opcode, which is pretty much the way I
                    implement calls to built-in functions/library calls in my bytecode.  It allows
                    me to add new built-in functions without recompiling old bytecode, as long
                    as I don't change 'n' which is the index into a definition table.  BTW, this
                    technique might have been useful in the DevMUD project for dynamically
                    loading and registering new function libraries (DLLs).

                    >> >From the bytecode angle the register is an intrinsic part of the opcode, that is
                    >> it is determined at compilation time.  Now push() and pop() operations
                    >> in the VM are going to be to checking for a stack overflow or underflow, no?
                    >
                    >Actually, no. If you don't allow users to directly generate byte-code, and
                    >you are careful with your compiler, there is never any need to check for
                    >stack underflow. (Well, my interpreter checks the SP after a 'return'
                    >instruction to see if it should return from this level of execution.)
                    >Stack overflow can be handled by a combination of a few checks at run-time
                    >(e.g. at function entry), and compilation checks. This is the exact code for
                    >integer addition from my sources:
                    >
                    > CASE(bc_add) {
                    >     ULONG_T ul;
                    >
                    >     ul = *sp++;
                    >     *sp += ul;
                    >     BREAK;
                    > }
                    >
                    >Macros 'CASE' and 'BREAK' allow the code to compile either using the
                    >gcc dynamic goto stuff, or not. Note: use lots of small scopes and very
                    >local variables like this, so that the compiler can do maximum re-use of
                    >the limited X86 register set.
                    >


                    Good point.  I could probably remove my check for underflow!  I'm dubious
                    about removing the stack overflow check since I allow infinite recursion,
                    theoretically at least.  My VM will timeout and cancel task long before any
                    ridiculously huge stack size is reached.

                    I'm not familiar with how the gcc dynamic goto stuff works.  I've included
                    my Borland output near the end of this post.  Usually I do include locals
                    at the very top of routines, for personal readability.  The only time I embed
                    locals in block scope is with the C++ for-loop counters and those that have
                    a high construction cost (classes).   I know that it is not necessarily optimal.

                    >> I guess this might lead to the question of whether it is better to have more
                    >> or less opcodes for your VM's instruction set.  I will note that the Java VM
                    >> has quite a boatload of special case opcodes, it even distinguishes between
                    >> pushing an int and pushing a constant one or zero.  So is it better to accomplish
                    >> something by generating a longer series of simple bytecode operations, or
                    >> implement a lot of special purpose bytecodes?
                    >
                    >I say go for the special-case ones. I have some like 'pshz', 'psh1', etc.
                    >They are very easy to do and use, and can have a noticeable speedup. I'm
                    >real tempted to go add 'add1' and 'sub1', as in our earlier discussion,
                    >to see what effect they have. Should take about 15 minutes.

                    I tend to agree.  I would note that my weak-typeing of variables prevents
                    my use of specialized bytecodes except in the case of constants.  :(

                    >> I don't think speed of compilation is really an issue at least in the context of
                    >> a mud server's internal programming language.  Typically in an LP, Moo, Cold,
                    >> Muck, etc. you are compiling rather small pieces of method code or single objects
                    >> so you can add as many phases or passes to the compilation as you need.
                    >> Of course online compilation should be multitasked and handled just like any
                    >> other mud event especially if you have a user programmable setup.
                    >
                    >Well, when you have a system that works well, you tend to use it a lot.
                    >I've gotten into the habit of changing one line of scenario source and then
                    >recompiling all 20,000 lines, rather than making the change online! Too
                    >many times I've forgotten to make the change in the master sources.
                    >

                    Actually I have been doing this also, but primarily because I'm still making
                    low-level changes in the way the bytecode is generated that require it.
                    Much of my test mudlib is really just a massive test script hitting all the
                    language features.

                    > My point, however,
                    >is that if the overheads of non-static typing are significant, then going
                    >to byte-code could be rather pointless, since it might gain only a few
                    >percent speedup. With strong typing, there is virtually no run-time
                    >overhead for type-checking sorts of things, so going from direct
                    >interpration to byte-code is almost certainly a big win. This is just
                    >a case of one of the general rules concerning speeding programs up: fix
                    >the big things first, then the little things.
                    >

                    Sure, but there are other considerations beyond a small(?) performance
                    gain that make it "sensible".   Design goals for instance.  Like providing a
                    common target for multiple languages.  Implementing and debugging a new
                    parser is half the cost of a new interpreter, since the execution piece is
                    reusable.  Multi-tasking for another.  It's a good deal easier to interrupt a
                    running VM externally and save its state than an executing Interpreter.
                    Although I must admit using threads might simplify it.

                    Or perhaps the idea of safely unwinding the native stack in an interpreter in
                    order to flag an error and get back to square one just frightens me, and I find
                    it easier to debug something after it has been be decomposed into the
                    simplest of functions.  For some reason I associate interpreters with
                    monolithic code.


                    >> It looks like what one would do with a strongly-typed system.  All the
                    >> complexity and overhead is hiding under the covers of C++.
                    >>
                    >> Var& Var::operator=(const Var& value);
                    >> friend Var operator+(const Var& v1,const Var& v2) throw(TypeError);
                    >>
                    >> You'll find all the switches, if-else chains, and conversion exceptions in
                    >> those functions.  Yes it's overhead but it is not complex.  Maintenance,
                    >> debugging and readability are very good.  At least I think so.
                    >
                    >Any idea how much overhead? Just guessing, comparing my snippet of source
                    >against what you are showing here, I'd guess a factor of 25 or more. That
                    >is actually *more* than I had thought.


                    Ok, I'll pull back the covers.  And your guess is pretty accurate.  ;)

                    TMVar operator+(const TMVar& v1,const TMVar& v2) throw(Error)
                    {
                      if ((v1.type != v2.type) && (v1.type != LIST)) {
                        throw (E_TYPE);
                      }
                      if ((v1.type == ARRAY) || (v1.type == ERROR) || (v1.type == OBJECT)) {
                        throw (E_TYPE);
                      }

                      TMVar ret(v1.type);
                      switch (v1.type) {
                        case NUM:
                           *((int*)ret.value) = *((int*)v1.value) + *((int*)v2.value);
                           break;
                        case LIST:
                           new(ret.v) TMList(*(TMList*)v1.value);
                           ((TMList*)ret.value)->rSetAdd(v2);
                           break;
                        case STRING:
                           new(ret.v) TMString(*(TMString*)v1.value);
                           *((TMString*)ret.value) += *((TMString*)v2.value);
                           break;
                      }
                      return ret;
                    }


                    And heres the native code.   I have register optimizations on, but I turned
                    off constructor inlines so it could be followed.  Pardon the line breaks.

                          c:\tychomud\tmvar.cpp, 454: TMVar operator+(const TMVar& v1,const TMVar& v2) throw(Error)
                          004039ED 55                       push  ebp
                          004039EE 8BEC                     mov   ebp,esp
                          004039F0 83C4C0                   add   esp,-0x40
                          004039F3 53                       push  ebx
                          004039F4 56                       push  esi
                          004039F5 8B7510                   mov   esi,[ebp+0x10]
                          004039F8 8B5D0C                   mov   ebx,[ebp+0x0c]
                          004039FB B8FC034100               mov   eax,0x004103fc
                          00403A00 E8BFA30000               call  __InitExceptBlock(void *)
                          c:\tychomud\tmvar.cpp, 459: if ((v1.type != v2.type) && (v1.type != LIST)) {
                          00403A05 8B5304                   mov   edx,[ebx+0x04]
                          00403A08 3B5604                   cmp   edx,[esi+0x04]
                          00403A0B 742A                     jz    0x403A37
                          00403A0D 837B0403                 cmp   dword ptr [ebx+0x04],0x03
                          00403A11 7424                     jz    0x403A37
                          c:\tychomud\tmvar.cpp, 460: throw (E_TYPE);
                          00403A13 6A00                     push  0x00
                          00403A15 6A00                     push  0x00
                          00403A17 6A00                     push  0x00
                          00403A19 6A00                     push  0x00
                          00403A1B 6A00                     push  0x00
                          00403A1D 6A00                     push  0x00
                          00403A1F C745C401000000           mov   [ebp-0x3c],0x00000001
                          00403A26 8D4DC4                   lea   ecx,[ebp-0x3c]
                          00403A29 51                       push  ecx
                          00403A2A 6820434000               push  0x00404320
                          00403A2F E821A90000               call  cw3220._ThrowException(void*,void*,void*,void*,unsigned int,unsigned
                    int,unsigned int,unsigned char*)
                          00403A34 83C420                   add   esp,0x20
                          c:\tychomud\tmvar.cpp, 462: if ((v1.type == ARRAY) || (v1.type == ERROR) || (v1.type == OBJECT)) {
                          00403A37 837B0404                 cmp   dword ptr [ebx+0x04],0x04
                          00403A3B 740C                     jz    0x403A49
                          00403A3D 837B0405                 cmp   dword ptr [ebx+0x04],0x05
                          00403A41 7406                     jz    0x403A49
                          00403A43 837B0402                 cmp   dword ptr [ebx+0x04],0x02
                          00403A47 7524                     jnz   0x403A6D
                          c:\tychomud\tmvar.cpp, 463: throw (E_TYPE);
                          00403A49 6A00                     push  0x00
                          00403A4B 6A00                     push  0x00
                          00403A4D 6A00                     push  0x00
                          00403A4F 6A00                     push  0x00
                          00403A51 6A00                     push  0x00
                          00403A53 6A00                     push  0x00
                          00403A55 C745C001000000           mov   [ebp-0x40],0x00000001
                          00403A5C 8D45C0                   lea   eax,[ebp-0x40]
                          00403A5F 50                       push  eax
                          00403A60 6820434000               push  0x00404320
                          00403A65 E8EBA80000               call  cw3220._ThrowException(void*,void*,void*,void*,unsigned int,unsigned
                    int,unsigned int,unsigned char*)
                          00403A6A 83C420                   add   esp,0x20
                          c:\tychomud\tmvar.cpp, 466: TMVar ret(v1.type);
                          00403A6D 66C745D80800             mov   word ptr [ebp-0x28],0x0008
                          00403A73 FF7304                   push  [ebx+0x04]
                          00403A76 8D55F0                   lea   edx,[ebp-0x10]
                          00403A79 52                       push  edx
                          00403A7A E841EDFFFF               call  TMVar::TMVar(Type_spec)
                          00403A7F 83C408                   add   esp,0x08
                          c:\tychomud\tmvar.cpp, 468: switch (v1.type) {
                          00403A82 8B4B04                   mov   ecx,[ebx+0x04]
                          00403A85 83E901                   sub   ecx,0x01
                          00403A88 720C                     jb    0x403A96
                          00403A8A 746F                     jz    0x403AFB
                          00403A8C 83E902                   sub   ecx,0x02
                          00403A8F 7413                     jz    0x403AA4
                          00403A91 E9A1000000               jmp   0x403B37
                          c:\tychomud\tmvar.cpp, 470: *((int*)ret.v) = *((int*)v1.v) + *((int*)v2.v);
                          00403A96 8B4308                   mov   eax,[ebx+0x08]
                          00403A99 034608                   add   eax,[esi+0x08]
                          00403A9C 8945F8                   mov   [ebp-0x08],eax
                          c:\tychomud\tmvar.cpp, 471: break;
                          00403A9F E993000000               jmp   0x403B37
                          c:\tychomud\tmvar.cpp, 476: new(ret.v) TMList((*(TMList*)v1.v));
                          00403AA4 8D55F8                   lea   edx,[ebp-0x08]
                          00403AA7 8955EC                   mov   [ebp-0x14],edx
                          00403AAA 85D2                     test  edx,edx
                          00403AAC 7422                     jz    0x403AD0
                          00403AAE 66C745D82000             mov   word ptr [ebp-0x28],0x0020
                          00403AB4 83C308                   add   ebx,0x08
                          00403AB7 53                       push  ebx
                          00403AB8 FF75EC                   push  [ebp-0x14]
                          00403ABB E885090000               call  TMList::TMList(const TMList &)
                          00403AC0 83C408                   add   esp,0x08
                          00403AC3 A1EC4B4100               mov   eax,[__DestructorCountPtr]
                          00403AC8 FF08                     dec   [eax]
                          00403ACA 66C745D81400             mov   word ptr [ebp-0x28],0x0014
                          c:\tychomud\tmvar.cpp, 477: ((TMList*)ret.v)->rSetAdd(v2);
                          00403AD0 83C4F0                   add   esp,-0x10
                          00403AD3 66C745D83800             mov   word ptr [ebp-0x28],0x0038
                          00403AD9 56                       push  esi
                          00403ADA 8D542404                 lea   edx,[esp+0x04]
                          00403ADE 52                       push  edx
                          00403ADF E8D6F1FFFF               call  TMVar::TMVar(const TMVar &)
                          00403AE4 83C408                   add   esp,0x08
                          00403AE7 8D4DF8                   lea   ecx,[ebp-0x08]
                          00403AEA 51                       push  ecx
                          00403AEB 66C745D82C00             mov   word ptr [ebp-0x28],0x002c
                          00403AF1 E8070D0000               call  TMList::rSetAdd(TMVar)
                          00403AF6 83C414                   add   esp,0x14
                          c:\tychomud\tmvar.cpp, 478: break;
                          00403AF9 EB3C                     jmp   0x403B37
                          c:\tychomud\tmvar.cpp, 480: new(ret.v) TMString(*((TMString*)v1.v));
                          00403AFB 8D45F8                   lea   eax,[ebp-0x08]
                          00403AFE 8945E8                   mov   [ebp-0x18],eax
                          00403B01 85C0                     test  eax,eax
                          00403B03 7422                     jz    0x403B27
                          00403B05 66C745D85000             mov   word ptr [ebp-0x28],0x0050
                          00403B0B 83C308                   add   ebx,0x08
                          00403B0E 53                       push  ebx
                          00403B0F FF75E8                   push  [ebp-0x18]
                          00403B12 E87E220000               call  TMString::TMString(const TMString &)
                          00403B17 83C408                   add   esp,0x08
                          00403B1A A1EC4B4100               mov   eax,[__DestructorCountPtr]
                          00403B1F FF08                     dec   [eax]
                          00403B21 66C745D84400             mov   word ptr [ebp-0x28],0x0044
                          c:\tychomud\tmvar.cpp, 481: *((TMString*)ret.v) += *((TMString*)v2.v);
                          00403B27 83C608                   add   esi,0x08
                          00403B2A 56                       push  esi
                          00403B2B 8D45F8                   lea   eax,[ebp-0x08]
                          00403B2E 50                       push  eax
                          00403B2F E8EC270000               call  TMString::operator +=(const TMString &)
                          00403B34 83C408                   add   esp,0x08
                          c:\tychomud\tmvar.cpp, 484: return ret;
                          00403B37 66C745D85C00             mov   word ptr [ebp-0x28],0x005c
                          00403B3D 8D55F0                   lea   edx,[ebp-0x10]
                          00403B40 52                       push  edx
                          00403B41 FF7508                   push  [ebp+0x08]
                          00403B44 E871F1FFFF               call  TMVar::TMVar(const TMVar &)
                          00403B49 83C408                   add   esp,0x08
                          00403B4C 8B4508                   mov   eax,[ebp+0x08]
                          00403B4F 66C745D86800             mov   word ptr [ebp-0x28],0x0068
                          00403B55 50                       push  eax
                          00403B56 6A02                     push  0x02
                          00403B58 8D55F0                   lea   edx,[ebp-0x10]
                          00403B5B 52                       push  edx
                          00403B5C E896F2FFFF               call  TMVar::~TMVar()
                          00403B61 83C408                   add   esp,0x08
                          00403B64 58                       pop   eax
                          00403B65 66C745D85C00             mov   word ptr [ebp-0x28],0x005c
                          00403B6B FF45E4                   inc   [ebp-0x1c]
                          00403B6E 8B55C8                   mov   edx,[ebp-0x38]
                          00403B71 64891500000000           mov   fs:[0x00000000],edx
                          c:\tychomud\tmvar.cpp, 485: }
                          00403B78 5E                       pop   esi
                          00403B79 5B                       pop   ebx
                          00403B7A 8BE5                     mov   esp,ebp
                          00403B7C 5D                       pop   ebp
                          00403B7D C3                       ret

                    So to add two integers, there's 50 some odd instructions (gasp!) that are
                    executed, and that's assuming I have inlined the constructors.
                    Now if I were strongly typed, I wouldn't be checking for exceptions or
                    providing a wrapper for variables, so I'd have maybe 10-13 instructions
                    for my add_op(), assuming a standard function call.   So it's about 5 times
                    slower.   Inlining add_op() could would of course reduce that to maybe 3-4
                    instructions and be 20 times faster!   Any thoughts?  crummy code? ;_)

                    >And heaven help you if you end
                    >up with some temporary copies of variables because of problems with
                    >reference parameters! I have practically zero experience with C++, so
                    >the presense of all those '&'s would make me *very* nervous about that.
                    >


                    Passing by reference is the same as passing by pointer as far as the
                    machine code that is generated by the compiler.  Of course, as a general rule,
                    I only use const reference parameters for safety.    BTW there is an excellent
                    shareware tool for BC++, Builder and Delphi called MemProof which
                    performs many of the same functions as Purify does.  It even finds memory
                    leaks in Windows API functions.  I'd still be crashing and burning without it.  :)

                    --
                    --*     Jon A. Lambert - TychoMUD Email: jlsysinc@nospam.ix.netcom.com     *--
                    --*     Mud Server Developer's Page <http://jlsysinc.home.netcom.com>      *--
                    --* "No Free man shall ever be debarred the use of arms." Thomas Jefferson *--





                    _______________________________________________
                    MUD-Dev maillist  -  MUD-Dev@kanga.nu
                    http://www.kanga.nu/lists/listinfo/mud-dev
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: "Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                          name: From
                          value: '"Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Mon, 17 Jan 2000 23:38:28 -0500'
                          name: Date
                          value: Mon, 17 Jan 2000 23:38:28 -0500
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex &
                            bison'
                          name: Subject
                          value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                        mbox_from: 
                      body: |
                        Chris Gray wrote:
                        >[Jon A. Lambert:]
                        >

                        >> Hmm, I was thinking in terms of how many instructions my VM will be traversing
                        >> rather than how the hardware is going to handle those instructions.
                        >> Now I could implement my VM class as a 3 register machine using the
                        >> members:
                        >
                        >Ah, OK. That makes sense. If your register count is small, that works fine.
                        >Now reminded, my 8080 emulator on x86 simply used the one-byte opcode as
                        >a direct index into a 256 entry dispatch table.
                        >

                        I'm familiar with the Z-80, though I'm not sure how closely related it was to the
                        8080.  I know the Z-80 had over 400 instructions (if you count the modes), a
                        much much larger set than the 6502.
                        In particular, I recall the 'RST n'  opcode, which is pretty much the way I
                        implement calls to built-in functions/library calls in my bytecode.  It allows
                        me to add new built-in functions without recompiling old bytecode, as long
                        as I don't change 'n' which is the index into a definition table.  BTW, this
                        technique might have been useful in the DevMUD project for dynamically
                        loading and registering new function libraries (DLLs).

                        >> >From the bytecode angle the register is an intrinsic part of the opcode, that is
                        >> it is determined at compilation time.  Now push() and pop() operations
                        >> in the VM are going to be to checking for a stack overflow or underflow, no?
                        >
                        >Actually, no. If you don't allow users to directly generate byte-code, and
                        >you are careful with your compiler, there is never any need to check for
                        >stack underflow. (Well, my interpreter checks the SP after a 'return'
                        >instruction to see if it should return from this level of execution.)
                        >Stack overflow can be handled by a combination of a few checks at run-time
                        >(e.g. at function entry), and compilation checks. This is the exact code for
                        >integer addition from my sources:
                        >
                        > CASE(bc_add) {
                        >     ULONG_T ul;
                        >
                        >     ul = *sp++;
                        >     *sp += ul;
                        >     BREAK;
                        > }
                        >
                        >Macros 'CASE' and 'BREAK' allow the code to compile either using the
                        >gcc dynamic goto stuff, or not. Note: use lots of small scopes and very
                        >local variables like this, so that the compiler can do maximum re-use of
                        >the limited X86 register set.
                        >


                        Good point.  I could probably remove my check for underflow!  I'm dubious
                        about removing the stack overflow check since I allow infinite recursion,
                        theoretically at least.  My VM will timeout and cancel task long before any
                        ridiculously huge stack size is reached.

                        I'm not familiar with how the gcc dynamic goto stuff works.  I've included
                        my Borland output near the end of this post.  Usually I do include locals
                        at the very top of routines, for personal readability.  The only time I embed
                        locals in block scope is with the C++ for-loop counters and those that have
                        a high construction cost (classes).   I know that it is not necessarily optimal.

                        >> I guess this might lead to the question of whether it is better to have more
                        >> or less opcodes for your VM's instruction set.  I will note that the Java VM
                        >> has quite a boatload of special case opcodes, it even distinguishes between
                        >> pushing an int and pushing a constant one or zero.  So is it better to accomplish
                        >> something by generating a longer series of simple bytecode operations, or
                        >> implement a lot of special purpose bytecodes?
                        >
                        >I say go for the special-case ones. I have some like 'pshz', 'psh1', etc.
                        >They are very easy to do and use, and can have a noticeable speedup. I'm
                        >real tempted to go add 'add1' and 'sub1', as in our earlier discussion,
                        >to see what effect they have. Should take about 15 minutes.

                        I tend to agree.  I would note that my weak-typeing of variables prevents
                        my use of specialized bytecodes except in the case of constants.  :(

                        >> I don't think speed of compilation is really an issue at least in the context of
                        >> a mud server's internal programming language.  Typically in an LP, Moo, Cold,
                        >> Muck, etc. you are compiling rather small pieces of method code or single objects
                        >> so you can add as many phases or passes to the compilation as you need.
                        >> Of course online compilation should be multitasked and handled just like any
                        >> other mud event especially if you have a user programmable setup.
                        >
                        >Well, when you have a system that works well, you tend to use it a lot.
                        >I've gotten into the habit of changing one line of scenario source and then
                        >recompiling all 20,000 lines, rather than making the change online! Too
                        >many times I've forgotten to make the change in the master sources.
                        >

                        Actually I have been doing this also, but primarily because I'm still making
                        low-level changes in the way the bytecode is generated that require it.
                        Much of my test mudlib is really just a massive test script hitting all the
                        language features.

                        > My point, however,
                        >is that if the overheads of non-static typing are significant, then going
                        >to byte-code could be rather pointless, since it might gain only a few
                        >percent speedup. With strong typing, there is virtually no run-time
                        >overhead for type-checking sorts of things, so going from direct
                        >interpration to byte-code is almost certainly a big win. This is just
                        >a case of one of the general rules concerning speeding programs up: fix
                        >the big things first, then the little things.
                        >

                        Sure, but there are other considerations beyond a small(?) performance
                        gain that make it "sensible".   Design goals for instance.  Like providing a
                        common target for multiple languages.  Implementing and debugging a new
                        parser is half the cost of a new interpreter, since the execution piece is
                        reusable.  Multi-tasking for another.  It's a good deal easier to interrupt a
                        running VM externally and save its state than an executing Interpreter.
                        Although I must admit using threads might simplify it.

                        Or perhaps the idea of safely unwinding the native stack in an interpreter in
                        order to flag an error and get back to square one just frightens me, and I find
                        it easier to debug something after it has been be decomposed into the
                        simplest of functions.  For some reason I associate interpreters with
                        monolithic code.


                        >> It looks like what one would do with a strongly-typed system.  All the
                        >> complexity and overhead is hiding under the covers of C++.
                        >>
                        >> Var& Var::operator=(const Var& value);
                        >> friend Var operator+(const Var& v1,const Var& v2) throw(TypeError);
                        >>
                        >> You'll find all the switches, if-else chains, and conversion exceptions in
                        >> those functions.  Yes it's overhead but it is not complex.  Maintenance,
                        >> debugging and readability are very good.  At least I think so.
                        >
                        >Any idea how much overhead? Just guessing, comparing my snippet of source
                        >against what you are showing here, I'd guess a factor of 25 or more. That
                        >is actually *more* than I had thought.


                        Ok, I'll pull back the covers.  And your guess is pretty accurate.  ;)

                        TMVar operator+(const TMVar& v1,const TMVar& v2) throw(Error)
                        {
                          if ((v1.type != v2.type) && (v1.type != LIST)) {
                            throw (E_TYPE);
                          }
                          if ((v1.type == ARRAY) || (v1.type == ERROR) || (v1.type == OBJECT)) {
                            throw (E_TYPE);
                          }

                          TMVar ret(v1.type);
                          switch (v1.type) {
                            case NUM:
                               *((int*)ret.value) = *((int*)v1.value) + *((int*)v2.value);
                               break;
                            case LIST:
                               new(ret.v) TMList(*(TMList*)v1.value);
                               ((TMList*)ret.value)->rSetAdd(v2);
                               break;
                            case STRING:
                               new(ret.v) TMString(*(TMString*)v1.value);
                               *((TMString*)ret.value) += *((TMString*)v2.value);
                               break;
                          }
                          return ret;
                        }


                        And heres the native code.   I have register optimizations on, but I turned
                        off constructor inlines so it could be followed.  Pardon the line breaks.

                              c:\tychomud\tmvar.cpp, 454: TMVar operator+(const TMVar& v1,const TMVar& v2) throw(Error)
                              004039ED 55                       push  ebp
                              004039EE 8BEC                     mov   ebp,esp
                              004039F0 83C4C0                   add   esp,-0x40
                              004039F3 53                       push  ebx
                              004039F4 56                       push  esi
                              004039F5 8B7510                   mov   esi,[ebp+0x10]
                              004039F8 8B5D0C                   mov   ebx,[ebp+0x0c]
                              004039FB B8FC034100               mov   eax,0x004103fc
                              00403A00 E8BFA30000               call  __InitExceptBlock(void *)
                              c:\tychomud\tmvar.cpp, 459: if ((v1.type != v2.type) && (v1.type != LIST)) {
                              00403A05 8B5304                   mov   edx,[ebx+0x04]
                              00403A08 3B5604                   cmp   edx,[esi+0x04]
                              00403A0B 742A                     jz    0x403A37
                              00403A0D 837B0403                 cmp   dword ptr [ebx+0x04],0x03
                              00403A11 7424                     jz    0x403A37
                              c:\tychomud\tmvar.cpp, 460: throw (E_TYPE);
                              00403A13 6A00                     push  0x00
                              00403A15 6A00                     push  0x00
                              00403A17 6A00                     push  0x00
                              00403A19 6A00                     push  0x00
                              00403A1B 6A00                     push  0x00
                              00403A1D 6A00                     push  0x00
                              00403A1F C745C401000000           mov   [ebp-0x3c],0x00000001
                              00403A26 8D4DC4                   lea   ecx,[ebp-0x3c]
                              00403A29 51                       push  ecx
                              00403A2A 6820434000               push  0x00404320
                              00403A2F E821A90000               call  cw3220._ThrowException(void*,void*,void*,void*,unsigned int,unsigned
                        int,unsigned int,unsigned char*)
                              00403A34 83C420                   add   esp,0x20
                              c:\tychomud\tmvar.cpp, 462: if ((v1.type == ARRAY) || (v1.type == ERROR) || (v1.type == OBJECT)) {
                              00403A37 837B0404                 cmp   dword ptr [ebx+0x04],0x04
                              00403A3B 740C                     jz    0x403A49
                              00403A3D 837B0405                 cmp   dword ptr [ebx+0x04],0x05
                              00403A41 7406                     jz    0x403A49
                              00403A43 837B0402                 cmp   dword ptr [ebx+0x04],0x02
                              00403A47 7524                     jnz   0x403A6D
                              c:\tychomud\tmvar.cpp, 463: throw (E_TYPE);
                              00403A49 6A00                     push  0x00
                              00403A4B 6A00                     push  0x00
                              00403A4D 6A00                     push  0x00
                              00403A4F 6A00                     push  0x00
                              00403A51 6A00                     push  0x00
                              00403A53 6A00                     push  0x00
                              00403A55 C745C001000000           mov   [ebp-0x40],0x00000001
                              00403A5C 8D45C0                   lea   eax,[ebp-0x40]
                              00403A5F 50                       push  eax
                              00403A60 6820434000               push  0x00404320
                              00403A65 E8EBA80000               call  cw3220._ThrowException(void*,void*,void*,void*,unsigned int,unsigned
                        int,unsigned int,unsigned char*)
                              00403A6A 83C420                   add   esp,0x20
                              c:\tychomud\tmvar.cpp, 466: TMVar ret(v1.type);
                              00403A6D 66C745D80800             mov   word ptr [ebp-0x28],0x0008
                              00403A73 FF7304                   push  [ebx+0x04]
                              00403A76 8D55F0                   lea   edx,[ebp-0x10]
                              00403A79 52                       push  edx
                              00403A7A E841EDFFFF               call  TMVar::TMVar(Type_spec)
                              00403A7F 83C408                   add   esp,0x08
                              c:\tychomud\tmvar.cpp, 468: switch (v1.type) {
                              00403A82 8B4B04                   mov   ecx,[ebx+0x04]
                              00403A85 83E901                   sub   ecx,0x01
                              00403A88 720C                     jb    0x403A96
                              00403A8A 746F                     jz    0x403AFB
                              00403A8C 83E902                   sub   ecx,0x02
                              00403A8F 7413                     jz    0x403AA4
                              00403A91 E9A1000000               jmp   0x403B37
                              c:\tychomud\tmvar.cpp, 470: *((int*)ret.v) = *((int*)v1.v) + *((int*)v2.v);
                              00403A96 8B4308                   mov   eax,[ebx+0x08]
                              00403A99 034608                   add   eax,[esi+0x08]
                              00403A9C 8945F8                   mov   [ebp-0x08],eax
                              c:\tychomud\tmvar.cpp, 471: break;
                              00403A9F E993000000               jmp   0x403B37
                              c:\tychomud\tmvar.cpp, 476: new(ret.v) TMList((*(TMList*)v1.v));
                              00403AA4 8D55F8                   lea   edx,[ebp-0x08]
                              00403AA7 8955EC                   mov   [ebp-0x14],edx
                              00403AAA 85D2                     test  edx,edx
                              00403AAC 7422                     jz    0x403AD0
                              00403AAE 66C745D82000             mov   word ptr [ebp-0x28],0x0020
                              00403AB4 83C308                   add   ebx,0x08
                              00403AB7 53                       push  ebx
                              00403AB8 FF75EC                   push  [ebp-0x14]
                              00403ABB E885090000               call  TMList::TMList(const TMList &)
                              00403AC0 83C408                   add   esp,0x08
                              00403AC3 A1EC4B4100               mov   eax,[__DestructorCountPtr]
                              00403AC8 FF08                     dec   [eax]
                              00403ACA 66C745D81400             mov   word ptr [ebp-0x28],0x0014
                              c:\tychomud\tmvar.cpp, 477: ((TMList*)ret.v)->rSetAdd(v2);
                              00403AD0 83C4F0                   add   esp,-0x10
                              00403AD3 66C745D83800             mov   word ptr [ebp-0x28],0x0038
                              00403AD9 56                       push  esi
                              00403ADA 8D542404                 lea   edx,[esp+0x04]
                              00403ADE 52                       push  edx
                              00403ADF E8D6F1FFFF               call  TMVar::TMVar(const TMVar &)
                              00403AE4 83C408                   add   esp,0x08
                              00403AE7 8D4DF8                   lea   ecx,[ebp-0x08]
                              00403AEA 51                       push  ecx
                              00403AEB 66C745D82C00             mov   word ptr [ebp-0x28],0x002c
                              00403AF1 E8070D0000               call  TMList::rSetAdd(TMVar)
                              00403AF6 83C414                   add   esp,0x14
                              c:\tychomud\tmvar.cpp, 478: break;
                              00403AF9 EB3C                     jmp   0x403B37
                              c:\tychomud\tmvar.cpp, 480: new(ret.v) TMString(*((TMString*)v1.v));
                              00403AFB 8D45F8                   lea   eax,[ebp-0x08]
                              00403AFE 8945E8                   mov   [ebp-0x18],eax
                              00403B01 85C0                     test  eax,eax
                              00403B03 7422                     jz    0x403B27
                              00403B05 66C745D85000             mov   word ptr [ebp-0x28],0x0050
                              00403B0B 83C308                   add   ebx,0x08
                              00403B0E 53                       push  ebx
                              00403B0F FF75E8                   push  [ebp-0x18]
                              00403B12 E87E220000               call  TMString::TMString(const TMString &)
                              00403B17 83C408                   add   esp,0x08
                              00403B1A A1EC4B4100               mov   eax,[__DestructorCountPtr]
                              00403B1F FF08                     dec   [eax]
                              00403B21 66C745D84400             mov   word ptr [ebp-0x28],0x0044
                              c:\tychomud\tmvar.cpp, 481: *((TMString*)ret.v) += *((TMString*)v2.v);
                              00403B27 83C608                   add   esi,0x08
                              00403B2A 56                       push  esi
                              00403B2B 8D45F8                   lea   eax,[ebp-0x08]
                              00403B2E 50                       push  eax
                              00403B2F E8EC270000               call  TMString::operator +=(const TMString &)
                              00403B34 83C408                   add   esp,0x08
                              c:\tychomud\tmvar.cpp, 484: return ret;
                              00403B37 66C745D85C00             mov   word ptr [ebp-0x28],0x005c
                              00403B3D 8D55F0                   lea   edx,[ebp-0x10]
                              00403B40 52                       push  edx
                              00403B41 FF7508                   push  [ebp+0x08]
                              00403B44 E871F1FFFF               call  TMVar::TMVar(const TMVar &)
                              00403B49 83C408                   add   esp,0x08
                              00403B4C 8B4508                   mov   eax,[ebp+0x08]
                              00403B4F 66C745D86800             mov   word ptr [ebp-0x28],0x0068
                              00403B55 50                       push  eax
                              00403B56 6A02                     push  0x02
                              00403B58 8D55F0                   lea   edx,[ebp-0x10]
                              00403B5B 52                       push  edx
                              00403B5C E896F2FFFF               call  TMVar::~TMVar()
                              00403B61 83C408                   add   esp,0x08
                              00403B64 58                       pop   eax
                              00403B65 66C745D85C00             mov   word ptr [ebp-0x28],0x005c
                              00403B6B FF45E4                   inc   [ebp-0x1c]
                              00403B6E 8B55C8                   mov   edx,[ebp-0x38]
                              00403B71 64891500000000           mov   fs:[0x00000000],edx
                              c:\tychomud\tmvar.cpp, 485: }
                              00403B78 5E                       pop   esi
                              00403B79 5B                       pop   ebx
                              00403B7A 8BE5                     mov   esp,ebp
                              00403B7C 5D                       pop   ebp
                              00403B7D C3                       ret

                        So to add two integers, there's 50 some odd instructions (gasp!) that are
                        executed, and that's assuming I have inlined the constructors.
                        Now if I were strongly typed, I wouldn't be checking for exceptions or
                        providing a wrapper for variables, so I'd have maybe 10-13 instructions
                        for my add_op(), assuming a standard function call.   So it's about 5 times
                        slower.   Inlining add_op() could would of course reduce that to maybe 3-4
                        instructions and be 20 times faster!   Any thoughts?  crummy code? ;_)

                        >And heaven help you if you end
                        >up with some temporary copies of variables because of problems with
                        >reference parameters! I have practically zero experience with C++, so
                        >the presense of all those '&'s would make me *very* nervous about that.
                        >


                        Passing by reference is the same as passing by pointer as far as the
                        machine code that is generated by the compiler.  Of course, as a general rule,
                        I only use const reference parameters for safety.    BTW there is an excellent
                        shareware tool for BC++, Builder and Delphi called MemProof which
                        performs many of the same functions as Purify does.  It even finds memory
                        leaks in Windows API functions.  I'd still be crashing and burning without it.  :)

                        --
                        --*     Jon A. Lambert - TychoMUD Email: jlsysinc@nospam.ix.netcom.com     *--
                        --*     Mud Server Developer's Page <http://jlsysinc.home.netcom.com>      *--
                        --* "No Free man shall ever be debarred the use of arms." Thomas Jefferson *--





                        _______________________________________________
                        MUD-Dev maillist  -  MUD-Dev@kanga.nu
                        http://www.kanga.nu/lists/listinfo/mud-dev
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                  from: Jon A. Lambert <jlsysinc@ix.netcom.com>
                  references: []
                  date: 2000-01-18 04:38:28.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: JzBSgoFs
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *17
              parent: *16
              children: []
            - &425 !ruby/object:MessageContainer
              key: &18 !ruby/object:MessageId
                raw: JzBblxKK@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: "From: cg@ami-cg.GraySage.Edmonton.AB.CA\nDate: Wed, 19 Jan
                    2000 19:59:33 -0700\nSubject: Re: [MUD-Dev] Storing tokens with
                    flex & bison\n\n[Jon A. Lambert:]\n\n> >Unfortunately, there was
                    no noticeable change in run speed with or without\n> >them. However,
                    with this version of gcc/egcs and RedHat Linux, the tests\n> >all
                    run slower than on the previous version (same machine). Grrrrrr!\n\n>
                    Hmm.. on its face, you would think it would be an operation that
                    would occur\n> frequently in loop blocks.  A few instructions
                    saved in each iteration should\n> in theory add up fast.\n\nThat
                    was my hope. I'm sure there is *some* speedup, but it wasn't visible\nin
                    30 second runs, with granularity 1 second. I think the main jump-table\noverhead
                    overwhelms the difference between 'add1' and 'psh1; add'.\n\n>
                    class TMVar {\n>    Type type;\n>    union {\n>       int       i;\n>
                    \      float     f;\n>       TMError   e;\n>       TMString  s;\n>
                    \      TMBuffer  b;\n>       TMList    l;\n>       TMQueue   q;\n>
                    \      TMArray   a;\n>       TMObject  o;\n>       TMKA     k;\n>
                    \      TMMethod m;\n>    } value;\n> }\n\n> It's bytecode that
                    has been compiled by a PRS compiler.\n\nEr, PRS?\n\n> The big
                    union is reminiscent of Bison/Yacc tokens (and CoolMUD too).\n\nJust
                    about anything that tokenizes. My 'QValue_t' (don't ask about
                    the\n'Q' - its historic) is just a union like that. I cheat and
                    store the\ntype as the top 6 bits of the values. All values are
                    DB references, other\nthan 'int' and 'fixed', which I cheat on.
                    That causes my limit of 64 million\ndatabase entities.\n\n> Anyways
                    I came across this notion of split-phase construction and\n> split-phase
                    destruction as documented by James Coplien I believe.\n\n...\n\nDefinitely
                    interesting. It had never occurred to me that C++ won't let\nyou
                    have a union of classes, but it sortof makes sense to me.\n\n>
                    So the new operator is overloaded (short circuited) to return
                    a \n> pointer to \"value\".  It does nothing, ergo no allocation
                    is done\n> at all, yet the constructors are called.  :-)\n\nBut
                    with inlining and heavy optimization, even that might go away.\n\n>
                    And here is the TMVar default constructor:\n\n> inline TMVar::TMVar(Type
                    t = NUM) : type(t) {\n>    switch(t) {\n>       case NUM:\n>          *(int*)value
                    = 0;\n>       case STRING:\n>          new(value) TMString;\n>
                    \      case LIST:\n>          new(value) TMList;\n>       ...
                    etc...\n\nEr, doncha need some 'break's in there? That's my type
                    of bug!\n\nPlus, you are answering my question with another one.
                    What's the syntax:\n\n    new(<field-name>) <typename>\n\ndo!!?
                    Treat me as completely C++ illiterate. This is likely too basic
                    for\nthe list, so feel free to educate me privately.\n\n> So there's
                    my explanation for all the fugly casting that's going on below
                    \n> and the unusual use of the new() operator.\n\nThe rest I followed
                    - a fascinating look at higher level ways of doing\nthings.\n\n>
                    Another danger to earlier is in returning references to variables
                    \n> created on the stack.  Pretty much the same as the C error
                    of returning\n> pointers to locals.  I would _never_ever do that.
                    \ <grin>\n\nMe neither! For instance, I absolutely do not know
                    that that can stomp the\nreturn address, resulting in the program
                    branching off into the middle of\nsome other unsuspecting routine.\n\n--\nDon't
                    design inefficiency in - it'll happen in the implementation.\n\nChris
                    Gray     cg@ami-cg.GraySage.Edmonton.AB.CA\n               http://www.GraySage.Edmonton.AB.CA/cg/\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: cg@ami-cg.GraySage.Edmonton.AB.CA'
                          name: From
                          value: cg@ami-cg.GraySage.Edmonton.AB.CA
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Wed, 19 Jan 2000 19:59:33 -0700'
                          name: Date
                          value: Wed, 19 Jan 2000 19:59:33 -0700
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex &
                            bison'
                          name: Subject
                          value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                        mbox_from: 
                      body: "[Jon A. Lambert:]\n\n> >Unfortunately, there was no noticeable
                        change in run speed with or without\n> >them. However, with
                        this version of gcc/egcs and RedHat Linux, the tests\n> >all
                        run slower than on the previous version (same machine). Grrrrrr!\n\n>
                        Hmm.. on its face, you would think it would be an operation
                        that would occur\n> frequently in loop blocks.  A few instructions
                        saved in each iteration should\n> in theory add up fast.\n\nThat
                        was my hope. I'm sure there is *some* speedup, but it wasn't
                        visible\nin 30 second runs, with granularity 1 second. I think
                        the main jump-table\noverhead overwhelms the difference between
                        'add1' and 'psh1; add'.\n\n> class TMVar {\n>    Type type;\n>
                        \   union {\n>       int       i;\n>       float     f;\n>
                        \      TMError   e;\n>       TMString  s;\n>       TMBuffer
                        \ b;\n>       TMList    l;\n>       TMQueue   q;\n>       TMArray
                        \  a;\n>       TMObject  o;\n>       TMKA     k;\n>       TMMethod
                        m;\n>    } value;\n> }\n\n> It's bytecode that has been compiled
                        by a PRS compiler.\n\nEr, PRS?\n\n> The big union is reminiscent
                        of Bison/Yacc tokens (and CoolMUD too).\n\nJust about anything
                        that tokenizes. My 'QValue_t' (don't ask about the\n'Q' -
                        its historic) is just a union like that. I cheat and store
                        the\ntype as the top 6 bits of the values. All values are
                        DB references, other\nthan 'int' and 'fixed', which I cheat
                        on. That causes my limit of 64 million\ndatabase entities.\n\n>
                        Anyways I came across this notion of split-phase construction
                        and\n> split-phase destruction as documented by James Coplien
                        I believe.\n\n...\n\nDefinitely interesting. It had never
                        occurred to me that C++ won't let\nyou have a union of classes,
                        but it sortof makes sense to me.\n\n> So the new operator
                        is overloaded (short circuited) to return a \n> pointer to
                        \"value\".  It does nothing, ergo no allocation is done\n>
                        at all, yet the constructors are called.  :-)\n\nBut with
                        inlining and heavy optimization, even that might go away.\n\n>
                        And here is the TMVar default constructor:\n\n> inline TMVar::TMVar(Type
                        t = NUM) : type(t) {\n>    switch(t) {\n>       case NUM:\n>
                        \         *(int*)value = 0;\n>       case STRING:\n>          new(value)
                        TMString;\n>       case LIST:\n>          new(value) TMList;\n>
                        \      ... etc...\n\nEr, doncha need some 'break's in there?
                        That's my type of bug!\n\nPlus, you are answering my question
                        with another one. What's the syntax:\n\n    new(<field-name>)
                        <typename>\n\ndo!!? Treat me as completely C++ illiterate.
                        This is likely too basic for\nthe list, so feel free to educate
                        me privately.\n\n> So there's my explanation for all the fugly
                        casting that's going on below \n> and the unusual use of the
                        new() operator.\n\nThe rest I followed - a fascinating look
                        at higher level ways of doing\nthings.\n\n> Another danger
                        to earlier is in returning references to variables \n> created
                        on the stack.  Pretty much the same as the C error of returning\n>
                        pointers to locals.  I would _never_ever do that.  <grin>\n\nMe
                        neither! For instance, I absolutely do not know that that
                        can stomp the\nreturn address, resulting in the program branching
                        off into the middle of\nsome other unsuspecting routine.\n\n--\nDon't
                        design inefficiency in - it'll happen in the implementation.\n\nChris
                        Gray     cg@ami-cg.GraySage.Edmonton.AB.CA\n               http://www.GraySage.Edmonton.AB.CA/cg/\n\n\n\n_______________________________________________\nMUD-Dev
                        maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                  from: cg@ami-cg.GraySage.Edmonton.AB.CA
                  references: []
                  date: 2000-01-20 02:59:33.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: JzBblxKK
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *18
              parent: *16
              children: []
            - &21 !ruby/object:MessageContainer
              key: &19 !ruby/object:MessageId
                raw: Jysr6zdA@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: "From: \"Jon A. Lambert\" <jlsysinc@ix.netcom.com>\nDate: Mon,
                    3 Jan 2000 17:44:12 -0500\nSubject: Re: [MUD-Dev] Storing tokens
                    with flex & bison\n\nChris Gray wrote:\n>[Jon A. Lambert:]\n>\n>[Oh
                    dear, I'm running on again. Sorry about that!]\n>\nNo problem.
                    \ Me too.\n\n>> I've noticed that you can obtain lots of little
                    optimization tweaks by just using \n>> \"lazy evaluation\".  That
                    is instead of emitting an opcode as soon as it is \n>> identified,
                    pass that opcode along as an integer to the next routine in the
                    \n>> parse tree as you begin to evaluate the next token.  \n[snip]\n>\n>Normally,
                    you just do the special-case check at the place where you have\n>all
                    of the needed information. In this case, it would be in the processing\n>for
                    the '+' operation. I don't have an 'add1' opcode, so this particular\n>example
                    doesn't work for me, but here is a more generic one, which is\n>a
                    minor kind of \"compile-time expression evaluation\":\n>\n>    case
                    ex_negate:\n>    case ex_fNegate:\n> ex = ex->ex_v.ex_expressionPtr->ex_right;\n>
                    if (ex->ex_kind == ex_int) {\n>     bcGenConst(- ex->ex_v.ex_integer);\n>
                    } else {\n>     bcComp(ex);\n>     bcWriteOp(bc_neg);\n> }\n>
                    break;\n>\n>If the operand for the unary '-' operator is a constant,
                    then just generate\n>the negative of that constant, rather than
                    generating the positive\n>value and then a 'neg' byte-code instruction.\n>\n>Some
                    compilers do a lot of special cases like this. Others have a lot\n>of
                    \"tree rewriting rules\". They work through the built-up parse
                    trees,\n>applying various rewriting rules wherever their patterns
                    match. The result\n>is still a valid parse tree, but it has been
                    optimized with a bunch of\n>special cases.\n>\n\nNot to belabor
                    the point, since I think we're in agreement although coming from\ndifferent
                    angles.  The interesting thing about Crenshaw's toy compiler is
                    that it's a \nsingle phase compiler.   The AST is the current
                    state of the compiler's run-time \nstack and code generation is
                    done as it parser executes.   Admittedly this \nlimits your optimizing
                    options since the AST disappears when the parsing is\ncomplete.
                    \ It is rather elegantly simple though.\n\nI thought I'd include
                    another example clipped from the Crenshaw tutorial for the \nbenefit
                    of anyone else reading.   He also discusses the unary negate optimization
                    \nyou mention above elsewhere. \n\n---cut---\nThere is  a concept
                    in compiler theory called \"lazy\" translation.\nThe  idea is
                    that you typically don't just  emit  code  at  every\naction.
                    \ In fact, at the extreme you don't emit anything  at all,\nuntil
                    \ you  absolutely  have to.  To accomplish this, the actions\nassociated
                    with the parsing routines  typically  don't  just emit\ncode.
                    \ Sometimes  they  do,  but  often  they  simply  return in-\nformation
                    back to the caller.  Armed with  such  information, the\ncaller
                    can then make a better choice of what to do.\n\nFor example, given
                    the statement\n\n               x = x + 3 - 2 - (5 - 4)  ,\n\nour
                    compiler will dutifully spit  out a stream of 18 instructions\nto
                    load each parameter into  registers,  perform  the arithmetic,\nand
                    store the result.  A lazier evaluation  would  recognize that\nthe
                    arithmetic involving constants can  be  evaluated  at compile\ntime,
                    and would reduce the expression to\n\n               x = x + 0
                    \ .\n\nAn  even  lazier  evaluation would then be smart enough
                    to figure\nout that this is equivalent to\n\n               x
                    = x  ,\n\nwhich  calls  for  no  action  at  all.   We could reduce
                    18  in-\nstructions to zero!\n---end cut---\n\nAs you can see
                    Crenshaw is in conflict with your .sig ---\nHe designs in inefficiency
                    in and removes it later... ;-)\n\n>> Another possible optimization
                    is for the parser to generate code for\n>> a virtual machine that
                    uses a combination of register and stack instructions.\n>> The
                    parser can be made smart enough to know to use registers.\n>\n>I
                    thought about that a bit for my system. If you step back a bit
                    and look\n>at what a modern CPU is actually doing, you find that
                    the register set is\n>very much like a stack - they will both
                    end up in the processor's data\n>cache. The key thing to look
                    at is how many native machine instructions\n>it takes to execute
                    the sequence you want to look at. With a register\n>set, you are
                    going to have to extract a register number from the byte-code\n>stream,
                    and use that to index the array of registers in the virtual machine.\n>That
                    takes native machine instructions, perhaps more than are needed
                    to\n>do stack operations, given that many real CPU's have post-increment
                    and\n>pre-decrement addressing modes that the native compiler
                    can generate.\n>\n\nHmm, I was thinking in terms of how many instructions
                    my VM will be traversing \nrather than how the hardware is going
                    to handle those instructions. \nNow I could implement my VM class
                    as a 3 register machine using the members:\n\nint a, x, y;\n//
                    instead of\nint registers[3];\n\nMuch of this does depends on
                    how your C/C++ compiler generates and \noptimizes the code you
                    write anyway.  In Builder, accessing an array with \na constant
                    subscript incurs no more overhead than any other automatic\nvariable.\n\nFrom
                    the bytecode angle the register is an intrinsic part of the opcode,
                    that is\nit is determined at compilation time.  Now push() and
                    pop() operations \nin the VM are going to be to checking for a
                    stack overflow or underflow, no?   \nThere not just going to be
                    doing a *sp++ = value; or return --*sp;\n\nSo a register specific
                    bytecode like \"lda_int\"  simply calls:\n\nlda_int(int value)
                    \n{\n    a = value;\n}\n\npush(int value) \n{\n    if (sp == stacktop)\n
                    \       throw(ErrorStackFault); // Or whatever you do...\n    *sp++
                    = value;\n}\n\nAnd quite possibly there are more savings in using
                    an \"add_a_x\" register opcode \nas opposed to a stack-based \"add\"
                    opcode.  \n\nadd_a_x()\n{\n    push(a + x);\n}\n\nadd()\n{\n    push(pop()+pop());\n}\n\nCertainly
                    you can inline all these VM functions for more fun.   \nThere
                    may also be possible optimizations by keeping loop counters \naccessible
                    in registers rather than on the stack.\n\nI don't know.  It may
                    be something worth revisiting.  \nBesides is there anything more
                    swell than a VM that looks like a 6502? :-)\n\nI guess this might
                    lead to the question of whether it is better to have more \nor
                    less opcodes for your VM's instruction set.  I will note that
                    the Java VM \nhas quite a boatload of special case opcodes, it
                    even distinguishes between \npushing an int and pushing a constant
                    one or zero.  So is it better to accomplish \nsomething by generating
                    a longer series of simple bytecode operations, or \nimplement
                    a lot of special purpose bytecodes?  \n\n>> And finally, there
                    are optimizations that you just can't do with a RD parser. \n>>
                    You can pass the generated byte-code into a post processor that
                    rescans\n>> it for patterns that can be simplified.  Call it a
                    byte-code optimizer, or\n>> peephole optimizer.  The only problem
                    with this last bit is that pretty printing\n>> or reverse disassembly
                    to source becomes rather difficult.  I've noticed a\n>> lot of
                    mud servers do not do this and seek to support reverse code generation\n>>
                    instead of storing the source code somewhere.  Perhaps they are
                    missing\n>> out on some major optimization possibilities.\n>\n>Those
                    can readily be done in conjunction with recursive descent parsing.\n>Let's
                    make sure we understand the context here. Recursive descent parsing\n>normally
                    only means the parsing of the input token sequence into complete\n>statements
                    and functions understood by the language parser as a whole.\n>That
                    parser can be tied into direct code generation which emits byte-codes,\n>or
                    can produce a \"parse-tree\" data structure.\n>\n>In the latter
                    case, a recursive walk over that tree will produce a byte-code\n>stream.
                    That recursive walk is *not* known as recursive descent parsing.\n>I
                    don't think I've seen the term \"recursive descent\" used for
                    things other\n>than parsing, just to avoid the possible confusions.\n>\n\n>In
                    any case, optimizations can be done regardless of what parsing
                    or\n>code-generation techniques are used. In my MUD, I build a
                    parse tree,\n>because that is the form that non-byte-code-compiled
                    code runs from,\n>directly. In my Draco compiler for 8080 and
                    later for MC68000, the recursive\n>descent parser directly emitted
                    native machine code, which was filtered\n>through a pretty good
                    peephole optimizer. Peephole optimizers, and special\n>cases like
                    we've been discussing, can make for pretty reasonable generated\n>code.
                    Nothing like gcc and commercial compilers which do things like\n>register
                    colouring and full program restructuring, of course!\n>\n\nYes,
                    you are correct.  What I mean to say is that you can't normally
                    do those\npeephole operations in the parsing phase.  You have
                    two phases then, \nthe first generates the tree (recursive descent
                    parser),  the second walks it \n(code generation).   It is interesting
                    though that there are a lot of possible \nconfigurations here.
                    \ \n\nFor example, Eric Harth's Smart compiler does a 4 phase
                    compilation:\n1) Lexical Analysis - reads the source and produces
                    a stream of tokens. (scanner)\n2) Syntax Analysis - reads the
                    token stream and produces an AST (RDP)\n3) Semantic Analysis -
                    reads the AST and does type checking, assigns scope \nand builds
                    symbolic tables. \n4) Code Generation - reads the AST and symbolic
                    tables and outputs bytecode.\n\nI don't think speed of compilation
                    is really an issue at least in the context of \na mud server's
                    internal programming language.  Typically in an LP, Moo, Cold,\nMuck,
                    etc. you are compiling rather small pieces of method code or single
                    objects\nso you can add as many phases or passes to the compilation
                    as you need.\nOf course online compilation should be multitasked
                    and handled just like any \nother mud event especially if you
                    have a user programmable setup.\n\n>Either I'm not understanding
                    what you are getting at, or you are\n>misinterpreting what I was
                    getting at. I was not referring to evaluation\n>at compile time
                    (e.g. my example above of the compile-time versus\n>run-time evaluation
                    of the unary negation operator).\n\nOther than me tripping over
                    terminology again, I still don't agree with the\nfollowing:\n\n--->Byte-code
                    execution really only makes sense, I believe, for a strongly\ntyped
                    language. If run-time checks and conversions are needed, they
                    will\nlikely cost far more time than the basic interpretation
                    of the code, and\nso going to byte-code instead of staying with
                    something more direct, could\nbe a waste of time, in that byte-code
                    won't speed execution up much.\n\nI agree that overhead is higher,
                    I still think it's less than direct interpretation.\nAnd there
                    are other reasons where byte-code makes a lot of sense.  It's\na
                    common target for multiple use languages and functional complexity
                    is \nsplit between parsing and execution rather than having a
                    monolithic \ninterpreter.  There are also a whole hosts of structures
                    built and checked \nduring compilation to bytecode that are avoided
                    altogether in the execution of \nthat code, like classes symbol
                    tables, object symbol tables, local symbol tables,\nmethod signature
                    checking, etc.  Perhaps your statement holds true for a \nstrictly
                    procedural language, I don't think it holds true for an OO mud
                    language. \n\n>With a non-strongly-typed language (assuming no
                    smart compiler that can\n>deduce the types), either the byte-code
                    emitted is considerably more\n>complex, or the C code for the
                    byte-code engine is considerably more\n>complex. Either way, it
                    runs slower, perhaps significantly slower.\n\nI do weak-typing
                    and use a very simple byte-code.  I only use one\nbyte-code for
                    the add operation.  And the byte-code engine is pretty\nsimple
                    too:\n\nvoid add_op() throw\n{\n  Var rval;\n  Var lval;\n  Var
                    retval; \n\n  rval = pop_op();\n  lval = pop_op();\n  retval =
                    lval + rval;\n  push_op(retval);\n}\n\nIt looks like what one
                    would do with a strongly-typed system.  All the  \ncomplexity
                    and overhead is hiding under the covers of C++. \n\nVar& Var::operator=(const
                    Var& value);  \nfriend Var operator+(const Var& v1,const Var&
                    v2) throw(TypeError);  \n\nYou'll find all the switches, if-else
                    chains, and conversion exceptions in \nthose functions.  Yes it's
                    overhead but it is not complex.  Maintenance, \ndebugging and
                    readability are very good.  At least I think so.  \n\n--\n--*
                    \    Jon A. Lambert - TychoMUD Email: jlsysinc@nospam.ix.netcom.com
                    \    *--\n--*     Mud Server Developer's Page <http://jlsysinc.home.netcom.com>
                    \     *--\n--* \"No Free man shall ever be debarred the use of
                    arms.\" Thomas Jefferson *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: "Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                          name: From
                          value: '"Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Mon, 3 Jan 2000 17:44:12 -0500'
                          name: Date
                          value: Mon, 3 Jan 2000 17:44:12 -0500
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex &
                            bison'
                          name: Subject
                          value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                        mbox_from: 
                      body: "Chris Gray wrote:\n>[Jon A. Lambert:]\n>\n>[Oh dear,
                        I'm running on again. Sorry about that!]\n>\nNo problem.  Me
                        too.\n\n>> I've noticed that you can obtain lots of little
                        optimization tweaks by just using \n>> \"lazy evaluation\".
                        \ That is instead of emitting an opcode as soon as it is \n>>
                        identified, pass that opcode along as an integer to the next
                        routine in the \n>> parse tree as you begin to evaluate the
                        next token.  \n[snip]\n>\n>Normally, you just do the special-case
                        check at the place where you have\n>all of the needed information.
                        In this case, it would be in the processing\n>for the '+'
                        operation. I don't have an 'add1' opcode, so this particular\n>example
                        doesn't work for me, but here is a more generic one, which
                        is\n>a minor kind of \"compile-time expression evaluation\":\n>\n>
                        \   case ex_negate:\n>    case ex_fNegate:\n> ex = ex->ex_v.ex_expressionPtr->ex_right;\n>
                        if (ex->ex_kind == ex_int) {\n>     bcGenConst(- ex->ex_v.ex_integer);\n>
                        } else {\n>     bcComp(ex);\n>     bcWriteOp(bc_neg);\n> }\n>
                        break;\n>\n>If the operand for the unary '-' operator is a
                        constant, then just generate\n>the negative of that constant,
                        rather than generating the positive\n>value and then a 'neg'
                        byte-code instruction.\n>\n>Some compilers do a lot of special
                        cases like this. Others have a lot\n>of \"tree rewriting rules\".
                        They work through the built-up parse trees,\n>applying various
                        rewriting rules wherever their patterns match. The result\n>is
                        still a valid parse tree, but it has been optimized with a
                        bunch of\n>special cases.\n>\n\nNot to belabor the point,
                        since I think we're in agreement although coming from\ndifferent
                        angles.  The interesting thing about Crenshaw's toy compiler
                        is that it's a \nsingle phase compiler.   The AST is the current
                        state of the compiler's run-time \nstack and code generation
                        is done as it parser executes.   Admittedly this \nlimits
                        your optimizing options since the AST disappears when the
                        parsing is\ncomplete.  It is rather elegantly simple though.\n\nI
                        thought I'd include another example clipped from the Crenshaw
                        tutorial for the \nbenefit of anyone else reading.   He also
                        discusses the unary negate optimization \nyou mention above
                        elsewhere. \n\n---cut---\nThere is  a concept in compiler
                        theory called \"lazy\" translation.\nThe  idea is that you
                        typically don't just  emit  code  at  every\naction.  In fact,
                        at the extreme you don't emit anything  at all,\nuntil  you
                        \ absolutely  have to.  To accomplish this, the actions\nassociated
                        with the parsing routines  typically  don't  just emit\ncode.
                        \ Sometimes  they  do,  but  often  they  simply  return in-\nformation
                        back to the caller.  Armed with  such  information, the\ncaller
                        can then make a better choice of what to do.\n\nFor example,
                        given the statement\n\n               x = x + 3 - 2 - (5 -
                        4)  ,\n\nour compiler will dutifully spit  out a stream of
                        18 instructions\nto load each parameter into  registers,  perform
                        \ the arithmetic,\nand store the result.  A lazier evaluation
                        \ would  recognize that\nthe arithmetic involving constants
                        can  be  evaluated  at compile\ntime, and would reduce the
                        expression to\n\n               x = x + 0  .\n\nAn  even  lazier
                        \ evaluation would then be smart enough to figure\nout that
                        this is equivalent to\n\n               x = x  ,\n\nwhich
                        \ calls  for  no  action  at  all.   We could reduce 18  in-\nstructions
                        to zero!\n---end cut---\n\nAs you can see Crenshaw is in conflict
                        with your .sig ---\nHe designs in inefficiency in and removes
                        it later... ;-)\n\n>> Another possible optimization is for
                        the parser to generate code for\n>> a virtual machine that
                        uses a combination of register and stack instructions.\n>>
                        The parser can be made smart enough to know to use registers.\n>\n>I
                        thought about that a bit for my system. If you step back a
                        bit and look\n>at what a modern CPU is actually doing, you
                        find that the register set is\n>very much like a stack - they
                        will both end up in the processor's data\n>cache. The key
                        thing to look at is how many native machine instructions\n>it
                        takes to execute the sequence you want to look at. With a
                        register\n>set, you are going to have to extract a register
                        number from the byte-code\n>stream, and use that to index
                        the array of registers in the virtual machine.\n>That takes
                        native machine instructions, perhaps more than are needed
                        to\n>do stack operations, given that many real CPU's have
                        post-increment and\n>pre-decrement addressing modes that the
                        native compiler can generate.\n>\n\nHmm, I was thinking in
                        terms of how many instructions my VM will be traversing \nrather
                        than how the hardware is going to handle those instructions.
                        \nNow I could implement my VM class as a 3 register machine
                        using the members:\n\nint a, x, y;\n// instead of\nint registers[3];\n\nMuch
                        of this does depends on how your C/C++ compiler generates
                        and \noptimizes the code you write anyway.  In Builder, accessing
                        an array with \na constant subscript incurs no more overhead
                        than any other automatic\nvariable.\n\nFrom the bytecode angle
                        the register is an intrinsic part of the opcode, that is\nit
                        is determined at compilation time.  Now push() and pop() operations
                        \nin the VM are going to be to checking for a stack overflow
                        or underflow, no?   \nThere not just going to be doing a *sp++
                        = value; or return --*sp;\n\nSo a register specific bytecode
                        like \"lda_int\"  simply calls:\n\nlda_int(int value) \n{\n
                        \   a = value;\n}\n\npush(int value) \n{\n    if (sp == stacktop)\n
                        \       throw(ErrorStackFault); // Or whatever you do...\n
                        \   *sp++ = value;\n}\n\nAnd quite possibly there are more
                        savings in using an \"add_a_x\" register opcode \nas opposed
                        to a stack-based \"add\" opcode.  \n\nadd_a_x()\n{\n    push(a
                        + x);\n}\n\nadd()\n{\n    push(pop()+pop());\n}\n\nCertainly
                        you can inline all these VM functions for more fun.   \nThere
                        may also be possible optimizations by keeping loop counters
                        \naccessible in registers rather than on the stack.\n\nI don't
                        know.  It may be something worth revisiting.  \nBesides is
                        there anything more swell than a VM that looks like a 6502?
                        :-)\n\nI guess this might lead to the question of whether
                        it is better to have more \nor less opcodes for your VM's
                        instruction set.  I will note that the Java VM \nhas quite
                        a boatload of special case opcodes, it even distinguishes
                        between \npushing an int and pushing a constant one or zero.
                        \ So is it better to accomplish \nsomething by generating
                        a longer series of simple bytecode operations, or \nimplement
                        a lot of special purpose bytecodes?  \n\n>> And finally, there
                        are optimizations that you just can't do with a RD parser.
                        \n>> You can pass the generated byte-code into a post processor
                        that rescans\n>> it for patterns that can be simplified.  Call
                        it a byte-code optimizer, or\n>> peephole optimizer.  The
                        only problem with this last bit is that pretty printing\n>>
                        or reverse disassembly to source becomes rather difficult.
                        \ I've noticed a\n>> lot of mud servers do not do this and
                        seek to support reverse code generation\n>> instead of storing
                        the source code somewhere.  Perhaps they are missing\n>> out
                        on some major optimization possibilities.\n>\n>Those can readily
                        be done in conjunction with recursive descent parsing.\n>Let's
                        make sure we understand the context here. Recursive descent
                        parsing\n>normally only means the parsing of the input token
                        sequence into complete\n>statements and functions understood
                        by the language parser as a whole.\n>That parser can be tied
                        into direct code generation which emits byte-codes,\n>or can
                        produce a \"parse-tree\" data structure.\n>\n>In the latter
                        case, a recursive walk over that tree will produce a byte-code\n>stream.
                        That recursive walk is *not* known as recursive descent parsing.\n>I
                        don't think I've seen the term \"recursive descent\" used
                        for things other\n>than parsing, just to avoid the possible
                        confusions.\n>\n\n>In any case, optimizations can be done
                        regardless of what parsing or\n>code-generation techniques
                        are used. In my MUD, I build a parse tree,\n>because that
                        is the form that non-byte-code-compiled code runs from,\n>directly.
                        In my Draco compiler for 8080 and later for MC68000, the recursive\n>descent
                        parser directly emitted native machine code, which was filtered\n>through
                        a pretty good peephole optimizer. Peephole optimizers, and
                        special\n>cases like we've been discussing, can make for pretty
                        reasonable generated\n>code. Nothing like gcc and commercial
                        compilers which do things like\n>register colouring and full
                        program restructuring, of course!\n>\n\nYes, you are correct.
                        \ What I mean to say is that you can't normally do those\npeephole
                        operations in the parsing phase.  You have two phases then,
                        \nthe first generates the tree (recursive descent parser),
                        \ the second walks it \n(code generation).   It is interesting
                        though that there are a lot of possible \nconfigurations here.
                        \ \n\nFor example, Eric Harth's Smart compiler does a 4 phase
                        compilation:\n1) Lexical Analysis - reads the source and produces
                        a stream of tokens. (scanner)\n2) Syntax Analysis - reads
                        the token stream and produces an AST (RDP)\n3) Semantic Analysis
                        - reads the AST and does type checking, assigns scope \nand
                        builds symbolic tables. \n4) Code Generation - reads the AST
                        and symbolic tables and outputs bytecode.\n\nI don't think
                        speed of compilation is really an issue at least in the context
                        of \na mud server's internal programming language.  Typically
                        in an LP, Moo, Cold,\nMuck, etc. you are compiling rather
                        small pieces of method code or single objects\nso you can
                        add as many phases or passes to the compilation as you need.\nOf
                        course online compilation should be multitasked and handled
                        just like any \nother mud event especially if you have a user
                        programmable setup.\n\n>Either I'm not understanding what
                        you are getting at, or you are\n>misinterpreting what I was
                        getting at. I was not referring to evaluation\n>at compile
                        time (e.g. my example above of the compile-time versus\n>run-time
                        evaluation of the unary negation operator).\n\nOther than
                        me tripping over terminology again, I still don't agree with
                        the\nfollowing:\n\n--->Byte-code execution really only makes
                        sense, I believe, for a strongly\ntyped language. If run-time
                        checks and conversions are needed, they will\nlikely cost
                        far more time than the basic interpretation of the code, and\nso
                        going to byte-code instead of staying with something more
                        direct, could\nbe a waste of time, in that byte-code won't
                        speed execution up much.\n\nI agree that overhead is higher,
                        I still think it's less than direct interpretation.\nAnd there
                        are other reasons where byte-code makes a lot of sense.  It's\na
                        common target for multiple use languages and functional complexity
                        is \nsplit between parsing and execution rather than having
                        a monolithic \ninterpreter.  There are also a whole hosts
                        of structures built and checked \nduring compilation to bytecode
                        that are avoided altogether in the execution of \nthat code,
                        like classes symbol tables, object symbol tables, local symbol
                        tables,\nmethod signature checking, etc.  Perhaps your statement
                        holds true for a \nstrictly procedural language, I don't think
                        it holds true for an OO mud language. \n\n>With a non-strongly-typed
                        language (assuming no smart compiler that can\n>deduce the
                        types), either the byte-code emitted is considerably more\n>complex,
                        or the C code for the byte-code engine is considerably more\n>complex.
                        Either way, it runs slower, perhaps significantly slower.\n\nI
                        do weak-typing and use a very simple byte-code.  I only use
                        one\nbyte-code for the add operation.  And the byte-code engine
                        is pretty\nsimple too:\n\nvoid add_op() throw\n{\n  Var rval;\n
                        \ Var lval;\n  Var retval; \n\n  rval = pop_op();\n  lval
                        = pop_op();\n  retval = lval + rval;\n  push_op(retval);\n}\n\nIt
                        looks like what one would do with a strongly-typed system.
                        \ All the  \ncomplexity and overhead is hiding under the covers
                        of C++. \n\nVar& Var::operator=(const Var& value);  \nfriend
                        Var operator+(const Var& v1,const Var& v2) throw(TypeError);
                        \ \n\nYou'll find all the switches, if-else chains, and conversion
                        exceptions in \nthose functions.  Yes it's overhead but it
                        is not complex.  Maintenance, \ndebugging and readability
                        are very good.  At least I think so.  \n\n--\n--*     Jon
                        A. Lambert - TychoMUD Email: jlsysinc@nospam.ix.netcom.com
                        \    *--\n--*     Mud Server Developer's Page <http://jlsysinc.home.netcom.com>
                        \     *--\n--* \"No Free man shall ever be debarred the use
                        of arms.\" Thomas Jefferson *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                        maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                  from: Jon A. Lambert <jlsysinc@ix.netcom.com>
                  references: []
                  date: 2000-01-03 22:44:12.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: Jysr6zdA
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *19
              parent: *16
              children:
              - &257 !ruby/object:MessageContainer
                key: &20 !ruby/object:MessageId
                  raw: Jzn788Lw@generated-message-id.chibrary.org
                value: !ruby/object:Message
                  email: !ruby/object:Email
                    raw: "From: cg@ami-cg.GraySage.Edmonton.AB.CA\nDate: Mon, 3 Jan
                      2000 19:55:00 -0700\nSubject: Re: [MUD-Dev] Storing tokens with
                      flex & bison\n\n[Jon A. Lambert:]\n\n> Not to belabor the point,
                      since I think we're in agreement although coming from\n> different
                      angles.  The interesting thing about Crenshaw's toy compiler
                      is that it's a \n> single phase compiler.   The AST is the current
                      state of the compiler's run-time \n> stack and code generation
                      is done as it parser executes.   Admittedly this \n> limits
                      your optimizing options since the AST disappears when the parsing
                      is\n> complete.  It is rather elegantly simple though.\n\nI'm
                      guilty of never actually going to read the Crenshaw stuff. I
                      think my\nexcuse was that for some reason I didn't end up with
                      a full set of articles\nat the time.\n\nThat same one-phase
                      technique is exactly what I use in my Draco compiler\nand in
                      my Toy compiler. Definitely works well, especially if you are\nmemory-tight,
                      like I was on CP/M systems.\n\n> I thought I'd include another
                      example clipped from the Crenshaw tutorial for the \n> benefit
                      of anyone else reading.   He also discusses the unary negate
                      optimization \n> you mention above elsewhere. \n>\n> ---cut---\n>
                      There is  a concept in compiler theory called \"lazy\" translation.\n\n[...]\n\nOK,
                      now I understand the relevance of the term \"lazy\" translation.
                      I've\nseen similar terms used for other things, and that was
                      likely getting me\ndown the wrong path. I understand the technique.\n\n>
                      As you can see Crenshaw is in conflict with your .sig ---\n>
                      He designs in inefficiency in and removes it later... ;-)\n\nHmm.
                      :-) A peephole optimizer is a prime example of that, although
                      it is\nmore a matter of removing inefficiency efficiently!\n\n>
                      Hmm, I was thinking in terms of how many instructions my VM
                      will be traversing \n> rather than how the hardware is going
                      to handle those instructions. \n> Now I could implement my VM
                      class as a 3 register machine using the\n> members:\n\nAh, OK.
                      That makes sense. If your register count is small, that works
                      fine.\nNow reminded, my 8080 emulator on x86 simply used the
                      one-byte opcode as\na direct index into a 256 entry dispatch
                      table.\n\n> >From the bytecode angle the register is an intrinsic
                      part of the opcode, that is\n> it is determined at compilation
                      time.  Now push() and pop() operations \n> in the VM are going
                      to be to checking for a stack overflow or underflow, no?\n\nActually,
                      no. If you don't allow users to directly generate byte-code,
                      and\nyou are careful with your compiler, there is never any
                      need to check for\nstack underflow. (Well, my interpreter checks
                      the SP after a 'return'\ninstruction to see if it should return
                      from this level of execution.)\nStack overflow can be handled
                      by a combination of a few checks at run-time\n(e.g. at function
                      entry), and compilation checks. This is the exact code for\ninteger
                      addition from my sources:\n\n\tCASE(bc_add) {\n\t    ULONG_T
                      ul;\n\n\t    ul = *sp++;\n\t    *sp += ul;\n\t    BREAK;\n\t}\n\nMacros
                      'CASE' and 'BREAK' allow the code to compile either using the\ngcc
                      dynamic goto stuff, or not. Note: use lots of small scopes and
                      very\nlocal variables like this, so that the compiler can do
                      maximum re-use of\nthe limited X86 register set.\n\n> I don't
                      know.  It may be something worth revisiting.  \n> Besides is
                      there anything more swell than a VM that looks like a 6502?
                      :-)\n\nI decline comment. :-)\n\n> I guess this might lead to
                      the question of whether it is better to have more \n> or less
                      opcodes for your VM's instruction set.  I will note that the
                      Java VM \n> has quite a boatload of special case opcodes, it
                      even distinguishes between \n> pushing an int and pushing a
                      constant one or zero.  So is it better to accomplish \n> something
                      by generating a longer series of simple bytecode operations,
                      or \n> implement a lot of special purpose bytecodes?\n\nI say
                      go for the special-case ones. I have some like 'pshz', 'psh1',
                      etc.\nThey are very easy to do and use, and can have a noticeable
                      speedup. I'm\nreal tempted to go add 'add1' and 'sub1', as in
                      our earlier discussion,\nto see what effect they have. Should
                      take about 15 minutes.\n\n> I don't think speed of compilation
                      is really an issue at least in the context of \n> a mud server's
                      internal programming language.  Typically in an LP, Moo, Cold,\n>
                      Muck, etc. you are compiling rather small pieces of method code
                      or single objects\n> so you can add as many phases or passes
                      to the compilation as you need.\n> Of course online compilation
                      should be multitasked and handled just like any \n> other mud
                      event especially if you have a user programmable setup.\n\nWell,
                      when you have a system that works well, you tend to use it a
                      lot.\nI've gotten into the habit of changing one line of scenario
                      source and then\nrecompiling all 20,000 lines, rather than making
                      the change online! Too\nmany times I've forgotten to make the
                      change in the master sources.\n\n> Other than me tripping over
                      terminology again, I still don't agree with the\n> following:\n>\n>
                      --->Byte-code execution really only makes sense, I believe,
                      for a strongly\n> typed language. If run-time checks and conversions
                      are needed, they will\n> likely cost far more time than the
                      basic interpretation of the code, and\n> so going to byte-code
                      instead of staying with something more direct, could\n> be a
                      waste of time, in that byte-code won't speed execution up much.\n>\n>
                      I agree that overhead is higher, I still think it's less than
                      direct\n> interpretation.\n\nI don't understand your sentence,
                      I'm afraid. The overhead of byte-code\nexecution is less than
                      that of direct interpretation, certainly. Otherwise\nno-one,
                      myself included, would bother with byte-code. My point, however,\nis
                      that if the overheads of non-static typing are significant,
                      then going\nto byte-code could be rather pointless, since it
                      might gain only a few\npercent speedup. With strong typing,
                      there is virtually no run-time\noverhead for type-checking sorts
                      of things, so going from direct\ninterpration to byte-code is
                      almost certainly a big win. This is just\na case of one of the
                      general rules concerning speeding programs up: fix\nthe big
                      things first, then the little things.\n\n> It looks like what
                      one would do with a strongly-typed system.  All the  \n> complexity
                      and overhead is hiding under the covers of C++. \n>\n> Var&
                      Var::operator=(const Var& value);  \n> friend Var operator+(const
                      Var& v1,const Var& v2) throw(TypeError);\n>\n> You'll find all
                      the switches, if-else chains, and conversion exceptions in \n>
                      those functions.  Yes it's overhead but it is not complex.  Maintenance,
                      \n> debugging and readability are very good.  At least I think
                      so.\n\nAny idea how much overhead? Just guessing, comparing
                      my snippet of source\nagainst what you are showing here, I'd
                      guess a factor of 25 or more. That\nis actually *more* than
                      I had thought. And heaven help you if you end\nup with some
                      temporary copies of variables because of problems with\nreference
                      parameters! I have practically zero experience with C++, so\nthe
                      presense of all those '&'s would make me *very* nervous about
                      that.\n\n--\nDon't design inefficiency in - it'll happen in
                      the implementation.\n\nChris Gray     cg@ami-cg.GraySage.Edmonton.AB.CA\n
                      \              http://www.GraySage.Edmonton.AB.CA/cg/\n\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    header: !ruby/object:Headers
                      rmail: !ruby/object:RMail::Message
                        header: !ruby/object:RMail::Header
                          fields:
                          - !ruby/object:RMail::Header::Field
                            raw: 'From: cg@ami-cg.GraySage.Edmonton.AB.CA'
                            name: From
                            value: cg@ami-cg.GraySage.Edmonton.AB.CA
                          - !ruby/object:RMail::Header::Field
                            raw: 'Date: Mon, 3 Jan 2000 19:55:00 -0700'
                            name: Date
                            value: Mon, 3 Jan 2000 19:55:00 -0700
                          - !ruby/object:RMail::Header::Field
                            raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex
                              & bison'
                            name: Subject
                            value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                          mbox_from: 
                        body: "[Jon A. Lambert:]\n\n> Not to belabor the point, since
                          I think we're in agreement although coming from\n> different
                          angles.  The interesting thing about Crenshaw's toy compiler
                          is that it's a \n> single phase compiler.   The AST is the
                          current state of the compiler's run-time \n> stack and code
                          generation is done as it parser executes.   Admittedly this
                          \n> limits your optimizing options since the AST disappears
                          when the parsing is\n> complete.  It is rather elegantly
                          simple though.\n\nI'm guilty of never actually going to
                          read the Crenshaw stuff. I think my\nexcuse was that for
                          some reason I didn't end up with a full set of articles\nat
                          the time.\n\nThat same one-phase technique is exactly what
                          I use in my Draco compiler\nand in my Toy compiler. Definitely
                          works well, especially if you are\nmemory-tight, like I
                          was on CP/M systems.\n\n> I thought I'd include another
                          example clipped from the Crenshaw tutorial for the \n> benefit
                          of anyone else reading.   He also discusses the unary negate
                          optimization \n> you mention above elsewhere. \n>\n> ---cut---\n>
                          There is  a concept in compiler theory called \"lazy\" translation.\n\n[...]\n\nOK,
                          now I understand the relevance of the term \"lazy\" translation.
                          I've\nseen similar terms used for other things, and that
                          was likely getting me\ndown the wrong path. I understand
                          the technique.\n\n> As you can see Crenshaw is in conflict
                          with your .sig ---\n> He designs in inefficiency in and
                          removes it later... ;-)\n\nHmm. :-) A peephole optimizer
                          is a prime example of that, although it is\nmore a matter
                          of removing inefficiency efficiently!\n\n> Hmm, I was thinking
                          in terms of how many instructions my VM will be traversing
                          \n> rather than how the hardware is going to handle those
                          instructions. \n> Now I could implement my VM class as a
                          3 register machine using the\n> members:\n\nAh, OK. That
                          makes sense. If your register count is small, that works
                          fine.\nNow reminded, my 8080 emulator on x86 simply used
                          the one-byte opcode as\na direct index into a 256 entry
                          dispatch table.\n\n> >From the bytecode angle the register
                          is an intrinsic part of the opcode, that is\n> it is determined
                          at compilation time.  Now push() and pop() operations \n>
                          in the VM are going to be to checking for a stack overflow
                          or underflow, no?\n\nActually, no. If you don't allow users
                          to directly generate byte-code, and\nyou are careful with
                          your compiler, there is never any need to check for\nstack
                          underflow. (Well, my interpreter checks the SP after a 'return'\ninstruction
                          to see if it should return from this level of execution.)\nStack
                          overflow can be handled by a combination of a few checks
                          at run-time\n(e.g. at function entry), and compilation checks.
                          This is the exact code for\ninteger addition from my sources:\n\n\tCASE(bc_add)
                          {\n\t    ULONG_T ul;\n\n\t    ul = *sp++;\n\t    *sp +=
                          ul;\n\t    BREAK;\n\t}\n\nMacros 'CASE' and 'BREAK' allow
                          the code to compile either using the\ngcc dynamic goto stuff,
                          or not. Note: use lots of small scopes and very\nlocal variables
                          like this, so that the compiler can do maximum re-use of\nthe
                          limited X86 register set.\n\n> I don't know.  It may be
                          something worth revisiting.  \n> Besides is there anything
                          more swell than a VM that looks like a 6502? :-)\n\nI decline
                          comment. :-)\n\n> I guess this might lead to the question
                          of whether it is better to have more \n> or less opcodes
                          for your VM's instruction set.  I will note that the Java
                          VM \n> has quite a boatload of special case opcodes, it
                          even distinguishes between \n> pushing an int and pushing
                          a constant one or zero.  So is it better to accomplish \n>
                          something by generating a longer series of simple bytecode
                          operations, or \n> implement a lot of special purpose bytecodes?\n\nI
                          say go for the special-case ones. I have some like 'pshz',
                          'psh1', etc.\nThey are very easy to do and use, and can
                          have a noticeable speedup. I'm\nreal tempted to go add 'add1'
                          and 'sub1', as in our earlier discussion,\nto see what effect
                          they have. Should take about 15 minutes.\n\n> I don't think
                          speed of compilation is really an issue at least in the
                          context of \n> a mud server's internal programming language.
                          \ Typically in an LP, Moo, Cold,\n> Muck, etc. you are compiling
                          rather small pieces of method code or single objects\n>
                          so you can add as many phases or passes to the compilation
                          as you need.\n> Of course online compilation should be multitasked
                          and handled just like any \n> other mud event especially
                          if you have a user programmable setup.\n\nWell, when you
                          have a system that works well, you tend to use it a lot.\nI've
                          gotten into the habit of changing one line of scenario source
                          and then\nrecompiling all 20,000 lines, rather than making
                          the change online! Too\nmany times I've forgotten to make
                          the change in the master sources.\n\n> Other than me tripping
                          over terminology again, I still don't agree with the\n>
                          following:\n>\n> --->Byte-code execution really only makes
                          sense, I believe, for a strongly\n> typed language. If run-time
                          checks and conversions are needed, they will\n> likely cost
                          far more time than the basic interpretation of the code,
                          and\n> so going to byte-code instead of staying with something
                          more direct, could\n> be a waste of time, in that byte-code
                          won't speed execution up much.\n>\n> I agree that overhead
                          is higher, I still think it's less than direct\n> interpretation.\n\nI
                          don't understand your sentence, I'm afraid. The overhead
                          of byte-code\nexecution is less than that of direct interpretation,
                          certainly. Otherwise\nno-one, myself included, would bother
                          with byte-code. My point, however,\nis that if the overheads
                          of non-static typing are significant, then going\nto byte-code
                          could be rather pointless, since it might gain only a few\npercent
                          speedup. With strong typing, there is virtually no run-time\noverhead
                          for type-checking sorts of things, so going from direct\ninterpration
                          to byte-code is almost certainly a big win. This is just\na
                          case of one of the general rules concerning speeding programs
                          up: fix\nthe big things first, then the little things.\n\n>
                          It looks like what one would do with a strongly-typed system.
                          \ All the  \n> complexity and overhead is hiding under the
                          covers of C++. \n>\n> Var& Var::operator=(const Var& value);
                          \ \n> friend Var operator+(const Var& v1,const Var& v2)
                          throw(TypeError);\n>\n> You'll find all the switches, if-else
                          chains, and conversion exceptions in \n> those functions.
                          \ Yes it's overhead but it is not complex.  Maintenance,
                          \n> debugging and readability are very good.  At least I
                          think so.\n\nAny idea how much overhead? Just guessing,
                          comparing my snippet of source\nagainst what you are showing
                          here, I'd guess a factor of 25 or more. That\nis actually
                          *more* than I had thought. And heaven help you if you end\nup
                          with some temporary copies of variables because of problems
                          with\nreference parameters! I have practically zero experience
                          with C++, so\nthe presense of all those '&'s would make
                          me *very* nervous about that.\n\n--\nDon't design inefficiency
                          in - it'll happen in the implementation.\n\nChris Gray     cg@ami-cg.GraySage.Edmonton.AB.CA\n
                          \              http://www.GraySage.Edmonton.AB.CA/cg/\n\n\n\n_______________________________________________\nMUD-Dev
                          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                        epilogue: 
                        preamble: 
                    message_id: !ruby/object:MessageId
                      raw: "[invalid or missing message id]"
                    subject: !ruby/object:Subject
                      original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                    from: cg@ami-cg.GraySage.Edmonton.AB.CA
                    references: []
                    date: 2000-01-04 02:55:00.000000000 Z
                    no_archive: false
                  call_number: !ruby/object:CallNumber
                    str: Jzn788Lw
                  source: archive
                  list: !ruby/object:List
                    slug: mud-dev
                    name: 
                    description: 
                    homepage: 
                    footer: 
                  message_id: *20
                parent: *21
                children: []
              - &378 !ruby/object:MessageContainer
                key: &22 !ruby/object:MessageId
                  raw: JzUMT8Uq@generated-message-id.chibrary.org
                value: !ruby/object:Message
                  email: !ruby/object:Email
                    raw: "From: \"Jon A. Lambert\" <jlsysinc@ix.netcom.com>\nDate:
                      Mon, 3 Jan 2000 00:11:14 -0500\nSubject: Re: [MUD-Dev] Storing
                      tokens with flex & bison\n\nChris Gray wrote:\n>\n>JCL: why
                      do you say recursive descent makes it hard to put a VM under
                      a\n>language? Lexing/parsing is pretty independent of execution.
                      My AmigaMUD\n>system uses recursive descent for its programming
                      language, and that had\n>no effect on being able to put a byte-code
                      machine into the system. It\n>had never occurred to me to even
                      think about any effect. Hmm. Perhaps\n>I'm misparsing the conjunction
                      in your sentence?\n\n\nI've noticed that you can obtain lots
                      of little optimization tweaks by just using \n\"lazy evaluation\".
                      \ That is instead of emitting an opcode as soon as it is \nidentified,
                      pass that opcode along as an integer to the next routine in
                      the \nparse tree as you begin to evaluate the next token.   Based
                      on the next\ntoken you may be able to output code that handles
                      that special case\nrather than the general case.  \n\nFor instance
                      in the general case, you might evaluate and generate:\nx+y -->
                      pushvar(x) pushvar(y) addop()\nx+1 --> pushvar(x) pushint(1)
                      addop()\n\nThe second case can be optimized as a special case
                      if instead of\nimmediately emiting pushvar(x), you wait until
                      the next expression is \nidentified.  Thus it could become:\n\nx+1
                      --> pushvar(x) increment()\nor \nx+1 --> pushvar(x+1) \n\nI
                      imagine something similar goes on in C compilers which recognize\nthat
                      forms like 'x++' and 'x=x+1' as equivalent.\n\nAnother possible
                      optimization is for the parser to generate code for\na virtual
                      machine that uses a combination of register and stack instructions.\nThe
                      parser can be made smart enough to know to use registers.\n\nFor
                      instance, instead of: \nx+y --> pushvar(x) pushvar(y) addop()\nwould
                      become...\nx+y--> lda(x) adda(y) pusha()\nand the special case...\nx+1-->
                      lda(x) inca() pusha()\n\nThe first example does 3 stack push
                      operations and 2 stack pops, \nwhile the latter does only 1
                      stack push.  (Assuming addop() pops the\ntop 2 arguments on
                      the stack and pushes the result.) \nA VM that uses an array
                      of possible registers to make assignments \ncould execute bytecode
                      faster, no?\n\nClass VM \n{\n    int           register[8];\n
                      \   Stack*   stack;\n    int*         code;\n}\n\nAnd finally,
                      there are optimizations that you just can't do with a RD parser.
                      \nYou can pass the generated byte-code into a post processor
                      that rescans\nit for patterns that can be simplified.  Call
                      it a byte-code optimizer, or\npeephole optimizer.  The only
                      problem with this last bit is that pretty printing\nor reverse
                      disassembly to source becomes rather difficult.  I've noticed
                      a\nlot of mud servers do not do this and seek to support reverse
                      code generation\ninstead of storing the source code somewhere.
                      \ Perhaps they are missing\nout on some major optimization possibilities.
                      \ \n\n>Byte-code execution really only makes sense, I believe,
                      for a strongly\n>typed language. If run-time checks and conversions
                      are needed, they will\n>likely cost far more time than the basic
                      interpretation of the code, and\n>so going to byte-code instead
                      of staying with something more direct, could\n>be a waste of
                      time, in that byte-code won't speed execution up much.\n\n\nI
                      don't know about whether it makes sense or not.   You are paying
                      for\nsomething in the subjective area of \"ease of user programming\"
                      that is \ndifficult to quantify.  I agree that evaluations at
                      runtime is definitely going to be \nslower, than compile time
                      evaluation.   I don't agree that it will be slower than \ninterpreted
                      execution though.  Certainly some of the optimizations I talked
                      about \nabove are operative with strong type checking.\n\n--\n--*
                      \    Jon A. Lambert - TychoMUD Email: jlsysinc@nospam.ix.netcom.com
                      \    *--\n--*     Mud Server Developer's Page <http://jlsysinc.home.netcom.com>
                      \     *--\n--* \"No Free man shall ever be debarred the use
                      of arms.\" Thomas Jefferson *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    header: !ruby/object:Headers
                      rmail: !ruby/object:RMail::Message
                        header: !ruby/object:RMail::Header
                          fields:
                          - !ruby/object:RMail::Header::Field
                            raw: 'From: "Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                            name: From
                            value: '"Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                          - !ruby/object:RMail::Header::Field
                            raw: 'Date: Mon, 3 Jan 2000 00:11:14 -0500'
                            name: Date
                            value: Mon, 3 Jan 2000 00:11:14 -0500
                          - !ruby/object:RMail::Header::Field
                            raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex
                              & bison'
                            name: Subject
                            value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                          mbox_from: 
                        body: "Chris Gray wrote:\n>\n>JCL: why do you say recursive
                          descent makes it hard to put a VM under a\n>language? Lexing/parsing
                          is pretty independent of execution. My AmigaMUD\n>system
                          uses recursive descent for its programming language, and
                          that had\n>no effect on being able to put a byte-code machine
                          into the system. It\n>had never occurred to me to even think
                          about any effect. Hmm. Perhaps\n>I'm misparsing the conjunction
                          in your sentence?\n\n\nI've noticed that you can obtain
                          lots of little optimization tweaks by just using \n\"lazy
                          evaluation\".  That is instead of emitting an opcode as
                          soon as it is \nidentified, pass that opcode along as an
                          integer to the next routine in the \nparse tree as you begin
                          to evaluate the next token.   Based on the next\ntoken you
                          may be able to output code that handles that special case\nrather
                          than the general case.  \n\nFor instance in the general
                          case, you might evaluate and generate:\nx+y --> pushvar(x)
                          pushvar(y) addop()\nx+1 --> pushvar(x) pushint(1) addop()\n\nThe
                          second case can be optimized as a special case if instead
                          of\nimmediately emiting pushvar(x), you wait until the next
                          expression is \nidentified.  Thus it could become:\n\nx+1
                          --> pushvar(x) increment()\nor \nx+1 --> pushvar(x+1) \n\nI
                          imagine something similar goes on in C compilers which recognize\nthat
                          forms like 'x++' and 'x=x+1' as equivalent.\n\nAnother possible
                          optimization is for the parser to generate code for\na virtual
                          machine that uses a combination of register and stack instructions.\nThe
                          parser can be made smart enough to know to use registers.\n\nFor
                          instance, instead of: \nx+y --> pushvar(x) pushvar(y) addop()\nwould
                          become...\nx+y--> lda(x) adda(y) pusha()\nand the special
                          case...\nx+1--> lda(x) inca() pusha()\n\nThe first example
                          does 3 stack push operations and 2 stack pops, \nwhile the
                          latter does only 1 stack push.  (Assuming addop() pops the\ntop
                          2 arguments on the stack and pushes the result.) \nA VM
                          that uses an array of possible registers to make assignments
                          \ncould execute bytecode faster, no?\n\nClass VM \n{\n    int
                          \          register[8];\n    Stack*   stack;\n    int*         code;\n}\n\nAnd
                          finally, there are optimizations that you just can't do
                          with a RD parser. \nYou can pass the generated byte-code
                          into a post processor that rescans\nit for patterns that
                          can be simplified.  Call it a byte-code optimizer, or\npeephole
                          optimizer.  The only problem with this last bit is that
                          pretty printing\nor reverse disassembly to source becomes
                          rather difficult.  I've noticed a\nlot of mud servers do
                          not do this and seek to support reverse code generation\ninstead
                          of storing the source code somewhere.  Perhaps they are
                          missing\nout on some major optimization possibilities.  \n\n>Byte-code
                          execution really only makes sense, I believe, for a strongly\n>typed
                          language. If run-time checks and conversions are needed,
                          they will\n>likely cost far more time than the basic interpretation
                          of the code, and\n>so going to byte-code instead of staying
                          with something more direct, could\n>be a waste of time,
                          in that byte-code won't speed execution up much.\n\n\nI
                          don't know about whether it makes sense or not.   You are
                          paying for\nsomething in the subjective area of \"ease of
                          user programming\" that is \ndifficult to quantify.  I agree
                          that evaluations at runtime is definitely going to be \nslower,
                          than compile time evaluation.   I don't agree that it will
                          be slower than \ninterpreted execution though.  Certainly
                          some of the optimizations I talked about \nabove are operative
                          with strong type checking.\n\n--\n--*     Jon A. Lambert
                          - TychoMUD Email: jlsysinc@nospam.ix.netcom.com     *--\n--*
                          \    Mud Server Developer's Page <http://jlsysinc.home.netcom.com>
                          \     *--\n--* \"No Free man shall ever be debarred the
                          use of arms.\" Thomas Jefferson *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                        epilogue: 
                        preamble: 
                    message_id: !ruby/object:MessageId
                      raw: "[invalid or missing message id]"
                    subject: !ruby/object:Subject
                      original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                    from: Jon A. Lambert <jlsysinc@ix.netcom.com>
                    references: []
                    date: 2000-01-03 05:11:14.000000000 Z
                    no_archive: false
                  call_number: !ruby/object:CallNumber
                    str: JzUMT8Uq
                  source: archive
                  list: !ruby/object:List
                    slug: mud-dev
                    name: 
                    description: 
                    homepage: 
                    footer: 
                  message_id: *22
                parent: *21
                children: []
        - &252 !ruby/object:MessageContainer
          key: &23 !ruby/object:MessageId
            raw: 00IyQfB2@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: Chris Jones <cjones@v-wave.com>\nDate: Fri, 07 Jan 2000
                22:18:56 -0700\nSubject: Re: [MUD-Dev] Storing tokens with flex &
                bison\n\ncg@ami-cg.GraySage.Edmonton.AB.CA wrote:\n> \n> >     DNS2.UTCC.UTORONTO.ca\n>
                >     RELAY.CDNNET.ca\n> >     CLOUSO.RISQ.QC.ca\n> >     NS2.UUNET.ca\n>
                >     RS0.internic.NET\n> >\n> > but if I query any of those for ns
                records for ab.ca, I get nothing.\n> \n> That's pretty awful. 'ab'
                is the province of Alberta, larger than any\n> of the U.S. states.
                For none of the .ca servers to be able to find it\n> is pretty sad.
                I think RELAY.CDNNET.ca is the main one.\n\n\tConsidering that there
                is nothing in the ab.ca domain besides a bunch\nof sub-domains, would
                this not be the expected behaviour?\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: Chris Jones <cjones@v-wave.com>'
                      name: From
                      value: Chris Jones <cjones@v-wave.com>
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Fri, 07 Jan 2000 22:18:56 -0700'
                      name: Date
                      value: Fri, 07 Jan 2000 22:18:56 -0700
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex & bison'
                      name: Subject
                      value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                    mbox_from: 
                  body: "cg@ami-cg.GraySage.Edmonton.AB.CA wrote:\n> \n> >     DNS2.UTCC.UTORONTO.ca\n>
                    >     RELAY.CDNNET.ca\n> >     CLOUSO.RISQ.QC.ca\n> >     NS2.UUNET.ca\n>
                    >     RS0.internic.NET\n> >\n> > but if I query any of those for
                    ns records for ab.ca, I get nothing.\n> \n> That's pretty awful.
                    'ab' is the province of Alberta, larger than any\n> of the U.S.
                    states. For none of the .ca servers to be able to find it\n> is
                    pretty sad. I think RELAY.CDNNET.ca is the main one.\n\n\tConsidering
                    that there is nothing in the ab.ca domain besides a bunch\nof
                    sub-domains, would this not be the expected behaviour?\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
              from: Chris Jones <cjones@v-wave.com>
              references: []
              date: 2000-01-08 05:18:56.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: 00IyQfB2
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *23
          parent: *7
          children: []
        - &389 !ruby/object:MessageContainer
          key: &24 !ruby/object:MessageId
            raw: 00IyQfBo@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: Christer Enfors <enfors@swipnet.se>\nDate: Sun, 2 Jan 2000
                03:20:01 +0100 (CET)\nSubject: Re: [MUD-Dev] Storing tokens with flex
                & bison\n\nOn Sat, 1 Jan 2000, Jon A. Lambert wrote:\n\n> Christer
                Enfors wrote:\n> On Sat, 1 Jan 2000, Chris Turner wrote:\n> >> \n>
                >> The O'Reilly Lex & Yacc book is well written and contains many
                tutorials.\n> >\n> >Right, but it doesn't have a tutorial that involves
                storing the source\n> >code in any format for later execution, which
                is what I'm looking for in\n> >this case.\n> \n> \n> Nod.  In order
                to use a byte code, one must first design and implement\n> a virtual
                machine, or target it for an existing VM (i.e. Java)\n> I think what
                you are looking for is documentation on designing Virtual\n> Machines.
                \ The way I learned was by snooping through all the notes,\n> examples,
                and syllabus (syllabi?) left out on the net by university professors\n>
                teaching it.  For some reason the CS course numbers (505 and 565)
                seem\n> familar, though it has been a couple years.  :-( \n> There's
                Sun's Java VM doc, the Smart tiny VM, the Luck VM, the ANTLR \n> tutorial
                by Scott Stanchfield(?) that implements a language called\n> X.  I
                don't know offhand of any books that cover VM design in depth.  \n\nAh,
                now the pieces are starting to fall into place.\n\nI am not supposed
                to use lex & yacc for the execution at all, am I? I\nthought I was.
                All I should use lex & yacc for is the source code to byte\ncode compilation,
                right? And since my byte code is so clever / simple, I\ncan code the
                VM manually in C, without needing lex & yacc? Am I on the\nright track
                now? =)\n\n--\n\t             -=-=- Christer Enfors -=-=-\n\n       \"I
                do my music in pure machine code using an assembler.\"\n\t\t\t    -
                Rob Hubbard\n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: Christer Enfors <enfors@swipnet.se>'
                      name: From
                      value: Christer Enfors <enfors@swipnet.se>
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Sun, 2 Jan 2000 03:20:01 +0100 (CET)'
                      name: Date
                      value: Sun, 2 Jan 2000 03:20:01 +0100 (CET)
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex & bison'
                      name: Subject
                      value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                    mbox_from: 
                  body: "On Sat, 1 Jan 2000, Jon A. Lambert wrote:\n\n> Christer Enfors
                    wrote:\n> On Sat, 1 Jan 2000, Chris Turner wrote:\n> >> \n> >>
                    The O'Reilly Lex & Yacc book is well written and contains many
                    tutorials.\n> >\n> >Right, but it doesn't have a tutorial that
                    involves storing the source\n> >code in any format for later execution,
                    which is what I'm looking for in\n> >this case.\n> \n> \n> Nod.
                    \ In order to use a byte code, one must first design and implement\n>
                    a virtual machine, or target it for an existing VM (i.e. Java)\n>
                    I think what you are looking for is documentation on designing
                    Virtual\n> Machines.  The way I learned was by snooping through
                    all the notes,\n> examples, and syllabus (syllabi?) left out on
                    the net by university professors\n> teaching it.  For some reason
                    the CS course numbers (505 and 565) seem\n> familar, though it
                    has been a couple years.  :-( \n> There's Sun's Java VM doc, the
                    Smart tiny VM, the Luck VM, the ANTLR \n> tutorial by Scott Stanchfield(?)
                    that implements a language called\n> X.  I don't know offhand
                    of any books that cover VM design in depth.  \n\nAh, now the pieces
                    are starting to fall into place.\n\nI am not supposed to use lex
                    & yacc for the execution at all, am I? I\nthought I was. All I
                    should use lex & yacc for is the source code to byte\ncode compilation,
                    right? And since my byte code is so clever / simple, I\ncan code
                    the VM manually in C, without needing lex & yacc? Am I on the\nright
                    track now? =)\n\n--\n\t             -=-=- Christer Enfors -=-=-\n\n
                    \      \"I do my music in pure machine code using an assembler.\"\n\t\t\t
                    \   - Rob Hubbard\n\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
              from: Christer Enfors <enfors@swipnet.se>
              references: []
              date: 2000-01-02 02:20:01.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: 00IyQfBo
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *24
          parent: *7
          children: []
        - &445 !ruby/object:MessageContainer
          key: &25 !ruby/object:MessageId
            raw: 00IyQfBY@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: cg@ami-cg.GraySage.Edmonton.AB.CA\nDate: Fri, 7 Jan 2000
                18:59:42 -0700\nSubject: Re: [MUD-Dev] Storing tokens with flex &
                bison\n\n>     DNS2.UTCC.UTORONTO.ca\n>     RELAY.CDNNET.ca \n>     CLOUSO.RISQ.QC.ca\n>
                \    NS2.UUNET.ca\n>     RS0.internic.NET\n>\n> but if I query any
                of those for ns records for ab.ca, I get nothing.\n\nThat's pretty
                awful. 'ab' is the province of Alberta, larger than any\nof the U.S.
                states. For none of the .ca servers to be able to find it\nis pretty
                sad. I think RELAY.CDNNET.ca is the main one.\n\n> Does anyone else
                have this problem? If not, does anyone just know\n> the ip address
                of www.GraySage.Edmonton.AB.CA?\n\nDominic has the IP address right,
                at: 24.65.146.32\n\nWarning, however. It's a dynamic IP, and the machine
                at work that\ncurrently handles the domain name is not fully working.
                Luckily, the\naddress doesn't change very often (often the same for
                months).\n\n--\nDon't design inefficiency in - it'll happen in the
                implementation.\n\nChris Gray     cg@ami-cg.GraySage.Edmonton.AB.CA\n
                \              http://www.GraySage.Edmonton.AB.CA/cg/\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: cg@ami-cg.GraySage.Edmonton.AB.CA'
                      name: From
                      value: cg@ami-cg.GraySage.Edmonton.AB.CA
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Fri, 7 Jan 2000 18:59:42 -0700'
                      name: Date
                      value: Fri, 7 Jan 2000 18:59:42 -0700
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex & bison'
                      name: Subject
                      value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                    mbox_from: 
                  body: ">     DNS2.UTCC.UTORONTO.ca\n>     RELAY.CDNNET.ca \n>     CLOUSO.RISQ.QC.ca\n>
                    \    NS2.UUNET.ca\n>     RS0.internic.NET\n>\n> but if I query
                    any of those for ns records for ab.ca, I get nothing.\n\nThat's
                    pretty awful. 'ab' is the province of Alberta, larger than any\nof
                    the U.S. states. For none of the .ca servers to be able to find
                    it\nis pretty sad. I think RELAY.CDNNET.ca is the main one.\n\n>
                    Does anyone else have this problem? If not, does anyone just know\n>
                    the ip address of www.GraySage.Edmonton.AB.CA?\n\nDominic has
                    the IP address right, at: 24.65.146.32\n\nWarning, however. It's
                    a dynamic IP, and the machine at work that\ncurrently handles
                    the domain name is not fully working. Luckily, the\naddress doesn't
                    change very often (often the same for months).\n\n--\nDon't design
                    inefficiency in - it'll happen in the implementation.\n\nChris
                    Gray     cg@ami-cg.GraySage.Edmonton.AB.CA\n               http://www.GraySage.Edmonton.AB.CA/cg/\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
              from: cg@ami-cg.GraySage.Edmonton.AB.CA
              references: []
              date: 2000-01-08 01:59:42.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: 00IyQfBY
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *25
          parent: *7
          children: []
        - &28 !ruby/object:MessageContainer
          key: &26 !ruby/object:MessageId
            raw: Jysr9C1A@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: Christer Enfors <enfors@swipnet.se>\nDate: Sat, 1 Jan 2000
                20:58:17 +0100 (CET)\nSubject: Re: [MUD-Dev] Storing tokens with flex
                & bison\n\nOn Sat, 1 Jan 2000, Chris Turner wrote:\n\n> On Fri, 31
                Dec 1999, Christer Enfors wrote:\n> \n> > I'm not sure if this is
                the proper forum for this kind of question, but I\n> > can't find
                any mailing lists for lex & yacc, and it is a MUD I'm\n> > developing...\n>
                > \n> > I want to write a MUD server, and for this I want to develop
                a LPC-like\n> > interpreting programming (or call it scripting if
                you like) language with\n> > flex and bison.\n> > \n> > When flex
                reads a file, would it be a good idea to store the tokens\n> > returned
                from yylex() in a list? I was thinking one list for each function\n>
                > definition, and then having bison read from that list when executing
                that\n> > function, instead of reading directly from the file using
                flex?\n> > \n> > If so, how would I get yylex() to return tokens from
                my list instead of\n> > tokens from the file? Or would that be going
                about it the wrong way?\n> \n> To get yylex() to return the tokens
                from the list, you'd have replace the\n> input routine it uses, with
                one that fakes input based upon the list of\n> tokens.  This is more
                hassle than it's worth *8).\n> \n> The correct/easiest way to do it,
                is to get bison to call a wrapper function\n> that either calls yylex()
                or pops the next token off the list.\n\nThat's what I meant, I guess.
                I just didn't know you could get bison to\ncall a different function
                instead of yylex(). I'll check the man page,\nthanks.\n\n> > Or should
                I simply read the function definition from the file with flex\n> >
                each time I want to execute the function?\n> \n> Well this would always
                work with what you have already.  It might be a bit\n> slower.  If
                you want a real speed increase, you would be better off compiling\n>
                the function into some form of byte-code, which could be run though
                without\n> needing to parse anything.\n\nI thought my supposed stored
                linked list of tokens was considered\n\"byte-code\", but I guess it's
                not that simple. Looks like I better hit the\nDragon book some more,
                I bet this sort of stuff is explained in there\nsomewhere.\n\n> >
                Maybe someone could point me to a lex & yacc tutorial that includes\n>
                > writing an interpreted language that allowes user defined functions\n>
                > written in that language, since that is basically what I'm trying
                to do\n> > myself.\n> \n> The O'Reilly Lex & Yacc book is well written
                and contains many tutorials.\n\nRight, but it doesn't have a tutorial
                that involves storing the source\ncode in any format for later execution,
                which is what I'm looking for in\nthis case.\n\n--\n\t             -=-=-
                Christer Enfors -=-=-\n\n       \"I do my music in pure machine code
                using an assembler.\"\n\t\t\t    - Rob Hubbard\n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: Christer Enfors <enfors@swipnet.se>'
                      name: From
                      value: Christer Enfors <enfors@swipnet.se>
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Sat, 1 Jan 2000 20:58:17 +0100 (CET)'
                      name: Date
                      value: Sat, 1 Jan 2000 20:58:17 +0100 (CET)
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex & bison'
                      name: Subject
                      value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                    mbox_from: 
                  body: "On Sat, 1 Jan 2000, Chris Turner wrote:\n\n> On Fri, 31 Dec
                    1999, Christer Enfors wrote:\n> \n> > I'm not sure if this is
                    the proper forum for this kind of question, but I\n> > can't find
                    any mailing lists for lex & yacc, and it is a MUD I'm\n> > developing...\n>
                    > \n> > I want to write a MUD server, and for this I want to develop
                    a LPC-like\n> > interpreting programming (or call it scripting
                    if you like) language with\n> > flex and bison.\n> > \n> > When
                    flex reads a file, would it be a good idea to store the tokens\n>
                    > returned from yylex() in a list? I was thinking one list for
                    each function\n> > definition, and then having bison read from
                    that list when executing that\n> > function, instead of reading
                    directly from the file using flex?\n> > \n> > If so, how would
                    I get yylex() to return tokens from my list instead of\n> > tokens
                    from the file? Or would that be going about it the wrong way?\n>
                    \n> To get yylex() to return the tokens from the list, you'd have
                    replace the\n> input routine it uses, with one that fakes input
                    based upon the list of\n> tokens.  This is more hassle than it's
                    worth *8).\n> \n> The correct/easiest way to do it, is to get
                    bison to call a wrapper function\n> that either calls yylex()
                    or pops the next token off the list.\n\nThat's what I meant, I
                    guess. I just didn't know you could get bison to\ncall a different
                    function instead of yylex(). I'll check the man page,\nthanks.\n\n>
                    > Or should I simply read the function definition from the file
                    with flex\n> > each time I want to execute the function?\n> \n>
                    Well this would always work with what you have already.  It might
                    be a bit\n> slower.  If you want a real speed increase, you would
                    be better off compiling\n> the function into some form of byte-code,
                    which could be run though without\n> needing to parse anything.\n\nI
                    thought my supposed stored linked list of tokens was considered\n\"byte-code\",
                    but I guess it's not that simple. Looks like I better hit the\nDragon
                    book some more, I bet this sort of stuff is explained in there\nsomewhere.\n\n>
                    > Maybe someone could point me to a lex & yacc tutorial that includes\n>
                    > writing an interpreted language that allowes user defined functions\n>
                    > written in that language, since that is basically what I'm trying
                    to do\n> > myself.\n> \n> The O'Reilly Lex & Yacc book is well
                    written and contains many tutorials.\n\nRight, but it doesn't
                    have a tutorial that involves storing the source\ncode in any
                    format for later execution, which is what I'm looking for in\nthis
                    case.\n\n--\n\t             -=-=- Christer Enfors -=-=-\n\n       \"I
                    do my music in pure machine code using an assembler.\"\n\t\t\t
                    \   - Rob Hubbard\n\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
              from: Christer Enfors <enfors@swipnet.se>
              references: []
              date: 2000-01-01 19:58:17.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: Jysr9C1A
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *26
          parent: *7
          children:
          - &30 !ruby/object:MessageContainer
            key: &27 !ruby/object:MessageId
              raw: Jzn788LA@generated-message-id.chibrary.org
            value: !ruby/object:Message
              email: !ruby/object:Email
                raw: "From: \"Jon A. Lambert\" <jlsysinc@ix.netcom.com>\nDate: Sat,
                  1 Jan 2000 19:46:39 -0500\nSubject: Re: [MUD-Dev] Storing tokens
                  with flex & bison\n\nChrister Enfors wrote:\nOn Sat, 1 Jan 2000,
                  Chris Turner wrote:\n>\n>> \n>> Well this would always work with
                  what you have already.  It might be a bit\n>> slower.  If you want
                  a real speed increase, you would be better off compiling\n>> the
                  function into some form of byte-code, which could be run though
                  without\n>> needing to parse anything.\n>\n>I thought my supposed
                  stored linked list of tokens was considered\n>\"byte-code\", but
                  I guess it's not that simple. Looks like I better hit the\n>Dragon
                  book some more, I bet this sort of stuff is explained in there\n>somewhere.\n>\n\nThat
                  stored list would be called a pre-tokenized stream.  It's how the\nold
                  MS-Basic and C64 Basic used to save code when exiting the editor.
                  \ \nYou can do much better though.  The output of Bison can be:\n\na)
                  An interpreter\nb) Native machine code \nc) A byte code for a virtual
                  machine \n\nBoth b) and c) are intermediate forms of storage.  Machine
                  code\nprobably needs to be linked and a byte code needs a VM to
                  \nexecute it.  The output from bison could probably be other things
                  \nas well.  \n\n>> \n>> The O'Reilly Lex & Yacc book is well written
                  and contains many tutorials.\n>\n>Right, but it doesn't have a tutorial
                  that involves storing the source\n>code in any format for later
                  execution, which is what I'm looking for in\n>this case.\n\n\nNod.
                  \ In order to use a byte code, one must first design and implement\na
                  virtual machine, or target it for an existing VM (i.e. Java)\nI
                  think what you are looking for is documentation on designing Virtual\nMachines.
                  \ The way I learned was by snooping through all the notes,\nexamples,
                  and syllabus (syllabi?) left out on the net by university professors\nteaching
                  it.  For some reason the CS course numbers (505 and 565) seem\nfamilar,
                  though it has been a couple years.  :-( \nThere's Sun's Java VM
                  doc, the Smart tiny VM, the Luck VM, the ANTLR \ntutorial by Scott
                  Stanchfield(?) that implements a language called\nX.  I don't know
                  offhand of any books that cover VM design in depth.  \n\n--\n--*
                  \    Jon A. Lambert - TychoMUD Email: jlsysinc@nospam.ix.netcom.com
                  \    *--\n--*     Mud Server Developer's Page <http://jlsysinc.home.netcom.com>
                  \     *--\n--* \"No Free man shall ever be debarred the use of arms.\"
                  Thomas Jefferson *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                header: !ruby/object:Headers
                  rmail: !ruby/object:RMail::Message
                    header: !ruby/object:RMail::Header
                      fields:
                      - !ruby/object:RMail::Header::Field
                        raw: 'From: "Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                        name: From
                        value: '"Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                      - !ruby/object:RMail::Header::Field
                        raw: 'Date: Sat, 1 Jan 2000 19:46:39 -0500'
                        name: Date
                        value: Sat, 1 Jan 2000 19:46:39 -0500
                      - !ruby/object:RMail::Header::Field
                        raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex & bison'
                        name: Subject
                        value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                      mbox_from: 
                    body: "Christer Enfors wrote:\nOn Sat, 1 Jan 2000, Chris Turner
                      wrote:\n>\n>> \n>> Well this would always work with what you
                      have already.  It might be a bit\n>> slower.  If you want a
                      real speed increase, you would be better off compiling\n>> the
                      function into some form of byte-code, which could be run though
                      without\n>> needing to parse anything.\n>\n>I thought my supposed
                      stored linked list of tokens was considered\n>\"byte-code\",
                      but I guess it's not that simple. Looks like I better hit the\n>Dragon
                      book some more, I bet this sort of stuff is explained in there\n>somewhere.\n>\n\nThat
                      stored list would be called a pre-tokenized stream.  It's how
                      the\nold MS-Basic and C64 Basic used to save code when exiting
                      the editor.  \nYou can do much better though.  The output of
                      Bison can be:\n\na) An interpreter\nb) Native machine code \nc)
                      A byte code for a virtual machine \n\nBoth b) and c) are intermediate
                      forms of storage.  Machine code\nprobably needs to be linked
                      and a byte code needs a VM to \nexecute it.  The output from
                      bison could probably be other things \nas well.  \n\n>> \n>>
                      The O'Reilly Lex & Yacc book is well written and contains many
                      tutorials.\n>\n>Right, but it doesn't have a tutorial that involves
                      storing the source\n>code in any format for later execution,
                      which is what I'm looking for in\n>this case.\n\n\nNod.  In
                      order to use a byte code, one must first design and implement\na
                      virtual machine, or target it for an existing VM (i.e. Java)\nI
                      think what you are looking for is documentation on designing
                      Virtual\nMachines.  The way I learned was by snooping through
                      all the notes,\nexamples, and syllabus (syllabi?) left out on
                      the net by university professors\nteaching it.  For some reason
                      the CS course numbers (505 and 565) seem\nfamilar, though it
                      has been a couple years.  :-( \nThere's Sun's Java VM doc, the
                      Smart tiny VM, the Luck VM, the ANTLR \ntutorial by Scott Stanchfield(?)
                      that implements a language called\nX.  I don't know offhand
                      of any books that cover VM design in depth.  \n\n--\n--*     Jon
                      A. Lambert - TychoMUD Email: jlsysinc@nospam.ix.netcom.com     *--\n--*
                      \    Mud Server Developer's Page <http://jlsysinc.home.netcom.com>
                      \     *--\n--* \"No Free man shall ever be debarred the use
                      of arms.\" Thomas Jefferson *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    epilogue: 
                    preamble: 
                message_id: !ruby/object:MessageId
                  raw: "[invalid or missing message id]"
                subject: !ruby/object:Subject
                  original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                from: Jon A. Lambert <jlsysinc@ix.netcom.com>
                references: []
                date: 2000-01-02 00:46:39.000000000 Z
                no_archive: false
              call_number: !ruby/object:CallNumber
                str: Jzn788LA
              source: archive
              list: !ruby/object:List
                slug: mud-dev
                name: 
                description: 
                homepage: 
                footer: 
              message_id: *27
            parent: *28
            children:
            - &470 !ruby/object:MessageContainer
              key: &29 !ruby/object:MessageId
                raw: JzUMQxBw@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: |
                    From: Greg Miller <gmiller@classic-games.com>
                    Date: Sun, 02 Jan 2000 04:16:38 -0600
                    Subject: Re: [MUD-Dev] Storing tokens with flex & bison

                    "Jon A. Lambert" wrote:
                    > That stored list would be called a pre-tokenized stream.  It's how the
                    > old MS-Basic and C64 Basic used to save code when exiting the editor.

                    Sort of. Microsoft BASIC and its direct derivatives (Commodore,
                    AppleSoft, etc) did what amounted to a search and replace. You got a
                    mixture of raw text and tokens. This allowed it to get away without
                    doing the syntax checking of some other BASICs (Atari BASIC, for
                    example).

                    > X.  I don't know offhand of any books that cover VM design in depth.

                    Me either. I think that's a shame.
                    --
                    http://www.classic-games.com/
                    Conspiracy theorists mistakenly assume others think before acting.
                    *** Please limit .sigs to four lines and avoid HTML mail or posts. ***



                    _______________________________________________
                    MUD-Dev maillist  -  MUD-Dev@kanga.nu
                    http://www.kanga.nu/lists/listinfo/mud-dev
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: Greg Miller <gmiller@classic-games.com>'
                          name: From
                          value: Greg Miller <gmiller@classic-games.com>
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Sun, 02 Jan 2000 04:16:38 -0600'
                          name: Date
                          value: Sun, 02 Jan 2000 04:16:38 -0600
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex &
                            bison'
                          name: Subject
                          value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                        mbox_from: 
                      body: |
                        "Jon A. Lambert" wrote:
                        > That stored list would be called a pre-tokenized stream.  It's how the
                        > old MS-Basic and C64 Basic used to save code when exiting the editor.

                        Sort of. Microsoft BASIC and its direct derivatives (Commodore,
                        AppleSoft, etc) did what amounted to a search and replace. You got a
                        mixture of raw text and tokens. This allowed it to get away without
                        doing the syntax checking of some other BASICs (Atari BASIC, for
                        example).

                        > X.  I don't know offhand of any books that cover VM design in depth.

                        Me either. I think that's a shame.
                        --
                        http://www.classic-games.com/
                        Conspiracy theorists mistakenly assume others think before acting.
                        *** Please limit .sigs to four lines and avoid HTML mail or posts. ***



                        _______________________________________________
                        MUD-Dev maillist  -  MUD-Dev@kanga.nu
                        http://www.kanga.nu/lists/listinfo/mud-dev
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                  from: Greg Miller <gmiller@classic-games.com>
                  references: []
                  date: 2000-01-02 10:16:38.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: JzUMQxBw
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *29
              parent: *30
              children: []
          - &401 !ruby/object:MessageContainer
            key: &31 !ruby/object:MessageId
              raw: Jzn75usq@generated-message-id.chibrary.org
            value: !ruby/object:Message
              email: !ruby/object:Email
                raw: "From: Per Vognsen <vognsen@mindless.com>\nDate: Sat, 01 Jan
                  2000 16:39:17 +0100\nSubject: Re: [MUD-Dev] Storing tokens with
                  flex & bison\n\nHello everybody and a happy new year to all! I'm
                  sorry if I don't make\nsense at times in this post -- I just got
                  home from a party and I'm\nexperiencing a rather bad hangover, I'm
                  afraid.\n\nChrister Enfors spake thusly:\n> \n> I'm not sure if
                  this is the proper forum for this kind of question, but I\n> can't
                  find any mailing lists for lex & yacc, and it is a MUD I'm\n> developing...\n\nI'm
                  not sure it is either, but since you've already brought it up, I'll\ntry
                  to answer to the best of my ability. I've written a few complete\nlanguages
                  (with interpreters and so on) and a number of other parsers in\nthe
                  past, using lex and yacc mostly.\n\n[...]\n> When flex reads a file,
                  would it be a good idea to store the tokens\n> returned from yylex()
                  in a list? I was thinking one list for each function\n> definition,
                  and then having bison read from that list when executing that\n>
                  function, instead of reading directly from the file using flex?\n\nWhat
                  I think you'd rather want to do here is to use some intermediate\nform
                  for storage - it would be completely irrational to scan, parse and\ninterpret
                  the code each time you want to execute it. For this task you\ncan
                  use an AST (abtract syntax syntax), byte-code (usually generated\nfrom
                  some other form, like ASTs), or other even more exotic options.\n\n>
                  If so, how would I get yylex() to return tokens from my list instead
                  of\n> tokens from the file? Or would that be going about it the
                  wrong way?\n\nYou could do it by writing your own yylex() function
                  which in turn\ninterfaced to the 'real' lexer function generated
                  by lex (you can\nspecify and alternate name for the generated yylex()
                  - see the man\nfiles).\n\n> Maybe someone could point me to a lex
                  & yacc tutorial that includes\n> writing an interpreted language
                  that allowes user defined functions\n> written in that language,
                  since that is basically what I'm trying to do\n> myself.\n\nIf you're
                  interested in writing languages in general, I think the Dragon\nbook
                  is still the classic (although a bit dated in some areas).\n\"Compilers:
                  Principles, Techniques, and Tools\" by Aho, Sethi, and Ullman\nfrom
                  Addison-Wesley. If you want to learn more about lex and yacc (flex\nand
                  bison are the GNU versions) try checking out \"lex & yacc\" by Levine,\nMason,
                  and Brown from O'Reilly\n\n>                      -=-=- Christer
                  Enfors -=-=-\n> \n>        \"I do my music in pure machine code
                  using an assembler.\"\n>                             - Rob Hubbard\n>
                  \n\n--\n_/_ Per Vognsen <vognsen@mindless.com> (C++ and Linux Programmer)\n
                  /  \"It was a hobbit hole, and that meant comfort.\" - JRR Tolkien\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                header: !ruby/object:Headers
                  rmail: !ruby/object:RMail::Message
                    header: !ruby/object:RMail::Header
                      fields:
                      - !ruby/object:RMail::Header::Field
                        raw: 'From: Per Vognsen <vognsen@mindless.com>'
                        name: From
                        value: Per Vognsen <vognsen@mindless.com>
                      - !ruby/object:RMail::Header::Field
                        raw: 'Date: Sat, 01 Jan 2000 16:39:17 +0100'
                        name: Date
                        value: Sat, 01 Jan 2000 16:39:17 +0100
                      - !ruby/object:RMail::Header::Field
                        raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex & bison'
                        name: Subject
                        value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                      mbox_from: 
                    body: "Hello everybody and a happy new year to all! I'm sorry
                      if I don't make\nsense at times in this post -- I just got home
                      from a party and I'm\nexperiencing a rather bad hangover, I'm
                      afraid.\n\nChrister Enfors spake thusly:\n> \n> I'm not sure
                      if this is the proper forum for this kind of question, but I\n>
                      can't find any mailing lists for lex & yacc, and it is a MUD
                      I'm\n> developing...\n\nI'm not sure it is either, but since
                      you've already brought it up, I'll\ntry to answer to the best
                      of my ability. I've written a few complete\nlanguages (with
                      interpreters and so on) and a number of other parsers in\nthe
                      past, using lex and yacc mostly.\n\n[...]\n> When flex reads
                      a file, would it be a good idea to store the tokens\n> returned
                      from yylex() in a list? I was thinking one list for each function\n>
                      definition, and then having bison read from that list when executing
                      that\n> function, instead of reading directly from the file
                      using flex?\n\nWhat I think you'd rather want to do here is
                      to use some intermediate\nform for storage - it would be completely
                      irrational to scan, parse and\ninterpret the code each time
                      you want to execute it. For this task you\ncan use an AST (abtract
                      syntax syntax), byte-code (usually generated\nfrom some other
                      form, like ASTs), or other even more exotic options.\n\n> If
                      so, how would I get yylex() to return tokens from my list instead
                      of\n> tokens from the file? Or would that be going about it
                      the wrong way?\n\nYou could do it by writing your own yylex()
                      function which in turn\ninterfaced to the 'real' lexer function
                      generated by lex (you can\nspecify and alternate name for the
                      generated yylex() - see the man\nfiles).\n\n> Maybe someone
                      could point me to a lex & yacc tutorial that includes\n> writing
                      an interpreted language that allowes user defined functions\n>
                      written in that language, since that is basically what I'm trying
                      to do\n> myself.\n\nIf you're interested in writing languages
                      in general, I think the Dragon\nbook is still the classic (although
                      a bit dated in some areas).\n\"Compilers: Principles, Techniques,
                      and Tools\" by Aho, Sethi, and Ullman\nfrom Addison-Wesley.
                      If you want to learn more about lex and yacc (flex\nand bison
                      are the GNU versions) try checking out \"lex & yacc\" by Levine,\nMason,
                      and Brown from O'Reilly\n\n>                      -=-=- Christer
                      Enfors -=-=-\n> \n>        \"I do my music in pure machine code
                      using an assembler.\"\n>                             - Rob Hubbard\n>
                      \n\n--\n_/_ Per Vognsen <vognsen@mindless.com> (C++ and Linux
                      Programmer)\n /  \"It was a hobbit hole, and that meant comfort.\"
                      - JRR Tolkien\n\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    epilogue: 
                    preamble: 
                message_id: !ruby/object:MessageId
                  raw: "[invalid or missing message id]"
                subject: !ruby/object:Subject
                  original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                from: Per Vognsen <vognsen@mindless.com>
                references: []
                date: 2000-01-01 15:39:17.000000000 Z
                no_archive: false
              call_number: !ruby/object:CallNumber
                str: Jzn75usq
              source: archive
              list: !ruby/object:List
                slug: mud-dev
                name: 
                description: 
                homepage: 
                footer: 
              message_id: *31
            parent: *28
            children: []
          - &448 !ruby/object:MessageContainer
            key: &32 !ruby/object:MessageId
              raw: 00bj7qMq@generated-message-id.chibrary.org
            value: !ruby/object:Message
              email: !ruby/object:Email
                raw: "From: Christer Enfors <enfors@swipnet.se>\nDate: Sat, 1 Jan
                  2000 20:52:39 +0100 (CET)\nSubject: Re: [MUD-Dev] Storing tokens
                  with flex & bison\n\nOn Sat, 1 Jan 2000, Per Vognsen wrote:\n\n>
                  Christer Enfors spake thusly:\n> > When flex reads a file, would
                  it be a good idea to store the tokens\n> > returned from yylex()
                  in a list? I was thinking one list for each function\n> > definition,
                  and then having bison read from that list when executing that\n>
                  > function, instead of reading directly from the file using flex?\n>
                  \n> What I think you'd rather want to do here is to use some intermediate\n>
                  form for storage - it would be completely irrational to scan, parse
                  and\n> interpret the code each time you want to execute it. For
                  this task you\n> can use an AST (abtract syntax syntax), byte-code
                  (usually generated\n> from some other form, like ASTs), or other
                  even more exotic options.\n\nOh. I was under the impression that
                  my stored linked list of tokes was\nenough to be considered an \"intermediate
                  format\", and that simply\ninterpreting that list at runtime was
                  ok?\n\n> > If so, how would I get yylex() to return tokens from
                  my list instead of\n> > tokens from the file? Or would that be going
                  about it the wrong way?\n> \n> You could do it by writing your own
                  yylex() function which in turn\n> interfaced to the 'real' lexer
                  function generated by lex (you can\n> specify and alternate name
                  for the generated yylex() - see the man\n> files).\n\nYou can specify
                  an alternate name? Yes, that should work, thanks.\n\n> > Maybe someone
                  could point me to a lex & yacc tutorial that includes\n> > writing
                  an interpreted language that allowes user defined functions\n> >
                  written in that language, since that is basically what I'm trying
                  to do\n> > myself.\n> \n> If you're interested in writing languages
                  in general, I think the Dragon\n> book is still the classic (although
                  a bit dated in some areas).\n> \"Compilers: Principles, Techniques,
                  and Tools\" by Aho, Sethi, and Ullman\n> from Addison-Wesley.\n\nGot
                  it within arm's reach on my desk at all times. I'm about one third
                  on\nmy way through it (skipping the low level stuff, like how to
                  implement\nwhat lex implements for me).\n\n> If you want to learn
                  more about lex and yacc (flex\n> and bison are the GNU versions)
                  try checking out \"lex & yacc\" by Levine,\n> Mason, and Brown from
                  O'Reilly\n\nRead it. It's right here next to the Dragon book. The
                  problem with that\nbook IMHO is that it doesn't show how to do what
                  I want to do - a language\nthat supports user defined functions.\n\n--\n\t
                  \            -=-=- Christer Enfors -=-=-\n\n       \"I do my music
                  in pure machine code using an assembler.\"\n\t\t\t    - Rob Hubbard\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                header: !ruby/object:Headers
                  rmail: !ruby/object:RMail::Message
                    header: !ruby/object:RMail::Header
                      fields:
                      - !ruby/object:RMail::Header::Field
                        raw: 'From: Christer Enfors <enfors@swipnet.se>'
                        name: From
                        value: Christer Enfors <enfors@swipnet.se>
                      - !ruby/object:RMail::Header::Field
                        raw: 'Date: Sat, 1 Jan 2000 20:52:39 +0100 (CET)'
                        name: Date
                        value: Sat, 1 Jan 2000 20:52:39 +0100 (CET)
                      - !ruby/object:RMail::Header::Field
                        raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex & bison'
                        name: Subject
                        value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                      mbox_from: 
                    body: "On Sat, 1 Jan 2000, Per Vognsen wrote:\n\n> Christer Enfors
                      spake thusly:\n> > When flex reads a file, would it be a good
                      idea to store the tokens\n> > returned from yylex() in a list?
                      I was thinking one list for each function\n> > definition, and
                      then having bison read from that list when executing that\n>
                      > function, instead of reading directly from the file using
                      flex?\n> \n> What I think you'd rather want to do here is to
                      use some intermediate\n> form for storage - it would be completely
                      irrational to scan, parse and\n> interpret the code each time
                      you want to execute it. For this task you\n> can use an AST
                      (abtract syntax syntax), byte-code (usually generated\n> from
                      some other form, like ASTs), or other even more exotic options.\n\nOh.
                      I was under the impression that my stored linked list of tokes
                      was\nenough to be considered an \"intermediate format\", and
                      that simply\ninterpreting that list at runtime was ok?\n\n>
                      > If so, how would I get yylex() to return tokens from my list
                      instead of\n> > tokens from the file? Or would that be going
                      about it the wrong way?\n> \n> You could do it by writing your
                      own yylex() function which in turn\n> interfaced to the 'real'
                      lexer function generated by lex (you can\n> specify and alternate
                      name for the generated yylex() - see the man\n> files).\n\nYou
                      can specify an alternate name? Yes, that should work, thanks.\n\n>
                      > Maybe someone could point me to a lex & yacc tutorial that
                      includes\n> > writing an interpreted language that allowes user
                      defined functions\n> > written in that language, since that
                      is basically what I'm trying to do\n> > myself.\n> \n> If you're
                      interested in writing languages in general, I think the Dragon\n>
                      book is still the classic (although a bit dated in some areas).\n>
                      \"Compilers: Principles, Techniques, and Tools\" by Aho, Sethi,
                      and Ullman\n> from Addison-Wesley.\n\nGot it within arm's reach
                      on my desk at all times. I'm about one third on\nmy way through
                      it (skipping the low level stuff, like how to implement\nwhat
                      lex implements for me).\n\n> If you want to learn more about
                      lex and yacc (flex\n> and bison are the GNU versions) try checking
                      out \"lex & yacc\" by Levine,\n> Mason, and Brown from O'Reilly\n\nRead
                      it. It's right here next to the Dragon book. The problem with
                      that\nbook IMHO is that it doesn't show how to do what I want
                      to do - a language\nthat supports user defined functions.\n\n--\n\t
                      \            -=-=- Christer Enfors -=-=-\n\n       \"I do my
                      music in pure machine code using an assembler.\"\n\t\t\t    -
                      Rob Hubbard\n\n\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    epilogue: 
                    preamble: 
                message_id: !ruby/object:MessageId
                  raw: "[invalid or missing message id]"
                subject: !ruby/object:Subject
                  original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                from: Christer Enfors <enfors@swipnet.se>
                references: []
                date: 2000-01-01 19:52:39.000000000 Z
                no_archive: false
              call_number: !ruby/object:CallNumber
                str: 00bj7qMq
              source: archive
              list: !ruby/object:List
                slug: mud-dev
                name: 
                description: 
                homepage: 
                footer: 
              message_id: *32
            parent: *28
            children: []
          - &456 !ruby/object:MessageContainer
            key: &33 !ruby/object:MessageId
              raw: 00bj5f1M@generated-message-id.chibrary.org
            value: !ruby/object:Message
              email: !ruby/object:Email
                raw: "From: Chris Turner <christ@rd.bbc.co.uk>\nDate: Sat, 1 Jan 2000
                  17:47:58 +0000 (GMT)\nSubject: Re: [MUD-Dev] Storing tokens with
                  flex & bison\n\nOn Fri, 31 Dec 1999, Christer Enfors wrote:\n\n>
                  I'm not sure if this is the proper forum for this kind of question,
                  but I\n> can't find any mailing lists for lex & yacc, and it is
                  a MUD I'm\n> developing...\n> \n> I want to write a MUD server,
                  and for this I want to develop a LPC-like\n> interpreting programming
                  (or call it scripting if you like) language with\n> flex and bison.\n>
                  \n> When flex reads a file, would it be a good idea to store the
                  tokens\n> returned from yylex() in a list? I was thinking one list
                  for each function\n> definition, and then having bison read from
                  that list when executing that\n> function, instead of reading directly
                  from the file using flex?\n> \n> If so, how would I get yylex()
                  to return tokens from my list instead of\n> tokens from the file?
                  Or would that be going about it the wrong way?\n\nTo get yylex()
                  to return the tokens from the list, you'd have replace the\ninput
                  routine it uses, with one that fakes input based upon the list of\ntokens.
                  \ This is more hassle than it's worth *8).\n\nThe correct/easiest
                  way to do it, is to get bison to call a wrapper function\nthat either
                  calls yylex() or pops the next token off the list.\n\n> Or should
                  I simply read the function definition from the file with flex\n>
                  each time I want to execute the function?\n\nWell this would always
                  work with what you have already.  It might be a bit\nslower.  If
                  you want a real speed increase, you would be better off compiling\nthe
                  function into some form of byte-code, which could be run though
                  without\nneeding to parse anything.\n\n> Maybe someone could point
                  me to a lex & yacc tutorial that includes\n> writing an interpreted
                  language that allowes user defined functions\n> written in that
                  language, since that is basically what I'm trying to do\n> myself.\n\nThe
                  O'Reilly Lex & Yacc book is well written and contains many tutorials.\n\nChris\n--\nchrist@rd.bbc.co.uk
                  \  #include <stddisclaimer.h>   http://www.fysh.org/~maddy\n\n   \"So
                  this is really me? A no-style gimbo with teeth druids could use
                  as a\n       place of worship\" - Duaine Dibley (Red Dwarf - \"Back
                  to Reality\")\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                header: !ruby/object:Headers
                  rmail: !ruby/object:RMail::Message
                    header: !ruby/object:RMail::Header
                      fields:
                      - !ruby/object:RMail::Header::Field
                        raw: 'From: Chris Turner <christ@rd.bbc.co.uk>'
                        name: From
                        value: Chris Turner <christ@rd.bbc.co.uk>
                      - !ruby/object:RMail::Header::Field
                        raw: 'Date: Sat, 1 Jan 2000 17:47:58 +0000 (GMT)'
                        name: Date
                        value: Sat, 1 Jan 2000 17:47:58 +0000 (GMT)
                      - !ruby/object:RMail::Header::Field
                        raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex & bison'
                        name: Subject
                        value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                      mbox_from: 
                    body: "On Fri, 31 Dec 1999, Christer Enfors wrote:\n\n> I'm not
                      sure if this is the proper forum for this kind of question,
                      but I\n> can't find any mailing lists for lex & yacc, and it
                      is a MUD I'm\n> developing...\n> \n> I want to write a MUD server,
                      and for this I want to develop a LPC-like\n> interpreting programming
                      (or call it scripting if you like) language with\n> flex and
                      bison.\n> \n> When flex reads a file, would it be a good idea
                      to store the tokens\n> returned from yylex() in a list? I was
                      thinking one list for each function\n> definition, and then
                      having bison read from that list when executing that\n> function,
                      instead of reading directly from the file using flex?\n> \n>
                      If so, how would I get yylex() to return tokens from my list
                      instead of\n> tokens from the file? Or would that be going about
                      it the wrong way?\n\nTo get yylex() to return the tokens from
                      the list, you'd have replace the\ninput routine it uses, with
                      one that fakes input based upon the list of\ntokens.  This is
                      more hassle than it's worth *8).\n\nThe correct/easiest way
                      to do it, is to get bison to call a wrapper function\nthat either
                      calls yylex() or pops the next token off the list.\n\n> Or should
                      I simply read the function definition from the file with flex\n>
                      each time I want to execute the function?\n\nWell this would
                      always work with what you have already.  It might be a bit\nslower.
                      \ If you want a real speed increase, you would be better off
                      compiling\nthe function into some form of byte-code, which could
                      be run though without\nneeding to parse anything.\n\n> Maybe
                      someone could point me to a lex & yacc tutorial that includes\n>
                      writing an interpreted language that allowes user defined functions\n>
                      written in that language, since that is basically what I'm trying
                      to do\n> myself.\n\nThe O'Reilly Lex & Yacc book is well written
                      and contains many tutorials.\n\nChris\n--\nchrist@rd.bbc.co.uk
                      \  #include <stddisclaimer.h>   http://www.fysh.org/~maddy\n\n
                      \  \"So this is really me? A no-style gimbo with teeth druids
                      could use as a\n       place of worship\" - Duaine Dibley (Red
                      Dwarf - \"Back to Reality\")\n\n\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    epilogue: 
                    preamble: 
                message_id: !ruby/object:MessageId
                  raw: "[invalid or missing message id]"
                subject: !ruby/object:Subject
                  original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                from: Chris Turner <christ@rd.bbc.co.uk>
                references: []
                date: 2000-01-01 17:47:58.000000000 Z
                no_archive: false
              call_number: !ruby/object:CallNumber
                str: 00bj5f1M
              source: archive
              list: !ruby/object:List
                slug: mud-dev
                name: 
                description: 
                homepage: 
                footer: 
              message_id: *33
            parent: *28
            children: []
          - &36 !ruby/object:MessageContainer
            key: &34 !ruby/object:MessageId
              raw: 00uTmqCO@generated-message-id.chibrary.org
            value: !ruby/object:Message
              email: !ruby/object:Email
                raw: "From: Christer Enfors <enfors@swipnet.se>\nDate: Sat, 1 Jan
                  2000 21:01:11 +0100 (CET)\nSubject: Re: [MUD-Dev] Storing tokens
                  with flex & bison\n\nOn Sat, 1 Jan 2000, J C Lawrence wrote:\n\n>
                  On Fri, 31 Dec 1999 02:13:07 +0100 (CET) \n> Christer Enfors <enfors@swipnet.se>
                  wrote:\n> \n> > I want to write a MUD server, and for this I want
                  to develop a\n> > LPC-like interpreting programming (or call it
                  scripting if you\n> > like) language with flex and bison.\n> \n>
                  I would strongly suggest having a look at ANTLR (used to be PCCTS).\n>
                  (You can find links to ANTLR and other bits in the Library at\n>
                  Kanga.Nu) At one time there was a fair bit of discussion here on\n>
                  PCCTS with Jeff Kesselman from the Ten Network.  Flex and Bison
                  are\n> good tools, its just that there are better ones available.
                  \ ANTLR is\n> not the only other alternative\n\nI have no idea what
                  ANTLR is, but I'll take a look. Thanks.\n\n> > Maybe someone could
                  point me to a lex & yacc tutorial that\n> > includes writing an
                  interpreted language that allowes user defined\n> > functions written
                  in that language, since that is basically what\n> > I'm trying to
                  do myself.\n> \n> Frankly, just buy the O'Reilly book.  Now.  It
                  will save you untold\n> pain.\n\nI already did, but as far as I
                  can tell, it doesn't explain how to do this\nsort of thing.\n\n>
                  You may also like to read the Crenshaw compiler tutorial at: \n>
                  \n>   ftp://ftp.kanga.nu/pub/Devel/Docs/Crenshaw.Compiler.Tutorial.zip\n\nCool,
                  I'll take a look. Thanks!\n\n--\n\t             -=-=- Christer Enfors
                  -=-=-\n\n       \"I do my music in pure machine code using an assembler.\"\n\t\t\t
                  \   - Rob Hubbard\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                header: !ruby/object:Headers
                  rmail: !ruby/object:RMail::Message
                    header: !ruby/object:RMail::Header
                      fields:
                      - !ruby/object:RMail::Header::Field
                        raw: 'From: Christer Enfors <enfors@swipnet.se>'
                        name: From
                        value: Christer Enfors <enfors@swipnet.se>
                      - !ruby/object:RMail::Header::Field
                        raw: 'Date: Sat, 1 Jan 2000 21:01:11 +0100 (CET)'
                        name: Date
                        value: Sat, 1 Jan 2000 21:01:11 +0100 (CET)
                      - !ruby/object:RMail::Header::Field
                        raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex & bison'
                        name: Subject
                        value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                      mbox_from: 
                    body: "On Sat, 1 Jan 2000, J C Lawrence wrote:\n\n> On Fri, 31
                      Dec 1999 02:13:07 +0100 (CET) \n> Christer Enfors <enfors@swipnet.se>
                      wrote:\n> \n> > I want to write a MUD server, and for this I
                      want to develop a\n> > LPC-like interpreting programming (or
                      call it scripting if you\n> > like) language with flex and bison.\n>
                      \n> I would strongly suggest having a look at ANTLR (used to
                      be PCCTS).\n> (You can find links to ANTLR and other bits in
                      the Library at\n> Kanga.Nu) At one time there was a fair bit
                      of discussion here on\n> PCCTS with Jeff Kesselman from the
                      Ten Network.  Flex and Bison are\n> good tools, its just that
                      there are better ones available.  ANTLR is\n> not the only other
                      alternative\n\nI have no idea what ANTLR is, but I'll take a
                      look. Thanks.\n\n> > Maybe someone could point me to a lex &
                      yacc tutorial that\n> > includes writing an interpreted language
                      that allowes user defined\n> > functions written in that language,
                      since that is basically what\n> > I'm trying to do myself.\n>
                      \n> Frankly, just buy the O'Reilly book.  Now.  It will save
                      you untold\n> pain.\n\nI already did, but as far as I can tell,
                      it doesn't explain how to do this\nsort of thing.\n\n> You may
                      also like to read the Crenshaw compiler tutorial at: \n> \n>
                      \  ftp://ftp.kanga.nu/pub/Devel/Docs/Crenshaw.Compiler.Tutorial.zip\n\nCool,
                      I'll take a look. Thanks!\n\n--\n\t             -=-=- Christer
                      Enfors -=-=-\n\n       \"I do my music in pure machine code
                      using an assembler.\"\n\t\t\t    - Rob Hubbard\n\n\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    epilogue: 
                    preamble: 
                message_id: !ruby/object:MessageId
                  raw: "[invalid or missing message id]"
                subject: !ruby/object:Subject
                  original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                from: Christer Enfors <enfors@swipnet.se>
                references: []
                date: 2000-01-01 20:01:11.000000000 Z
                no_archive: false
              call_number: !ruby/object:CallNumber
                str: 00uTmqCO
              source: archive
              list: !ruby/object:List
                slug: mud-dev
                name: 
                description: 
                homepage: 
                footer: 
              message_id: *34
            parent: *28
            children:
            - &38 !ruby/object:MessageContainer
              key: &35 !ruby/object:MessageId
                raw: 00uTkckq@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Sat, 01 Jan 2000
                    11:29:00 -0800\nSubject: Re: [MUD-Dev] Storing tokens with flex
                    & bison\n\nOn Fri, 31 Dec 1999 02:13:07 +0100 (CET) \nChrister
                    Enfors <enfors@swipnet.se> wrote:\n\n> I want to write a MUD server,
                    and for this I want to develop a\n> LPC-like interpreting programming
                    (or call it scripting if you\n> like) language with flex and bison.\n\nI
                    would strongly suggest having a look at ANTLR (used to be PCCTS).\n(You
                    can find links to ANTLR and other bits in the Library at\nKanga.Nu)
                    At one time there was a fair bit of discussion here on\nPCCTS
                    with Jeff Kesselman from the Ten Network.  Flex and Bison are\ngood
                    tools, its just that there are better ones available.  ANTLR is\nnot
                    the only other alternative\n\n> Maybe someone could point me to
                    a lex & yacc tutorial that\n> includes writing an interpreted
                    language that allowes user defined\n> functions written in that
                    language, since that is basically what\n> I'm trying to do myself.\n\nFrankly,
                    just buy the O'Reilly book.  Now.  It will save you untold\npain.
                    \ You may also like to read the Crenshaw compiler tutorial at:
                    \n\n  ftp://ftp.kanga.nu/pub/Devel/Docs/Crenshaw.Compiler.Tutorial.zip\n\nIt
                    was posted here a while ago by Jon Lambert if you wish to read
                    it\nthat way.\n\n--\nJ C Lawrence                                 Home:
                    claw@kanga.nu\n----------(*)                              Other:
                    coder@kanga.nu\n--=| A man is as sane as he is dangerous to his
                    environment |=--\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: J C Lawrence <claw@kanga.nu>'
                          name: From
                          value: J C Lawrence <claw@kanga.nu>
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Sat, 01 Jan 2000 11:29:00 -0800'
                          name: Date
                          value: Sat, 01 Jan 2000 11:29:00 -0800
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex &
                            bison'
                          name: Subject
                          value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                        mbox_from: 
                      body: "On Fri, 31 Dec 1999 02:13:07 +0100 (CET) \nChrister Enfors
                        <enfors@swipnet.se> wrote:\n\n> I want to write a MUD server,
                        and for this I want to develop a\n> LPC-like interpreting
                        programming (or call it scripting if you\n> like) language
                        with flex and bison.\n\nI would strongly suggest having a
                        look at ANTLR (used to be PCCTS).\n(You can find links to
                        ANTLR and other bits in the Library at\nKanga.Nu) At one time
                        there was a fair bit of discussion here on\nPCCTS with Jeff
                        Kesselman from the Ten Network.  Flex and Bison are\ngood
                        tools, its just that there are better ones available.  ANTLR
                        is\nnot the only other alternative\n\n> Maybe someone could
                        point me to a lex & yacc tutorial that\n> includes writing
                        an interpreted language that allowes user defined\n> functions
                        written in that language, since that is basically what\n>
                        I'm trying to do myself.\n\nFrankly, just buy the O'Reilly
                        book.  Now.  It will save you untold\npain.  You may also
                        like to read the Crenshaw compiler tutorial at: \n\n  ftp://ftp.kanga.nu/pub/Devel/Docs/Crenshaw.Compiler.Tutorial.zip\n\nIt
                        was posted here a while ago by Jon Lambert if you wish to
                        read it\nthat way.\n\n--\nJ C Lawrence                                 Home:
                        claw@kanga.nu\n----------(*)                              Other:
                        coder@kanga.nu\n--=| A man is as sane as he is dangerous to
                        his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                        maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                  from: J C Lawrence <claw@kanga.nu>
                  references: []
                  date: 2000-01-01 19:29:00.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: 00uTkckq
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *35
              parent: *36
              children:
              - &40 !ruby/object:MessageContainer
                key: &37 !ruby/object:MessageId
                  raw: 00bj5dya@generated-message-id.chibrary.org
                value: !ruby/object:Message
                  email: !ruby/object:Email
                    raw: "From: Ola Fosheim Gr��stad <olag@ifi.uio.no>\nDate: Sun,
                      02 Jan 2000 00:33:00 +0100\nSubject: Re: [MUD-Dev] Storing tokens
                      with flex & bison\n\nJ C Lawrence wrote:\r\n> I would strongly
                      suggest having a look at ANTLR (used to be PCCTS).\r\n> (You
                      can find links to ANTLR and other bits in the Library at\r\n>
                      Kanga.Nu) At one time there was a fair bit of discussion here
                      on\r\n> PCCTS with Jeff Kesselman from the Ten Network.  Flex
                      and Bison are\r\n> good tools, its just that there are better
                      ones available.  ANTLR is\r\n> not the only other alternative\r\n\r\nThis
                      list has always been somewhat tech centered, or should I say\r\ntech-loving?
                      Granted I have never got any close to PCCTS than looking at\r\nsomebodyelse's
                      use of it, but the output was less intelligible than a\r\n(not
                      widely accessible) OO parser system I have used. The caveat
                      with\r\nany such system is that you have to learn them and their
                      potential\r\nweirdnesses.\r\n\r\nIf speed isn't paramount and
                      you don't need the most complicated grammar\r\nin the world
                      then I wonder if not a recursive decent parser combined\r\nwith
                      a fairly direct OO representation for execution would do wonders\r\nfor
                      many MUDserver startups.\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                    header: !ruby/object:Headers
                      rmail: !ruby/object:RMail::Message
                        header: !ruby/object:RMail::Header
                          fields:
                          - !ruby/object:RMail::Header::Field
                            raw: 'From: Ola Fosheim Gr��stad <olag@ifi.uio.no>'
                            name: From
                            value: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                          - !ruby/object:RMail::Header::Field
                            raw: 'Date: Sun, 02 Jan 2000 00:33:00 +0100'
                            name: Date
                            value: Sun, 02 Jan 2000 00:33:00 +0100
                          - !ruby/object:RMail::Header::Field
                            raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex
                              & bison'
                            name: Subject
                            value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                          mbox_from: 
                        body: "J C Lawrence wrote:\r\n> I would strongly suggest having
                          a look at ANTLR (used to be PCCTS).\r\n> (You can find links
                          to ANTLR and other bits in the Library at\r\n> Kanga.Nu)
                          At one time there was a fair bit of discussion here on\r\n>
                          PCCTS with Jeff Kesselman from the Ten Network.  Flex and
                          Bison are\r\n> good tools, its just that there are better
                          ones available.  ANTLR is\r\n> not the only other alternative\r\n\r\nThis
                          list has always been somewhat tech centered, or should I
                          say\r\ntech-loving? Granted I have never got any close to
                          PCCTS than looking at\r\nsomebodyelse's use of it, but the
                          output was less intelligible than a\r\n(not widely accessible)
                          OO parser system I have used. The caveat with\r\nany such
                          system is that you have to learn them and their potential\r\nweirdnesses.\r\n\r\nIf
                          speed isn't paramount and you don't need the most complicated
                          grammar\r\nin the world then I wonder if not a recursive
                          decent parser combined\r\nwith a fairly direct OO representation
                          for execution would do wonders\r\nfor many MUDserver startups.\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                          maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                        epilogue: 
                        preamble: 
                    message_id: !ruby/object:MessageId
                      raw: "[invalid or missing message id]"
                    subject: !ruby/object:Subject
                      original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                    from: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                    references: []
                    date: 2000-01-01 23:33:00.000000000 Z
                    no_archive: false
                  call_number: !ruby/object:CallNumber
                    str: 00bj5dya
                  source: archive
                  list: !ruby/object:List
                    slug: mud-dev
                    name: 
                    description: 
                    homepage: 
                    footer: 
                  message_id: *37
                parent: *38
                children:
                - &42 !ruby/object:MessageContainer
                  key: &39 !ruby/object:MessageId
                    raw: 00bj5f2e@generated-message-id.chibrary.org
                  value: !ruby/object:Message
                    email: !ruby/object:Email
                      raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Sat, 01 Jan
                        2000 20:45:48 -0800\nSubject: Re: [MUD-Dev] Storing tokens
                        with flex & bison\n\nOn Sun, 02 Jan 2000 00:33:00 +0100 \nolag
                        \ <Ola> wrote:\n\n> If speed isn't paramount and you don't
                        need the most complicated\n> grammar in the world then I wonder
                        if not a recursive decent\n> parser combined with a fairly
                        direct OO representation for\n> execution would do wonders
                        for many MUDserver startups.\n\nWalter Bright, the author
                        of the Datalight C compiler, and later the\nSymmantec nee
                        Zortech nee Zorland C++ compiler (the first native C++\ncompiler
                        on the planet (ie not CFRONT based)) ysed a recursive\ndecent
                        parser for his C++ and C compilers.  Bloody good compilers\nthey
                        were too BTW.  There are some long and fairly amusing (if\nbitter)
                        threads in comp.lang.c++ (IIRC correctly) on the area and\nhis
                        assertion that C++ submitted reasonably well (then) to recursive\ndecent
                        parsing.\n\nI've used recursive decent parsing for all my
                        micro-languages for\nthe simple reason that I was never willing
                        to confront lex/yacc or\ntheir derivatives and I'd done all
                        my interesting language work\nbefore I ran across PCCTS et
                        al.  Recursive decent parsers are easy\nto do, easy to get
                        reasonably right as long as your language is\nregular, and
                        of course horrible to optimise or put a proper VM\nunder.
                        \ That all said, I agree, given current CPU speeds, for\nhobbyest
                        games and typical activity rates on your server (say a few\nhundred
                        users etc) there is little reason to not use a recursive\ndecent
                        parser.\n\n--\nJ C Lawrence                                 Home:
                        claw@kanga.nu\n----------(*)                              Other:
                        coder@kanga.nu\n--=| A man is as sane as he is dangerous to
                        his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                        maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                      header: !ruby/object:Headers
                        rmail: !ruby/object:RMail::Message
                          header: !ruby/object:RMail::Header
                            fields:
                            - !ruby/object:RMail::Header::Field
                              raw: 'From: J C Lawrence <claw@kanga.nu>'
                              name: From
                              value: J C Lawrence <claw@kanga.nu>
                            - !ruby/object:RMail::Header::Field
                              raw: 'Date: Sat, 01 Jan 2000 20:45:48 -0800'
                              name: Date
                              value: Sat, 01 Jan 2000 20:45:48 -0800
                            - !ruby/object:RMail::Header::Field
                              raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex
                                & bison'
                              name: Subject
                              value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                            mbox_from: 
                          body: "On Sun, 02 Jan 2000 00:33:00 +0100 \nolag  <Ola>
                            wrote:\n\n> If speed isn't paramount and you don't need
                            the most complicated\n> grammar in the world then I wonder
                            if not a recursive decent\n> parser combined with a fairly
                            direct OO representation for\n> execution would do wonders
                            for many MUDserver startups.\n\nWalter Bright, the author
                            of the Datalight C compiler, and later the\nSymmantec
                            nee Zortech nee Zorland C++ compiler (the first native
                            C++\ncompiler on the planet (ie not CFRONT based)) ysed
                            a recursive\ndecent parser for his C++ and C compilers.
                            \ Bloody good compilers\nthey were too BTW.  There are
                            some long and fairly amusing (if\nbitter) threads in comp.lang.c++
                            (IIRC correctly) on the area and\nhis assertion that C++
                            submitted reasonably well (then) to recursive\ndecent
                            parsing.\n\nI've used recursive decent parsing for all
                            my micro-languages for\nthe simple reason that I was never
                            willing to confront lex/yacc or\ntheir derivatives and
                            I'd done all my interesting language work\nbefore I ran
                            across PCCTS et al.  Recursive decent parsers are easy\nto
                            do, easy to get reasonably right as long as your language
                            is\nregular, and of course horrible to optimise or put
                            a proper VM\nunder.  That all said, I agree, given current
                            CPU speeds, for\nhobbyest games and typical activity rates
                            on your server (say a few\nhundred users etc) there is
                            little reason to not use a recursive\ndecent parser.\n\n--\nJ
                            C Lawrence                                 Home: claw@kanga.nu\n----------(*)
                            \                             Other: coder@kanga.nu\n--=|
                            A man is as sane as he is dangerous to his environment
                            |=--\n\n\n_______________________________________________\nMUD-Dev
                            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                          epilogue: 
                          preamble: 
                      message_id: !ruby/object:MessageId
                        raw: "[invalid or missing message id]"
                      subject: !ruby/object:Subject
                        original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                      from: J C Lawrence <claw@kanga.nu>
                      references: []
                      date: 2000-01-02 04:45:48.000000000 Z
                      no_archive: false
                    call_number: !ruby/object:CallNumber
                      str: 00bj5f2e
                    source: archive
                    list: !ruby/object:List
                      slug: mud-dev
                      name: 
                      description: 
                      homepage: 
                      footer: 
                    message_id: *39
                  parent: *40
                  children:
                  - &44 !ruby/object:MessageContainer
                    key: &41 !ruby/object:MessageId
                      raw: Jzn787Hc@generated-message-id.chibrary.org
                    value: !ruby/object:Message
                      email: !ruby/object:Email
                        raw: |
                          From: cg@ami-cg.GraySage.Edmonton.AB.CA
                          Date: Sun, 2 Jan 2000 10:58:02 -0700
                          Subject: Re: [MUD-Dev] Storing tokens with flex & bison

                          [J C Lawrence:]

                          > I've used recursive decent parsing for all my micro-languages for
                          > the simple reason that I was never willing to confront lex/yacc or
                          > their derivatives and I'd done all my interesting language work
                          > before I ran across PCCTS et al.  Recursive decent parsers are easy
                          > to do, easy to get reasonably right as long as your language is
                          > regular, and of course horrible to optimise or put a proper VM
                          > under.  That all said, I agree, given current CPU speeds, for
                          > hobbyest games and typical activity rates on your server (say a few
                          > hundred users etc) there is little reason to not use a recursive
                          > decent parser.

                          I'm in a similar situation - I did my first language before I'd heard of
                          lex/yacc, let alone ANTLR/PCCTS. So, I've never learned any of those
                          tools. This includes doing an ANSI C compiler at work several years ago.

                          JCL: why do you say recursive descent makes it hard to put a VM under a
                          language? Lexing/parsing is pretty independent of execution. My AmigaMUD
                          system uses recursive descent for its programming language, and that had
                          no effect on being able to put a byte-code machine into the system. It
                          had never occurred to me to even think about any effect. Hmm. Perhaps
                          I'm misparsing the conjunction in your sentence?

                          Byte-code execution really only makes sense, I believe, for a strongly
                          typed language. If run-time checks and conversions are needed, they will
                          likely cost far more time than the basic interpretation of the code, and
                          so going to byte-code instead of staying with something more direct, could
                          be a waste of time, in that byte-code won't speed execution up much.

                          --
                          Don't design inefficiency in - it'll happen in the implementation.

                          Chris Gray     cg@ami-cg.GraySage.Edmonton.AB.CA
                                         http://www.GraySage.Edmonton.AB.CA/cg/



                          _______________________________________________
                          MUD-Dev maillist  -  MUD-Dev@kanga.nu
                          http://www.kanga.nu/lists/listinfo/mud-dev
                        header: !ruby/object:Headers
                          rmail: !ruby/object:RMail::Message
                            header: !ruby/object:RMail::Header
                              fields:
                              - !ruby/object:RMail::Header::Field
                                raw: 'From: cg@ami-cg.GraySage.Edmonton.AB.CA'
                                name: From
                                value: cg@ami-cg.GraySage.Edmonton.AB.CA
                              - !ruby/object:RMail::Header::Field
                                raw: 'Date: Sun, 2 Jan 2000 10:58:02 -0700'
                                name: Date
                                value: Sun, 2 Jan 2000 10:58:02 -0700
                              - !ruby/object:RMail::Header::Field
                                raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex
                                  & bison'
                                name: Subject
                                value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                              mbox_from: 
                            body: |
                              [J C Lawrence:]

                              > I've used recursive decent parsing for all my micro-languages for
                              > the simple reason that I was never willing to confront lex/yacc or
                              > their derivatives and I'd done all my interesting language work
                              > before I ran across PCCTS et al.  Recursive decent parsers are easy
                              > to do, easy to get reasonably right as long as your language is
                              > regular, and of course horrible to optimise or put a proper VM
                              > under.  That all said, I agree, given current CPU speeds, for
                              > hobbyest games and typical activity rates on your server (say a few
                              > hundred users etc) there is little reason to not use a recursive
                              > decent parser.

                              I'm in a similar situation - I did my first language before I'd heard of
                              lex/yacc, let alone ANTLR/PCCTS. So, I've never learned any of those
                              tools. This includes doing an ANSI C compiler at work several years ago.

                              JCL: why do you say recursive descent makes it hard to put a VM under a
                              language? Lexing/parsing is pretty independent of execution. My AmigaMUD
                              system uses recursive descent for its programming language, and that had
                              no effect on being able to put a byte-code machine into the system. It
                              had never occurred to me to even think about any effect. Hmm. Perhaps
                              I'm misparsing the conjunction in your sentence?

                              Byte-code execution really only makes sense, I believe, for a strongly
                              typed language. If run-time checks and conversions are needed, they will
                              likely cost far more time than the basic interpretation of the code, and
                              so going to byte-code instead of staying with something more direct, could
                              be a waste of time, in that byte-code won't speed execution up much.

                              --
                              Don't design inefficiency in - it'll happen in the implementation.

                              Chris Gray     cg@ami-cg.GraySage.Edmonton.AB.CA
                                             http://www.GraySage.Edmonton.AB.CA/cg/



                              _______________________________________________
                              MUD-Dev maillist  -  MUD-Dev@kanga.nu
                              http://www.kanga.nu/lists/listinfo/mud-dev
                            epilogue: 
                            preamble: 
                        message_id: !ruby/object:MessageId
                          raw: "[invalid or missing message id]"
                        subject: !ruby/object:Subject
                          original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                        from: cg@ami-cg.GraySage.Edmonton.AB.CA
                        references: []
                        date: 2000-01-02 17:58:02.000000000 Z
                        no_archive: false
                      call_number: !ruby/object:CallNumber
                        str: Jzn787Hc
                      source: archive
                      list: !ruby/object:List
                        slug: mud-dev
                        name: 
                        description: 
                        homepage: 
                        footer: 
                      message_id: *41
                    parent: *42
                    children:
                    - &449 !ruby/object:MessageContainer
                      key: &43 !ruby/object:MessageId
                        raw: 00IyQgFs@generated-message-id.chibrary.org
                      value: !ruby/object:Message
                        email: !ruby/object:Email
                          raw: "From: Ola Fosheim Gr��stad <olag@ifi.uio.no>\nDate:
                            Mon, 03 Jan 2000 14:17:09 +0100\nSubject: Re: [MUD-Dev]
                            Storing tokens with flex & bison\n\nJ C Lawrence wrote:\r\n>
                            before I ran across PCCTS et al.  Recursive decent parsers
                            are easy\r\n> to do, easy to get reasonably right as long
                            as your language is\r\n> regular,\r\n\r\nYou don't need
                            a stack to recognize a regular language, but a regular\r\nlanguage
                            can't balance parentheses... You probably meant a context
                            free\r\nLL(1) grammar (=>you can decide what kind of language
                            construct you are\r\ndealing with by looking at the next
                            symbol). The parser is easy to do\r\nonce you have got
                            the grammar right. For the average mud designer it\r\nwould
                            probably be more useful to draw syntax diagrams than writing
                            a BNF\r\nspec.\r\n\r\nA recursive decent parser isn't
                            bounded by the limitations of a context\r\nfree grammar
                            of course.  You can easily determine whether a function
                            has\r\nbeen declared or not by a quick look-up. If you
                            were to do that using a\r\nformal grammar you would have
                            to use a context sensitive one.\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                            maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                          header: !ruby/object:Headers
                            rmail: !ruby/object:RMail::Message
                              header: !ruby/object:RMail::Header
                                fields:
                                - !ruby/object:RMail::Header::Field
                                  raw: 'From: Ola Fosheim Gr��stad <olag@ifi.uio.no>'
                                  name: From
                                  value: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Date: Mon, 03 Jan 2000 14:17:09 +0100'
                                  name: Date
                                  value: Mon, 03 Jan 2000 14:17:09 +0100
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Subject: Re: [MUD-Dev] Storing tokens with
                                    flex & bison'
                                  name: Subject
                                  value: 'Re: [MUD-Dev] Storing tokens with flex &
                                    bison'
                                mbox_from: 
                              body: "J C Lawrence wrote:\r\n> before I ran across
                                PCCTS et al.  Recursive decent parsers are easy\r\n>
                                to do, easy to get reasonably right as long as your
                                language is\r\n> regular,\r\n\r\nYou don't need a
                                stack to recognize a regular language, but a regular\r\nlanguage
                                can't balance parentheses... You probably meant a
                                context free\r\nLL(1) grammar (=>you can decide what
                                kind of language construct you are\r\ndealing with
                                by looking at the next symbol). The parser is easy
                                to do\r\nonce you have got the grammar right. For
                                the average mud designer it\r\nwould probably be more
                                useful to draw syntax diagrams than writing a BNF\r\nspec.\r\n\r\nA
                                recursive decent parser isn't bounded by the limitations
                                of a context\r\nfree grammar of course.  You can easily
                                determine whether a function has\r\nbeen declared
                                or not by a quick look-up. If you were to do that
                                using a\r\nformal grammar you would have to use a
                                context sensitive one.\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                                maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                              epilogue: 
                              preamble: 
                          message_id: !ruby/object:MessageId
                            raw: "[invalid or missing message id]"
                          subject: !ruby/object:Subject
                            original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                          from: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                          references: []
                          date: 2000-01-03 13:17:09.000000000 Z
                          no_archive: false
                        call_number: !ruby/object:CallNumber
                          str: 00IyQgFs
                        source: archive
                        list: !ruby/object:List
                          slug: mud-dev
                          name: 
                          description: 
                          homepage: 
                          footer: 
                        message_id: *43
                      parent: *44
                      children: []
            - &47 !ruby/object:MessageContainer
              key: &45 !ruby/object:MessageId
                raw: Jzn75vxA@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: "From: cg@ami-cg.GraySage.Edmonton.AB.CA\nDate: Sat, 1 Jan
                    2000 12:50:27 -0700\nSubject: Re: [MUD-Dev] Storing tokens with
                    flex & bison\n\n[J C Lawrence:]\n\n> Frankly, just buy the O'Reilly
                    book.  Now.  It will save you untold\n> pain.  You may also like
                    to read the Crenshaw compiler tutorial at: \n>\n>   ftp://ftp.kanga.nu/pub/Devel/Docs/Crenshaw.Compiler.Tutorial.zip\n>\n>
                    It was posted here a while ago by Jon Lambert if you wish to read
                    it\n> that way.\n\nThe other such tutorial that has been mentioned
                    here is the one I did\nseveral years ago for a long-defunct Amiga
                    magazine. That consists of\na sequence of 4 articles, and the
                    accompanying full source-code for a\nsimple compiler that emits
                    Motorola MC68000 object code. It is on my\nwebsite (it's called
                    the \"Toy\" compiler) at:\n\n    http://www.graysage.edmonton.ab.ca/cg/Compilers/Toy/index.html\n\nThis
                    was intended as an introduction to compilers for folks who knew
                    about\nprogramming, but not about compilers.\n\n--\nDon't design
                    inefficiency in - it'll happen in the implementation.\n\nChris
                    Gray     cg@ami-cg.GraySage.Edmonton.AB.CA\n               http://www.GraySage.Edmonton.AB.CA/cg/\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: cg@ami-cg.GraySage.Edmonton.AB.CA'
                          name: From
                          value: cg@ami-cg.GraySage.Edmonton.AB.CA
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Sat, 1 Jan 2000 12:50:27 -0700'
                          name: Date
                          value: Sat, 1 Jan 2000 12:50:27 -0700
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex &
                            bison'
                          name: Subject
                          value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                        mbox_from: 
                      body: "[J C Lawrence:]\n\n> Frankly, just buy the O'Reilly book.
                        \ Now.  It will save you untold\n> pain.  You may also like
                        to read the Crenshaw compiler tutorial at: \n>\n>   ftp://ftp.kanga.nu/pub/Devel/Docs/Crenshaw.Compiler.Tutorial.zip\n>\n>
                        It was posted here a while ago by Jon Lambert if you wish
                        to read it\n> that way.\n\nThe other such tutorial that has
                        been mentioned here is the one I did\nseveral years ago for
                        a long-defunct Amiga magazine. That consists of\na sequence
                        of 4 articles, and the accompanying full source-code for a\nsimple
                        compiler that emits Motorola MC68000 object code. It is on
                        my\nwebsite (it's called the \"Toy\" compiler) at:\n\n    http://www.graysage.edmonton.ab.ca/cg/Compilers/Toy/index.html\n\nThis
                        was intended as an introduction to compilers for folks who
                        knew about\nprogramming, but not about compilers.\n\n--\nDon't
                        design inefficiency in - it'll happen in the implementation.\n\nChris
                        Gray     cg@ami-cg.GraySage.Edmonton.AB.CA\n               http://www.GraySage.Edmonton.AB.CA/cg/\n\n\n\n_______________________________________________\nMUD-Dev
                        maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                  from: cg@ami-cg.GraySage.Edmonton.AB.CA
                  references: []
                  date: 2000-01-01 19:50:27.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: Jzn75vxA
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *45
              parent: *36
              children:
              - &49 !ruby/object:MessageContainer
                key: &46 !ruby/object:MessageId
                  raw: Jzmy0kkK@generated-message-id.chibrary.org
                value: !ruby/object:Message
                  email: !ruby/object:Email
                    raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Tue, 18 Jan 2000
                      01:02:09 -0800\nSubject: Re: [MUD-Dev] Storing tokens with flex
                      & bison\n\nOn Sun, 2 Jan 2000 10:58:02 -0700 \ncg  <cg@ami-cg.GraySage.Edmonton.AB.CA>
                      wrote:\n\n> [J C Lawrence:]\n>> I've used recursive decent parsing
                      for all my micro-languages for\n>> the simple reason that I
                      was never willing to confront lex/yacc\n>> or their derivatives
                      and I'd done all my interesting language\n>> work before I ran
                      across PCCTS et al.  \n\n> I'm in a similar situation - I did
                      my first language before I'd\n> heard of lex/yacc, let alone
                      ANTLR/PCCTS. So, I've never learned\n> any of those tools. This
                      includes doing an ANSI C compiler at work\n> several years ago.\n\nOooo!
                      \ Pre- or post- ANSI?  I made a stab at doing a pre-ANSI K&R\ncompiler
                      once.  It wasn't pretty.  Harbison & Steele's pain was not\nimagined.\n\n>
                      JCL: why do you say recursive descent makes it hard to put a
                      VM\n> under a language? \n\n<ponder> In an absolute sense it
                      probably isn't.  In practice\nhowever I've found it to be, most
                      likely because I tend to take\nrather opportunistic advantage
                      of shortcuts that I see en route that\ndon't map well to any
                      sort of regular VM structure (and I'm big on\nregularity).  Additionally
                      most of my experience has been doing\nlanguage for which there
                      was no concept of doing a VM until very\nlate in the day, at
                      which time I'd already ensured (as above) that\nit was going
                      to be painful...\n\nShoving a VM under a parser when the parser
                      was not written with a\nVM in mind is not fun.  Yup.  \n\n>
                      Byte-code execution really only makes sense, I believe, for
                      a\n> strongly typed language. If run-time checks and conversions
                      are\n> needed, they will likely cost far more time than the
                      basic\n> interpretation of the code, and so going to byte-code
                      instead of\n> staying with something more direct, could be a
                      waste of time, in\n> that byte-code won't speed execution up
                      much.\n\nThis is one of those implementation dependent generalities
                      that I\nsuspect is impossible to argue.  In some cases, yes,
                      I bet it will\ngive no or negative gain.  I have little doubt
                      however that in\nothers it will come out just fine.\n\nCertainly
                      cases on either side of the fence can be contrived.\n\nThat
                      said: Python, Tcl, Perl, and REXX are all weakly typed, and
                      all\nnow are byte-coded.  I suspect that they saw some advantage.\n\n--\nJ
                      C Lawrence                                 Home: claw@kanga.nu\n----------(*)
                      \                             Other: coder@kanga.nu\n--=| A
                      man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    header: !ruby/object:Headers
                      rmail: !ruby/object:RMail::Message
                        header: !ruby/object:RMail::Header
                          fields:
                          - !ruby/object:RMail::Header::Field
                            raw: 'From: J C Lawrence <claw@kanga.nu>'
                            name: From
                            value: J C Lawrence <claw@kanga.nu>
                          - !ruby/object:RMail::Header::Field
                            raw: 'Date: Tue, 18 Jan 2000 01:02:09 -0800'
                            name: Date
                            value: Tue, 18 Jan 2000 01:02:09 -0800
                          - !ruby/object:RMail::Header::Field
                            raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex
                              & bison'
                            name: Subject
                            value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                          mbox_from: 
                        body: "On Sun, 2 Jan 2000 10:58:02 -0700 \ncg  <cg@ami-cg.GraySage.Edmonton.AB.CA>
                          wrote:\n\n> [J C Lawrence:]\n>> I've used recursive decent
                          parsing for all my micro-languages for\n>> the simple reason
                          that I was never willing to confront lex/yacc\n>> or their
                          derivatives and I'd done all my interesting language\n>>
                          work before I ran across PCCTS et al.  \n\n> I'm in a similar
                          situation - I did my first language before I'd\n> heard
                          of lex/yacc, let alone ANTLR/PCCTS. So, I've never learned\n>
                          any of those tools. This includes doing an ANSI C compiler
                          at work\n> several years ago.\n\nOooo!  Pre- or post- ANSI?
                          \ I made a stab at doing a pre-ANSI K&R\ncompiler once.
                          \ It wasn't pretty.  Harbison & Steele's pain was not\nimagined.\n\n>
                          JCL: why do you say recursive descent makes it hard to put
                          a VM\n> under a language? \n\n<ponder> In an absolute sense
                          it probably isn't.  In practice\nhowever I've found it to
                          be, most likely because I tend to take\nrather opportunistic
                          advantage of shortcuts that I see en route that\ndon't map
                          well to any sort of regular VM structure (and I'm big on\nregularity).
                          \ Additionally most of my experience has been doing\nlanguage
                          for which there was no concept of doing a VM until very\nlate
                          in the day, at which time I'd already ensured (as above)
                          that\nit was going to be painful...\n\nShoving a VM under
                          a parser when the parser was not written with a\nVM in mind
                          is not fun.  Yup.  \n\n> Byte-code execution really only
                          makes sense, I believe, for a\n> strongly typed language.
                          If run-time checks and conversions are\n> needed, they will
                          likely cost far more time than the basic\n> interpretation
                          of the code, and so going to byte-code instead of\n> staying
                          with something more direct, could be a waste of time, in\n>
                          that byte-code won't speed execution up much.\n\nThis is
                          one of those implementation dependent generalities that
                          I\nsuspect is impossible to argue.  In some cases, yes,
                          I bet it will\ngive no or negative gain.  I have little
                          doubt however that in\nothers it will come out just fine.\n\nCertainly
                          cases on either side of the fence can be contrived.\n\nThat
                          said: Python, Tcl, Perl, and REXX are all weakly typed,
                          and all\nnow are byte-coded.  I suspect that they saw some
                          advantage.\n\n--\nJ C Lawrence                                 Home:
                          claw@kanga.nu\n----------(*)                              Other:
                          coder@kanga.nu\n--=| A man is as sane as he is dangerous
                          to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                        epilogue: 
                        preamble: 
                    message_id: !ruby/object:MessageId
                      raw: "[invalid or missing message id]"
                    subject: !ruby/object:Subject
                      original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                    from: J C Lawrence <claw@kanga.nu>
                    references: []
                    date: 2000-01-18 09:02:09.000000000 Z
                    no_archive: false
                  call_number: !ruby/object:CallNumber
                    str: Jzmy0kkK
                  source: archive
                  list: !ruby/object:List
                    slug: mud-dev
                    name: 
                    description: 
                    homepage: 
                    footer: 
                  message_id: *46
                parent: *47
                children:
                - &353 !ruby/object:MessageContainer
                  key: &48 !ruby/object:MessageId
                    raw: 00uTkdnc@generated-message-id.chibrary.org
                  value: !ruby/object:Message
                    email: !ruby/object:Email
                      raw: |
                        From: cg@ami-cg.GraySage.Edmonton.AB.CA
                        Date: Tue, 18 Jan 2000 20:41:00 -0700
                        Subject: Re: [MUD-Dev] Storing tokens with flex & bison

                        [J C Lawrence:]

                        > > I'm in a similar situation - I did my first language before I'd
                        > > heard of lex/yacc, let alone ANTLR/PCCTS. So, I've never learned
                        > > any of those tools. This includes doing an ANSI C compiler at work
                        > > several years ago.
                        >
                        > Oooo!  Pre- or post- ANSI?  I made a stab at doing a pre-ANSI K&R
                        > compiler once.  It wasn't pretty.  Harbison & Steele's pain was not
                        > imagined.

                        Er, post. Actually I started when ANSI was still making choices. I was
                        really hoping for the "pointer model" for enums to win out. Drat!

                        > Shoving a VM under a parser when the parser was not written with a
                        > VM in mind is not fun.  Yup.

                        Another thing that will vary from case to case, I guess. Worked fine
                        for me, and I hadn't even thought of it when I was doing the language
                        and the initial parse-tree interpreter.

                        > Certainly cases on either side of the fence can be contrived.
                        >
                        > That said: Python, Tcl, Perl, and REXX are all weakly typed, and all
                        > now are byte-coded.  I suspect that they saw some advantage.

                        I'm not fully up on what the old technologies of all those was. However,
                        both Tcl and REXX (at least the Amiga version, AREXX) were strict
                        string interpreters (like ToyMUD). That introduces loads of overhead,
                        and going to nearly any other kind of execution model will give you one
                        or two orders of magnitude. How much you get from there to a bytecode
                        machine is, I think, the interesting question. However, since it really
                        isn't any harder to do a byte-code system than most of those other
                        interpretation systems, I guess you may as well go all the way. Well,
                        short of emitting native code, anyway.


                        --
                        Don't design inefficiency in - it'll happen in the implementation.

                        Chris Gray     cg@ami-cg.GraySage.Edmonton.AB.CA
                                       http://www.GraySage.Edmonton.AB.CA/cg/



                        _______________________________________________
                        MUD-Dev maillist  -  MUD-Dev@kanga.nu
                        http://www.kanga.nu/lists/listinfo/mud-dev
                      header: !ruby/object:Headers
                        rmail: !ruby/object:RMail::Message
                          header: !ruby/object:RMail::Header
                            fields:
                            - !ruby/object:RMail::Header::Field
                              raw: 'From: cg@ami-cg.GraySage.Edmonton.AB.CA'
                              name: From
                              value: cg@ami-cg.GraySage.Edmonton.AB.CA
                            - !ruby/object:RMail::Header::Field
                              raw: 'Date: Tue, 18 Jan 2000 20:41:00 -0700'
                              name: Date
                              value: Tue, 18 Jan 2000 20:41:00 -0700
                            - !ruby/object:RMail::Header::Field
                              raw: 'Subject: Re: [MUD-Dev] Storing tokens with flex
                                & bison'
                              name: Subject
                              value: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                            mbox_from: 
                          body: |
                            [J C Lawrence:]

                            > > I'm in a similar situation - I did my first language before I'd
                            > > heard of lex/yacc, let alone ANTLR/PCCTS. So, I've never learned
                            > > any of those tools. This includes doing an ANSI C compiler at work
                            > > several years ago.
                            >
                            > Oooo!  Pre- or post- ANSI?  I made a stab at doing a pre-ANSI K&R
                            > compiler once.  It wasn't pretty.  Harbison & Steele's pain was not
                            > imagined.

                            Er, post. Actually I started when ANSI was still making choices. I was
                            really hoping for the "pointer model" for enums to win out. Drat!

                            > Shoving a VM under a parser when the parser was not written with a
                            > VM in mind is not fun.  Yup.

                            Another thing that will vary from case to case, I guess. Worked fine
                            for me, and I hadn't even thought of it when I was doing the language
                            and the initial parse-tree interpreter.

                            > Certainly cases on either side of the fence can be contrived.
                            >
                            > That said: Python, Tcl, Perl, and REXX are all weakly typed, and all
                            > now are byte-coded.  I suspect that they saw some advantage.

                            I'm not fully up on what the old technologies of all those was. However,
                            both Tcl and REXX (at least the Amiga version, AREXX) were strict
                            string interpreters (like ToyMUD). That introduces loads of overhead,
                            and going to nearly any other kind of execution model will give you one
                            or two orders of magnitude. How much you get from there to a bytecode
                            machine is, I think, the interesting question. However, since it really
                            isn't any harder to do a byte-code system than most of those other
                            interpretation systems, I guess you may as well go all the way. Well,
                            short of emitting native code, anyway.


                            --
                            Don't design inefficiency in - it'll happen in the implementation.

                            Chris Gray     cg@ami-cg.GraySage.Edmonton.AB.CA
                                           http://www.GraySage.Edmonton.AB.CA/cg/



                            _______________________________________________
                            MUD-Dev maillist  -  MUD-Dev@kanga.nu
                            http://www.kanga.nu/lists/listinfo/mud-dev
                          epilogue: 
                          preamble: 
                      message_id: !ruby/object:MessageId
                        raw: "[invalid or missing message id]"
                      subject: !ruby/object:Subject
                        original: 'Re: [MUD-Dev] Storing tokens with flex & bison'
                      from: cg@ami-cg.GraySage.Edmonton.AB.CA
                      references: []
                      date: 2000-01-19 03:41:00.000000000 Z
                      no_archive: false
                    call_number: !ruby/object:CallNumber
                      str: 00uTkdnc
                    source: archive
                    list: !ruby/object:List
                      slug: mud-dev
                      name: 
                      description: 
                      homepage: 
                      footer: 
                    message_id: *48
                  parent: *49
                  children: []
  ? &50 !ruby/object:MessageId
    raw: JzUMQw88@generated-message-id.chibrary.org
  : &52 !ruby/object:MessageContainer
    key: *50
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: \"Geoffrey A. MacDougall\" <geoffrey@poptronik.com>\nDate: Mon,
          10 Jan 2000 16:11:40 -0500\nSubject: [MUD-Dev] A quick business question...\n\nThis
          message is in MIME format. Since your mail reader does not understand\nthis
          format, some or all of this message may not be legible.\n\n------_=_NextPart_001_01BF5BAF.49E2C7A0\nContent-Type:
          text/plain;\n\tcharset=\"iso-8859-1\"\n\nGreetings,\n\nI have a quick business
          question to pose to a few of the more seasoned Game\nDevelopers on this
          list.\n\nI have a meeting coming up with a new title who wants to enlist
          my services.\nThe game has already been conceptualized, so my involvement
          would not be as\na full designer.  I'd be the secondary author/editor of
          the pre-development\ndocument, and an associate designer helping them out
          with the in-game\neconomy, and the problems of making a \"persistent\" world
          (logic abuses,\netc.).  There's no money attached to the project yet, so
          I'd be taking a\npercentage based on risk instead of a salary.\n\nAs for
          my experience - I have written 1 pre-development document that\nsuccessfully
          solicited CDN$205K of development capital (as well as other\nsuccessful
          grant proposals outside the industry), and I am half-way through\nthe resulting
          design document, which has attracted interest from a few major\npublishers...\n\nWhat
          kind of deal should I be looking for?  The lead designer has already\ndone
          75% of the design work, so I'm not looking to ask for anything\nunreasonable
          or aggressive.\n\nAny advice would be greatly and kindly appreciated...
          :)\n\nCheers,\n\nGeoffrey MacDougall\n\n------_=_NextPart_001_01BF5BAF.49E2C7A0\nContent-Type:
          text/html;\n\tcharset=\"iso-8859-1\"\nContent-Transfer-Encoding: quoted-printable\n\n<!DOCTYPE
          HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=3D\"Content-Type\"
          CONTENT=3D\"text/html; =\ncharset=3Diso-8859-1\">\n<META NAME=3D\"Generator\"
          CONTENT=3D\"MS Exchange Server version =\n5.5.2650.12\">\n<TITLE>A quick
          business question...</TITLE>\n</HEAD>\n<BODY>\n\n<P><FONT SIZE=3D2>Greetings,</FONT>\n</P>\n\n<P><FONT
          SIZE=3D2>I have a quick business question to pose to a few of =\nthe more
          seasoned Game Developers on this list.</FONT>\n</P>\n\n<P><FONT SIZE=3D2>I
          have a meeting coming up with a new title who wants =\nto enlist my services.&nbsp;
          The game has already been conceptualized, =\nso my involvement would not
          be as a full designer.&nbsp; I'd be the =\nsecondary author/editor of the
          pre-development document, and an =\nassociate designer helping them out
          with the in-game economy, and the =\nproblems of making a &quot;persistent&quot;
          world (logic abuses, =\netc.).&nbsp; There's no money attached to the project
          yet, so I'd be =\ntaking a percentage based on risk instead of a salary.</FONT></P>\n\n<P><FONT
          SIZE=3D2>As for my experience - I have written 1 =\npre-development document
          that successfully solicited CDN$205K of =\ndevelopment capital (as well
          as other successful grant proposals =\noutside the industry), and I am half-way
          through the resulting design =\ndocument, which has attracted interest from
          a few major =\npublishers...</FONT></P>\n\n<P><FONT SIZE=3D2>What kind of
          deal should I be looking for?&nbsp; The =\nlead designer has already done
          75% of the design work, so I'm not =\nlooking to ask for anything unreasonable
          or aggressive.</FONT></P>\n\n<P><FONT SIZE=3D2>Any advice would be greatly
          and kindly appreciated... =\n:)</FONT>\n</P>\n\n<P><FONT SIZE=3D2>Cheers,</FONT>\n</P>\n\n<P><FONT
          SIZE=3D2>Geoffrey MacDougall</FONT>\n</P>\n\n</BODY>\n</HTML>\n------_=_NextPart_001_01BF5BAF.49E2C7A0--\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: "Geoffrey A. MacDougall" <geoffrey@poptronik.com>'
                name: From
                value: '"Geoffrey A. MacDougall" <geoffrey@poptronik.com>'
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Mon, 10 Jan 2000 16:11:40 -0500'
                name: Date
                value: Mon, 10 Jan 2000 16:11:40 -0500
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] A quick business question...'
                name: Subject
                value: "[MUD-Dev] A quick business question..."
              mbox_from: 
            body: "This message is in MIME format. Since your mail reader does not
              understand\nthis format, some or all of this message may not be legible.\n\n------_=_NextPart_001_01BF5BAF.49E2C7A0\nContent-Type:
              text/plain;\n\tcharset=\"iso-8859-1\"\n\nGreetings,\n\nI have a quick
              business question to pose to a few of the more seasoned Game\nDevelopers
              on this list.\n\nI have a meeting coming up with a new title who wants
              to enlist my services.\nThe game has already been conceptualized, so
              my involvement would not be as\na full designer.  I'd be the secondary
              author/editor of the pre-development\ndocument, and an associate designer
              helping them out with the in-game\neconomy, and the problems of making
              a \"persistent\" world (logic abuses,\netc.).  There's no money attached
              to the project yet, so I'd be taking a\npercentage based on risk instead
              of a salary.\n\nAs for my experience - I have written 1 pre-development
              document that\nsuccessfully solicited CDN$205K of development capital
              (as well as other\nsuccessful grant proposals outside the industry),
              and I am half-way through\nthe resulting design document, which has
              attracted interest from a few major\npublishers...\n\nWhat kind of deal
              should I be looking for?  The lead designer has already\ndone 75% of
              the design work, so I'm not looking to ask for anything\nunreasonable
              or aggressive.\n\nAny advice would be greatly and kindly appreciated...
              :)\n\nCheers,\n\nGeoffrey MacDougall\n\n------_=_NextPart_001_01BF5BAF.49E2C7A0\nContent-Type:
              text/html;\n\tcharset=\"iso-8859-1\"\nContent-Transfer-Encoding: quoted-printable\n\n<!DOCTYPE
              HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=3D\"Content-Type\"
              CONTENT=3D\"text/html; =\ncharset=3Diso-8859-1\">\n<META NAME=3D\"Generator\"
              CONTENT=3D\"MS Exchange Server version =\n5.5.2650.12\">\n<TITLE>A quick
              business question...</TITLE>\n</HEAD>\n<BODY>\n\n<P><FONT SIZE=3D2>Greetings,</FONT>\n</P>\n\n<P><FONT
              SIZE=3D2>I have a quick business question to pose to a few of =\nthe
              more seasoned Game Developers on this list.</FONT>\n</P>\n\n<P><FONT
              SIZE=3D2>I have a meeting coming up with a new title who wants =\nto
              enlist my services.&nbsp; The game has already been conceptualized,
              =\nso my involvement would not be as a full designer.&nbsp; I'd be the
              =\nsecondary author/editor of the pre-development document, and an =\nassociate
              designer helping them out with the in-game economy, and the =\nproblems
              of making a &quot;persistent&quot; world (logic abuses, =\netc.).&nbsp;
              There's no money attached to the project yet, so I'd be =\ntaking a
              percentage based on risk instead of a salary.</FONT></P>\n\n<P><FONT
              SIZE=3D2>As for my experience - I have written 1 =\npre-development
              document that successfully solicited CDN$205K of =\ndevelopment capital
              (as well as other successful grant proposals =\noutside the industry),
              and I am half-way through the resulting design =\ndocument, which has
              attracted interest from a few major =\npublishers...</FONT></P>\n\n<P><FONT
              SIZE=3D2>What kind of deal should I be looking for?&nbsp; The =\nlead
              designer has already done 75% of the design work, so I'm not =\nlooking
              to ask for anything unreasonable or aggressive.</FONT></P>\n\n<P><FONT
              SIZE=3D2>Any advice would be greatly and kindly appreciated... =\n:)</FONT>\n</P>\n\n<P><FONT
              SIZE=3D2>Cheers,</FONT>\n</P>\n\n<P><FONT SIZE=3D2>Geoffrey MacDougall</FONT>\n</P>\n\n</BODY>\n</HTML>\n------_=_NextPart_001_01BF5BAF.49E2C7A0--\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] A quick business question..."
        from: Geoffrey A. MacDougall <geoffrey@poptronik.com>
        references: []
        date: 2000-01-10 21:11:40.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: JzUMQw88
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *50
    parent: 
    children:
    - &54 !ruby/object:MessageContainer
      key: &51 !ruby/object:MessageId
        raw: Jysr9Awq@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: Darrin Hyrup <shades@mythicgames.com>\nDate: Mon, 10 Jan 2000
            17:56:09 -0500\nSubject: Re: [MUD-Dev] A quick business question...\n\nIts
            been a while since I jumped in, but this is one subject I have plenty\nof
            experience with...\n\nAt 01:35 PM 1/10/00 -0800, Matthew Mihaly wrote:\n>On
            Mon, 10 Jan 2000, Geoffrey A. MacDougall wrote:\n>> I have a quick business
            question to pose to a few of the more seasoned Game\n>> Developers on
            this list.\n>> \n>> I have a meeting coming up with a new title who wants
            to enlist my\nservices.\n>> The game has already been conceptualized,
            so my involvement would not be as\n>> a full designer.  I'd be the secondary
            author/editor of the pre-development\n>> document, and an associate designer
            helping them out with the in-game\n>> economy, and the problems of making
            a \"persistent\" world (logic abuses,\n>> etc.).  There's no money attached
            to the project yet, so I'd be taking a\n>> percentage based on risk instead
            of a salary.\n>> \n>> What kind of deal should I be looking for?  The
            lead designer has already\n>> done 75% of the design work, so I'm not
            looking to ask for anything\n>> unreasonable or aggressive.\n>\n>The answer
            to this question depends largely on the expected value of the\n>completed
            project and how much money has been sunk in so far.\n\nSounds like he's
            talking pure percentages of 'future profits' and not hard\ncash.  That's
            how a lot of startup online games/companies often handle\naquiring talent
            being without a budget or income.\n\nThat being the case, its all purely
            subjective, based on what you and your\npartners agree on what is reasonable
            for your time and effort.  If it were\nme, I would ballpark about 5-10%
            based on what you say you'll be doing as a\nplace to begin negotiations,
            but chances are, you will end up doing more,\nso having an option to renegotiate
            later based on time and effort is a good\nplan.  Considering that 10%
            is good in a royalty based environment, you\nmight not be able to get
            much more than that, depending on factors like how\nmany other drains
            there are on the potential profits, investors, equipment\ncosts, greed
            factor, etc.  It also depends on if you're talking net or\ngross profits,
            and where the net/gross split occurs.  (Its always best to\ntalk gross,
            since if you are negotiating based on net profits, you may end\nup with
            a high percentage of the $0 net profit.)\n\nA few quick observations anyway,
            based on having been where you are several\ntimes in the last decade and
            a half or so... take them as you will.\nContract and payment negotiations
            can be an art form of its own, and a pain\nif you're not careful.\n\nBest,\n\nDarrin
            Hyrup\nMythic Entertainment\n\n\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: Darrin Hyrup <shades@mythicgames.com>'
                  name: From
                  value: Darrin Hyrup <shades@mythicgames.com>
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Mon, 10 Jan 2000 17:56:09 -0500'
                  name: Date
                  value: Mon, 10 Jan 2000 17:56:09 -0500
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] A quick business question...'
                  name: Subject
                  value: 'Re: [MUD-Dev] A quick business question...'
                mbox_from: 
              body: "Its been a while since I jumped in, but this is one subject I
                have plenty\nof experience with...\n\nAt 01:35 PM 1/10/00 -0800, Matthew
                Mihaly wrote:\n>On Mon, 10 Jan 2000, Geoffrey A. MacDougall wrote:\n>>
                I have a quick business question to pose to a few of the more seasoned
                Game\n>> Developers on this list.\n>> \n>> I have a meeting coming
                up with a new title who wants to enlist my\nservices.\n>> The game
                has already been conceptualized, so my involvement would not be as\n>>
                a full designer.  I'd be the secondary author/editor of the pre-development\n>>
                document, and an associate designer helping them out with the in-game\n>>
                economy, and the problems of making a \"persistent\" world (logic
                abuses,\n>> etc.).  There's no money attached to the project yet,
                so I'd be taking a\n>> percentage based on risk instead of a salary.\n>>
                \n>> What kind of deal should I be looking for?  The lead designer
                has already\n>> done 75% of the design work, so I'm not looking to
                ask for anything\n>> unreasonable or aggressive.\n>\n>The answer to
                this question depends largely on the expected value of the\n>completed
                project and how much money has been sunk in so far.\n\nSounds like
                he's talking pure percentages of 'future profits' and not hard\ncash.
                \ That's how a lot of startup online games/companies often handle\naquiring
                talent being without a budget or income.\n\nThat being the case, its
                all purely subjective, based on what you and your\npartners agree
                on what is reasonable for your time and effort.  If it were\nme, I
                would ballpark about 5-10% based on what you say you'll be doing as
                a\nplace to begin negotiations, but chances are, you will end up doing
                more,\nso having an option to renegotiate later based on time and
                effort is a good\nplan.  Considering that 10% is good in a royalty
                based environment, you\nmight not be able to get much more than that,
                depending on factors like how\nmany other drains there are on the
                potential profits, investors, equipment\ncosts, greed factor, etc.
                \ It also depends on if you're talking net or\ngross profits, and
                where the net/gross split occurs.  (Its always best to\ntalk gross,
                since if you are negotiating based on net profits, you may end\nup
                with a high percentage of the $0 net profit.)\n\nA few quick observations
                anyway, based on having been where you are several\ntimes in the last
                decade and a half or so... take them as you will.\nContract and payment
                negotiations can be an art form of its own, and a pain\nif you're
                not careful.\n\nBest,\n\nDarrin Hyrup\nMythic Entertainment\n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] A quick business question...'
          from: Darrin Hyrup <shades@mythicgames.com>
          references: []
          date: 2000-01-10 22:56:09.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: Jysr9Awq
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *51
      parent: *52
      children:
      - &212 !ruby/object:MessageContainer
        key: &53 !ruby/object:MessageId
          raw: JzUMT8W8@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: Matthew Mihaly <diablo@best.com>\nDate: Mon, 10 Jan 2000 13:35:59
              -0800 (PST)\nSubject: Re: [MUD-Dev] A quick business question...\n\nOn
              Mon, 10 Jan 2000, Geoffrey A. MacDougall wrote:\n\n> Greetings,\n> \n>
              I have a quick business question to pose to a few of the more seasoned
              Game\n> Developers on this list.\n> \n> I have a meeting coming up with
              a new title who wants to enlist my services.\n> The game has already
              been conceptualized, so my involvement would not be as\n> a full designer.
              \ I'd be the secondary author/editor of the pre-development\n> document,
              and an associate designer helping them out with the in-game\n> economy,
              and the problems of making a \"persistent\" world (logic abuses,\n>
              etc.).  There's no money attached to the project yet, so I'd be taking
              a\n> percentage based on risk instead of a salary.\n> \n> What kind
              of deal should I be looking for?  The lead designer has already\n> done
              75% of the design work, so I'm not looking to ask for anything\n> unreasonable
              or aggressive.\n\nThe answer to this question depends largely on the
              expected value of the\ncompleted project and how much money has been
              sunk in so far. \n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: Matthew Mihaly <diablo@best.com>'
                    name: From
                    value: Matthew Mihaly <diablo@best.com>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Mon, 10 Jan 2000 13:35:59 -0800 (PST)'
                    name: Date
                    value: Mon, 10 Jan 2000 13:35:59 -0800 (PST)
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] A quick business question...'
                    name: Subject
                    value: 'Re: [MUD-Dev] A quick business question...'
                  mbox_from: 
                body: "On Mon, 10 Jan 2000, Geoffrey A. MacDougall wrote:\n\n> Greetings,\n>
                  \n> I have a quick business question to pose to a few of the more
                  seasoned Game\n> Developers on this list.\n> \n> I have a meeting
                  coming up with a new title who wants to enlist my services.\n> The
                  game has already been conceptualized, so my involvement would not
                  be as\n> a full designer.  I'd be the secondary author/editor of
                  the pre-development\n> document, and an associate designer helping
                  them out with the in-game\n> economy, and the problems of making
                  a \"persistent\" world (logic abuses,\n> etc.).  There's no money
                  attached to the project yet, so I'd be taking a\n> percentage based
                  on risk instead of a salary.\n> \n> What kind of deal should I be
                  looking for?  The lead designer has already\n> done 75% of the design
                  work, so I'm not looking to ask for anything\n> unreasonable or
                  aggressive.\n\nThe answer to this question depends largely on the
                  expected value of the\ncompleted project and how much money has
                  been sunk in so far. \n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] A quick business question...'
            from: Matthew Mihaly <diablo@best.com>
            references: []
            date: 2000-01-10 21:35:59.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: JzUMT8W8
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *53
        parent: *54
        children: []
  ? &55 !ruby/object:MessageId
    raw: Jysr6zbs@generated-message-id.chibrary.org
  : &57 !ruby/object:MessageContainer
    key: *55
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Sat, 01 Jan 2000 11:03:15
          -0800\nSubject: Re: [MUD-Dev] Embedded languages, object persistance...
          ack.\n\nOn Wed, 29 Dec 1999 01:03:00 -0800 \nJoe Kingry <jkingry@uwaterloo.ca>
          wrote:\n\n> I want a mud server on which I can change the code online of
          say a\n> skill, a spell or something else. I understand that this is the\n>
          purpose of having an embedded language that runs \"on top of\" the\n> mud's
          driver. i.e. MUF for MUQ, Python for AR3 etc.  \n\nWhat you are talking
          about we commonly call \"runtime morphism\",\nwhich is just the ability
          to edit the object heirarchy at runtime,\nand to have the effects of those
          changes appear during the same\nruntime (there may be a delay) without an
          interruption in service.\nHowever the use of an internal scripting language
          in a MUD is rarely\ndriven by the need to support runtime morphism More
          often the\ndriving factors are things like ease and rapidity of world\ndevelopment
          and suitability for non-programmer users/players.\nAdding runtime morphism
          is not necessarily an automatic or trivial\ntask once you have an internal
          scripting language. \n\n  Consider a deep object heirarchy, where a large
          number of objects\n  which are in common use in the game all inherit from
          a common\n  shared object.  What happens if I come along and edit the methods\n
          \ and/or attributes on that shared object?  What happens if I\n  totally
          redefine it?  What happens to all the objects that descend\n  from it?  What
          happens to the commands people have or are issuing\n  which affect the child
          objects?  What happens if the changes cause\n  mass breakages such that
          few to no objects actually work any more?\n\nFor me some of the driving
          reasons behind internal languages are\nRapid Application Development (implementing
          the game world or world\nfeatures), suitability for non-professional programmer
          use, ability\nto tailor to world building versus general programming problems,\nease
          of extending the language in \"interesting\" directions, and so\nforth.\n\n>
          So in general I know this code is to be compiled since you don't\n> want
          to be executing \"scripts\", but is this code an object? and\n> then is
          the byte-code stored? ack.. I'm confused.\n\nNot so fast.  The majority
          of MUD servers out there with internal\nscripting languages don't actually
          have an internal Virtual machine\n(VM) to which they byte compile their
          internal scripting languages\n(eg the Tiny-* clan).  Having a VM and building
          a byte code compiler\ncan significantly increase performance, but it is
          also a non-trivial\nprogramming task that many have foundered on.  \n\nMore
          simply: Language design is not easy and is very easy to get\nwrong.  This
          is why many of the new rash of MUD servers are (very\nintelligently) avoiding
          this problem entirely and using the Java VM\nand then using Java, JPython,
          or similar to produce the appropriate\nbyte codes.  There area certain trade-offs
          of course.  Your ability\nto redefine and tailor the language to your task
          at hand is gone,\nyour selection of possible languages to use is heavily
          limited\n(especially for us by non-programmers), etc.\n\nAnother distinction
          which needs to be made here (which most of the\nobject oriented servers
          fail to do) is between a class definition\nand an object.  A class definition
          describes and defines how\nsomething would be and would work if it existed.
          \ It _defines_\nsomething, it doesn't actually create one of those things.
          \ An\nobject is an \"instance\" of a class.  It is a created example of
          the\nclass definition.\n\nWhy is this important?  In systems which make
          a distinction between\nclasses and objects, you can compile the class definitions
          and store\nthe results with with class, and then merely have the various
          object\ninstances refer to that definition to access their defining code.\nYou
          can also build different systems to handle class definitions\nthan you use
          to handle objects, tailoring each system to handle its\ndata type (class
          or objects) best and not the other.\n\nHowever, most current MUD servers
          do not define the difference\nbetween a class definition and an object instance.
          \ They are one and\nthe same.  (eg MOO, ColdC, etc).  What this means is
          that an object\nusually also defines its class.  Often programmers for such
          systems\ntry and install an artificial distinction by only doing programming\n(class
          definitions) in objects that they never actually use\nanywhere, and just
          inheriting children from those object when they\nwant to create intantiations
          (ie the objects players actually use).\nNot making the distinction makes
          things simultaneously a little\nmessier and a little easier in implementing
          the system.  You now\nhave only one type of thing to deal with (objects),
          but you now also\nhave to deal with a mess of class heirarchies amd objected\nheirarchies
          which are intermingled.  Depending on how you approach\nthings, the difference
          can be large or quite small.\n\nNow as to how the bytecode is actually stored,
          there are lots of\nways,  if you think about the bytecode really is just
          another data\nstream associated with a class or an object.  You could even
          do\nsomething as simple as:\n\n  class class_definition {\n    attribute
          *attrs;\n    method *methods;\n    byte-code compiled;\n  };\n\nand keep
          them all together, and handle them all together in whatever \nyour persistence
          system is.\n\n> Here, I'll try to demonstrate what I little I think I know
          from\n> MUSH type enviroments. A MUSH allows you to create an\n> object.
          Great. This object is unique and persistent. Ie. it will\n> be there when
          you get back if you so desire. You can assign code\n> to execute based upon
          certain defined actions on the object, or\n> you can create a new action
          for this object. Going by this model\n> then, does that mean every single
          object in these \"new\" muds is a\n> class and is inherited from a previous
          object? But then it's\n> executed how?\n\nSee the above dinstinction between
          classes and objects.  MUSHes fail \nto make that distinction and thus every
          object has the potential to\nboth be an object _and_ a class definition
          for other objects and\nclasses.\n\nYes, it is kind of confusing if you come
          from a strict OO\nbackground.\n\nAs mar as execution is concerned (which
          only ever properly occurs\nfor objects, not classes), that occurs by having
          something call one\nof the methods on that object:\n\n  class X {\n    void
          poke () {\n      print \"Hello there!\";\n    }\n  }\n\n  Object Y is an
          instance of class X.\n\n  You then have something call Y.poke () to invoke
          and run that\n  code.\n\n> I think I have my object/class/code/driver concepts
          all muddled.\n\nThat's really easy to do with most MUD server implementations.\n\n>
          -doesn't require me to learn it's \"own custom embedded\n> language\"...\n\nRealise
          that no matter what language it uses, for someone it will\nrequire learning
          a whole new language as they won't know it.\nDoesn't really matter if its
          Java, Python, NetREXX, or whatever.\nThe advantage with chosing a generic
          programming language here is\nthat your audience of people who do know it
          increases, and they have \nsome chance of being able to exploit that skill
          elsewhere as well.  \n\nNote however that once you have a language chosen,
          the real learning\npain is in your class heirarchy -- which is expressly
          NOT portable\nand NOT leveragable to other systems.\n\n> -somehow allows
          for security and access levels while coding\n> -somehow allows for an event
          type system \n\nThis is a bitch and a minefield.  You are caught right in
          the middle\nof usability requirements on the one hand, and the need to keep\nthings
          secure on the other.\n\n> Muq seems to have most of these except for MUF,
          I got tired of\n> programming backwards ;).  \n\nI'm no fan of RPN either
          (or lisp for that matter).\n\n> Then there is Momoko, it uses Java which
          would be great, but I'm\n> not quite sure how to go about things and if
          it insists on having\n> everything in memory or not and file management
          etc and i'm\n> unclear if every unique object is it's own class on a persistent\n>
          system.\n\nI haven't looked at Momoko in any detail yet.  Would someone
          care to\npoint out MUD-Dev to the authors?\n\n--\nJ C Lawrence                                 Home:
          claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
          A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Sat, 01 Jan 2000 11:03:15 -0800'
                name: Date
                value: Sat, 01 Jan 2000 11:03:15 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: [MUD-Dev] Embedded languages, object persistance...
                  ack.'
                name: Subject
                value: 'Re: [MUD-Dev] Embedded languages, object persistance... ack.'
              mbox_from: 
            body: "On Wed, 29 Dec 1999 01:03:00 -0800 \nJoe Kingry <jkingry@uwaterloo.ca>
              wrote:\n\n> I want a mud server on which I can change the code online
              of say a\n> skill, a spell or something else. I understand that this
              is the\n> purpose of having an embedded language that runs \"on top
              of\" the\n> mud's driver. i.e. MUF for MUQ, Python for AR3 etc.  \n\nWhat
              you are talking about we commonly call \"runtime morphism\",\nwhich
              is just the ability to edit the object heirarchy at runtime,\nand to
              have the effects of those changes appear during the same\nruntime (there
              may be a delay) without an interruption in service.\nHowever the use
              of an internal scripting language in a MUD is rarely\ndriven by the
              need to support runtime morphism More often the\ndriving factors are
              things like ease and rapidity of world\ndevelopment and suitability
              for non-programmer users/players.\nAdding runtime morphism is not necessarily
              an automatic or trivial\ntask once you have an internal scripting language.
              \n\n  Consider a deep object heirarchy, where a large number of objects\n
              \ which are in common use in the game all inherit from a common\n  shared
              object.  What happens if I come along and edit the methods\n  and/or
              attributes on that shared object?  What happens if I\n  totally redefine
              it?  What happens to all the objects that descend\n  from it?  What
              happens to the commands people have or are issuing\n  which affect the
              child objects?  What happens if the changes cause\n  mass breakages
              such that few to no objects actually work any more?\n\nFor me some of
              the driving reasons behind internal languages are\nRapid Application
              Development (implementing the game world or world\nfeatures), suitability
              for non-professional programmer use, ability\nto tailor to world building
              versus general programming problems,\nease of extending the language
              in \"interesting\" directions, and so\nforth.\n\n> So in general I know
              this code is to be compiled since you don't\n> want to be executing
              \"scripts\", but is this code an object? and\n> then is the byte-code
              stored? ack.. I'm confused.\n\nNot so fast.  The majority of MUD servers
              out there with internal\nscripting languages don't actually have an
              internal Virtual machine\n(VM) to which they byte compile their internal
              scripting languages\n(eg the Tiny-* clan).  Having a VM and building
              a byte code compiler\ncan significantly increase performance, but it
              is also a non-trivial\nprogramming task that many have foundered on.
              \ \n\nMore simply: Language design is not easy and is very easy to get\nwrong.
              \ This is why many of the new rash of MUD servers are (very\nintelligently)
              avoiding this problem entirely and using the Java VM\nand then using
              Java, JPython, or similar to produce the appropriate\nbyte codes.  There
              area certain trade-offs of course.  Your ability\nto redefine and tailor
              the language to your task at hand is gone,\nyour selection of possible
              languages to use is heavily limited\n(especially for us by non-programmers),
              etc.\n\nAnother distinction which needs to be made here (which most
              of the\nobject oriented servers fail to do) is between a class definition\nand
              an object.  A class definition describes and defines how\nsomething
              would be and would work if it existed.  It _defines_\nsomething, it
              doesn't actually create one of those things.  An\nobject is an \"instance\"
              of a class.  It is a created example of the\nclass definition.\n\nWhy
              is this important?  In systems which make a distinction between\nclasses
              and objects, you can compile the class definitions and store\nthe results
              with with class, and then merely have the various object\ninstances
              refer to that definition to access their defining code.\nYou can also
              build different systems to handle class definitions\nthan you use to
              handle objects, tailoring each system to handle its\ndata type (class
              or objects) best and not the other.\n\nHowever, most current MUD servers
              do not define the difference\nbetween a class definition and an object
              instance.  They are one and\nthe same.  (eg MOO, ColdC, etc).  What
              this means is that an object\nusually also defines its class.  Often
              programmers for such systems\ntry and install an artificial distinction
              by only doing programming\n(class definitions) in objects that they
              never actually use\nanywhere, and just inheriting children from those
              object when they\nwant to create intantiations (ie the objects players
              actually use).\nNot making the distinction makes things simultaneously
              a little\nmessier and a little easier in implementing the system.  You
              now\nhave only one type of thing to deal with (objects), but you now
              also\nhave to deal with a mess of class heirarchies amd objected\nheirarchies
              which are intermingled.  Depending on how you approach\nthings, the
              difference can be large or quite small.\n\nNow as to how the bytecode
              is actually stored, there are lots of\nways,  if you think about the
              bytecode really is just another data\nstream associated with a class
              or an object.  You could even do\nsomething as simple as:\n\n  class
              class_definition {\n    attribute *attrs;\n    method *methods;\n    byte-code
              compiled;\n  };\n\nand keep them all together, and handle them all together
              in whatever \nyour persistence system is.\n\n> Here, I'll try to demonstrate
              what I little I think I know from\n> MUSH type enviroments. A MUSH allows
              you to create an\n> object. Great. This object is unique and persistent.
              Ie. it will\n> be there when you get back if you so desire. You can
              assign code\n> to execute based upon certain defined actions on the
              object, or\n> you can create a new action for this object. Going by
              this model\n> then, does that mean every single object in these \"new\"
              muds is a\n> class and is inherited from a previous object? But then
              it's\n> executed how?\n\nSee the above dinstinction between classes
              and objects.  MUSHes fail \nto make that distinction and thus every
              object has the potential to\nboth be an object _and_ a class definition
              for other objects and\nclasses.\n\nYes, it is kind of confusing if you
              come from a strict OO\nbackground.\n\nAs mar as execution is concerned
              (which only ever properly occurs\nfor objects, not classes), that occurs
              by having something call one\nof the methods on that object:\n\n  class
              X {\n    void poke () {\n      print \"Hello there!\";\n    }\n  }\n\n
              \ Object Y is an instance of class X.\n\n  You then have something call
              Y.poke () to invoke and run that\n  code.\n\n> I think I have my object/class/code/driver
              concepts all muddled.\n\nThat's really easy to do with most MUD server
              implementations.\n\n> -doesn't require me to learn it's \"own custom
              embedded\n> language\"...\n\nRealise that no matter what language it
              uses, for someone it will\nrequire learning a whole new language as
              they won't know it.\nDoesn't really matter if its Java, Python, NetREXX,
              or whatever.\nThe advantage with chosing a generic programming language
              here is\nthat your audience of people who do know it increases, and
              they have \nsome chance of being able to exploit that skill elsewhere
              as well.  \n\nNote however that once you have a language chosen, the
              real learning\npain is in your class heirarchy -- which is expressly
              NOT portable\nand NOT leveragable to other systems.\n\n> -somehow allows
              for security and access levels while coding\n> -somehow allows for an
              event type system \n\nThis is a bitch and a minefield.  You are caught
              right in the middle\nof usability requirements on the one hand, and
              the need to keep\nthings secure on the other.\n\n> Muq seems to have
              most of these except for MUF, I got tired of\n> programming backwards
              ;).  \n\nI'm no fan of RPN either (or lisp for that matter).\n\n> Then
              there is Momoko, it uses Java which would be great, but I'm\n> not quite
              sure how to go about things and if it insists on having\n> everything
              in memory or not and file management etc and i'm\n> unclear if every
              unique object is it's own class on a persistent\n> system.\n\nI haven't
              looked at Momoko in any detail yet.  Would someone care to\npoint out
              MUD-Dev to the authors?\n\n--\nJ C Lawrence                                 Home:
              claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
              A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: [MUD-Dev] Embedded languages, object persistance... ack.'
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-01 19:03:15.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jysr6zbs
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *55
    parent: 
    children:
    - &454 !ruby/object:MessageContainer
      key: &56 !ruby/object:MessageId
        raw: Jysr6zcO@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Fri, 14 Jan 2000 23:14:08
            -0800\nSubject: Re: [MUD-Dev] Embedded languages, object persistance...
            ack.\n\nOn Thu, 30 Dec 1999 08:56:28 +1100 \nKevin Littlejohn <darius@connect.com.au>
            wrote:\n\n>>>> \"Joe Kingry\" wrote\n\n> Databasing gives you a little
            more than that in terms of\n> persistance, tho.  Because there's no load/save,
            things are\n> committed immediately, there's no potential loss of information
            in\n> crash etc.  \n\nThis is only true if you don't do write cacheing,
            write combining,\nor some other form of delayed write in order to save
            expensive file\nIO.  In a large and active server there can be value in
            minimising\nfile IO.\n\n> (Incidentally, there's a topic in there I'd
            love to pursue with\n> other like-minded souls - multiple inheritance
            vs. single\n> inheritance, levels of inheritance, and the possibility
            of a 'kit'\n> approach on top of inheritance - so you go \"mageDwarf =\n>
            mageKit(dwarfPlayer)\" to extend things, then optionally use _that_\n>
            as a prototype...)\n\nGo for it.\n\n> Upload?  Hrm.  I'm going to shortly
            write something that drags\n> code from the database, presents it in a
            flashy tk-based window,\n> lets you edit it, and commit the changes.  Would
            that be the sort\n> of thing you're thinking of?\n\nHave a look at tkMOO-lite.
            \ Most of the work has been done for you.\n\n--\nJ C Lawrence                                 Home:
            claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
            A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: J C Lawrence <claw@kanga.nu>'
                  name: From
                  value: J C Lawrence <claw@kanga.nu>
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Fri, 14 Jan 2000 23:14:08 -0800'
                  name: Date
                  value: Fri, 14 Jan 2000 23:14:08 -0800
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] Embedded languages, object persistance...
                    ack.'
                  name: Subject
                  value: 'Re: [MUD-Dev] Embedded languages, object persistance...
                    ack.'
                mbox_from: 
              body: "On Thu, 30 Dec 1999 08:56:28 +1100 \nKevin Littlejohn <darius@connect.com.au>
                wrote:\n\n>>>> \"Joe Kingry\" wrote\n\n> Databasing gives you a little
                more than that in terms of\n> persistance, tho.  Because there's no
                load/save, things are\n> committed immediately, there's no potential
                loss of information in\n> crash etc.  \n\nThis is only true if you
                don't do write cacheing, write combining,\nor some other form of delayed
                write in order to save expensive file\nIO.  In a large and active
                server there can be value in minimising\nfile IO.\n\n> (Incidentally,
                there's a topic in there I'd love to pursue with\n> other like-minded
                souls - multiple inheritance vs. single\n> inheritance, levels of
                inheritance, and the possibility of a 'kit'\n> approach on top of
                inheritance - so you go \"mageDwarf =\n> mageKit(dwarfPlayer)\" to
                extend things, then optionally use _that_\n> as a prototype...)\n\nGo
                for it.\n\n> Upload?  Hrm.  I'm going to shortly write something that
                drags\n> code from the database, presents it in a flashy tk-based
                window,\n> lets you edit it, and commit the changes.  Would that be
                the sort\n> of thing you're thinking of?\n\nHave a look at tkMOO-lite.
                \ Most of the work has been done for you.\n\n--\nJ C Lawrence                                 Home:
                claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
                A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] Embedded languages, object persistance... ack.'
          from: J C Lawrence <claw@kanga.nu>
          references: []
          date: 2000-01-15 07:14:08.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: Jysr6zcO
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *56
      parent: *57
      children: []
    - &60 !ruby/object:MessageContainer
      key: &58 !ruby/object:MessageId
        raw: 00uTkdpA@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: |
            From: "Jay Carlson" <nop@mitre.org>
            Date: Mon, 3 Jan 2000 15:20:42 -0500
            Subject: Re: [MUD-Dev] Embedded languages, object persistance... ack.

            [...the moo apologist wakes...]

            "Joe Kingry" <jkingry@uwaterloo.ca> writes on Wednesday, December 29, 1999
            4:03 AM:


            > I mean, I know what the goals in general are. Persistance. You have a
            house
            > say in some place in the world. It get's damaged, it stays damaged until
            it
            > is repaird. So persistence is done through some kind of database, or
            > multiple databases broken up to distribute categories/workload.

            Geez, this has been around in the Tiny family and DGD for years.

            The big lose of persistence is that it's harder to get things back to a
            known state if your code screws up.  For instance, some MOO projects I've
            worked on have had fsck-like state checkers that would attempt to clean up
            broken object state and half-broken links.  By forcing programmers to
            explicitly manage state, you force them to spend some time thinking about
            these kinds of things.  OTOH, when you're prototyping it's not something you
            care much about.

            > I want a mud server on which I can change the code online of say a skill,
            a
            > spell or something else. I understand that this is the purpose of having
            an
            > embedded language that runs "on top of" the mud's driver. i.e. MUF for
            MUQ,
            > Python for AR3 etc.  So in general I know this code is to be compiled
            since
            > you don't want to be executing "scripts", but is this code an object? and
            > then is the byte-code stored? ack.. I'm confused.

            Slightly offtopic: there's an interesting terminology/concept confusion
            common in MUD object design discussions.  Usually when we're talking about
            mud objects, we're thinking of things like rooms, swords, NPCs, etc.  In
            languages like Smalltalk, everything is an object, even a method.  I've seen
            many people (especially myself) going down ratholes where you can pick up
            integers or method definitions, or fail to design using the programming
            language objects to build when difficult to figure out a VR behavior for an
            abstract concept.

            > All I want in a mud server is this:
            >
            > -doesn't have every object in memory, only when needed, otherwise on file.

            MOO trivially satisfies this; after all, there are many fine lines of code
            in the kernel to do it, so why duplicate?

            > -doesn't require me to learn it's "own custom embedded language", this one
            > really gets to me
            > -somehow allows for security and access levels while coding

            As far as I know, there are no mainstream languages for dynamic persistent
            programming environments that do anything plausible with multi-author
            security.  So I think you lose on this.

            Explicit representation of authorship and authority in dynamic languages is
            pretty interesting.  Doug Orleans is working on it.

            > -somehow allows for an event type system

            Any of the full-out programmable servers will give you many different
            options for how you want to code your own personal event system. :-)

            > -allows code to be contained in packages and has appropriate management
            > features. Ie. I can write the code offline in a file and then upload the
            > file to the server

            This requirement is difficult when combined goal of a persistent
            environment.  In many cases it doesn't make sense to be hacking on objects
            out of context; consider adding and removing object properties.  There has
            to be a pretty full set of synchronization logic for this to really work the
            Right Way.

            > -will allow for http access to the database

            JHM was the first mud web server, and there are n different competing MOO
            web application frameworks....

            > An added bonus would be, but hardly nessesary:
            > -driver ported to both Win32 platform and *nix platforms and database is
            > independent of platform.

            Mostly true of MOO, modulo crypt() issues.

            Jay




            _______________________________________________
            MUD-Dev maillist  -  MUD-Dev@kanga.nu
            http://www.kanga.nu/lists/listinfo/mud-dev
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: "Jay Carlson" <nop@mitre.org>'
                  name: From
                  value: '"Jay Carlson" <nop@mitre.org>'
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Mon, 3 Jan 2000 15:20:42 -0500'
                  name: Date
                  value: Mon, 3 Jan 2000 15:20:42 -0500
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] Embedded languages, object persistance...
                    ack.'
                  name: Subject
                  value: 'Re: [MUD-Dev] Embedded languages, object persistance...
                    ack.'
                mbox_from: 
              body: |
                [...the moo apologist wakes...]

                "Joe Kingry" <jkingry@uwaterloo.ca> writes on Wednesday, December 29, 1999
                4:03 AM:


                > I mean, I know what the goals in general are. Persistance. You have a
                house
                > say in some place in the world. It get's damaged, it stays damaged until
                it
                > is repaird. So persistence is done through some kind of database, or
                > multiple databases broken up to distribute categories/workload.

                Geez, this has been around in the Tiny family and DGD for years.

                The big lose of persistence is that it's harder to get things back to a
                known state if your code screws up.  For instance, some MOO projects I've
                worked on have had fsck-like state checkers that would attempt to clean up
                broken object state and half-broken links.  By forcing programmers to
                explicitly manage state, you force them to spend some time thinking about
                these kinds of things.  OTOH, when you're prototyping it's not something you
                care much about.

                > I want a mud server on which I can change the code online of say a skill,
                a
                > spell or something else. I understand that this is the purpose of having
                an
                > embedded language that runs "on top of" the mud's driver. i.e. MUF for
                MUQ,
                > Python for AR3 etc.  So in general I know this code is to be compiled
                since
                > you don't want to be executing "scripts", but is this code an object? and
                > then is the byte-code stored? ack.. I'm confused.

                Slightly offtopic: there's an interesting terminology/concept confusion
                common in MUD object design discussions.  Usually when we're talking about
                mud objects, we're thinking of things like rooms, swords, NPCs, etc.  In
                languages like Smalltalk, everything is an object, even a method.  I've seen
                many people (especially myself) going down ratholes where you can pick up
                integers or method definitions, or fail to design using the programming
                language objects to build when difficult to figure out a VR behavior for an
                abstract concept.

                > All I want in a mud server is this:
                >
                > -doesn't have every object in memory, only when needed, otherwise on file.

                MOO trivially satisfies this; after all, there are many fine lines of code
                in the kernel to do it, so why duplicate?

                > -doesn't require me to learn it's "own custom embedded language", this one
                > really gets to me
                > -somehow allows for security and access levels while coding

                As far as I know, there are no mainstream languages for dynamic persistent
                programming environments that do anything plausible with multi-author
                security.  So I think you lose on this.

                Explicit representation of authorship and authority in dynamic languages is
                pretty interesting.  Doug Orleans is working on it.

                > -somehow allows for an event type system

                Any of the full-out programmable servers will give you many different
                options for how you want to code your own personal event system. :-)

                > -allows code to be contained in packages and has appropriate management
                > features. Ie. I can write the code offline in a file and then upload the
                > file to the server

                This requirement is difficult when combined goal of a persistent
                environment.  In many cases it doesn't make sense to be hacking on objects
                out of context; consider adding and removing object properties.  There has
                to be a pretty full set of synchronization logic for this to really work the
                Right Way.

                > -will allow for http access to the database

                JHM was the first mud web server, and there are n different competing MOO
                web application frameworks....

                > An added bonus would be, but hardly nessesary:
                > -driver ported to both Win32 platform and *nix platforms and database is
                > independent of platform.

                Mostly true of MOO, modulo crypt() issues.

                Jay




                _______________________________________________
                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                http://www.kanga.nu/lists/listinfo/mud-dev
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] Embedded languages, object persistance... ack.'
          from: Jay Carlson <nop@mitre.org>
          references: []
          date: 2000-01-03 20:20:42.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: 00uTkdpA
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *58
      parent: *57
      children:
      - &210 !ruby/object:MessageContainer
        key: &59 !ruby/object:MessageId
          raw: Jzn787IO@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Tue, 18 Jan 2000 01:17:25
              -0800\nSubject: Re: [MUD-Dev] Embedded languages, object persistance...
              ack.\n\nOn Mon, 3 Jan 2000 15:20:42 -0500 \nJay Carlson <nop@mitre.org>
              wrote:\n\n> The big lose of persistence is that it's harder to get things
              back\n> to a known state if your code screws up.  \n\nIn general this
              is a function of transaction and logging models.\nGiven a well implemented
              transactional model rolling back the log to \nthe last set of compleat
              transactions *should* be cheap and fast.\n\n> By forcing programmers
              to explicitly manage state, you force them\n> to spend some time thinking
              about these kinds of things.  \n\nWhich I would generally view as a
              Bad Thing.  It is not directly\nrelated to or supportive of their task
              at hand, acts as a\ndistraction, and makes their life needlessly complex.\n\n>
              OTOH, when you're prototyping it's not something you care much\n> about.\n\nToo
              true.\n\n>> -doesn't have every object in memory, only when needed,
              otherwise\n>> on file.\n\n> MOO trivially satisfies this; after all,
              there are many fine lines\n> of code in the kernel to do it, so why
              duplicate?\n\nMOO relies on the OS VM to handle paging.  This is not
              necessarily\nwise as there is (little?) attempt to ensure data locality,
              minimum\nworking page size, etc.  I recall a thread on MOO-Cows a couple\nyears
              back that went into some of the pathological corners of this\narea in
              some detail.  I'd also note that this simple point (or\nrather the reflection
              in the impact of going disk based) was one of\nthe basic design assumptions
              that Marcus Ranum wanted to disprove\n(and did) with UnterMUD (or was
              that Uber?)\n\n--\nJ C Lawrence                                 Home:
              claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
              A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: J C Lawrence <claw@kanga.nu>'
                    name: From
                    value: J C Lawrence <claw@kanga.nu>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Tue, 18 Jan 2000 01:17:25 -0800'
                    name: Date
                    value: Tue, 18 Jan 2000 01:17:25 -0800
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] Embedded languages, object persistance...
                      ack.'
                    name: Subject
                    value: 'Re: [MUD-Dev] Embedded languages, object persistance...
                      ack.'
                  mbox_from: 
                body: "On Mon, 3 Jan 2000 15:20:42 -0500 \nJay Carlson <nop@mitre.org>
                  wrote:\n\n> The big lose of persistence is that it's harder to get
                  things back\n> to a known state if your code screws up.  \n\nIn
                  general this is a function of transaction and logging models.\nGiven
                  a well implemented transactional model rolling back the log to \nthe
                  last set of compleat transactions *should* be cheap and fast.\n\n>
                  By forcing programmers to explicitly manage state, you force them\n>
                  to spend some time thinking about these kinds of things.  \n\nWhich
                  I would generally view as a Bad Thing.  It is not directly\nrelated
                  to or supportive of their task at hand, acts as a\ndistraction,
                  and makes their life needlessly complex.\n\n> OTOH, when you're
                  prototyping it's not something you care much\n> about.\n\nToo true.\n\n>>
                  -doesn't have every object in memory, only when needed, otherwise\n>>
                  on file.\n\n> MOO trivially satisfies this; after all, there are
                  many fine lines\n> of code in the kernel to do it, so why duplicate?\n\nMOO
                  relies on the OS VM to handle paging.  This is not necessarily\nwise
                  as there is (little?) attempt to ensure data locality, minimum\nworking
                  page size, etc.  I recall a thread on MOO-Cows a couple\nyears back
                  that went into some of the pathological corners of this\narea in
                  some detail.  I'd also note that this simple point (or\nrather the
                  reflection in the impact of going disk based) was one of\nthe basic
                  design assumptions that Marcus Ranum wanted to disprove\n(and did)
                  with UnterMUD (or was that Uber?)\n\n--\nJ C Lawrence                                 Home:
                  claw@kanga.nu\n----------(*)                              Other:
                  coder@kanga.nu\n--=| A man is as sane as he is dangerous to his
                  environment |=--\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] Embedded languages, object persistance... ack.'
            from: J C Lawrence <claw@kanga.nu>
            references: []
            date: 2000-01-18 09:17:25.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: Jzn787IO
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *59
        parent: *60
        children: []
      - &255 !ruby/object:MessageContainer
        key: &61 !ruby/object:MessageId
          raw: 000DlhT6@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: |
              From: "Jay Carlson" <nop@mitre.org>
              Date: Mon, 3 Jan 2000 19:22:15 -0500
              Subject: Re: [MUD-Dev] Embedded languages, object persistance... ack.

              On Saturday, January 01, 2000 2:03 PM
              "J C Lawrence" <claw@kanga.nu> wrote:

              >   Consider a deep object heirarchy, where a large number of objects
              >   which are in common use in the game all inherit from a common
              >   shared object.  What happens if I come along and edit the methods
              >   and/or attributes on that shared object?  What happens if I
              >   totally redefine it?  What happens to all the objects that descend
              >   from it?  What happens to the commands people have or are issuing
              >   which affect the child objects?  What happens if the changes cause
              >   mass breakages such that few to no objects actually work any more?

              Cold and MOO have reasonable, well-defined answers to those questions.

              The answer to that last question is: your fellow programmers form a lynch
              mob.  How is that any different than checking in a bunch of busted changes
              to CVS?

              > For me some of the driving reasons behind internal languages are
              > Rapid Application Development (implementing the game world or world
              > features), suitability for non-professional programmer use, ability
              > to tailor to world building versus general programming problems,
              > ease of extending the language in "interesting" directions, and so
              > forth.

              Agreed, and add "useful multiauthor security".

              > > So in general I know this code is to be compiled since you don't
              > > want to be executing "scripts", but is this code an object? and
              > > then is the byte-code stored? ack.. I'm confused.
              >
              > Not so fast.  The majority of MUD servers out there with internal
              > scripting languages don't actually have an internal Virtual machine
              > (VM) to which they byte compile their internal scripting languages
              > (eg the Tiny-* clan).  Having a VM and building a byte code compiler
              > can significantly increase performance, but it is also a non-trivial
              > programming task that many have foundered on.

              MOO got speed out of going bytecode, but the critical motivation was task
              suspension.  In a straightforward tree-descent interpreter, you end up with
              continuation information sprayed all over the C stack; if you want to, say,
              block the currently executing method and wait for a line of input from the
              user, you'd have to save the C stack and later restore it when the line was
              available.  Ew.

              The work involved in explicitly managing all the activation records on a new
              explicit stack was probably about the same as doing the full rewrite to
              bytecode.

              > Another distinction which needs to be made here (which most of the
              > object oriented servers fail to do) is between a class definition
              > and an object.

              I think you've wandered into an old argument with both arms flailing.
              Although most mainstream languages are class-based, a lot of important
              languages and theoretical work are object-based.  Cardelli's page at
              http://www.luca.demon.co.uk/ has many interesting links; see in particular
              http://research.microsoft.com/Users/luca/Slides/PLDI96Tutorial.pdf for many
              of the issues outlined in one place.  Cardelli forcefully argues that
              class-based systems are strictly less expressive than object-based systems.

              > A class definition describes and defines how
              > something would be and would work if it existed.  It _defines_
              > something, it doesn't actually create one of those things.  An
              > object is an "instance" of a class.  It is a created example of the
              > class definition.

              > Why is this important?  In systems which make a distinction between
              > classes and objects, you can compile the class definitions and store
              > the results with with class, and then merely have the various object
              > instances refer to that definition to access their defining code.

              This is a red herring.  Object-based language implementations can and do
              perform this kind of optimization without the model restriction required by
              classes.

              > You can also build different systems to handle class definitions
              > than you use to handle objects, tailoring each system to handle its
              > data type (class or objects) best and not the other.

              If this is being argued as an advantage of the class-based model, I think
              this begs the question.

              > However, most current MUD servers do not define the difference
              > between a class definition and an object instance.  They are one and
              > the same.  (eg MOO, ColdC, etc).  What this means is that an object
              > usually also defines its class.

              No.  A MOO object defines its *behavior*, often in terms of delegation to a
              parent object.

              (Sidetrack: MOO frobs were a little like instances of classes described by
              MOO objects; Cold borrowed them.  Ben Jackson's WAIF proposal carries this
              much further.)

              > Often programmers for such systems
              > try and install an artificial distinction by only doing programming
              > (class definitions) in objects that they never actually use
              > anywhere, and just inheriting children from those object when they
              > want to create intantiations (ie the objects players actually use).
              > Not making the distinction makes things simultaneously a little
              > messier and a little easier in implementing the system.  You now
              > have only one type of thing to deal with (objects), but you now also
              > have to deal with a mess of class heirarchies amd objected
              > heirarchies which are intermingled.  Depending on how you approach
              > things, the difference can be large or quite small.

              I haven't seen many examples in the MOO world where this has been an ongoing
              problem.  Singleton "real" objects (like swords and exits) frequently get
              new behavior, but people tend not to create children of them.  There is a
              strong distaste in some parts of the community for not following a strict
              prototype/instance distinction, but it's sure come in handy from time to
              time.

              (For a while, some people changed their parent object to *me* on LambdaMOO.
              I was asked to disallow that because it could be used for quota scamming,
              and the wizards involved thought it would be a lot easier to ask me to stop
              than to go bug hunting.)

              > > Here, I'll try to demonstrate what I little I think I know from
              > > MUSH type enviroments. A MUSH allows you to create an
              > > object. Great. This object is unique and persistent. Ie. it will
              > > be there when you get back if you so desire. You can assign code
              > > to execute based upon certain defined actions on the object, or
              > > you can create a new action for this object. Going by this model
              > > then, does that mean every single object in these "new" muds is a
              > > class and is inherited from a previous object? But then it's
              > > executed how?
              >
              > See the above dinstinction between classes and objects.  MUSHes fail
              > to make that distinction and thus every object has the potential to
              > both be an object _and_ a class definition for other objects and
              > classes.
              >
              > Yes, it is kind of confusing if you come from a strict OO
              > background.

              Only if your strict OO background isn't very broad.  :-)  No, I know what
              you're trying to get at, but I think "mainstream OO" would be a better fit.

              > > -doesn't require me to learn it's "own custom embedded
              > > language"...
              >
              > Realise that no matter what language it uses, for someone it will
              > require learning a whole new language as they won't know it.
              > Doesn't really matter if its Java, Python, NetREXX, or whatever.
              > The advantage with chosing a generic programming language here is
              > that your audience of people who do know it increases, and they have
              > some chance of being able to exploit that skill elsewhere as well.
              >
              > Note however that once you have a language chosen, the real learning
              > pain is in your class heirarchy -- which is expressly NOT portable
              > and NOT leveragable to other systems.

              Absolutely.  Here's a concrete example.  Suppose you're using a restricted
              Java subset as your extension language.  You probably do *not* want to have
              java.util.Vector easily available; whenever  Alice's code returns a Vector
              to Bob's code, Bob can mutate it.  Gosh, I hope that wasn't a skill list....
              This is patchable by adding authorization tests to the Vector class, but
              then you have to teach your builders how Java-with-controlled-Vectors works,
              ad infinitum.

              Jay




              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: "Jay Carlson" <nop@mitre.org>'
                    name: From
                    value: '"Jay Carlson" <nop@mitre.org>'
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Mon, 3 Jan 2000 19:22:15 -0500'
                    name: Date
                    value: Mon, 3 Jan 2000 19:22:15 -0500
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] Embedded languages, object persistance...
                      ack.'
                    name: Subject
                    value: 'Re: [MUD-Dev] Embedded languages, object persistance...
                      ack.'
                  mbox_from: 
                body: |
                  On Saturday, January 01, 2000 2:03 PM
                  "J C Lawrence" <claw@kanga.nu> wrote:

                  >   Consider a deep object heirarchy, where a large number of objects
                  >   which are in common use in the game all inherit from a common
                  >   shared object.  What happens if I come along and edit the methods
                  >   and/or attributes on that shared object?  What happens if I
                  >   totally redefine it?  What happens to all the objects that descend
                  >   from it?  What happens to the commands people have or are issuing
                  >   which affect the child objects?  What happens if the changes cause
                  >   mass breakages such that few to no objects actually work any more?

                  Cold and MOO have reasonable, well-defined answers to those questions.

                  The answer to that last question is: your fellow programmers form a lynch
                  mob.  How is that any different than checking in a bunch of busted changes
                  to CVS?

                  > For me some of the driving reasons behind internal languages are
                  > Rapid Application Development (implementing the game world or world
                  > features), suitability for non-professional programmer use, ability
                  > to tailor to world building versus general programming problems,
                  > ease of extending the language in "interesting" directions, and so
                  > forth.

                  Agreed, and add "useful multiauthor security".

                  > > So in general I know this code is to be compiled since you don't
                  > > want to be executing "scripts", but is this code an object? and
                  > > then is the byte-code stored? ack.. I'm confused.
                  >
                  > Not so fast.  The majority of MUD servers out there with internal
                  > scripting languages don't actually have an internal Virtual machine
                  > (VM) to which they byte compile their internal scripting languages
                  > (eg the Tiny-* clan).  Having a VM and building a byte code compiler
                  > can significantly increase performance, but it is also a non-trivial
                  > programming task that many have foundered on.

                  MOO got speed out of going bytecode, but the critical motivation was task
                  suspension.  In a straightforward tree-descent interpreter, you end up with
                  continuation information sprayed all over the C stack; if you want to, say,
                  block the currently executing method and wait for a line of input from the
                  user, you'd have to save the C stack and later restore it when the line was
                  available.  Ew.

                  The work involved in explicitly managing all the activation records on a new
                  explicit stack was probably about the same as doing the full rewrite to
                  bytecode.

                  > Another distinction which needs to be made here (which most of the
                  > object oriented servers fail to do) is between a class definition
                  > and an object.

                  I think you've wandered into an old argument with both arms flailing.
                  Although most mainstream languages are class-based, a lot of important
                  languages and theoretical work are object-based.  Cardelli's page at
                  http://www.luca.demon.co.uk/ has many interesting links; see in particular
                  http://research.microsoft.com/Users/luca/Slides/PLDI96Tutorial.pdf for many
                  of the issues outlined in one place.  Cardelli forcefully argues that
                  class-based systems are strictly less expressive than object-based systems.

                  > A class definition describes and defines how
                  > something would be and would work if it existed.  It _defines_
                  > something, it doesn't actually create one of those things.  An
                  > object is an "instance" of a class.  It is a created example of the
                  > class definition.

                  > Why is this important?  In systems which make a distinction between
                  > classes and objects, you can compile the class definitions and store
                  > the results with with class, and then merely have the various object
                  > instances refer to that definition to access their defining code.

                  This is a red herring.  Object-based language implementations can and do
                  perform this kind of optimization without the model restriction required by
                  classes.

                  > You can also build different systems to handle class definitions
                  > than you use to handle objects, tailoring each system to handle its
                  > data type (class or objects) best and not the other.

                  If this is being argued as an advantage of the class-based model, I think
                  this begs the question.

                  > However, most current MUD servers do not define the difference
                  > between a class definition and an object instance.  They are one and
                  > the same.  (eg MOO, ColdC, etc).  What this means is that an object
                  > usually also defines its class.

                  No.  A MOO object defines its *behavior*, often in terms of delegation to a
                  parent object.

                  (Sidetrack: MOO frobs were a little like instances of classes described by
                  MOO objects; Cold borrowed them.  Ben Jackson's WAIF proposal carries this
                  much further.)

                  > Often programmers for such systems
                  > try and install an artificial distinction by only doing programming
                  > (class definitions) in objects that they never actually use
                  > anywhere, and just inheriting children from those object when they
                  > want to create intantiations (ie the objects players actually use).
                  > Not making the distinction makes things simultaneously a little
                  > messier and a little easier in implementing the system.  You now
                  > have only one type of thing to deal with (objects), but you now also
                  > have to deal with a mess of class heirarchies amd objected
                  > heirarchies which are intermingled.  Depending on how you approach
                  > things, the difference can be large or quite small.

                  I haven't seen many examples in the MOO world where this has been an ongoing
                  problem.  Singleton "real" objects (like swords and exits) frequently get
                  new behavior, but people tend not to create children of them.  There is a
                  strong distaste in some parts of the community for not following a strict
                  prototype/instance distinction, but it's sure come in handy from time to
                  time.

                  (For a while, some people changed their parent object to *me* on LambdaMOO.
                  I was asked to disallow that because it could be used for quota scamming,
                  and the wizards involved thought it would be a lot easier to ask me to stop
                  than to go bug hunting.)

                  > > Here, I'll try to demonstrate what I little I think I know from
                  > > MUSH type enviroments. A MUSH allows you to create an
                  > > object. Great. This object is unique and persistent. Ie. it will
                  > > be there when you get back if you so desire. You can assign code
                  > > to execute based upon certain defined actions on the object, or
                  > > you can create a new action for this object. Going by this model
                  > > then, does that mean every single object in these "new" muds is a
                  > > class and is inherited from a previous object? But then it's
                  > > executed how?
                  >
                  > See the above dinstinction between classes and objects.  MUSHes fail
                  > to make that distinction and thus every object has the potential to
                  > both be an object _and_ a class definition for other objects and
                  > classes.
                  >
                  > Yes, it is kind of confusing if you come from a strict OO
                  > background.

                  Only if your strict OO background isn't very broad.  :-)  No, I know what
                  you're trying to get at, but I think "mainstream OO" would be a better fit.

                  > > -doesn't require me to learn it's "own custom embedded
                  > > language"...
                  >
                  > Realise that no matter what language it uses, for someone it will
                  > require learning a whole new language as they won't know it.
                  > Doesn't really matter if its Java, Python, NetREXX, or whatever.
                  > The advantage with chosing a generic programming language here is
                  > that your audience of people who do know it increases, and they have
                  > some chance of being able to exploit that skill elsewhere as well.
                  >
                  > Note however that once you have a language chosen, the real learning
                  > pain is in your class heirarchy -- which is expressly NOT portable
                  > and NOT leveragable to other systems.

                  Absolutely.  Here's a concrete example.  Suppose you're using a restricted
                  Java subset as your extension language.  You probably do *not* want to have
                  java.util.Vector easily available; whenever  Alice's code returns a Vector
                  to Bob's code, Bob can mutate it.  Gosh, I hope that wasn't a skill list....
                  This is patchable by adding authorization tests to the Vector class, but
                  then you have to teach your builders how Java-with-controlled-Vectors works,
                  ad infinitum.

                  Jay




                  _______________________________________________
                  MUD-Dev maillist  -  MUD-Dev@kanga.nu
                  http://www.kanga.nu/lists/listinfo/mud-dev
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] Embedded languages, object persistance... ack.'
            from: Jay Carlson <nop@mitre.org>
            references: []
            date: 2000-01-04 00:22:15.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 000DlhT6
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *61
        parent: *60
        children: []
      - &64 !ruby/object:MessageContainer
        key: &62 !ruby/object:MessageId
          raw: 00uTmqDg@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: Kevin Littlejohn <darius@connect.com.au>\nDate: Wed, 19 Jan
              2000 10:09:57 +1100\nSubject: Re: [MUD-Dev] Embedded languages, object
              persistance... ack.\n\n>>> icecube@ihug.co.nz wrote\n> On Tue, Jan 18,
              2000 at 01:17:25AM -0800, J C Lawrence wrote:\n> > On Mon, 3 Jan 2000
              15:20:42 -0500 \n> > Jay Carlson <nop@mitre.org> wrote:\n> > \n> > >
              The big lose of persistence is that it's harder to get things back\n>
              > > to a known state if your code screws up.  \n> > \n> > In general
              this is a function of transaction and logging models.\n> > Given a well
              implemented transactional model rolling back the log to \n> > the last
              set of compleat transactions *should* be cheap and fast.\n> \n> I read
              Jay's comment more along the lines of \"if your code screws up and\n>
              creates 50,000 Swords-o'-Death scattered across the world\" rather than
              a\n> transaction issue. If your world is persistant, you can't just
              \"fix the code\n> and reboot\" to get back to an undamaged game state.\n\nThat
              depends on your persistance, tho.  Most muds maintain at least enough\npersistance
              for the above scenario to be a problem one way or the other -\nchances
              are killing the mud will either save the characters (and the 50,000\nswords'o'death),
              or won't save both - either way, you've got a data\ncleaning problem.\n\nCleaning
              up problems like that might be easier in a text file, with vi, or\neasier
              in an sql database, or easier in your proprietary bytecode-type\npersistant
              database - it really depends on the type of fsckup, and the\ntools you've
              built to micro-manage your data.\n\nThe advantage of transactional stuff
              is that you know, if the mud dies\npart-way through something, _everything_
              is going to be in either one state\nor another - not half-way through
              changing states.  While that doesn't help\nfor the 50,000 swords'o'death
              problem, it at least means that crashes,\nspontaneous reboots, whatever,
              aren't going to leave your data in an\n\"unknown\" state - you'll at
              least be able to bring the engine up and carry\non, albeit maybe with
              one or two transactions that 'never happened'.\n\nOf course, engineering
              all this to happen in a sane way without demanding\nin-depth knowledge
              on the part of the builder-coders (those people who\nwrite little mob
              scripts and so forth) is another trick again...\n\nKevinL\n(Persistance
              doesn't necessarily mean you can't make backups, and restore\nto them,
              either...)\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: Kevin Littlejohn <darius@connect.com.au>'
                    name: From
                    value: Kevin Littlejohn <darius@connect.com.au>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Wed, 19 Jan 2000 10:09:57 +1100'
                    name: Date
                    value: Wed, 19 Jan 2000 10:09:57 +1100
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] Embedded languages, object persistance...
                      ack.'
                    name: Subject
                    value: 'Re: [MUD-Dev] Embedded languages, object persistance...
                      ack.'
                  mbox_from: 
                body: ">>> icecube@ihug.co.nz wrote\n> On Tue, Jan 18, 2000 at 01:17:25AM
                  -0800, J C Lawrence wrote:\n> > On Mon, 3 Jan 2000 15:20:42 -0500
                  \n> > Jay Carlson <nop@mitre.org> wrote:\n> > \n> > > The big lose
                  of persistence is that it's harder to get things back\n> > > to
                  a known state if your code screws up.  \n> > \n> > In general this
                  is a function of transaction and logging models.\n> > Given a well
                  implemented transactional model rolling back the log to \n> > the
                  last set of compleat transactions *should* be cheap and fast.\n>
                  \n> I read Jay's comment more along the lines of \"if your code
                  screws up and\n> creates 50,000 Swords-o'-Death scattered across
                  the world\" rather than a\n> transaction issue. If your world is
                  persistant, you can't just \"fix the code\n> and reboot\" to get
                  back to an undamaged game state.\n\nThat depends on your persistance,
                  tho.  Most muds maintain at least enough\npersistance for the above
                  scenario to be a problem one way or the other -\nchances are killing
                  the mud will either save the characters (and the 50,000\nswords'o'death),
                  or won't save both - either way, you've got a data\ncleaning problem.\n\nCleaning
                  up problems like that might be easier in a text file, with vi, or\neasier
                  in an sql database, or easier in your proprietary bytecode-type\npersistant
                  database - it really depends on the type of fsckup, and the\ntools
                  you've built to micro-manage your data.\n\nThe advantage of transactional
                  stuff is that you know, if the mud dies\npart-way through something,
                  _everything_ is going to be in either one state\nor another - not
                  half-way through changing states.  While that doesn't help\nfor
                  the 50,000 swords'o'death problem, it at least means that crashes,\nspontaneous
                  reboots, whatever, aren't going to leave your data in an\n\"unknown\"
                  state - you'll at least be able to bring the engine up and carry\non,
                  albeit maybe with one or two transactions that 'never happened'.\n\nOf
                  course, engineering all this to happen in a sane way without demanding\nin-depth
                  knowledge on the part of the builder-coders (those people who\nwrite
                  little mob scripts and so forth) is another trick again...\n\nKevinL\n(Persistance
                  doesn't necessarily mean you can't make backups, and restore\nto
                  them, either...)\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] Embedded languages, object persistance... ack.'
            from: Kevin Littlejohn <darius@connect.com.au>
            references: []
            date: 2000-01-18 23:09:57.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 00uTmqDg
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *62
        parent: *60
        children:
        - &339 !ruby/object:MessageContainer
          key: &63 !ruby/object:MessageId
            raw: JzBbo9iK@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: icecube@ihug.co.nz\nDate: Wed, 19 Jan 2000 09:22:15 +1300\nSubject:
                Re: [MUD-Dev] Embedded languages, object persistance... ack.\n\nOn
                Tue, Jan 18, 2000 at 01:17:25AM -0800, J C Lawrence wrote:\n> On Mon,
                3 Jan 2000 15:20:42 -0500 \n> Jay Carlson <nop@mitre.org> wrote:\n>
                \n> > The big lose of persistence is that it's harder to get things
                back\n> > to a known state if your code screws up.  \n> \n> In general
                this is a function of transaction and logging models.\n> Given a well
                implemented transactional model rolling back the log to \n> the last
                set of compleat transactions *should* be cheap and fast.\n\nI read
                Jay's comment more along the lines of \"if your code screws up and\ncreates
                50,000 Swords-o'-Death scattered across the world\" rather than a\ntransaction
                issue. If your world is persistant, you can't just \"fix the code\nand
                reboot\" to get back to an undamaged game state.\n\n--\nOliver Jowett
                - icecube@ihug.co.nz - http://homepages.ihug.co.nz/~icecube/\nKeyID:
                1024/679D94C5  Fingerprint: CD94 5270 E2F4 339F 6A90 05C9 9DE4 EECC\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: icecube@ihug.co.nz'
                      name: From
                      value: icecube@ihug.co.nz
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Wed, 19 Jan 2000 09:22:15 +1300'
                      name: Date
                      value: Wed, 19 Jan 2000 09:22:15 +1300
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Embedded languages, object persistance...
                        ack.'
                      name: Subject
                      value: 'Re: [MUD-Dev] Embedded languages, object persistance...
                        ack.'
                    mbox_from: 
                  body: "On Tue, Jan 18, 2000 at 01:17:25AM -0800, J C Lawrence wrote:\n>
                    On Mon, 3 Jan 2000 15:20:42 -0500 \n> Jay Carlson <nop@mitre.org>
                    wrote:\n> \n> > The big lose of persistence is that it's harder
                    to get things back\n> > to a known state if your code screws up.
                    \ \n> \n> In general this is a function of transaction and logging
                    models.\n> Given a well implemented transactional model rolling
                    back the log to \n> the last set of compleat transactions *should*
                    be cheap and fast.\n\nI read Jay's comment more along the lines
                    of \"if your code screws up and\ncreates 50,000 Swords-o'-Death
                    scattered across the world\" rather than a\ntransaction issue.
                    If your world is persistant, you can't just \"fix the code\nand
                    reboot\" to get back to an undamaged game state.\n\n--\nOliver
                    Jowett - icecube@ihug.co.nz - http://homepages.ihug.co.nz/~icecube/\nKeyID:
                    1024/679D94C5  Fingerprint: CD94 5270 E2F4 339F 6A90 05C9 9DE4
                    EECC\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Embedded languages, object persistance...
                  ack.'
              from: icecube@ihug.co.nz
              references: []
              date: 2000-01-18 20:22:15.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: JzBbo9iK
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *63
          parent: *64
          children: []
  ? &65 !ruby/object:MessageId
    raw: 00uTmqDQ@generated-message-id.chibrary.org
  : &71 !ruby/object:MessageContainer
    key: *65
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: \"Sellers, Michael\" <MSellers@maxis.com>\nDate: Wed, 5 Jan 2000
          12:00:04 -0800\nSubject: RE: [MUD-Dev] Clay Shirky's \"Playfulness in 3-D
          Spaces\"\n\nRaph wrote:\n> From: J C Lawrence <claw@kanga.nu>\n> > http://www.shirky.com/writings/quake.html\n>
          >\n> > --<cut>--\n> > Playfulness in 3-D Spaces\n> > I have now found what
          I was looking for, and found it, to my\n> > chagrin, years late. A networked
          3-D engine with excellent shared\n> > space capabilities, open source code,
          a well-published\n> > world-building specification, an active development
          community, and a\n> > project showing the kind of rapid improvement year
          after year that\n> > comes from the best massively parallel design efforts,
          such as the\n> > Web.\n> >\n> > It is called Quake.\n> \n> Oh, good God.
          :P Somebody go show him EverQuest.\n\nWell that was my reaction too, though
          I tried to keep a stiff upper lip, and\nI pointed him toward AC, which I
          think is better for showing this kind of\nthing than EQ.  \n\n> To me, this
          realization betrays the fundamental blindness of the academic\nVR\n> community.
          The real problems with shared VR spaces aren't even\n> technological, they're
          social--but they can't see the forest for the\ntrees.\n\nWell they're both:
          the technological issues are daunting, as shown by the\nVRML community's
          inability to get past them, but only then do you see the\ncomplexity of
          the social issues.  But the uninformed nature of this guy at\nleast (and
          I've met a lot of others like him in academia) is frustrating.  \n\n> In
          most ways, text muds are a more sophisticated VR than their (largely\n>
          theoretical) endeavors can encompass. The fact that they are still hung
          up\n> on the issue of display, of all things, indicates how much thinking
          they\n> actually have to do about the problem.\n> \n> Clients are the least
          of your concerns in virtual space design. :P\n\nYeah.  All together now:
          :P\n\nMike Sellers\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: "Sellers, Michael" <MSellers@maxis.com>'
                name: From
                value: '"Sellers, Michael" <MSellers@maxis.com>'
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Wed, 5 Jan 2000 12:00:04 -0800'
                name: Date
                value: Wed, 5 Jan 2000 12:00:04 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: RE: [MUD-Dev] Clay Shirky''s "Playfulness in 3-D Spaces"'
                name: Subject
                value: 'RE: [MUD-Dev] Clay Shirky''s "Playfulness in 3-D Spaces"'
              mbox_from: 
            body: "Raph wrote:\n> From: J C Lawrence <claw@kanga.nu>\n> > http://www.shirky.com/writings/quake.html\n>
              >\n> > --<cut>--\n> > Playfulness in 3-D Spaces\n> > I have now found
              what I was looking for, and found it, to my\n> > chagrin, years late.
              A networked 3-D engine with excellent shared\n> > space capabilities,
              open source code, a well-published\n> > world-building specification,
              an active development community, and a\n> > project showing the kind
              of rapid improvement year after year that\n> > comes from the best massively
              parallel design efforts, such as the\n> > Web.\n> >\n> > It is called
              Quake.\n> \n> Oh, good God. :P Somebody go show him EverQuest.\n\nWell
              that was my reaction too, though I tried to keep a stiff upper lip,
              and\nI pointed him toward AC, which I think is better for showing this
              kind of\nthing than EQ.  \n\n> To me, this realization betrays the fundamental
              blindness of the academic\nVR\n> community. The real problems with shared
              VR spaces aren't even\n> technological, they're social--but they can't
              see the forest for the\ntrees.\n\nWell they're both: the technological
              issues are daunting, as shown by the\nVRML community's inability to
              get past them, but only then do you see the\ncomplexity of the social
              issues.  But the uninformed nature of this guy at\nleast (and I've met
              a lot of others like him in academia) is frustrating.  \n\n> In most
              ways, text muds are a more sophisticated VR than their (largely\n> theoretical)
              endeavors can encompass. The fact that they are still hung up\n> on
              the issue of display, of all things, indicates how much thinking they\n>
              actually have to do about the problem.\n> \n> Clients are the least
              of your concerns in virtual space design. :P\n\nYeah.  All together
              now: :P\n\nMike Sellers\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'RE: [MUD-Dev] Clay Shirky''s "Playfulness in 3-D Spaces"'
        from: Sellers, Michael <MSellers@maxis.com>
        references: []
        date: 2000-01-05 20:00:04.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00uTmqDQ
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *65
    parent: &70 !ruby/object:MessageContainer
      key: &66 !ruby/object:MessageId
        raw: JzBblyOu@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: |
            From: "Nick Shaffner" <nicks@3drealms.com>
            Date: Wed, 5 Jan 2000 14:50:20 -0600
            Subject: Re: [MUD-Dev] Clay Shirky's "Playfulness in 3-D Spaces"

            Raph wrote:
            > From: J C Lawrence <claw@kanga.nu>
            >> http://www.shirky.com/writings/quake.html
            >>
            >> --<cut>--
            >> Playfulness in 3-D Spaces
            >> I have now found what I was looking for, and found it, to my
            >> chagrin, years late. A networked 3-D engine with excellent shared
            >> space capabilities, open source code, a well-published
            >> world-building specification, an active development community, and a
            >> project showing the kind of rapid improvement year after year that
            >> comes from the best massively parallel design efforts, such as the
            >> Web.
            >>
            >> It is called Quake.
            >
            >Oh, good God. :P Somebody go show him EverQuest.
            >
            >To me, this realization betrays the fundamental blindness of the academic
            VR
            >community. The real problems with shared VR spaces aren't even
            >technological, they're social--but they can't see the forest for the trees.
            >In most ways, text muds are a more sophisticated VR than their (largely
            >theoretical) endeavors can encompass. The fact that they are still hung up
            >on the issue of display, of all things, indicates how much thinking they
            >actually have to do about the problem.
            >
            >Clients are the least of your concerns in virtual space design. :P


            <SemiRant>
                I agree whole-heartedly that the academic VR community has completely
            missed the boat, but not just with the social issues.  In the home PC world,
            it's seems fairly accepted that gaming is the primary drive for sales and
            technological development of and on new PC's.  Processor manufacturers have
            embraced this with specialized 3D instruction set extensions such as 3D
            Now!, KNI, CMMF, etc.  Video card manufacturers have embraced this and
            created an entirely new  market for low cost 'super workstation' class 3D
            Accelerators at consumable prices.  Sound card manufacturers have integrated
            3D sound processing into hardware.  And of course, all of these features are
            exposed (some exclusively) through DirectX - the gamer's api.
                It should seem obvious that games and game related technology will be
            the defining force for VR,  and that solutions to the social problems only
            come with years of experience practicing the technology =)

                It also seems painfully obvious IMHO that VRML in general is rapidly
            becoming little more than an antiquated view of what the present might have
            been.  For example it's inability to adapt to what has become pragmatically
            nessecary in the current and next generation of games.  Concepts such as
            portals - which prove very useful for distributing worlds, as well as an
            interior visibility system, security, parametric surfaces, CSG, wavelets,
            LOD, MultiTexture, Skeletal systems (Its current support for skeletal is far
            from adequate).
                I for one, would love to see a universal world file spec that was
            actually usable for today's games.  I'd use it in a second. Every time I
            look at a VRML file, my mind is thinking of that old Rend386's programs .WRL
            files  :^)
            </SemiRant>
                                        Nick
            --
            The above message represents my opinions, not nessecarily those of my
            employer.
            Nick Shaffner
            3D Realms




            _______________________________________________
            MUD-Dev maillist  -  MUD-Dev@kanga.nu
            http://www.kanga.nu/lists/listinfo/mud-dev
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: "Nick Shaffner" <nicks@3drealms.com>'
                  name: From
                  value: '"Nick Shaffner" <nicks@3drealms.com>'
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Wed, 5 Jan 2000 14:50:20 -0600'
                  name: Date
                  value: Wed, 5 Jan 2000 14:50:20 -0600
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] Clay Shirky''s "Playfulness in 3-D
                    Spaces"'
                  name: Subject
                  value: 'Re: [MUD-Dev] Clay Shirky''s "Playfulness in 3-D Spaces"'
                mbox_from: 
              body: |
                Raph wrote:
                > From: J C Lawrence <claw@kanga.nu>
                >> http://www.shirky.com/writings/quake.html
                >>
                >> --<cut>--
                >> Playfulness in 3-D Spaces
                >> I have now found what I was looking for, and found it, to my
                >> chagrin, years late. A networked 3-D engine with excellent shared
                >> space capabilities, open source code, a well-published
                >> world-building specification, an active development community, and a
                >> project showing the kind of rapid improvement year after year that
                >> comes from the best massively parallel design efforts, such as the
                >> Web.
                >>
                >> It is called Quake.
                >
                >Oh, good God. :P Somebody go show him EverQuest.
                >
                >To me, this realization betrays the fundamental blindness of the academic
                VR
                >community. The real problems with shared VR spaces aren't even
                >technological, they're social--but they can't see the forest for the trees.
                >In most ways, text muds are a more sophisticated VR than their (largely
                >theoretical) endeavors can encompass. The fact that they are still hung up
                >on the issue of display, of all things, indicates how much thinking they
                >actually have to do about the problem.
                >
                >Clients are the least of your concerns in virtual space design. :P


                <SemiRant>
                    I agree whole-heartedly that the academic VR community has completely
                missed the boat, but not just with the social issues.  In the home PC world,
                it's seems fairly accepted that gaming is the primary drive for sales and
                technological development of and on new PC's.  Processor manufacturers have
                embraced this with specialized 3D instruction set extensions such as 3D
                Now!, KNI, CMMF, etc.  Video card manufacturers have embraced this and
                created an entirely new  market for low cost 'super workstation' class 3D
                Accelerators at consumable prices.  Sound card manufacturers have integrated
                3D sound processing into hardware.  And of course, all of these features are
                exposed (some exclusively) through DirectX - the gamer's api.
                    It should seem obvious that games and game related technology will be
                the defining force for VR,  and that solutions to the social problems only
                come with years of experience practicing the technology =)

                    It also seems painfully obvious IMHO that VRML in general is rapidly
                becoming little more than an antiquated view of what the present might have
                been.  For example it's inability to adapt to what has become pragmatically
                nessecary in the current and next generation of games.  Concepts such as
                portals - which prove very useful for distributing worlds, as well as an
                interior visibility system, security, parametric surfaces, CSG, wavelets,
                LOD, MultiTexture, Skeletal systems (Its current support for skeletal is far
                from adequate).
                    I for one, would love to see a universal world file spec that was
                actually usable for today's games.  I'd use it in a second. Every time I
                look at a VRML file, my mind is thinking of that old Rend386's programs .WRL
                files  :^)
                </SemiRant>
                                            Nick
                --
                The above message represents my opinions, not nessecarily those of my
                employer.
                Nick Shaffner
                3D Realms




                _______________________________________________
                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                http://www.kanga.nu/lists/listinfo/mud-dev
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] Clay Shirky''s "Playfulness in 3-D Spaces"'
          from: Nick Shaffner <nicks@3drealms.com>
          references: []
          date: 2000-01-05 20:50:20.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: JzBblyOu
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *66
      parent: &69 !ruby/object:MessageContainer
        key: &67 !ruby/object:MessageId
          raw: 00uTmp9c@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: |
              From: J C Lawrence <claw@kanga.nu>
              Date: Tue, 04 Jan 2000 19:56:39 -0800
              Subject: [MUD-Dev] Clay Shirky's "Playfulness in 3-D Spaces"

              http://www.shirky.com/writings/quake.html

              --<cut>--
              Playfulness in 3-D Spaces

                "Put the trodes on and [you] were out there, all the data in the
                world stacked up like a big neon city, so you could cruise around
                and have a kind of grip on it, visually anyway, because if you
                didn't, it was too complicated, trying to find your way to a
                particular piece of data you needed."

              Every six months or so, I find a reason to survey the state of VRML
              (Virtual Reality Modeling Language; more info at
              http://www.vrml.org/) and 3-D 'shared worlds.' I started these
              semi-annual forays in 1994, while researching a book, "Voices From
              the Net" (Ziff-Davis, 1994) , about online communities. In that
              book, I concluded that the classic model of cyberspace, quoted above
              from William Gibson's "Mona Lisa Overdrive", was not possible in
              this century (a bit of a grandiose cheat, since the century amounted
              to but a half-dozen years by that time), if at all.

              Woe betide the prognosticator who puts a far-off date on computer
              revolutions -- as the visual components of networking grew by leaps
              and bounds, it looked like my predictions might be off the mark. I
              kept hearing that VRML was at the edge of usability, and every now
              and again would go exploring to see for myself. The improvements
              from year to year were impressive, although they were due in part to
              the rising tide of clock speed, which lifts all the boats. However,
              they never seemed any closer to being something that someone would
              use for anything other than a "Now, instead of just looking up the
              info you want, you can actually fly through your company's parts
              catalog!" trade show demo. It was always better than last time, but
              never enough of a jump to actually be, in Alan Kay's famous words,
              "good enough to criticize."

              The Streets of San Francisco

              VRML applications are the videophones of the Net -- something that
              is possible in theory, but which excites designers far more than it
              excites potential users. At one point, the height of VRML
              applications was a 3-D Yellow Pages for San Francisco, the one town
              whose 3-D shape was uniquely ill-suited to such an already
              questionable endeavor ("Now, instead of simply looking up your dry
              cleaner's phone number, you can search for it over hill and
              dale!"). Thus, I concluded, my Nostradamus-like powers were in no
              danger of being upended by unkind reality.  Any real example of 3-D
              space that could be shared by multiple users and didn't involve an
              unacceptable trade-off between appearance and speed, any 3-D space
              that had any sort of visceral effect on the user, was still years
              away.

              There was only one problem with that conclusion: I was wrong.

              I have now found what I was looking for, and found it, to my
              chagrin, years late. A networked 3-D engine with excellent shared
              space capabilities, open source code, a well-published
              world-building specification, an active development community, and a
              project showing the kind of rapid improvement year after year that
              comes from the best massively parallel design efforts, such as the
              Web.

              It is called Quake.

              I know, I know. As they say on Usenet, "Quake? That's so 5 minutes
              ago!"

              Quake (http://www.idsoftware.com), for those of you like me who
              don't follow the PC gaming world, is a "First Person Action" game,
              meaning roughly that the screen is your view of the world, and that
              you pilot your digital self, or "avatar," through that world by
              maneuvering through what you see on the screen. I missed out on
              Quake when it was launched in the mid-'90s because as a general
              all-around Serious Person, I don't play games, in particular games
              whose ideal customer is less than half my age. I have now seen the
              error of my ways. Quake solves the shared 3-D space problem far
              better than any VRML implementation -- not despite being a game, but
              because it is a game.

              The Quake 3-D engine is for something, while VRML is a technology in
              search of a use. The Quake engine's original use is immaterial; once
              you have a world-modeling protocol that lets you wade through a
              subterranean stream, picking up shotgun shells and blowing up other
              people who are picking up rocket launchers and trying to blow up
              you, you've got the whole ball of wax -- spaces, movement, objects,
              avatars, even a simple physics. It would be easier to turn that into
              a tool for shared corporate meeting spaces than it would be to build
              the same thing in VRML, because once a tool is good for one thing,
              it's easy to see how to make it good for another thing.

              On The Cutting Edge

              This is one of the first axioms of creativity in this realm: Solve
              something first, then apply that solution elsewhere. It doesn't
              matter if the first stone was sharpened to kill animals or cut wood,
              because once you have the principle down, making a knife into a
              spear or a scimitar or a scalpel is just application-level
              development. I have always been skeptical of any real possibility of
              viscerally engaging 3-D spaces, but I believe that I see in Quake --
              and its subsequent imitators and descendants -- the sharpened stone,
              the thing that indicates the beginning of a new way of using the
              network.

              Quake is the real thing. It's a local solution to a local problem
              (how to make a 3-D space realistic enough so that you can accurately
              aim a double-barreled shotgun at a chainsaw-wielding ogre, while
              both of you are running) that has global ramifications. I have seen
              a lot of 3-D spaces over the years, and I have never run into
              anything that gives as palpable a sense of place as this does.
              (Before the objection is raised that Quake is software and VRML is a
              protocol, consider that Quake, like VRML, always runs in
              client-server mode and reads external data files, even locally, and
              that the Quake client is one-fifth the size of the benchmark VRML
              client.)

              After playing with Quake for only a few hours, I found myself in
              possession of an absolute and rigorous sense of the spaces it
              contained: There was a moment, while I was off thinking about
              something else altogether, when I realized that in one particularly
              sticky part of the game, I could jump off a ramp and swim through
              some water under a trap located in a hallway. This was as
              matter-of-fact a thought as if I'd realized I could bring a big
              package up the service elevator at my office; in other words, I had
              a large, accurate map of an entire space in my head, not from having
              studied it, but from having experienced it. I had derived, for the
              first time ever, a sense of space -- not an 'as if' sense or a sense
              of a metaphorical cyberspace, but of real space -- from a screen.

              Here's why I think this matters: Though Quake isn't necessarily the
              right solution for the 3-D shared space problem, it feels right in a
              way that nothing in the VRML world does. Once you've seen it in
              action, much of what's wrong with VRML snaps into focus:

               Quake does something well instead of many things poorly.

              This matters more than I can say. Despite all the theoretical
              underpinnings we now use as a basis for our work as computing
              reaches the half-century mark and networking turns 30,
              world-shifting developments still often come from practical
              solutions to simple problems.

              The VRML community has failed to come up with anything this
              compelling -- not despite the community's best intentions, but
              because of them. Every time VRML practitioners approach the problem
              of how to represent space on the screen, they have no focused reason
              to make any particular trade-off of detail versus rendering speed,
              or making objects versus making spaces, because VRML isn't for
              anything except itself. Many times, having a particular, near-term
              need to solve brings a project's virtues into sharp focus, and gives
              it enough clarity to live on its own.

               Quake puts tools in the hands of the users.

              Id software, producers of Quake, started allowing its games to be
              edited by users, and published a world-building spec so that users
              could write their own editors as well. As with HTML, one can build a
              variety of 3-D editors that can create a Quake world by simply
              writing to the spec. This has led to a riot of sophisticated tools
              for creating Quake "levels" like BSP and WorldCraft that would make
              any VRML partisan drool, and has spawned a community of
              user-engineers who are creating compelling worlds, objects, and
              sometimes whole alternate worlds at a pace and with an intensity
              that should make any VRML adherent faint. VRML is older than Quake,
              and yet it has fewer tools and fewer users, and still exists at the
              stage where the best examples of the technology are produced by the
              companies selling it, not the users using it.

               Quake has a simple model of compliance.

              The problem of representing space, surfaces, objects and worlds is
              almost infinitely vast. There was for some time in the AI community
              a proposal to develop a 'naive physics' where every aspect of
              physical organization of the world would be worked out in a way that
              would let computers deduce things about their surroundings. For
              instance, the naive physics of liquids included all sorts of rules
              about flow and how it was affected by being bounded by floors, walls
              and ceilings. This kind of elaborate modeling has been inherited in
              spirit by VRML, which is so complex that rendering a simple piece of
              furniture can bog down an average desktop computer.

              Quake, on the other hand, adopts a breathtakingly simple attitude
              toward physics. Quake has shapes like blocks, wedges and columns,
              and it has materials like stone, metal and water. If you make a
              freestanding column of water, so be it. The column will appear in
              any space you create; you can walk into it, swim to the top, walk
              out at the top and then fall down again. It does this simply because
              a physics of liquids is too complex to solve right now, and because
              Quake does not try to save users from themselves by adding layers of
              interpretation outside the engine itself.  If it compiles, it
              complies.

              Hacking X for Y

              This willingness to allow users to do stupid things, on the
              assumption that they will learn more quickly if the software doesn't
              try to second-guess them, has given Quake a development curve that
              looks like HTML in the early days, where a user's first efforts were
              often lousy but the progress between lousy and good was not blocked
              by the software itself. Quake encourages experimentation and
              incrementalism in the tradition of the best tools out there.

              I acknowledge, however, that the Quake format lacks the rigorous
              throughput into VRML -- the comparison here is not architecture to
              architecture, but effect to effect. I am not seriously suggesting
              that Quake or one of its children like Quake II
              (http://www.idsoftware.com), Half-Life
              (http://www.valvesoftware.com) or Unreal (http://www.unreal.com) be
              used as-is as a platform from which to build other 3-D shared spaces
              (well, maybe I am suggesting that half-seriously).  More important,
              I am suggesting that there is a problem because the 3-D game people
              aren't talking enough to the VRML people, and vice versa. Networking
              has come so far so fast partly because we have been willing to say,
              over and over again, "Well, we never thought of using X for Y, but
              now that you mention it, why not?"

              The Net is too young, and the 3-D space problem too tricky, to shoot
              for perfection right now.  What worries me most about my belated
              discovery of Quake is that in years of looking at 3-D spaces, no one
              ever mentioned it in the same breath as VRML and I never thought of
              it myself, simply because of the stigma attached to things that are
              "merely" games. Many of us, myself very much included, have come to
              believe our own press about the seriousness of our current
              endeavors. We have been adversely affected by the commercial
              applications of the network, and have weaned ourselves off the
              playfulness that has always produced insights and breakthroughs.

              It will be a terrible loss if those of us doing this work start to
              take ourselves too seriously. Round the clock and round the world,
              there are hundreds of people chasing one another through rooms and
              tunnels and up and down staircases that don't exist anywhere in the
              real world, a model of electronic space closer to Gibson's ideal
              than anything else that exists out there, and we shouldn't write
              those people off. Their game playing may look frivolous to us
              Serious Persons, but they know a lot about 3-D shared worlds, and it
              will be a terrible waste of everybody's time if we don't find a way
              to tap into that.
              --<cut>--

              --
              J C Lawrence                                 Home: claw@kanga.nu
              ----------(*)                              Other: coder@kanga.nu
              --=| A man is as sane as he is dangerous to his environment |=--


              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: J C Lawrence <claw@kanga.nu>'
                    name: From
                    value: J C Lawrence <claw@kanga.nu>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Tue, 04 Jan 2000 19:56:39 -0800'
                    name: Date
                    value: Tue, 04 Jan 2000 19:56:39 -0800
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: [MUD-Dev] Clay Shirky''s "Playfulness in 3-D Spaces"'
                    name: Subject
                    value: '[MUD-Dev] Clay Shirky''s "Playfulness in 3-D Spaces"'
                  mbox_from: 
                body: |
                  http://www.shirky.com/writings/quake.html

                  --<cut>--
                  Playfulness in 3-D Spaces

                    "Put the trodes on and [you] were out there, all the data in the
                    world stacked up like a big neon city, so you could cruise around
                    and have a kind of grip on it, visually anyway, because if you
                    didn't, it was too complicated, trying to find your way to a
                    particular piece of data you needed."

                  Every six months or so, I find a reason to survey the state of VRML
                  (Virtual Reality Modeling Language; more info at
                  http://www.vrml.org/) and 3-D 'shared worlds.' I started these
                  semi-annual forays in 1994, while researching a book, "Voices From
                  the Net" (Ziff-Davis, 1994) , about online communities. In that
                  book, I concluded that the classic model of cyberspace, quoted above
                  from William Gibson's "Mona Lisa Overdrive", was not possible in
                  this century (a bit of a grandiose cheat, since the century amounted
                  to but a half-dozen years by that time), if at all.

                  Woe betide the prognosticator who puts a far-off date on computer
                  revolutions -- as the visual components of networking grew by leaps
                  and bounds, it looked like my predictions might be off the mark. I
                  kept hearing that VRML was at the edge of usability, and every now
                  and again would go exploring to see for myself. The improvements
                  from year to year were impressive, although they were due in part to
                  the rising tide of clock speed, which lifts all the boats. However,
                  they never seemed any closer to being something that someone would
                  use for anything other than a "Now, instead of just looking up the
                  info you want, you can actually fly through your company's parts
                  catalog!" trade show demo. It was always better than last time, but
                  never enough of a jump to actually be, in Alan Kay's famous words,
                  "good enough to criticize."

                  The Streets of San Francisco

                  VRML applications are the videophones of the Net -- something that
                  is possible in theory, but which excites designers far more than it
                  excites potential users. At one point, the height of VRML
                  applications was a 3-D Yellow Pages for San Francisco, the one town
                  whose 3-D shape was uniquely ill-suited to such an already
                  questionable endeavor ("Now, instead of simply looking up your dry
                  cleaner's phone number, you can search for it over hill and
                  dale!"). Thus, I concluded, my Nostradamus-like powers were in no
                  danger of being upended by unkind reality.  Any real example of 3-D
                  space that could be shared by multiple users and didn't involve an
                  unacceptable trade-off between appearance and speed, any 3-D space
                  that had any sort of visceral effect on the user, was still years
                  away.

                  There was only one problem with that conclusion: I was wrong.

                  I have now found what I was looking for, and found it, to my
                  chagrin, years late. A networked 3-D engine with excellent shared
                  space capabilities, open source code, a well-published
                  world-building specification, an active development community, and a
                  project showing the kind of rapid improvement year after year that
                  comes from the best massively parallel design efforts, such as the
                  Web.

                  It is called Quake.

                  I know, I know. As they say on Usenet, "Quake? That's so 5 minutes
                  ago!"

                  Quake (http://www.idsoftware.com), for those of you like me who
                  don't follow the PC gaming world, is a "First Person Action" game,
                  meaning roughly that the screen is your view of the world, and that
                  you pilot your digital self, or "avatar," through that world by
                  maneuvering through what you see on the screen. I missed out on
                  Quake when it was launched in the mid-'90s because as a general
                  all-around Serious Person, I don't play games, in particular games
                  whose ideal customer is less than half my age. I have now seen the
                  error of my ways. Quake solves the shared 3-D space problem far
                  better than any VRML implementation -- not despite being a game, but
                  because it is a game.

                  The Quake 3-D engine is for something, while VRML is a technology in
                  search of a use. The Quake engine's original use is immaterial; once
                  you have a world-modeling protocol that lets you wade through a
                  subterranean stream, picking up shotgun shells and blowing up other
                  people who are picking up rocket launchers and trying to blow up
                  you, you've got the whole ball of wax -- spaces, movement, objects,
                  avatars, even a simple physics. It would be easier to turn that into
                  a tool for shared corporate meeting spaces than it would be to build
                  the same thing in VRML, because once a tool is good for one thing,
                  it's easy to see how to make it good for another thing.

                  On The Cutting Edge

                  This is one of the first axioms of creativity in this realm: Solve
                  something first, then apply that solution elsewhere. It doesn't
                  matter if the first stone was sharpened to kill animals or cut wood,
                  because once you have the principle down, making a knife into a
                  spear or a scimitar or a scalpel is just application-level
                  development. I have always been skeptical of any real possibility of
                  viscerally engaging 3-D spaces, but I believe that I see in Quake --
                  and its subsequent imitators and descendants -- the sharpened stone,
                  the thing that indicates the beginning of a new way of using the
                  network.

                  Quake is the real thing. It's a local solution to a local problem
                  (how to make a 3-D space realistic enough so that you can accurately
                  aim a double-barreled shotgun at a chainsaw-wielding ogre, while
                  both of you are running) that has global ramifications. I have seen
                  a lot of 3-D spaces over the years, and I have never run into
                  anything that gives as palpable a sense of place as this does.
                  (Before the objection is raised that Quake is software and VRML is a
                  protocol, consider that Quake, like VRML, always runs in
                  client-server mode and reads external data files, even locally, and
                  that the Quake client is one-fifth the size of the benchmark VRML
                  client.)

                  After playing with Quake for only a few hours, I found myself in
                  possession of an absolute and rigorous sense of the spaces it
                  contained: There was a moment, while I was off thinking about
                  something else altogether, when I realized that in one particularly
                  sticky part of the game, I could jump off a ramp and swim through
                  some water under a trap located in a hallway. This was as
                  matter-of-fact a thought as if I'd realized I could bring a big
                  package up the service elevator at my office; in other words, I had
                  a large, accurate map of an entire space in my head, not from having
                  studied it, but from having experienced it. I had derived, for the
                  first time ever, a sense of space -- not an 'as if' sense or a sense
                  of a metaphorical cyberspace, but of real space -- from a screen.

                  Here's why I think this matters: Though Quake isn't necessarily the
                  right solution for the 3-D shared space problem, it feels right in a
                  way that nothing in the VRML world does. Once you've seen it in
                  action, much of what's wrong with VRML snaps into focus:

                   Quake does something well instead of many things poorly.

                  This matters more than I can say. Despite all the theoretical
                  underpinnings we now use as a basis for our work as computing
                  reaches the half-century mark and networking turns 30,
                  world-shifting developments still often come from practical
                  solutions to simple problems.

                  The VRML community has failed to come up with anything this
                  compelling -- not despite the community's best intentions, but
                  because of them. Every time VRML practitioners approach the problem
                  of how to represent space on the screen, they have no focused reason
                  to make any particular trade-off of detail versus rendering speed,
                  or making objects versus making spaces, because VRML isn't for
                  anything except itself. Many times, having a particular, near-term
                  need to solve brings a project's virtues into sharp focus, and gives
                  it enough clarity to live on its own.

                   Quake puts tools in the hands of the users.

                  Id software, producers of Quake, started allowing its games to be
                  edited by users, and published a world-building spec so that users
                  could write their own editors as well. As with HTML, one can build a
                  variety of 3-D editors that can create a Quake world by simply
                  writing to the spec. This has led to a riot of sophisticated tools
                  for creating Quake "levels" like BSP and WorldCraft that would make
                  any VRML partisan drool, and has spawned a community of
                  user-engineers who are creating compelling worlds, objects, and
                  sometimes whole alternate worlds at a pace and with an intensity
                  that should make any VRML adherent faint. VRML is older than Quake,
                  and yet it has fewer tools and fewer users, and still exists at the
                  stage where the best examples of the technology are produced by the
                  companies selling it, not the users using it.

                   Quake has a simple model of compliance.

                  The problem of representing space, surfaces, objects and worlds is
                  almost infinitely vast. There was for some time in the AI community
                  a proposal to develop a 'naive physics' where every aspect of
                  physical organization of the world would be worked out in a way that
                  would let computers deduce things about their surroundings. For
                  instance, the naive physics of liquids included all sorts of rules
                  about flow and how it was affected by being bounded by floors, walls
                  and ceilings. This kind of elaborate modeling has been inherited in
                  spirit by VRML, which is so complex that rendering a simple piece of
                  furniture can bog down an average desktop computer.

                  Quake, on the other hand, adopts a breathtakingly simple attitude
                  toward physics. Quake has shapes like blocks, wedges and columns,
                  and it has materials like stone, metal and water. If you make a
                  freestanding column of water, so be it. The column will appear in
                  any space you create; you can walk into it, swim to the top, walk
                  out at the top and then fall down again. It does this simply because
                  a physics of liquids is too complex to solve right now, and because
                  Quake does not try to save users from themselves by adding layers of
                  interpretation outside the engine itself.  If it compiles, it
                  complies.

                  Hacking X for Y

                  This willingness to allow users to do stupid things, on the
                  assumption that they will learn more quickly if the software doesn't
                  try to second-guess them, has given Quake a development curve that
                  looks like HTML in the early days, where a user's first efforts were
                  often lousy but the progress between lousy and good was not blocked
                  by the software itself. Quake encourages experimentation and
                  incrementalism in the tradition of the best tools out there.

                  I acknowledge, however, that the Quake format lacks the rigorous
                  throughput into VRML -- the comparison here is not architecture to
                  architecture, but effect to effect. I am not seriously suggesting
                  that Quake or one of its children like Quake II
                  (http://www.idsoftware.com), Half-Life
                  (http://www.valvesoftware.com) or Unreal (http://www.unreal.com) be
                  used as-is as a platform from which to build other 3-D shared spaces
                  (well, maybe I am suggesting that half-seriously).  More important,
                  I am suggesting that there is a problem because the 3-D game people
                  aren't talking enough to the VRML people, and vice versa. Networking
                  has come so far so fast partly because we have been willing to say,
                  over and over again, "Well, we never thought of using X for Y, but
                  now that you mention it, why not?"

                  The Net is too young, and the 3-D space problem too tricky, to shoot
                  for perfection right now.  What worries me most about my belated
                  discovery of Quake is that in years of looking at 3-D spaces, no one
                  ever mentioned it in the same breath as VRML and I never thought of
                  it myself, simply because of the stigma attached to things that are
                  "merely" games. Many of us, myself very much included, have come to
                  believe our own press about the seriousness of our current
                  endeavors. We have been adversely affected by the commercial
                  applications of the network, and have weaned ourselves off the
                  playfulness that has always produced insights and breakthroughs.

                  It will be a terrible loss if those of us doing this work start to
                  take ourselves too seriously. Round the clock and round the world,
                  there are hundreds of people chasing one another through rooms and
                  tunnels and up and down staircases that don't exist anywhere in the
                  real world, a model of electronic space closer to Gibson's ideal
                  than anything else that exists out there, and we shouldn't write
                  those people off. Their game playing may look frivolous to us
                  Serious Persons, but they know a lot about 3-D shared worlds, and it
                  will be a terrible waste of everybody's time if we don't find a way
                  to tap into that.
                  --<cut>--

                  --
                  J C Lawrence                                 Home: claw@kanga.nu
                  ----------(*)                              Other: coder@kanga.nu
                  --=| A man is as sane as he is dangerous to his environment |=--


                  _______________________________________________
                  MUD-Dev maillist  -  MUD-Dev@kanga.nu
                  http://www.kanga.nu/lists/listinfo/mud-dev
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: '[MUD-Dev] Clay Shirky''s "Playfulness in 3-D Spaces"'
            from: J C Lawrence <claw@kanga.nu>
            references: []
            date: 2000-01-05 03:56:39.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 00uTmp9c
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *67
        parent: 
        children:
        - &356 !ruby/object:MessageContainer
          key: &68 !ruby/object:MessageId
            raw: JzUMQw7s@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: \"Sellers, Michael\" <MSellers@maxis.com>\nDate: Wed, 5
                Jan 2000 08:55:34 -0800\nSubject: RE: [MUD-Dev] Clay Shirky's \"Playfulness
                in 3-D Spaces\"\n\nSigh.  'Quake' as the great hope for 3D online
                spaces.  I've written Shirky\n(does anyone know him?) to point out
                a few things, like say, \"Asheron's\nCall.\"  \n\nMike Sellers\n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: "Sellers, Michael" <MSellers@maxis.com>'
                      name: From
                      value: '"Sellers, Michael" <MSellers@maxis.com>'
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Wed, 5 Jan 2000 08:55:34 -0800'
                      name: Date
                      value: Wed, 5 Jan 2000 08:55:34 -0800
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: RE: [MUD-Dev] Clay Shirky''s "Playfulness in
                        3-D Spaces"'
                      name: Subject
                      value: 'RE: [MUD-Dev] Clay Shirky''s "Playfulness in 3-D Spaces"'
                    mbox_from: 
                  body: "Sigh.  'Quake' as the great hope for 3D online spaces.  I've
                    written Shirky\n(does anyone know him?) to point out a few things,
                    like say, \"Asheron's\nCall.\"  \n\nMike Sellers\n\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'RE: [MUD-Dev] Clay Shirky''s "Playfulness in 3-D Spaces"'
              from: Sellers, Michael <MSellers@maxis.com>
              references: []
              date: 2000-01-05 16:55:34.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: JzUMQw7s
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *68
          parent: *69
          children: []
        - *70
      children:
      - *71
      - &422 !ruby/object:MessageContainer
        key: &72 !ruby/object:MessageId
          raw: JzUDNzQO@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: msew <msew@trilogy.com>\nDate: Sun, 09 Jan 2000 07:33:17 -0600\nSubject:
              Re: [MUD-Dev] Clay Shirky's \"Playfulness in 3-D Spaces\"\n\nAt 02:50
              PM 1/5/00 -0600, Nick Shaffner wrote:\n>From: J C Lawrence <claw@kanga.nu>\n>
              >> http://www.shirky.com/writings/quake.html\n> >>\n> >> --<cut>--\n>
              >> Playfulness in 3-D Spaces\n> >> I have now found what I was looking
              for, and found it, to my\n> >> chagrin, years late. A networked 3-D
              engine with excellent shared\n> >> space capabilities, open source code,
              a well-published\n> >> world-building specification, an active development
              community, and a\n> >> project showing the kind of rapid improvement
              year after year that\n> >> comes from the best massively parallel design
              efforts, such as the\n> >> Web.\n> >>\n> >> It is called Quake.\n> >\n>
              >Oh, good God. :P Somebody go show him EverQuest.\n\n\nso I have not
              yet bothered to go and read the rest of his writings are any \nof them
              worthwhile?  (he seems to be pretty clueless by not playing \ngames.
              \ technology is applied to pornography, games, and military uses)\n\nVRML
              is not quite good at any of those and thus it will be eclipsed by \nsomething
              that is.\n\n\n\n > gibsonian worlds\n\nin one of carmack's .plan entries
              he eludes to him going and attempting to \ncreate a gibsonian cyberspace
              world :)  something along the lines of \"I \nthink it is time for virtual
              worlds.\"\n\n\n\nwoo woo\n\n\nmsew\n\n\n\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: msew <msew@trilogy.com>'
                    name: From
                    value: msew <msew@trilogy.com>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Sun, 09 Jan 2000 07:33:17 -0600'
                    name: Date
                    value: Sun, 09 Jan 2000 07:33:17 -0600
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] Clay Shirky''s "Playfulness in 3-D
                      Spaces"'
                    name: Subject
                    value: 'Re: [MUD-Dev] Clay Shirky''s "Playfulness in 3-D Spaces"'
                  mbox_from: 
                body: "At 02:50 PM 1/5/00 -0600, Nick Shaffner wrote:\n>From: J C
                  Lawrence <claw@kanga.nu>\n> >> http://www.shirky.com/writings/quake.html\n>
                  >>\n> >> --<cut>--\n> >> Playfulness in 3-D Spaces\n> >> I have
                  now found what I was looking for, and found it, to my\n> >> chagrin,
                  years late. A networked 3-D engine with excellent shared\n> >> space
                  capabilities, open source code, a well-published\n> >> world-building
                  specification, an active development community, and a\n> >> project
                  showing the kind of rapid improvement year after year that\n> >>
                  comes from the best massively parallel design efforts, such as the\n>
                  >> Web.\n> >>\n> >> It is called Quake.\n> >\n> >Oh, good God. :P
                  Somebody go show him EverQuest.\n\n\nso I have not yet bothered
                  to go and read the rest of his writings are any \nof them worthwhile?
                  \ (he seems to be pretty clueless by not playing \ngames.  technology
                  is applied to pornography, games, and military uses)\n\nVRML is
                  not quite good at any of those and thus it will be eclipsed by \nsomething
                  that is.\n\n\n\n > gibsonian worlds\n\nin one of carmack's .plan
                  entries he eludes to him going and attempting to \ncreate a gibsonian
                  cyberspace world :)  something along the lines of \"I \nthink it
                  is time for virtual worlds.\"\n\n\n\nwoo woo\n\n\nmsew\n\n\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] Clay Shirky''s "Playfulness in 3-D Spaces"'
            from: msew <msew@trilogy.com>
            references: []
            date: 2000-01-09 13:33:17.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: JzUDNzQO
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *72
        parent: *70
        children: []
      - &75 !ruby/object:MessageContainer
        key: &73 !ruby/object:MessageId
          raw: 00IySseO@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: |
              From: "Raph & Kristen Koster" <koster@eden.com>
              Date: Tue, 4 Jan 2000 22:36:33 -0600
              Subject: Re: [MUD-Dev] Clay Shirky's "Playfulness in 3-D Spaces"

              ----- Original Message -----
              From: J C Lawrence <claw@kanga.nu>
              To: <mud-dev@kanga.nu>
              Sent: Tuesday, January 04, 2000 9:56 PM
              Subject: [MUD-Dev] Clay Shirky's "Playfulness in 3-D Spaces"


              >
              > http://www.shirky.com/writings/quake.html
              >
              > --<cut>--
              > Playfulness in 3-D Spaces
              > I have now found what I was looking for, and found it, to my
              > chagrin, years late. A networked 3-D engine with excellent shared
              > space capabilities, open source code, a well-published
              > world-building specification, an active development community, and a
              > project showing the kind of rapid improvement year after year that
              > comes from the best massively parallel design efforts, such as the
              > Web.
              >
              > It is called Quake.

              Oh, good God. :P Somebody go show him EverQuest.

              To me, this realization betrays the fundamental blindness of the academic VR
              community. The real problems with shared VR spaces aren't even
              technological, they're social--but they can't see the forest for the trees.
              In most ways, text muds are a more sophisticated VR than their (largely
              theoretical) endeavors can encompass. The fact that they are still hung up
              on the issue of display, of all things, indicates how much thinking they
              actually have to do about the problem.

              Clients are the least of your concerns in virtual space design. :P

              -Raph




              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: "Raph & Kristen Koster" <koster@eden.com>'
                    name: From
                    value: '"Raph & Kristen Koster" <koster@eden.com>'
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Tue, 4 Jan 2000 22:36:33 -0600'
                    name: Date
                    value: Tue, 4 Jan 2000 22:36:33 -0600
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] Clay Shirky''s "Playfulness in 3-D
                      Spaces"'
                    name: Subject
                    value: 'Re: [MUD-Dev] Clay Shirky''s "Playfulness in 3-D Spaces"'
                  mbox_from: 
                body: |
                  ----- Original Message -----
                  From: J C Lawrence <claw@kanga.nu>
                  To: <mud-dev@kanga.nu>
                  Sent: Tuesday, January 04, 2000 9:56 PM
                  Subject: [MUD-Dev] Clay Shirky's "Playfulness in 3-D Spaces"


                  >
                  > http://www.shirky.com/writings/quake.html
                  >
                  > --<cut>--
                  > Playfulness in 3-D Spaces
                  > I have now found what I was looking for, and found it, to my
                  > chagrin, years late. A networked 3-D engine with excellent shared
                  > space capabilities, open source code, a well-published
                  > world-building specification, an active development community, and a
                  > project showing the kind of rapid improvement year after year that
                  > comes from the best massively parallel design efforts, such as the
                  > Web.
                  >
                  > It is called Quake.

                  Oh, good God. :P Somebody go show him EverQuest.

                  To me, this realization betrays the fundamental blindness of the academic VR
                  community. The real problems with shared VR spaces aren't even
                  technological, they're social--but they can't see the forest for the trees.
                  In most ways, text muds are a more sophisticated VR than their (largely
                  theoretical) endeavors can encompass. The fact that they are still hung up
                  on the issue of display, of all things, indicates how much thinking they
                  actually have to do about the problem.

                  Clients are the least of your concerns in virtual space design. :P

                  -Raph




                  _______________________________________________
                  MUD-Dev maillist  -  MUD-Dev@kanga.nu
                  http://www.kanga.nu/lists/listinfo/mud-dev
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] Clay Shirky''s "Playfulness in 3-D Spaces"'
            from: Raph & Kristen Koster <koster@eden.com>
            references: []
            date: 2000-01-05 04:36:33.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 00IySseO
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *73
        parent: *70
        children:
        - &458 !ruby/object:MessageContainer
          key: &74 !ruby/object:MessageId
            raw: JzUMQxBA@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: \"Jeremy Music \\\"Sterling\\\"\" <rezo@lords.com>\nDate:
                Wed, 5 Jan 2000 11:27:46 -0500 (EST)\nSubject: Re: [MUD-Dev] Clay
                Shirky's \"Playfulness in 3-D Spaces\"\n\nOn Tue, 4 Jan 2000, J C
                Lawrence wrote:\n> \n> http://www.shirky.com/writings/quake.html\n>
                \n> --<cut>--\n> \n> The Net is too young, and the 3-D space problem
                too tricky, to shoot\n> for perfection right now.  What worries me
                most about my belated\n> discovery of Quake is that in years of looking
                at 3-D spaces, no one\n> ever mentioned it in the same breath as VRML
                and I never thought of\n> it myself, simply because of the stigma
                attached to things that are\n> \"merely\" games. Many of us, myself
                very much included, have come to\n> believe our own press about the
                seriousness of our current\n> endeavors. We have been adversely affected
                by the commercial\n> applications of the network, and have weaned
                ourselves off the\n> playfulness that has always produced insights
                and breakthroughs.\n> \n\nThose of us who have been living in these
                3-D worlds (Quake I/II/III,\nUnreal, Halflife, Everquest, etc.) have
                been watching with some amusement\nas the \"VRML people\" attempted
                to create something that we'd been playing\nwith for years.\n\nI checked
                out VRML a couple years ago, and then again about a year ago,\nand
                silently wondered why they were so \"behind the times\" when Quake
                did\nwhat they were aiming for, and did it faster and prettier, truly
                giving\nthe feeling of \"immersion\" that VRML just couldn't provide.\n\nEverquest,
                though fantasy based, is an excellent example of an\napplied 3d world.
                \ You can act and interact with other people in a \"face\nto face\"
                environment.  I am sure the next generation of this type of game\nwill
                allow voice communication as well, coming very close to a total\nimmersion,
                not quite Lawnmower Man or The Matrix, but I think we are\nstill many,
                many years from such total immersion, and for that matter I\nbelieve
                that many people will not want such a total immersion and would\nopt
                for the simpler but \"safer\" immersion of controlling an avatar.\n\nJeremy
                Music\n(I don't live in a perfect world, maybe I can create one)\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: "Jeremy Music \"Sterling\"" <rezo@lords.com>'
                      name: From
                      value: '"Jeremy Music \"Sterling\"" <rezo@lords.com>'
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Wed, 5 Jan 2000 11:27:46 -0500 (EST)'
                      name: Date
                      value: Wed, 5 Jan 2000 11:27:46 -0500 (EST)
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Clay Shirky''s "Playfulness in
                        3-D Spaces"'
                      name: Subject
                      value: 'Re: [MUD-Dev] Clay Shirky''s "Playfulness in 3-D Spaces"'
                    mbox_from: 
                  body: "On Tue, 4 Jan 2000, J C Lawrence wrote:\n> \n> http://www.shirky.com/writings/quake.html\n>
                    \n> --<cut>--\n> \n> The Net is too young, and the 3-D space problem
                    too tricky, to shoot\n> for perfection right now.  What worries
                    me most about my belated\n> discovery of Quake is that in years
                    of looking at 3-D spaces, no one\n> ever mentioned it in the same
                    breath as VRML and I never thought of\n> it myself, simply because
                    of the stigma attached to things that are\n> \"merely\" games.
                    Many of us, myself very much included, have come to\n> believe
                    our own press about the seriousness of our current\n> endeavors.
                    We have been adversely affected by the commercial\n> applications
                    of the network, and have weaned ourselves off the\n> playfulness
                    that has always produced insights and breakthroughs.\n> \n\nThose
                    of us who have been living in these 3-D worlds (Quake I/II/III,\nUnreal,
                    Halflife, Everquest, etc.) have been watching with some amusement\nas
                    the \"VRML people\" attempted to create something that we'd been
                    playing\nwith for years.\n\nI checked out VRML a couple years
                    ago, and then again about a year ago,\nand silently wondered why
                    they were so \"behind the times\" when Quake did\nwhat they were
                    aiming for, and did it faster and prettier, truly giving\nthe
                    feeling of \"immersion\" that VRML just couldn't provide.\n\nEverquest,
                    though fantasy based, is an excellent example of an\napplied 3d
                    world.  You can act and interact with other people in a \"face\nto
                    face\" environment.  I am sure the next generation of this type
                    of game\nwill allow voice communication as well, coming very close
                    to a total\nimmersion, not quite Lawnmower Man or The Matrix,
                    but I think we are\nstill many, many years from such total immersion,
                    and for that matter I\nbelieve that many people will not want
                    such a total immersion and would\nopt for the simpler but \"safer\"
                    immersion of controlling an avatar.\n\nJeremy Music\n(I don't
                    live in a perfect world, maybe I can create one)\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Clay Shirky''s "Playfulness in 3-D Spaces"'
              from: Jeremy Music \Sterling\"" <rezo@lords.com>
              references: []
              date: 2000-01-05 16:27:46.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: JzUMQxBA
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *74
          parent: *75
          children: []
    children: []
  ? &76 !ruby/object:MessageId
    raw: 00uTkdns@generated-message-id.chibrary.org
  : &78 !ruby/object:MessageContainer
    key: *76
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: |
          From: Marian Griffith <gryphon@iaehv.nl>
          Date: Sun, 2 Jan 2000 23:06:00 +0000 (GMT)
          Subject: Re: [MUD-Dev] Admins as Mortals twist

          In <URL:news:local.muddev> on Fri 31 Dec, Greg Miller wrote:
          > msew wrote:

          > > Shrug, I personally think the faceless admin team is a bad idea.  You
          > > quickly get to the us (players) vs them (admin)

          > But more quickly than without it? I'm skeptical. Personal hate crops up
          > most quickly if you have a person to hate.

          Hate yes,  but people dislike faceless organisations almost automatically
          And more worrying (from an admin point of view) is  that they do not feel
          restricted to act against such organisations. People generally feel a lot
          less worse about cheating the taxes than about cheating an acquintance.
          If admin are perceived as people,  it will be easier to dislike (and even
          outright hate) one specific person, but hopefully there will be less act-
          ion against the entire staff as a whole.

          Marian
          --
          Yes - at last - You. I Choose you. Out of all the world,
          out of all the seeking, I have found you, young sister of
          my heart! You are mine and I am yours - and never again
          will there be loneliness ...

          Rolan Choosing Talia,
          Arrows of the Queen, by Mercedes Lackey




          _______________________________________________
          MUD-Dev maillist  -  MUD-Dev@kanga.nu
          http://www.kanga.nu/lists/listinfo/mud-dev
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Marian Griffith <gryphon@iaehv.nl>'
                name: From
                value: Marian Griffith <gryphon@iaehv.nl>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Sun, 2 Jan 2000 23:06:00 +0000 (GMT)'
                name: Date
                value: Sun, 2 Jan 2000 23:06:00 +0000 (GMT)
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: [MUD-Dev] Admins as Mortals twist'
                name: Subject
                value: 'Re: [MUD-Dev] Admins as Mortals twist'
              mbox_from: 
            body: |
              In <URL:news:local.muddev> on Fri 31 Dec, Greg Miller wrote:
              > msew wrote:

              > > Shrug, I personally think the faceless admin team is a bad idea.  You
              > > quickly get to the us (players) vs them (admin)

              > But more quickly than without it? I'm skeptical. Personal hate crops up
              > most quickly if you have a person to hate.

              Hate yes,  but people dislike faceless organisations almost automatically
              And more worrying (from an admin point of view) is  that they do not feel
              restricted to act against such organisations. People generally feel a lot
              less worse about cheating the taxes than about cheating an acquintance.
              If admin are perceived as people,  it will be easier to dislike (and even
              outright hate) one specific person, but hopefully there will be less act-
              ion against the entire staff as a whole.

              Marian
              --
              Yes - at last - You. I Choose you. Out of all the world,
              out of all the seeking, I have found you, young sister of
              my heart! You are mine and I am yours - and never again
              will there be loneliness ...

              Rolan Choosing Talia,
              Arrows of the Queen, by Mercedes Lackey




              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: [MUD-Dev] Admins as Mortals twist'
        from: Marian Griffith <gryphon@iaehv.nl>
        references: []
        date: 2000-01-02 23:06:00.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00uTkdns
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *76
    parent: 
    children:
    - &80 !ruby/object:MessageContainer
      key: &77 !ruby/object:MessageId
        raw: 00IySsee@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: |
            From: Greg Miller <gmiller@classic-games.com>
            Date: Mon, 03 Jan 2000 07:57:00 -0600
            Subject: Re: [MUD-Dev] Admins as Mortals twist

            Marian Griffith wrote:
            > Hate yes,  but people dislike faceless organisations almost automatically
            > And more worrying (from an admin point of view) is  that they do not feel
            > restricted to act against such organisations. People generally feel a lot
            > less worse about cheating the taxes than about cheating an acquintance.
            > If admin are perceived as people,  it will be easier to dislike (and even
            > outright hate) one specific person, but hopefully there will be less act-
            > ion against the entire staff as a whole.

            I doubt it. If people don't interact with the admins, they'll probably
            simply not think about them very often. I consider that a good thing,
            since admins are more of a necessary evil than anything else. It's been
            my experience that people become less angry with machines than people,
            and don't stay mad at them as long.
            --
            http://www.classic-games.com/
            Conspiracy theorists mistakenly assume others think before acting.
            *** Please limit .sigs to four lines and avoid HTML mail or posts. ***



            _______________________________________________
            MUD-Dev maillist  -  MUD-Dev@kanga.nu
            http://www.kanga.nu/lists/listinfo/mud-dev
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: Greg Miller <gmiller@classic-games.com>'
                  name: From
                  value: Greg Miller <gmiller@classic-games.com>
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Mon, 03 Jan 2000 07:57:00 -0600'
                  name: Date
                  value: Mon, 03 Jan 2000 07:57:00 -0600
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] Admins as Mortals twist'
                  name: Subject
                  value: 'Re: [MUD-Dev] Admins as Mortals twist'
                mbox_from: 
              body: |
                Marian Griffith wrote:
                > Hate yes,  but people dislike faceless organisations almost automatically
                > And more worrying (from an admin point of view) is  that they do not feel
                > restricted to act against such organisations. People generally feel a lot
                > less worse about cheating the taxes than about cheating an acquintance.
                > If admin are perceived as people,  it will be easier to dislike (and even
                > outright hate) one specific person, but hopefully there will be less act-
                > ion against the entire staff as a whole.

                I doubt it. If people don't interact with the admins, they'll probably
                simply not think about them very often. I consider that a good thing,
                since admins are more of a necessary evil than anything else. It's been
                my experience that people become less angry with machines than people,
                and don't stay mad at them as long.
                --
                http://www.classic-games.com/
                Conspiracy theorists mistakenly assume others think before acting.
                *** Please limit .sigs to four lines and avoid HTML mail or posts. ***



                _______________________________________________
                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                http://www.kanga.nu/lists/listinfo/mud-dev
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] Admins as Mortals twist'
          from: Greg Miller <gmiller@classic-games.com>
          references: []
          date: 2000-01-03 13:57:00.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: 00IySsee
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *77
      parent: *78
      children:
      - &473 !ruby/object:MessageContainer
        key: &79 !ruby/object:MessageId
          raw: 000DlhUO@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: Matthew Mihaly <diablo@best.com>\nDate: Mon, 3 Jan 2000 10:57:14
              -0800 (PST)\nSubject: Re: [MUD-Dev] Admins as Mortals twist\n\nOn Mon,
              3 Jan 2000, Greg Miller wrote:\n\n> Marian Griffith wrote:\n> > Hate
              yes,  but people dislike faceless organisations almost automatically\n>
              > And more worrying (from an admin point of view) is  that they do not
              feel\n> > restricted to act against such organisations. People generally
              feel a lot\n> > less worse about cheating the taxes than about cheating
              an acquintance.\n> > If admin are perceived as people,  it will be easier
              to dislike (and even\n> > outright hate) one specific person, but hopefully
              there will be less act-\n> > ion against the entire staff as a whole.\n>
              \n> I doubt it. If people don't interact with the admins, they'll probably\n>
              simply not think about them very often. I consider that a good thing,\n>
              since admins are more of a necessary evil than anything else. It's been\n>
              my experience that people become less angry with machines than people,\n>
              and don't stay mad at them as long.\n\nThe other problem with \"admins
              as people\" is that the admins themselves\nfeel as if they have more
              power when they are unique beings, and they are\nmore likely, in my
              experience, to get into personal grudges with\nplayers. When they are
              faceless, they can just blend back into the admin\npool, and so insults
              to a particular admin from a mortal are unlikely to\nengender any particularly
              bad feelings on the part of the admin.\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: Matthew Mihaly <diablo@best.com>'
                    name: From
                    value: Matthew Mihaly <diablo@best.com>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Mon, 3 Jan 2000 10:57:14 -0800 (PST)'
                    name: Date
                    value: Mon, 3 Jan 2000 10:57:14 -0800 (PST)
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] Admins as Mortals twist'
                    name: Subject
                    value: 'Re: [MUD-Dev] Admins as Mortals twist'
                  mbox_from: 
                body: "On Mon, 3 Jan 2000, Greg Miller wrote:\n\n> Marian Griffith
                  wrote:\n> > Hate yes,  but people dislike faceless organisations
                  almost automatically\n> > And more worrying (from an admin point
                  of view) is  that they do not feel\n> > restricted to act against
                  such organisations. People generally feel a lot\n> > less worse
                  about cheating the taxes than about cheating an acquintance.\n>
                  > If admin are perceived as people,  it will be easier to dislike
                  (and even\n> > outright hate) one specific person, but hopefully
                  there will be less act-\n> > ion against the entire staff as a whole.\n>
                  \n> I doubt it. If people don't interact with the admins, they'll
                  probably\n> simply not think about them very often. I consider that
                  a good thing,\n> since admins are more of a necessary evil than
                  anything else. It's been\n> my experience that people become less
                  angry with machines than people,\n> and don't stay mad at them as
                  long.\n\nThe other problem with \"admins as people\" is that the
                  admins themselves\nfeel as if they have more power when they are
                  unique beings, and they are\nmore likely, in my experience, to get
                  into personal grudges with\nplayers. When they are faceless, they
                  can just blend back into the admin\npool, and so insults to a particular
                  admin from a mortal are unlikely to\nengender any particularly bad
                  feelings on the part of the admin.\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] Admins as Mortals twist'
            from: Matthew Mihaly <diablo@best.com>
            references: []
            date: 2000-01-03 18:57:14.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 000DlhUO
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *79
        parent: *80
        children: []
  *35: *38
  ? &81 !ruby/object:MessageId
    raw: 00bj7qN6@generated-message-id.chibrary.org
  : &474 !ruby/object:MessageContainer
    key: *81
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: |
          From: IronWolf <ironwolf@ewa.net>
          Date: Tue, 18 Jan 2000 23:02:06 -0800
          Subject: [MUD-Dev] Signing off...

          Greetings all.

          Well, after lurking for a bit, I've decided to unsubscribe from the list. This
          isn't due to any problems or bad experiences I've had. On the contrary, I find
          the list to be very true for it's intended purpose. The problem is that I'm not.
          It's clear that most of the conversation here is most useful to the
          professionals of the industry, and I am not one of them. All that lurking here
          does is make me feel rather inadequate.

          So, I think for now I am returning to an older hobby that I would like to get
          practice in, namely, tabletop gaming. Say what you will, but there's a lot of
          fun to be had with a pencil, some paper, and dice, as well as just getting
          together with friends to have a good time. I've yet to find any CRPG that can
          replicate this. Good luck to you guys searching for it, it's definitely a worthy
          quest.

          Sincerely,

          IronWolf



          _______________________________________________
          MUD-Dev maillist  -  MUD-Dev@kanga.nu
          http://www.kanga.nu/lists/listinfo/mud-dev
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: IronWolf <ironwolf@ewa.net>'
                name: From
                value: IronWolf <ironwolf@ewa.net>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Tue, 18 Jan 2000 23:02:06 -0800'
                name: Date
                value: Tue, 18 Jan 2000 23:02:06 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] Signing off...'
                name: Subject
                value: "[MUD-Dev] Signing off..."
              mbox_from: 
            body: |
              Greetings all.

              Well, after lurking for a bit, I've decided to unsubscribe from the list. This
              isn't due to any problems or bad experiences I've had. On the contrary, I find
              the list to be very true for it's intended purpose. The problem is that I'm not.
              It's clear that most of the conversation here is most useful to the
              professionals of the industry, and I am not one of them. All that lurking here
              does is make me feel rather inadequate.

              So, I think for now I am returning to an older hobby that I would like to get
              practice in, namely, tabletop gaming. Say what you will, but there's a lot of
              fun to be had with a pencil, some paper, and dice, as well as just getting
              together with friends to have a good time. I've yet to find any CRPG that can
              replicate this. Good luck to you guys searching for it, it's definitely a worthy
              quest.

              Sincerely,

              IronWolf



              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] Signing off..."
        from: IronWolf <ironwolf@ewa.net>
        references: []
        date: 2000-01-19 07:02:06.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00bj7qN6
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *81
    parent: 
    children: []
  ? &82 !ruby/object:MessageId
    raw: 00bj7qLY@generated-message-id.chibrary.org
  : &93 !ruby/object:MessageContainer
    key: *82
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Tue, 18 Jan 2000 21:48:50
          -0800\nSubject: Re: [MUD-Dev] Question about multithreaded servers\n\nOn
          Tue, 18 Jan 2000 22:31:50 -0700 \ncg  <cg@ami-cg.GraySage.Edmonton.AB.CA>
          wrote:\n\n> [Greg Underwood:]\n>>>>> I suppose just by making a simple requirement
          that all\n>>>>> objects must be secured at the begining of the cript would\n>>>>>
          take care of that.\n\nAhem.  Attribution?\n\n>> No, that's not true.  Just
          because you attempt to lock everything\n>> before you execute the script
          doesn't mean you avoid deadlocks.\n\n> Perhaps the original writer was assuming
          that all the locks are\n> acquired at once. An example of that is the SysV
          locking stuff in\n> some versions of UNIX. It's ugly as sin, but essentially
          allows\n> you to do a whole mess of lock operations all at once, atomically.\n\nThat
          requires you to know the full list of to-be-locked resources in\nadvance,
          something which is not necessarily difficult in an OS\ncontext with its
          clearly defined call tree semantics, but can be an\nutter bitch in a MUD.
          \ This is one of the major reasons I went with\nthe lockeless model.  Going
          for a hard lock model looked fraught\nwith Oh-damn-I-forgot-about-that's.\n\n--\nJ
          C Lawrence                                 Home: claw@kanga.nu\n----------(*)
          \                             Other: coder@kanga.nu\n--=| A man is as sane
          as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Tue, 18 Jan 2000 21:48:50 -0800'
                name: Date
                value: Tue, 18 Jan 2000 21:48:50 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: [MUD-Dev] Question about multithreaded servers'
                name: Subject
                value: 'Re: [MUD-Dev] Question about multithreaded servers'
              mbox_from: 
            body: "On Tue, 18 Jan 2000 22:31:50 -0700 \ncg  <cg@ami-cg.GraySage.Edmonton.AB.CA>
              wrote:\n\n> [Greg Underwood:]\n>>>>> I suppose just by making a simple
              requirement that all\n>>>>> objects must be secured at the begining
              of the cript would\n>>>>> take care of that.\n\nAhem.  Attribution?\n\n>>
              No, that's not true.  Just because you attempt to lock everything\n>>
              before you execute the script doesn't mean you avoid deadlocks.\n\n>
              Perhaps the original writer was assuming that all the locks are\n> acquired
              at once. An example of that is the SysV locking stuff in\n> some versions
              of UNIX. It's ugly as sin, but essentially allows\n> you to do a whole
              mess of lock operations all at once, atomically.\n\nThat requires you
              to know the full list of to-be-locked resources in\nadvance, something
              which is not necessarily difficult in an OS\ncontext with its clearly
              defined call tree semantics, but can be an\nutter bitch in a MUD.  This
              is one of the major reasons I went with\nthe lockeless model.  Going
              for a hard lock model looked fraught\nwith Oh-damn-I-forgot-about-that's.\n\n--\nJ
              C Lawrence                                 Home: claw@kanga.nu\n----------(*)
              \                             Other: coder@kanga.nu\n--=| A man is as
              sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: [MUD-Dev] Question about multithreaded servers'
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-19 05:48:50.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00bj7qLY
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *82
    parent: &92 !ruby/object:MessageContainer
      key: &83 !ruby/object:MessageId
        raw: 000Dntrc@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: Greg Underwood <gunderwood@donet.com>\nDate: Thu, 20 Jan 2000
            00:21:32 +0000\nSubject: Re: [MUD-Dev] Question about multithreaded servers\n\nAt
            09:48 PM 1/18/00 -0800, J C Lawrence <claw@kanga.nu> wrote:\n>On Tue,
            18 Jan 2000 22:31:50 -0700 \n>cg  <cg@ami-cg.GraySage.Edmonton.AB.CA>
            wrote:\n>\n>> [Greg Underwood:]\n>>>\n>>> No, that's not true.  Just because
            you attempt to lock everything\n>>> before you execute the script doesn't
            mean you avoid deadlocks.\n>\n>> Perhaps the original writer was assuming
            that all the locks are\n>> acquired at once. An example of that is the
            SysV locking stuff in\n>> some versions of UNIX. It's ugly as sin, but
            essentially allows\n>> you to do a whole mess of lock operations all at
            once, atomically.\n\nThat's a good point... I wasn't aware of that option.
            \ :)  I've been\nmessing with Linux and Irix threads a lot, but not the
            real, down'n'dirty\naspects.  However, if portability is ever a desired
            feature, I'd avoid the\ngrab 'em all atomically feature.  Besides, always
            locking in the same order\nenforces disciplin in your coding, something
            you can never have too much\nof, /especially/ when you're dealing with
            threads.  ;)\n\n>That requires you to know the full list of to-be-locked
            resources in\n>advance, something which is not necessarily difficult in
            an OS\n>context with its clearly defined call tree semantics, but can
            be an\n>utter bitch in a MUD.\n\nVery true.  I was assuming that the scripting
            engine was capable of looking\nat the code a bit and figuring out everyone
            you'd need to lock, prior to\nexecution.  Building in that look-ahead
            code would be the trade-off you'd\nhave to decide on, when deciding if
            it's really imperative to insure\nmessage delivery in the same order as
            they are in the code.\n\n>  This is one of the major reasons I went with\n>the
            lockeless model.  Going for a hard lock model looked fraught\n>with Oh-damn-I-forgot-about-that's.\n\nyeah,
            but a transactional model has it's own pile of those, and can result\nin
            code being executed and re-executed, as it attempts to commit the\nchanges
            it is making and fails.  I'll leave the discussion at that, since I\nrecall
            having this very conversation with you, JC, some time ago.  I'm sure\nany
            interested parties could scrounge the thread out of the archive, if\nthey
            wanna get more details on it. ;)\n\n[pulled this from Chris Gray's previous
            message, since JC didn't include it\nin his response]\n\n> I hadn't thought
            of that - I'll have to go check the stuff at work. I\n> likely did it
            reverse order, just because it looks better to me, but\n> possibly not
            always. Thanks for the tip!\n\nNo problem.  The main reason I do it is
            that it looks better; it makes you\nthink of the locks as a stack, to
            which you can only push and pop.  And\nagain, it encourages disciplin.\n\n-Greg\n\n\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: Greg Underwood <gunderwood@donet.com>'
                  name: From
                  value: Greg Underwood <gunderwood@donet.com>
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Thu, 20 Jan 2000 00:21:32 +0000'
                  name: Date
                  value: Thu, 20 Jan 2000 00:21:32 +0000
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] Question about multithreaded servers'
                  name: Subject
                  value: 'Re: [MUD-Dev] Question about multithreaded servers'
                mbox_from: 
              body: "At 09:48 PM 1/18/00 -0800, J C Lawrence <claw@kanga.nu> wrote:\n>On
                Tue, 18 Jan 2000 22:31:50 -0700 \n>cg  <cg@ami-cg.GraySage.Edmonton.AB.CA>
                wrote:\n>\n>> [Greg Underwood:]\n>>>\n>>> No, that's not true.  Just
                because you attempt to lock everything\n>>> before you execute the
                script doesn't mean you avoid deadlocks.\n>\n>> Perhaps the original
                writer was assuming that all the locks are\n>> acquired at once. An
                example of that is the SysV locking stuff in\n>> some versions of
                UNIX. It's ugly as sin, but essentially allows\n>> you to do a whole
                mess of lock operations all at once, atomically.\n\nThat's a good
                point... I wasn't aware of that option.  :)  I've been\nmessing with
                Linux and Irix threads a lot, but not the real, down'n'dirty\naspects.
                \ However, if portability is ever a desired feature, I'd avoid the\ngrab
                'em all atomically feature.  Besides, always locking in the same order\nenforces
                disciplin in your coding, something you can never have too much\nof,
                /especially/ when you're dealing with threads.  ;)\n\n>That requires
                you to know the full list of to-be-locked resources in\n>advance,
                something which is not necessarily difficult in an OS\n>context with
                its clearly defined call tree semantics, but can be an\n>utter bitch
                in a MUD.\n\nVery true.  I was assuming that the scripting engine
                was capable of looking\nat the code a bit and figuring out everyone
                you'd need to lock, prior to\nexecution.  Building in that look-ahead
                code would be the trade-off you'd\nhave to decide on, when deciding
                if it's really imperative to insure\nmessage delivery in the same
                order as they are in the code.\n\n>  This is one of the major reasons
                I went with\n>the lockeless model.  Going for a hard lock model looked
                fraught\n>with Oh-damn-I-forgot-about-that's.\n\nyeah, but a transactional
                model has it's own pile of those, and can result\nin code being executed
                and re-executed, as it attempts to commit the\nchanges it is making
                and fails.  I'll leave the discussion at that, since I\nrecall having
                this very conversation with you, JC, some time ago.  I'm sure\nany
                interested parties could scrounge the thread out of the archive, if\nthey
                wanna get more details on it. ;)\n\n[pulled this from Chris Gray's
                previous message, since JC didn't include it\nin his response]\n\n>
                I hadn't thought of that - I'll have to go check the stuff at work.
                I\n> likely did it reverse order, just because it looks better to
                me, but\n> possibly not always. Thanks for the tip!\n\nNo problem.
                \ The main reason I do it is that it looks better; it makes you\nthink
                of the locks as a stack, to which you can only push and pop.  And\nagain,
                it encourages disciplin.\n\n-Greg\n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] Question about multithreaded servers'
          from: Greg Underwood <gunderwood@donet.com>
          references: []
          date: 2000-01-20 00:21:32.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: 000Dntrc
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *83
      parent: &88 !ruby/object:MessageContainer
        key: &84 !ruby/object:MessageId
          raw: 000DlgPo@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: cg@ami-cg.GraySage.Edmonton.AB.CA\nDate: Tue, 18 Jan 2000
              22:31:50 -0700\nSubject: RE: [MUD-Dev] Question about multithreaded
              servers\n\n[Greg Underwood:]\n\n> >> > I suppose just by making a simple
              requirement that\n> >> > all objects must be secured at the begining
              of the\n> >> > script would take care of that.\n>\n> No, that's not
              true.  Just because you attempt to lock everything before\n> you execute
              the script doesn't mean you avoid deadlocks.  Deadlocks occur\n> when
              the following happens:\n>\n> \tThread 1 - Get Lock 1 - ok\n> \tThread
              2 - Get Lock 2 - ok\n> \tThread 1 - Get Lock 2 - block\n> \tThread 2
              - Get Lock 1 - block\n\nPerhaps the original writer was assuming that
              all the locks are acquired\nat once. An example of that is the SysV
              locking stuff in some versions of\nUNIX. It's ugly as sin, but essentially
              allows you to do a whole mess of\nlock operations all at once, atomically.\n\n>
              BTW, I had it realease the Locks in reverse order, simply to avoid minor\n>
              thrashing.\n\nI hadn't thought of that - I'll have to go check the stuff
              at work. I\nlikely did it reverse order, just because it looks better
              to me, but\npossibly not always. Thanks for the tip!\n\n\n--\nDon't
              design inefficiency in - it'll happen in the implementation.\n\nChris
              Gray     cg@ami-cg.GraySage.Edmonton.AB.CA\n               http://www.GraySage.Edmonton.AB.CA/cg/\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: cg@ami-cg.GraySage.Edmonton.AB.CA'
                    name: From
                    value: cg@ami-cg.GraySage.Edmonton.AB.CA
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Tue, 18 Jan 2000 22:31:50 -0700'
                    name: Date
                    value: Tue, 18 Jan 2000 22:31:50 -0700
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: RE: [MUD-Dev] Question about multithreaded servers'
                    name: Subject
                    value: 'RE: [MUD-Dev] Question about multithreaded servers'
                  mbox_from: 
                body: "[Greg Underwood:]\n\n> >> > I suppose just by making a simple
                  requirement that\n> >> > all objects must be secured at the begining
                  of the\n> >> > script would take care of that.\n>\n> No, that's
                  not true.  Just because you attempt to lock everything before\n>
                  you execute the script doesn't mean you avoid deadlocks.  Deadlocks
                  occur\n> when the following happens:\n>\n> \tThread 1 - Get Lock
                  1 - ok\n> \tThread 2 - Get Lock 2 - ok\n> \tThread 1 - Get Lock
                  2 - block\n> \tThread 2 - Get Lock 1 - block\n\nPerhaps the original
                  writer was assuming that all the locks are acquired\nat once. An
                  example of that is the SysV locking stuff in some versions of\nUNIX.
                  It's ugly as sin, but essentially allows you to do a whole mess
                  of\nlock operations all at once, atomically.\n\n> BTW, I had it
                  realease the Locks in reverse order, simply to avoid minor\n> thrashing.\n\nI
                  hadn't thought of that - I'll have to go check the stuff at work.
                  I\nlikely did it reverse order, just because it looks better to
                  me, but\npossibly not always. Thanks for the tip!\n\n\n--\nDon't
                  design inefficiency in - it'll happen in the implementation.\n\nChris
                  Gray     cg@ami-cg.GraySage.Edmonton.AB.CA\n               http://www.GraySage.Edmonton.AB.CA/cg/\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'RE: [MUD-Dev] Question about multithreaded servers'
            from: cg@ami-cg.GraySage.Edmonton.AB.CA
            references: []
            date: 2000-01-19 05:31:50.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 000DlgPo
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *84
        parent: &87 !ruby/object:MessageContainer
          key: &85 !ruby/object:MessageId
            raw: JzBSiza4@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: Greg Underwood <gunderwood@donet.com>\nDate: Tue, 18 Jan
                2000 23:18:44 +0000\nSubject: RE: [MUD-Dev] Question about multithreaded
                servers\n\nIt's been a while since I posted, so \"howdy\" to everyone.
                \ I've been\nlurking since I got back from Europe, but this thread
                (pardon the pun)\ncaught my eye.\n\nAt 08:34 AM 1/18/00 -0600, \"Fabian\"
                <lemkef@execpc.com> wrote:\n>\n>> -----Original Message-----\n>> From:
                Jon A. Lambert [mailto:jlsysinc@ix.netcom.com]\n>>\n>> Fabian wrote:\n>>
                >\n>> > I suppose just by making a simple requirement that\n>> > all
                objects must be secured at the begining of the\n>> > script would
                take care of that.\n\nNo, that's not true.  Just because you attempt
                to lock everything before\nyou execute the script doesn't mean you
                avoid deadlocks.  Deadlocks occur\nwhen the following happens:\n\n\tThread
                1 - Get Lock 1 - ok\n\tThread 2 - Get Lock 2 - ok\n\tThread 1 - Get
                Lock 2 - block\n\tThread 2 - Get Lock 1 - block\n\nBoth threads block
                on their second calls to get the locks that the other\nthread has.
                \ The reason this occurs is that they both grabbed the locks in\na
                different order.  Thread 1 attempted to get Lock 1 and then 2, while\nThread
                2 attempted to get Lock 2 and then 1.  No matter when this occurs
                in\nyour script execution process, you will get a deadlock.  Simply
                moving the\nattempts to get the locks to before the script executes
                does nothing to\nprevent that order of events.  The OS can still preempt
                any thread at any\ntime, and grabbing the locks in a different order
                will open your code to\ndeadlocks.\n\nThe only way to gaurentee you
                will not get a deadlock is to ALWAYS have\nEVERY thread attempt to
                obtain the same locks in the same order.  In that\ncase, this is what
                happens:\n\n\tThread 1 - Get Lock 1 - ok\n\tThread 2 - Get Lock 1
                - block\n\tThread 1 - Get Lock 2 - ok\n\tThread 1 - execute required
                stuff\n\tThread 1 - Release Lock 2, release Lock 1\n\tThread 2 - Unblocks,
                having gotten Lock 1\n\tThread 2 - Get Lock 2 - ok\n\tThread 2 - ...\n\nThread
                2 will never deadlock once it comes out of getting Lock 1 because\nany
                other thread that requires both Lock 1 and Lock 2 will be blocked
                on\nthe 'Get Lock 1' call, w/o having Lock 2.  When the OS decides
                to preempt\nhas no effect on which locks you can get.\n\nBTW, I had
                it realease the Locks in reverse order, simply to avoid minor\nthrashing.
                \ Assume you release Lock 1 and then 2, but when you release 1,\nthe
                OS wakes another thread that is waiting on 1.  This thread then\nattempts
                to get Lock 2, and blocks again.  The OS then has to switch\ncontrol
                back to the original thread to realease Lock 2, and then switch\ncontrol
                back to the second thread again to get Lock 2.  Releasing in\nreverse
                order will prevent those minor, but time consuming context switches.\n\n>>\n>>
                Not a simple requirement though.  How about this sort of script construct:\n>>\n>>
                for player in connected\n>>    player.message(\"How about some spam!?!\")\n>>
                endfor\n>>\n>> Do you lock every player object in the connected list?\n>>
                Would the above method be an atomic transaction requiring\n>> completion
                of all events it would generate?\n>> Or would you spawn a new event
                to each player object,\n>> and not worry about completion thus making
                the method\n>> above non-atomic?\n\nGood question, but more one of
                starvation than deadlock.\n\n>> And what about guaranteeing event
                sequence?\n>>\n>> for player in connected\n>>    player.message(\"LINE
                1\")\n>>    player.message(\"LINE 2\")\n>>    player.message(\"LINE
                3\")\n>> endfor\n>>\n>> Perhaps when sending \"LINE 1\" the lock cannot
                be achieved and\n>> is rescheduled or terminated.  So the Player receives:\n>>\n>>
                \"LINE 2\"\n>> \"LINE 3\"\n>> \"LINE 1\"\n>>\n>> Just a few things
                to think about.  :)\n\nThis is what grabbing all the locks prior to
                script execution will get you\n(as opposed to a gaurentee of no deadlocks).
                \ Grabbing them all in advance\nwill insure that you will get the
                messages in the right order.  However, as\nJon was attempting to point
                out above, when your script requires that you\ngrab a zillion locks,
                you can run into some serious starvation issues.\n\n-Greg\n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: Greg Underwood <gunderwood@donet.com>'
                      name: From
                      value: Greg Underwood <gunderwood@donet.com>
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Tue, 18 Jan 2000 23:18:44 +0000'
                      name: Date
                      value: Tue, 18 Jan 2000 23:18:44 +0000
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: RE: [MUD-Dev] Question about multithreaded servers'
                      name: Subject
                      value: 'RE: [MUD-Dev] Question about multithreaded servers'
                    mbox_from: 
                  body: "It's been a while since I posted, so \"howdy\" to everyone.
                    \ I've been\nlurking since I got back from Europe, but this thread
                    (pardon the pun)\ncaught my eye.\n\nAt 08:34 AM 1/18/00 -0600,
                    \"Fabian\" <lemkef@execpc.com> wrote:\n>\n>> -----Original Message-----\n>>
                    From: Jon A. Lambert [mailto:jlsysinc@ix.netcom.com]\n>>\n>> Fabian
                    wrote:\n>> >\n>> > I suppose just by making a simple requirement
                    that\n>> > all objects must be secured at the begining of the\n>>
                    > script would take care of that.\n\nNo, that's not true.  Just
                    because you attempt to lock everything before\nyou execute the
                    script doesn't mean you avoid deadlocks.  Deadlocks occur\nwhen
                    the following happens:\n\n\tThread 1 - Get Lock 1 - ok\n\tThread
                    2 - Get Lock 2 - ok\n\tThread 1 - Get Lock 2 - block\n\tThread
                    2 - Get Lock 1 - block\n\nBoth threads block on their second calls
                    to get the locks that the other\nthread has.  The reason this
                    occurs is that they both grabbed the locks in\na different order.
                    \ Thread 1 attempted to get Lock 1 and then 2, while\nThread 2
                    attempted to get Lock 2 and then 1.  No matter when this occurs
                    in\nyour script execution process, you will get a deadlock.  Simply
                    moving the\nattempts to get the locks to before the script executes
                    does nothing to\nprevent that order of events.  The OS can still
                    preempt any thread at any\ntime, and grabbing the locks in a different
                    order will open your code to\ndeadlocks.\n\nThe only way to gaurentee
                    you will not get a deadlock is to ALWAYS have\nEVERY thread attempt
                    to obtain the same locks in the same order.  In that\ncase, this
                    is what happens:\n\n\tThread 1 - Get Lock 1 - ok\n\tThread 2 -
                    Get Lock 1 - block\n\tThread 1 - Get Lock 2 - ok\n\tThread 1 -
                    execute required stuff\n\tThread 1 - Release Lock 2, release Lock
                    1\n\tThread 2 - Unblocks, having gotten Lock 1\n\tThread 2 - Get
                    Lock 2 - ok\n\tThread 2 - ...\n\nThread 2 will never deadlock
                    once it comes out of getting Lock 1 because\nany other thread
                    that requires both Lock 1 and Lock 2 will be blocked on\nthe 'Get
                    Lock 1' call, w/o having Lock 2.  When the OS decides to preempt\nhas
                    no effect on which locks you can get.\n\nBTW, I had it realease
                    the Locks in reverse order, simply to avoid minor\nthrashing.
                    \ Assume you release Lock 1 and then 2, but when you release 1,\nthe
                    OS wakes another thread that is waiting on 1.  This thread then\nattempts
                    to get Lock 2, and blocks again.  The OS then has to switch\ncontrol
                    back to the original thread to realease Lock 2, and then switch\ncontrol
                    back to the second thread again to get Lock 2.  Releasing in\nreverse
                    order will prevent those minor, but time consuming context switches.\n\n>>\n>>
                    Not a simple requirement though.  How about this sort of script
                    construct:\n>>\n>> for player in connected\n>>    player.message(\"How
                    about some spam!?!\")\n>> endfor\n>>\n>> Do you lock every player
                    object in the connected list?\n>> Would the above method be an
                    atomic transaction requiring\n>> completion of all events it would
                    generate?\n>> Or would you spawn a new event to each player object,\n>>
                    and not worry about completion thus making the method\n>> above
                    non-atomic?\n\nGood question, but more one of starvation than
                    deadlock.\n\n>> And what about guaranteeing event sequence?\n>>\n>>
                    for player in connected\n>>    player.message(\"LINE 1\")\n>>
                    \   player.message(\"LINE 2\")\n>>    player.message(\"LINE 3\")\n>>
                    endfor\n>>\n>> Perhaps when sending \"LINE 1\" the lock cannot
                    be achieved and\n>> is rescheduled or terminated.  So the Player
                    receives:\n>>\n>> \"LINE 2\"\n>> \"LINE 3\"\n>> \"LINE 1\"\n>>\n>>
                    Just a few things to think about.  :)\n\nThis is what grabbing
                    all the locks prior to script execution will get you\n(as opposed
                    to a gaurentee of no deadlocks).  Grabbing them all in advance\nwill
                    insure that you will get the messages in the right order.  However,
                    as\nJon was attempting to point out above, when your script requires
                    that you\ngrab a zillion locks, you can run into some serious
                    starvation issues.\n\n-Greg\n\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'RE: [MUD-Dev] Question about multithreaded servers'
              from: Greg Underwood <gunderwood@donet.com>
              references: []
              date: 2000-01-18 23:18:44.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: JzBSiza4
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *85
          parent: &266 !ruby/object:MessageContainer
            key: &86 !ruby/object:MessageId
              raw: Jzn788LQ@generated-message-id.chibrary.org
            value: !ruby/object:Message
              email: !ruby/object:Email
                raw: "From: Fabian Lemke <lemkef@execpc.com>\nDate: Fri, 14 Jan 2000
                  11:11:56 -0600 (CST)\nSubject: [MUD-Dev] Question about multithreaded
                  servers\n\nHello, First time post, but long time lurker :)\nI'm
                  mostly a hobbiest programmer, and like to tinker with various thing.\nMUD
                  desgin has facinated me for a very long time now.  I'm having a
                  bit of\na problem though I'm hoping will be fairly simple to solve..\n\nI'm
                  in the midst of redesigning a more simplistic server I've been working\non
                  - it's nothing fancy, and basically something to play with - and\ndecided
                  to go multi-threaded so that there won't be blocking and polling\nand
                  such.  The design I have so far I think will work wonderful, except\nfor
                  one problem.. \n\nThe server is going to be very script-based, and
                  I have a behavior/effect\nmodel in mind that tests out great in
                  theory, but the script layering it\nrequires is what's causing the
                  problem:\nSince most of the time, players will only be interacting
                  with others in\nthe same area, I've decided to do one thread per
                  area (area consisting of\na collection of rooms).  Also one thread
                  for client for rendering what\nthey see based on game events, and
                  handling input and output to the\nsockets.  The problem is that
                  the Area threads will be responsible for\ntelling the objects to
                  process scripts, and I'll be needing commands to\nget access to
                  objects that may be in other area threads - usually not a\nproblem
                  if locking is all proper - but I'm worried about deadlocks because\nI
                  want objects locked during the whole script so nothing can be changed
                  on\nme.  Since object scripts can get out-of-area objects to play
                  with, they\nhave to be locked for the rest of the script.  If two
                  objects (not in the\nsame area) lock themselves to run a script,
                  and then each's script\nattempts to secure the other.....\n\nThe
                  only solution I can think of is to have a seperate thread for\nexecuting
                  scripts, but 95% of the time scripts won't need to access\nout-of-area
                  objects.\n\nAny ideas how this can be solved?  I'm somewhat new
                  to multi-threading,\nbut am pretty sure I have a solid grasp on
                  it all, but I've little design\nexperience in it.\n\nThanks a heap
                  :)\n\nFabian\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                header: !ruby/object:Headers
                  rmail: !ruby/object:RMail::Message
                    header: !ruby/object:RMail::Header
                      fields:
                      - !ruby/object:RMail::Header::Field
                        raw: 'From: Fabian Lemke <lemkef@execpc.com>'
                        name: From
                        value: Fabian Lemke <lemkef@execpc.com>
                      - !ruby/object:RMail::Header::Field
                        raw: 'Date: Fri, 14 Jan 2000 11:11:56 -0600 (CST)'
                        name: Date
                        value: Fri, 14 Jan 2000 11:11:56 -0600 (CST)
                      - !ruby/object:RMail::Header::Field
                        raw: 'Subject: [MUD-Dev] Question about multithreaded servers'
                        name: Subject
                        value: "[MUD-Dev] Question about multithreaded servers"
                      mbox_from: 
                    body: "Hello, First time post, but long time lurker :)\nI'm mostly
                      a hobbiest programmer, and like to tinker with various thing.\nMUD
                      desgin has facinated me for a very long time now.  I'm having
                      a bit of\na problem though I'm hoping will be fairly simple
                      to solve..\n\nI'm in the midst of redesigning a more simplistic
                      server I've been working\non - it's nothing fancy, and basically
                      something to play with - and\ndecided to go multi-threaded so
                      that there won't be blocking and polling\nand such.  The design
                      I have so far I think will work wonderful, except\nfor one problem..
                      \n\nThe server is going to be very script-based, and I have
                      a behavior/effect\nmodel in mind that tests out great in theory,
                      but the script layering it\nrequires is what's causing the problem:\nSince
                      most of the time, players will only be interacting with others
                      in\nthe same area, I've decided to do one thread per area (area
                      consisting of\na collection of rooms).  Also one thread for
                      client for rendering what\nthey see based on game events, and
                      handling input and output to the\nsockets.  The problem is that
                      the Area threads will be responsible for\ntelling the objects
                      to process scripts, and I'll be needing commands to\nget access
                      to objects that may be in other area threads - usually not a\nproblem
                      if locking is all proper - but I'm worried about deadlocks because\nI
                      want objects locked during the whole script so nothing can be
                      changed on\nme.  Since object scripts can get out-of-area objects
                      to play with, they\nhave to be locked for the rest of the script.
                      \ If two objects (not in the\nsame area) lock themselves to
                      run a script, and then each's script\nattempts to secure the
                      other.....\n\nThe only solution I can think of is to have a
                      seperate thread for\nexecuting scripts, but 95% of the time
                      scripts won't need to access\nout-of-area objects.\n\nAny ideas
                      how this can be solved?  I'm somewhat new to multi-threading,\nbut
                      am pretty sure I have a solid grasp on it all, but I've little
                      design\nexperience in it.\n\nThanks a heap :)\n\nFabian\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    epilogue: 
                    preamble: 
                message_id: !ruby/object:MessageId
                  raw: "[invalid or missing message id]"
                subject: !ruby/object:Subject
                  original: "[MUD-Dev] Question about multithreaded servers"
                from: Fabian Lemke <lemkef@execpc.com>
                references: []
                date: 2000-01-14 17:11:56.000000000 Z
                no_archive: false
              call_number: !ruby/object:CallNumber
                str: Jzn788LQ
              source: archive
              list: !ruby/object:List
                slug: mud-dev
                name: 
                description: 
                homepage: 
                footer: 
              message_id: *86
            parent: 
            children:
            - *87
          children:
          - *88
          - &91 !ruby/object:MessageContainer
            key: &89 !ruby/object:MessageId
              raw: Jysr9C0e@generated-message-id.chibrary.org
            value: !ruby/object:Message
              email: !ruby/object:Email
                raw: "From: Emil Eifr��m <emil@windh.com>\nDate: Mon, 31 Jan 2000
                  10:37:18 +0100\nSubject: Re: [MUD-Dev] Question about multithreaded
                  servers\n\n> -----Original Message-----\r\n> From: J C Lawrence
                  [mailto:claw@kanga.nu]\r\n> Sent: Sunday, January 30, 2000 8:22
                  PM\r\n> To: mud-dev@kanga.nu\r\n> Subject: Re: [MUD-Dev] Question
                  about multithreaded servers \r\n> \r\n\r\n[snip]\r\n\r\n> Most current
                  OSes do not handle large numbers of threads well,\r\n> meaning that
                  if you player base grows, you'll start running into\r\n> scaling
                  problems with your OS as your thread count rises\r\n> proportionally
                  and your OS starts gagging.\r\n\r\nVery true. For a hobby project,
                  however, this may not be that big of a\r\nproblem. For my own project,
                  I have chosen a combination of OS and language\r\nthat's probably
                  as slow and non-scalable as it goes (Linux + Java) and\r\nsimple
                  tests show that I can do at least 2500 concurrent connections before\r\nthe
                  performance impact on the rest of the server is too high.\r\n\r\nAnd
                  this is on fairly modest hardware, running an operating system that\r\ndoesn't
                  scale all that well in this particular domain (yet) and with the\r\nadded
                  layer of a Java virtual machine. And my threading model penalizes
                  me\r\nwith twice as much threads as connections [no asynchronous
                  I/O in Java :(].\r\nA server written in C or C++ can probably do
                  *much* better than this. So for\r\nthe hobby project, I think it
                  may be a reasonable choice with one thread per\r\nconnection.\r\n\r\nAs
                  a quick FYI (I know others on the list work on Java-based\r\nimplementations),
                  IBM just published a very interesting paper called \"Java,\r\nthreads,
                  and scheduling in Linux\" that discusses these issues:\r\n\r\n\thttp://www-4.ibm.com/software/developer/library/java2/index.html\r\n\r\nDan
                  Kegel has a good page on the \"C10k problem,\" or how to handle
                  over\r\n10'000 concurrent connections in Linux. I think it's in
                  the library but\r\nhere's a shortcut:\r\n\r\n\thttp://www.kegel.com/c10k.html\r\n\r\n---\r\nEmil
                  Eifrem [emil@windh.net]\r\nJava Developer, .windh AB \r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                header: !ruby/object:Headers
                  rmail: !ruby/object:RMail::Message
                    header: !ruby/object:RMail::Header
                      fields:
                      - !ruby/object:RMail::Header::Field
                        raw: 'From: Emil Eifr��m <emil@windh.com>'
                        name: From
                        value: Emil Eifr��m <emil@windh.com>
                      - !ruby/object:RMail::Header::Field
                        raw: 'Date: Mon, 31 Jan 2000 10:37:18 +0100'
                        name: Date
                        value: Mon, 31 Jan 2000 10:37:18 +0100
                      - !ruby/object:RMail::Header::Field
                        raw: 'Subject: Re: [MUD-Dev] Question about multithreaded
                          servers'
                        name: Subject
                        value: 'Re: [MUD-Dev] Question about multithreaded servers'
                      mbox_from: 
                    body: "> -----Original Message-----\r\n> From: J C Lawrence [mailto:claw@kanga.nu]\r\n>
                      Sent: Sunday, January 30, 2000 8:22 PM\r\n> To: mud-dev@kanga.nu\r\n>
                      Subject: Re: [MUD-Dev] Question about multithreaded servers
                      \r\n> \r\n\r\n[snip]\r\n\r\n> Most current OSes do not handle
                      large numbers of threads well,\r\n> meaning that if you player
                      base grows, you'll start running into\r\n> scaling problems
                      with your OS as your thread count rises\r\n> proportionally
                      and your OS starts gagging.\r\n\r\nVery true. For a hobby project,
                      however, this may not be that big of a\r\nproblem. For my own
                      project, I have chosen a combination of OS and language\r\nthat's
                      probably as slow and non-scalable as it goes (Linux + Java)
                      and\r\nsimple tests show that I can do at least 2500 concurrent
                      connections before\r\nthe performance impact on the rest of
                      the server is too high.\r\n\r\nAnd this is on fairly modest
                      hardware, running an operating system that\r\ndoesn't scale
                      all that well in this particular domain (yet) and with the\r\nadded
                      layer of a Java virtual machine. And my threading model penalizes
                      me\r\nwith twice as much threads as connections [no asynchronous
                      I/O in Java :(].\r\nA server written in C or C++ can probably
                      do *much* better than this. So for\r\nthe hobby project, I think
                      it may be a reasonable choice with one thread per\r\nconnection.\r\n\r\nAs
                      a quick FYI (I know others on the list work on Java-based\r\nimplementations),
                      IBM just published a very interesting paper called \"Java,\r\nthreads,
                      and scheduling in Linux\" that discusses these issues:\r\n\r\n\thttp://www-4.ibm.com/software/developer/library/java2/index.html\r\n\r\nDan
                      Kegel has a good page on the \"C10k problem,\" or how to handle
                      over\r\n10'000 concurrent connections in Linux. I think it's
                      in the library but\r\nhere's a shortcut:\r\n\r\n\thttp://www.kegel.com/c10k.html\r\n\r\n---\r\nEmil
                      Eifrem [emil@windh.net]\r\nJava Developer, .windh AB \r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                    epilogue: 
                    preamble: 
                message_id: !ruby/object:MessageId
                  raw: "[invalid or missing message id]"
                subject: !ruby/object:Subject
                  original: 'Re: [MUD-Dev] Question about multithreaded servers'
                from: Emil Eifr��m <emil@windh.com>
                references: []
                date: 2000-01-31 09:37:18.000000000 Z
                no_archive: false
              call_number: !ruby/object:CallNumber
                str: Jysr9C0e
              source: archive
              list: !ruby/object:List
                slug: mud-dev
                name: 
                description: 
                homepage: 
                footer: 
              message_id: *89
            parent: *87
            children:
            - &450 !ruby/object:MessageContainer
              key: &90 !ruby/object:MessageId
                raw: Jzn787Gq@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Mon, 31 Jan 2000
                    10:08:56 -0800\nSubject: Re: [MUD-Dev] Question about multithreaded
                    servers\n\nOn Mon, 31 Jan 2000 10:37:18 +0100 \nemil  <iso-8859-1>
                    wrote:\n\n> As a quick FYI (I know others on the list work on
                    Java-based\n> implementations), IBM just published a very interesting
                    paper\n> called \"Java, threads, and scheduling in Linux\" that
                    discusses\n> these issues:\n\n> http://www-4.ibm.com/software/developer/library/java2/index.html\n\nThanks.
                    \ They're not the first to make those observations, tho I've\nlost
                    track of the other articles making similar assertions.  \n\nI've
                    added the above link to the library.\n\n> Dan Kegel has a good
                    page on the \"C10k problem,\" or how to handle\n> over 10'000
                    concurrent connections in Linux. I think it's in the\n> library
                    but here's a shortcut:\n\n> \thttp://www.kegel.com/c10k.html\n\nIts
                    in the library under /Top/Programming/OS Specific/Unix:\n\n  http://www.kanga.nu/library.php3?viewCat=10\n\n(If
                    I could get my external method under Zope working properly we'd\nhave
                    proper Library URLs blast it) \n\nI've also added a few related
                    thread links under\n/Top/Programming/Libraries, and /Top/Programming/FAQs.
                    \ Just hit the\n\"yesterday\" or \"week\" link (depending on how
                    old this message is) at\nthe bootom of any library page to see
                    them.\n\n--\nJ C Lawrence                                 Home:
                    claw@kanga.nu\n----------(*)                              Other:
                    coder@kanga.nu\n--=| A man is as sane as he is dangerous to his
                    environment |=--\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: J C Lawrence <claw@kanga.nu>'
                          name: From
                          value: J C Lawrence <claw@kanga.nu>
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Mon, 31 Jan 2000 10:08:56 -0800'
                          name: Date
                          value: Mon, 31 Jan 2000 10:08:56 -0800
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: Re: [MUD-Dev] Question about multithreaded
                            servers'
                          name: Subject
                          value: 'Re: [MUD-Dev] Question about multithreaded servers'
                        mbox_from: 
                      body: "On Mon, 31 Jan 2000 10:37:18 +0100 \nemil  <iso-8859-1>
                        wrote:\n\n> As a quick FYI (I know others on the list work
                        on Java-based\n> implementations), IBM just published a very
                        interesting paper\n> called \"Java, threads, and scheduling
                        in Linux\" that discusses\n> these issues:\n\n> http://www-4.ibm.com/software/developer/library/java2/index.html\n\nThanks.
                        \ They're not the first to make those observations, tho I've\nlost
                        track of the other articles making similar assertions.  \n\nI've
                        added the above link to the library.\n\n> Dan Kegel has a
                        good page on the \"C10k problem,\" or how to handle\n> over
                        10'000 concurrent connections in Linux. I think it's in the\n>
                        library but here's a shortcut:\n\n> \thttp://www.kegel.com/c10k.html\n\nIts
                        in the library under /Top/Programming/OS Specific/Unix:\n\n
                        \ http://www.kanga.nu/library.php3?viewCat=10\n\n(If I could
                        get my external method under Zope working properly we'd\nhave
                        proper Library URLs blast it) \n\nI've also added a few related
                        thread links under\n/Top/Programming/Libraries, and /Top/Programming/FAQs.
                        \ Just hit the\n\"yesterday\" or \"week\" link (depending
                        on how old this message is) at\nthe bootom of any library
                        page to see them.\n\n--\nJ C Lawrence                                 Home:
                        claw@kanga.nu\n----------(*)                              Other:
                        coder@kanga.nu\n--=| A man is as sane as he is dangerous to
                        his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                        maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'Re: [MUD-Dev] Question about multithreaded servers'
                  from: J C Lawrence <claw@kanga.nu>
                  references: []
                  date: 2000-01-31 18:08:56.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: Jzn787Gq
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *90
              parent: *91
              children: []
        children:
        - *92
      children:
      - *93
      - &96 !ruby/object:MessageContainer
        key: &94 !ruby/object:MessageId
          raw: Jysr6yYq@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: \"Fabian\" <lemkef@execpc.com>\nDate: Sun, 16 Jan 2000 13:11:40
              -0600\nSubject: RE: [MUD-Dev] Question about multithreaded servers\n\n>
              -----Original Message-----\n> From: ola@ifi.uio.no [mailto:ola@ifi.uio.no]On
              Behalf Of Ola Fosheim\n>\n> Nick Shaffner wrote:\n> > >but I'm worried
              about deadlocks because\n> > >I want objects locked during the whole
              script so nothing can be changed on\n> > >me.\n> >\n> >     IMHO, this
              is the root of your problem (locking objects for the whole\n> > script).
              \ By nature, deadlocks are far more likely to occur when you have\n>
              > entire objects locked, even when they don't need to be.  In general,
              you\n> > should strive to hold as few object locks as possible for as
              short a period\n> > as possible - though even then you will still get
              the occasional deadlock.\n>\n> I don't get this.  Maybe I have misinterpreted
              something?  It is rather\n> obvious that if you acquire all the limited
              resources you need for the\n> rest of the script in one go (an atomic
              operation) then a deadlock is\n> impossible (provided that your script
              eventually terminates).\n> Starvation is another issue, of course.\n\nThis
              is something I've been thinking about more, after the other replies.\nI
              guess the problem is that I wanted to have a command in the script that\nwould
              arbitrarily be able to grab out-of-area(And out of thread) objects\nfor
              manipulation.  If all the resources were aquired before the script\nstarted
              execution instead, it would be pretty easy to take care of.\n\n> I'm
              not convinced that message passing (events) alleviates the basic\n>
              synchronization problem, but you seemed to suggest that? Care to explain\n>
              how you would do this in an elegant and practical eventengine? Simple\n>
              example: \"consume two different resources administered by two different\n>
              entities, but only if you can get both\". It is obviously not to\n>
              difficult to come up with some solution to this simple example, but
              I\n> can't think of any attractive solution.\n> \n> In a real-time programming
              environment I would assume that a rollback\n> scheme is the most attractive
              solution, basically because you cannot\n> prevent screw ups in a situation
              like that. You have to be able to cover\n> situations where a script
              doesn't terminate etc. Without rollback you\n> have to restrict yourself
              to a design where only trivial transformations\n> are possible. (non-trivial
              being custom transformations where the\n> consumption of one or more
              resources must result in the production of\n> some other resource for
              the universe to remain consistent). One obvious\n> advantage with a
              functional (transaction  like) approach is that you can\n> allow users
              more freedom and assert that the universe invariants are not\n> violated
              before committing them rather than limiting the basic operators\n> they
              have access to.\n\nI wasn't planning on having a fully transactional-based
              system, or\notherwise, that is surely the most attractive and elegant
              approach.  I may\njust have to cut that ability out, or find a way to
              reorganize it where it\nwill fail gracefully if a lock attempt times-out.
              \ I suppose just by making\na simple requirement that all objects must
              be secured at the begining of the\nscript would take care of that.  So
              far the rest of it will work wonderfully.\nI have a very small number
              of locks, and objects are arranged to not be\ncodependant on eachother.
              \ All event-based also.  Thanks for all the input!\n\n- Fabian\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: "Fabian" <lemkef@execpc.com>'
                    name: From
                    value: '"Fabian" <lemkef@execpc.com>'
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Sun, 16 Jan 2000 13:11:40 -0600'
                    name: Date
                    value: Sun, 16 Jan 2000 13:11:40 -0600
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: RE: [MUD-Dev] Question about multithreaded servers'
                    name: Subject
                    value: 'RE: [MUD-Dev] Question about multithreaded servers'
                  mbox_from: 
                body: "> -----Original Message-----\n> From: ola@ifi.uio.no [mailto:ola@ifi.uio.no]On
                  Behalf Of Ola Fosheim\n>\n> Nick Shaffner wrote:\n> > >but I'm worried
                  about deadlocks because\n> > >I want objects locked during the whole
                  script so nothing can be changed on\n> > >me.\n> >\n> >     IMHO,
                  this is the root of your problem (locking objects for the whole\n>
                  > script).  By nature, deadlocks are far more likely to occur when
                  you have\n> > entire objects locked, even when they don't need to
                  be.  In general, you\n> > should strive to hold as few object locks
                  as possible for as short a period\n> > as possible - though even
                  then you will still get the occasional deadlock.\n>\n> I don't get
                  this.  Maybe I have misinterpreted something?  It is rather\n> obvious
                  that if you acquire all the limited resources you need for the\n>
                  rest of the script in one go (an atomic operation) then a deadlock
                  is\n> impossible (provided that your script eventually terminates).\n>
                  Starvation is another issue, of course.\n\nThis is something I've
                  been thinking about more, after the other replies.\nI guess the
                  problem is that I wanted to have a command in the script that\nwould
                  arbitrarily be able to grab out-of-area(And out of thread) objects\nfor
                  manipulation.  If all the resources were aquired before the script\nstarted
                  execution instead, it would be pretty easy to take care of.\n\n>
                  I'm not convinced that message passing (events) alleviates the basic\n>
                  synchronization problem, but you seemed to suggest that? Care to
                  explain\n> how you would do this in an elegant and practical eventengine?
                  Simple\n> example: \"consume two different resources administered
                  by two different\n> entities, but only if you can get both\". It
                  is obviously not to\n> difficult to come up with some solution to
                  this simple example, but I\n> can't think of any attractive solution.\n>
                  \n> In a real-time programming environment I would assume that a
                  rollback\n> scheme is the most attractive solution, basically because
                  you cannot\n> prevent screw ups in a situation like that. You have
                  to be able to cover\n> situations where a script doesn't terminate
                  etc. Without rollback you\n> have to restrict yourself to a design
                  where only trivial transformations\n> are possible. (non-trivial
                  being custom transformations where the\n> consumption of one or
                  more resources must result in the production of\n> some other resource
                  for the universe to remain consistent). One obvious\n> advantage
                  with a functional (transaction  like) approach is that you can\n>
                  allow users more freedom and assert that the universe invariants
                  are not\n> violated before committing them rather than limiting
                  the basic operators\n> they have access to.\n\nI wasn't planning
                  on having a fully transactional-based system, or\notherwise, that
                  is surely the most attractive and elegant approach.  I may\njust
                  have to cut that ability out, or find a way to reorganize it where
                  it\nwill fail gracefully if a lock attempt times-out.  I suppose
                  just by making\na simple requirement that all objects must be secured
                  at the begining of the\nscript would take care of that.  So far
                  the rest of it will work wonderfully.\nI have a very small number
                  of locks, and objects are arranged to not be\ncodependant on eachother.
                  \ All event-based also.  Thanks for all the input!\n\n- Fabian\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'RE: [MUD-Dev] Question about multithreaded servers'
            from: Fabian <lemkef@execpc.com>
            references: []
            date: 2000-01-16 19:11:40.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: Jysr6yYq
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *94
        parent: *92
        children:
        - &98 !ruby/object:MessageContainer
          key: &95 !ruby/object:MessageId
            raw: Jzn788MS@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: Ola Fosheim Gr��stad <olag@ifi.uio.no>\nDate: Sat, 15 Jan
                2000 23:10:03 +0100\nSubject: Re: [MUD-Dev] Question about multithreaded
                servers\n\nNick Shaffner wrote:\r\n> >but I'm worried about deadlocks
                because\r\n> >I want objects locked during the whole script so nothing
                can be changed on\r\n> >me.\r\n> \r\n>     IMHO, this is the root
                of your problem (locking objects for the whole\r\n> script).  By nature,
                deadlocks are far more likely to occur when you have\r\n> entire objects
                locked, even when they don't need to be.  In general, you\r\n> should
                strive to hold as few object locks as possible for as short a period\r\n>
                as possible - though even then you will still get the occasional deadlock.\r\n\r\nI
                don't get this.  Maybe I have misinterpreted something?  It is rather\r\nobvious
                that if you acquire all the limited resources you need for the\r\nrest
                of the script in one go (an atomic operation) then a deadlock is\r\nimpossible
                (provided that your script eventually terminates). \r\nStarvation
                is another issue, of course. \r\n\r\nI'm not convinced that message
                passing (events) alleviates the basic\r\nsynchronization problem,
                but you seemed to suggest that? Care to explain\r\nhow you would do
                this in an elegant and practical eventengine? Simple\r\nexample: \"consume
                two different resources administered by two different\r\nentities,
                but only if you can get both\". It is obviously not to\r\ndifficult
                to come up with some solution to this simple example, but I\r\ncan't
                think of any attractive solution.\r\n\r\nIn a real-time programming
                environment I would assume that a rollback\r\nscheme is the most attractive
                solution, basically because you cannot\r\nprevent screw ups in a situation
                like that. You have to be able to cover\r\nsituations where a script
                doesn't terminate etc. Without rollback you\r\nhave to restrict yourself
                to a design where only trivial transformations\r\nare possible. (non-trivial
                being custom transformations where the\r\nconsumption of one or more
                resources must result in the production of\r\nsome other resource
                for the universe to remain consistent). One obvious\r\nadvantage with
                a functional (transaction  like) approach is that you can\r\nallow
                users more freedom and assert that the universe invariants are not\r\nviolated
                before committing them rather than limiting the basic operators\r\nthey
                have access to.\r\n\r\n(btw, has \"tupple spaces\", such as Linda,
                been discussed on mud-dev\r\nbefore?)\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: Ola Fosheim Gr��stad <olag@ifi.uio.no>'
                      name: From
                      value: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Sat, 15 Jan 2000 23:10:03 +0100'
                      name: Date
                      value: Sat, 15 Jan 2000 23:10:03 +0100
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Question about multithreaded servers'
                      name: Subject
                      value: 'Re: [MUD-Dev] Question about multithreaded servers'
                    mbox_from: 
                  body: "Nick Shaffner wrote:\r\n> >but I'm worried about deadlocks
                    because\r\n> >I want objects locked during the whole script so
                    nothing can be changed on\r\n> >me.\r\n> \r\n>     IMHO, this
                    is the root of your problem (locking objects for the whole\r\n>
                    script).  By nature, deadlocks are far more likely to occur when
                    you have\r\n> entire objects locked, even when they don't need
                    to be.  In general, you\r\n> should strive to hold as few object
                    locks as possible for as short a period\r\n> as possible - though
                    even then you will still get the occasional deadlock.\r\n\r\nI
                    don't get this.  Maybe I have misinterpreted something?  It is
                    rather\r\nobvious that if you acquire all the limited resources
                    you need for the\r\nrest of the script in one go (an atomic operation)
                    then a deadlock is\r\nimpossible (provided that your script eventually
                    terminates). \r\nStarvation is another issue, of course. \r\n\r\nI'm
                    not convinced that message passing (events) alleviates the basic\r\nsynchronization
                    problem, but you seemed to suggest that? Care to explain\r\nhow
                    you would do this in an elegant and practical eventengine? Simple\r\nexample:
                    \"consume two different resources administered by two different\r\nentities,
                    but only if you can get both\". It is obviously not to\r\ndifficult
                    to come up with some solution to this simple example, but I\r\ncan't
                    think of any attractive solution.\r\n\r\nIn a real-time programming
                    environment I would assume that a rollback\r\nscheme is the most
                    attractive solution, basically because you cannot\r\nprevent screw
                    ups in a situation like that. You have to be able to cover\r\nsituations
                    where a script doesn't terminate etc. Without rollback you\r\nhave
                    to restrict yourself to a design where only trivial transformations\r\nare
                    possible. (non-trivial being custom transformations where the\r\nconsumption
                    of one or more resources must result in the production of\r\nsome
                    other resource for the universe to remain consistent). One obvious\r\nadvantage
                    with a functional (transaction  like) approach is that you can\r\nallow
                    users more freedom and assert that the universe invariants are
                    not\r\nviolated before committing them rather than limiting the
                    basic operators\r\nthey have access to.\r\n\r\n(btw, has \"tupple
                    spaces\", such as Linda, been discussed on mud-dev\r\nbefore?)\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Question about multithreaded servers'
              from: Ola Fosheim Gr��stad <olag@ifi.uio.no>
              references: []
              date: 2000-01-15 22:10:03.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: Jzn788MS
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *95
          parent: *96
          children:
          - &100 !ruby/object:MessageContainer
            key: &97 !ruby/object:MessageId
              raw: 00IySse8@generated-message-id.chibrary.org
            value: !ruby/object:Message
              email: !ruby/object:Email
                raw: |
                  From: "Nick Shaffner" <nicks@3drealms.com>
                  Date: Fri, 14 Jan 2000 17:29:15 -0600
                  Subject: Re: [MUD-Dev] Question about multithreaded servers

                  ----- Original Message -----
                  From: Fabian Lemke <lemkef@execpc.com>
                  >The problem is that the Area threads will be responsible for
                  >telling the objects to process scripts, and I'll be needing commands to
                  >get access to objects that may be in other area threads - usually not a
                  >problem if locking is all proper -

                  >but I'm worried about deadlocks because
                  >I want objects locked during the whole script so nothing can be changed on
                  >me.

                      IMHO, this is the root of your problem (locking objects for the whole
                  script).  By nature, deadlocks are far more likely to occur when you have
                  entire objects locked, even when they don't need to be.  In general, you
                  should strive to hold as few object locks as possible for as short a period
                  as possible - though even then you will still get the occasional deadlock.

                  > Since object scripts can get out-of-area objects to play with, they
                  >have to be locked for the rest of the script.  If two objects (not in the
                  >same area) lock themselves to run a script, and then each's script
                  >attempts to secure the other.....
                  >
                  >The only solution I can think of is to have a seperate thread for
                  >executing scripts, but 95% of the time scripts won't need to access
                  >out-of-area objects.
                  >
                  >Any ideas how this can be solved?  I'm somewhat new to multi-threading,
                  >but am pretty sure I have a solid grasp on it all, but I've little design
                  >experience in it.


                      Why not switch to an Event based system and have an event queue for each
                  area thread?  Classically, properly implemented event based systems are very
                  good at avoiding deadlocks, simply because of their implicit 'one-way'
                  discipline.  In addition, the thread that owns the object that a given Event
                  applies to could/would also be the thread that executes the event - thus
                  removing almost all need of user level object locking.
                      So you could, for example, have a master event queue, running on it's
                  own thread that would sort all incoming events by the areas of the objects
                  they applied to and send them down to the appropriate 'area' event queue, to
                  be handled by that particular area's thread whenever it gets around to it.

                                                              Nick
                  --
                  My views and my companies views are wholly unrelated.
                  Nick Shaffner
                  Programmer: Duke Nukem Forever
                  3D Realms





                  _______________________________________________
                  MUD-Dev maillist  -  MUD-Dev@kanga.nu
                  http://www.kanga.nu/lists/listinfo/mud-dev
                header: !ruby/object:Headers
                  rmail: !ruby/object:RMail::Message
                    header: !ruby/object:RMail::Header
                      fields:
                      - !ruby/object:RMail::Header::Field
                        raw: 'From: "Nick Shaffner" <nicks@3drealms.com>'
                        name: From
                        value: '"Nick Shaffner" <nicks@3drealms.com>'
                      - !ruby/object:RMail::Header::Field
                        raw: 'Date: Fri, 14 Jan 2000 17:29:15 -0600'
                        name: Date
                        value: Fri, 14 Jan 2000 17:29:15 -0600
                      - !ruby/object:RMail::Header::Field
                        raw: 'Subject: Re: [MUD-Dev] Question about multithreaded
                          servers'
                        name: Subject
                        value: 'Re: [MUD-Dev] Question about multithreaded servers'
                      mbox_from: 
                    body: |
                      ----- Original Message -----
                      From: Fabian Lemke <lemkef@execpc.com>
                      >The problem is that the Area threads will be responsible for
                      >telling the objects to process scripts, and I'll be needing commands to
                      >get access to objects that may be in other area threads - usually not a
                      >problem if locking is all proper -

                      >but I'm worried about deadlocks because
                      >I want objects locked during the whole script so nothing can be changed on
                      >me.

                          IMHO, this is the root of your problem (locking objects for the whole
                      script).  By nature, deadlocks are far more likely to occur when you have
                      entire objects locked, even when they don't need to be.  In general, you
                      should strive to hold as few object locks as possible for as short a period
                      as possible - though even then you will still get the occasional deadlock.

                      > Since object scripts can get out-of-area objects to play with, they
                      >have to be locked for the rest of the script.  If two objects (not in the
                      >same area) lock themselves to run a script, and then each's script
                      >attempts to secure the other.....
                      >
                      >The only solution I can think of is to have a seperate thread for
                      >executing scripts, but 95% of the time scripts won't need to access
                      >out-of-area objects.
                      >
                      >Any ideas how this can be solved?  I'm somewhat new to multi-threading,
                      >but am pretty sure I have a solid grasp on it all, but I've little design
                      >experience in it.


                          Why not switch to an Event based system and have an event queue for each
                      area thread?  Classically, properly implemented event based systems are very
                      good at avoiding deadlocks, simply because of their implicit 'one-way'
                      discipline.  In addition, the thread that owns the object that a given Event
                      applies to could/would also be the thread that executes the event - thus
                      removing almost all need of user level object locking.
                          So you could, for example, have a master event queue, running on it's
                      own thread that would sort all incoming events by the areas of the objects
                      they applied to and send them down to the appropriate 'area' event queue, to
                      be handled by that particular area's thread whenever it gets around to it.

                                                                  Nick
                      --
                      My views and my companies views are wholly unrelated.
                      Nick Shaffner
                      Programmer: Duke Nukem Forever
                      3D Realms





                      _______________________________________________
                      MUD-Dev maillist  -  MUD-Dev@kanga.nu
                      http://www.kanga.nu/lists/listinfo/mud-dev
                    epilogue: 
                    preamble: 
                message_id: !ruby/object:MessageId
                  raw: "[invalid or missing message id]"
                subject: !ruby/object:Subject
                  original: 'Re: [MUD-Dev] Question about multithreaded servers'
                from: Nick Shaffner <nicks@3drealms.com>
                references: []
                date: 2000-01-14 23:29:15.000000000 Z
                no_archive: false
              call_number: !ruby/object:CallNumber
                str: 00IySse8
              source: archive
              list: !ruby/object:List
                slug: mud-dev
                name: 
                description: 
                homepage: 
                footer: 
              message_id: *97
            parent: *98
            children:
            - &102 !ruby/object:MessageContainer
              key: &99 !ruby/object:MessageId
                raw: 00bj7rPc@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: |
                    From: "AR Schleicher" <ars@iag.net>
                    Date: Fri, 14 Jan 2000 15:24:38 -0500
                    Subject: Re: [MUD-Dev] Question about multithreaded servers

                    ----- Original Message -----
                    From: Fabian Lemke <lemkef@execpc.com>
                    > The only solution I can think of is to have a seperate thread for
                    > executing scripts, but 95% of the time scripts won't need to access
                    > out-of-area objects.
                    >
                    > Any ideas how this can be solved?  I'm somewhat new to multi-threading,
                    > but am pretty sure I have a solid grasp on it all, but I've little design
                    > experience in it.

                    While you're worried about deadlocks from using a locking mechanism, I think
                    it's the way to go.  You need to design your system so that a thread can
                    release all the locks it has if it fails to get one it wants.  Depending on
                    the details of your system, this may mean a) ok, record the locks I have,
                    release them all, and wait until I can get them all back at once, or b) ok,
                    I'll put that action on hold, and continue processing what I can in this
                    thread, and then I'll try that lock again next cycle through my loop.
                    (Which assumes the end of the cycle releases all the locks for a bit, so
                    that other threads can get them.)

                    There are other options (such as locking in a specific order) which can also
                    work, for some systems.

                    A warning regarding my advice, it's based on a server I wrote a little over
                    a year ago, and basically gave up on, due largely to the fact that I hadn't
                    thought this issue all the way through before coding, and had setup
                    situations where I could potentially deadlock.  Fixing it would have
                    required more time than I wanted to spend then,  so I never got around to
                    actually implementing my advice.  :)

                    AR Schleicher (Jerrith)
                    ars@iag.net





                    _______________________________________________
                    MUD-Dev maillist  -  MUD-Dev@kanga.nu
                    http://www.kanga.nu/lists/listinfo/mud-dev
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: "AR Schleicher" <ars@iag.net>'
                          name: From
                          value: '"AR Schleicher" <ars@iag.net>'
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Fri, 14 Jan 2000 15:24:38 -0500'
                          name: Date
                          value: Fri, 14 Jan 2000 15:24:38 -0500
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: Re: [MUD-Dev] Question about multithreaded
                            servers'
                          name: Subject
                          value: 'Re: [MUD-Dev] Question about multithreaded servers'
                        mbox_from: 
                      body: |
                        ----- Original Message -----
                        From: Fabian Lemke <lemkef@execpc.com>
                        > The only solution I can think of is to have a seperate thread for
                        > executing scripts, but 95% of the time scripts won't need to access
                        > out-of-area objects.
                        >
                        > Any ideas how this can be solved?  I'm somewhat new to multi-threading,
                        > but am pretty sure I have a solid grasp on it all, but I've little design
                        > experience in it.

                        While you're worried about deadlocks from using a locking mechanism, I think
                        it's the way to go.  You need to design your system so that a thread can
                        release all the locks it has if it fails to get one it wants.  Depending on
                        the details of your system, this may mean a) ok, record the locks I have,
                        release them all, and wait until I can get them all back at once, or b) ok,
                        I'll put that action on hold, and continue processing what I can in this
                        thread, and then I'll try that lock again next cycle through my loop.
                        (Which assumes the end of the cycle releases all the locks for a bit, so
                        that other threads can get them.)

                        There are other options (such as locking in a specific order) which can also
                        work, for some systems.

                        A warning regarding my advice, it's based on a server I wrote a little over
                        a year ago, and basically gave up on, due largely to the fact that I hadn't
                        thought this issue all the way through before coding, and had setup
                        situations where I could potentially deadlock.  Fixing it would have
                        required more time than I wanted to spend then,  so I never got around to
                        actually implementing my advice.  :)

                        AR Schleicher (Jerrith)
                        ars@iag.net





                        _______________________________________________
                        MUD-Dev maillist  -  MUD-Dev@kanga.nu
                        http://www.kanga.nu/lists/listinfo/mud-dev
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'Re: [MUD-Dev] Question about multithreaded servers'
                  from: AR Schleicher <ars@iag.net>
                  references: []
                  date: 2000-01-14 20:24:38.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: 00bj7rPc
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *99
              parent: *100
              children:
              - &256 !ruby/object:MessageContainer
                key: &101 !ruby/object:MessageId
                  raw: 000DlgPY@generated-message-id.chibrary.org
                value: !ruby/object:Message
                  email: !ruby/object:Email
                    raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Sun, 30 Jan 2000
                      11:22:11 -0800\nSubject: Re: [MUD-Dev] Question about multithreaded
                      servers\n\nOn Fri, 14 Jan 2000 11:11:56 -0600 (CST) \nFabian
                      Lemke <lemkef@execpc.com> wrote:\n\n> Also one thread for client
                      for rendering what they see based on\n> game events, and handling
                      input and output to the sockets.  \n\nMost current OSes do not
                      handle large numbers of threads well,\nmeaning that if you player
                      base grows, you'll start running into\nscaling problems with
                      your OS as your thread count rises\nproportionally and your
                      OS starts gagging.\n\n> The problem is that the Area threads
                      will be responsible for\n> telling the objects to process scripts,
                      and I'll be needing\n> commands to get access to objects that
                      may be in other area\n> threads - usually not a problem if locking
                      is all proper - but I'm\n> worried about deadlocks because I
                      want objects locked during the\n> whole script so nothing can
                      be changed on me.  Since object\n> scripts can get out-of-area
                      objects to play with, they have to be\n> locked for the rest
                      of the script.  If two objects (not in the\n> same area) lock
                      themselves to run a script, and then each's script\n> attempts
                      to secure the other.....\n\nIs it possible to list the objects,
                      and thus their parent areas that \na script will need to access
                      prior to the script's execution?\n\nIf so, your answer is fairly
                      easy:  Establish a numerical order for\nyour areas and their
                      component objects.  Lock your objects and areas \nin strict
                      numerical order.  If a lock fails because it is already\nheld,
                      just wait.  The other script will finish at some point and the
                      \nblocking script can then continue safely.  \n\nThe reason
                      for doing things in order is that it prevents there ever\nbeing
                      a deadlock condition where A holds X and is waiting for Y, and\nB
                      holds Y and is waiting for X as the ordering process mandates
                      that\nboth start by locking X and only then progressing to Y.\n\n>
                      Any ideas how this can be solved?  I'm somewhat new to\n> multi-threading,
                      but am pretty sure I have a solid grasp on it\n> all, but I've
                      little design experience in it.\n\nEssentially you're talking
                      about locking strategies, which hit for\nmulti-threading, multi-process,
                      cluster, and parallel programming\ncases.  I don't know of a
                      decent web site which discusses or coveres\nthe area well (if
                      you do, please add them to the Library at\nKanga.Nu), but there
                      are various techniques, from the lockless\nrollback system i
                      use, to ordered lock handling, to various\napplications of graph
                      theory for deadlock detection.  A good OS\ndesing book should
                      cover -- I've heard good comments on tanenbaum's\nbooks in particular.\n\n--\nJ
                      C Lawrence                                 Home: claw@kanga.nu\n----------(*)
                      \                             Other: coder@kanga.nu\n--=| A
                      man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    header: !ruby/object:Headers
                      rmail: !ruby/object:RMail::Message
                        header: !ruby/object:RMail::Header
                          fields:
                          - !ruby/object:RMail::Header::Field
                            raw: 'From: J C Lawrence <claw@kanga.nu>'
                            name: From
                            value: J C Lawrence <claw@kanga.nu>
                          - !ruby/object:RMail::Header::Field
                            raw: 'Date: Sun, 30 Jan 2000 11:22:11 -0800'
                            name: Date
                            value: Sun, 30 Jan 2000 11:22:11 -0800
                          - !ruby/object:RMail::Header::Field
                            raw: 'Subject: Re: [MUD-Dev] Question about multithreaded
                              servers'
                            name: Subject
                            value: 'Re: [MUD-Dev] Question about multithreaded servers'
                          mbox_from: 
                        body: "On Fri, 14 Jan 2000 11:11:56 -0600 (CST) \nFabian Lemke
                          <lemkef@execpc.com> wrote:\n\n> Also one thread for client
                          for rendering what they see based on\n> game events, and
                          handling input and output to the sockets.  \n\nMost current
                          OSes do not handle large numbers of threads well,\nmeaning
                          that if you player base grows, you'll start running into\nscaling
                          problems with your OS as your thread count rises\nproportionally
                          and your OS starts gagging.\n\n> The problem is that the
                          Area threads will be responsible for\n> telling the objects
                          to process scripts, and I'll be needing\n> commands to get
                          access to objects that may be in other area\n> threads -
                          usually not a problem if locking is all proper - but I'm\n>
                          worried about deadlocks because I want objects locked during
                          the\n> whole script so nothing can be changed on me.  Since
                          object\n> scripts can get out-of-area objects to play with,
                          they have to be\n> locked for the rest of the script.  If
                          two objects (not in the\n> same area) lock themselves to
                          run a script, and then each's script\n> attempts to secure
                          the other.....\n\nIs it possible to list the objects, and
                          thus their parent areas that \na script will need to access
                          prior to the script's execution?\n\nIf so, your answer is
                          fairly easy:  Establish a numerical order for\nyour areas
                          and their component objects.  Lock your objects and areas
                          \nin strict numerical order.  If a lock fails because it
                          is already\nheld, just wait.  The other script will finish
                          at some point and the \nblocking script can then continue
                          safely.  \n\nThe reason for doing things in order is that
                          it prevents there ever\nbeing a deadlock condition where
                          A holds X and is waiting for Y, and\nB holds Y and is waiting
                          for X as the ordering process mandates that\nboth start
                          by locking X and only then progressing to Y.\n\n> Any ideas
                          how this can be solved?  I'm somewhat new to\n> multi-threading,
                          but am pretty sure I have a solid grasp on it\n> all, but
                          I've little design experience in it.\n\nEssentially you're
                          talking about locking strategies, which hit for\nmulti-threading,
                          multi-process, cluster, and parallel programming\ncases.
                          \ I don't know of a decent web site which discusses or coveres\nthe
                          area well (if you do, please add them to the Library at\nKanga.Nu),
                          but there are various techniques, from the lockless\nrollback
                          system i use, to ordered lock handling, to various\napplications
                          of graph theory for deadlock detection.  A good OS\ndesing
                          book should cover -- I've heard good comments on tanenbaum's\nbooks
                          in particular.\n\n--\nJ C Lawrence                                 Home:
                          claw@kanga.nu\n----------(*)                              Other:
                          coder@kanga.nu\n--=| A man is as sane as he is dangerous
                          to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                        epilogue: 
                        preamble: 
                    message_id: !ruby/object:MessageId
                      raw: "[invalid or missing message id]"
                    subject: !ruby/object:Subject
                      original: 'Re: [MUD-Dev] Question about multithreaded servers'
                    from: J C Lawrence <claw@kanga.nu>
                    references: []
                    date: 2000-01-30 19:22:11.000000000 Z
                    no_archive: false
                  call_number: !ruby/object:CallNumber
                    str: 000DlgPY
                  source: archive
                  list: !ruby/object:List
                    slug: mud-dev
                    name: 
                    description: 
                    homepage: 
                    footer: 
                  message_id: *101
                parent: *102
                children: []
      - &105 !ruby/object:MessageContainer
        key: &103 !ruby/object:MessageId
          raw: JzUMT9Yu@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: |
              From: "Fabian" <lemkef@execpc.com>
              Date: Tue, 18 Jan 2000 08:34:46 -0600
              Subject: RE: [MUD-Dev] Question about multithreaded servers

              > -----Original Message-----
              > From: Jon A. Lambert [mailto:jlsysinc@ix.netcom.com]
              >
              > Fabian wrote:
              > >
              > >I wasn't planning on having a fully transactional-based system, or
              > >otherwise, that is surely the most attractive and elegant approach.  I may
              > >just have to cut that ability out, or find a way to reorganize it where it
              > >will fail gracefully if a lock attempt times-out.  I suppose just by making
              > >a simple requirement that all objects must be secured at the begining of the
              > >script would take care of that.
              >
              > Not a simple requirement though.  How about this sort of script construct:
              >
              > for player in connected
              >    player.message("How about some spam!?!")
              > endfor
              >
              > Do you lock every player object in the connected list?
              > Would the above method be an atomic transaction requiring
              > completion of all events it would generate?
              > Or would you spawn a new event to each player object,
              > and not worry about completion thus making the method
              > above non-atomic?

              Ah!  This I've thought of!  This just won't be possible :)
              I think I'm going to require something like "Player = GetPlayer(id)", so the script can
              only get things it knows about.  It won't need this for most things however - any actions
              it does will automatically generate events, which will be distributed to the mobs that can
              see it/care for it.
              Something to still think about though.. this would be a difficult problem to fix if it
              doesn't meet my needs and is already coded.

              > And what about guaranteeing event sequence?
              >
              > for player in connected
              >    player.message("LINE 1")
              >    player.message("LINE 2")
              >    player.message("LINE 3")
              > endfor
              >
              > Perhaps when sending "LINE 1" the lock cannot be achieved and
              > is rescheduled or terminated.  So the Player receives:
              >
              > "LINE 2"
              > "LINE 3"
              > "LINE 1"
              >
              > Just a few things to think about.  :)

              The scripting engine I'm using is re-entrant.. so that may be a way around it.. otherwise
              I think the current method (of event-passing) will work OK.. I'll have to think about this
              more to be sure..

              - Fabian





              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: "Fabian" <lemkef@execpc.com>'
                    name: From
                    value: '"Fabian" <lemkef@execpc.com>'
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Tue, 18 Jan 2000 08:34:46 -0600'
                    name: Date
                    value: Tue, 18 Jan 2000 08:34:46 -0600
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: RE: [MUD-Dev] Question about multithreaded servers'
                    name: Subject
                    value: 'RE: [MUD-Dev] Question about multithreaded servers'
                  mbox_from: 
                body: |
                  > -----Original Message-----
                  > From: Jon A. Lambert [mailto:jlsysinc@ix.netcom.com]
                  >
                  > Fabian wrote:
                  > >
                  > >I wasn't planning on having a fully transactional-based system, or
                  > >otherwise, that is surely the most attractive and elegant approach.  I may
                  > >just have to cut that ability out, or find a way to reorganize it where it
                  > >will fail gracefully if a lock attempt times-out.  I suppose just by making
                  > >a simple requirement that all objects must be secured at the begining of the
                  > >script would take care of that.
                  >
                  > Not a simple requirement though.  How about this sort of script construct:
                  >
                  > for player in connected
                  >    player.message("How about some spam!?!")
                  > endfor
                  >
                  > Do you lock every player object in the connected list?
                  > Would the above method be an atomic transaction requiring
                  > completion of all events it would generate?
                  > Or would you spawn a new event to each player object,
                  > and not worry about completion thus making the method
                  > above non-atomic?

                  Ah!  This I've thought of!  This just won't be possible :)
                  I think I'm going to require something like "Player = GetPlayer(id)", so the script can
                  only get things it knows about.  It won't need this for most things however - any actions
                  it does will automatically generate events, which will be distributed to the mobs that can
                  see it/care for it.
                  Something to still think about though.. this would be a difficult problem to fix if it
                  doesn't meet my needs and is already coded.

                  > And what about guaranteeing event sequence?
                  >
                  > for player in connected
                  >    player.message("LINE 1")
                  >    player.message("LINE 2")
                  >    player.message("LINE 3")
                  > endfor
                  >
                  > Perhaps when sending "LINE 1" the lock cannot be achieved and
                  > is rescheduled or terminated.  So the Player receives:
                  >
                  > "LINE 2"
                  > "LINE 3"
                  > "LINE 1"
                  >
                  > Just a few things to think about.  :)

                  The scripting engine I'm using is re-entrant.. so that may be a way around it.. otherwise
                  I think the current method (of event-passing) will work OK.. I'll have to think about this
                  more to be sure..

                  - Fabian





                  _______________________________________________
                  MUD-Dev maillist  -  MUD-Dev@kanga.nu
                  http://www.kanga.nu/lists/listinfo/mud-dev
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'RE: [MUD-Dev] Question about multithreaded servers'
            from: Fabian <lemkef@execpc.com>
            references: []
            date: 2000-01-18 14:34:46.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: JzUMT9Yu
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *103
        parent: *92
        children:
        - &107 !ruby/object:MessageContainer
          key: &104 !ruby/object:MessageId
            raw: JzUMT8Ua@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: \"Jon A. Lambert\" <jlsysinc@ix.netcom.com>\nDate: Sun,
                16 Jan 2000 22:52:17 -0500\nSubject: Re: [MUD-Dev] Question about
                multithreaded servers\n\nFabian wrote:\n>\n>I wasn't planning on having
                a fully transactional-based system, or\n>otherwise, that is surely
                the most attractive and elegant approach.  I may\n>just have to cut
                that ability out, or find a way to reorganize it where it\n>will fail
                gracefully if a lock attempt times-out.  I suppose just by making\n>a
                simple requirement that all objects must be secured at the begining
                of the\n>script would take care of that.  \n\nNot a simple requirement
                though.  How about this sort of script construct:\n\nfor player in
                connected\n   player.message(\"How about some spam!?!\")\nendfor\n\nDo
                you lock every player object in the connected list?  \nWould the above
                method be an atomic transaction requiring\ncompletion of all events
                it would generate?\nOr would you spawn a new event to each player
                object, \nand not worry about completion thus making the method \nabove
                non-atomic?  \n\nAnd what about guaranteeing event sequence?\n\nfor
                player in connected\n   player.message(\"LINE 1\")\n   player.message(\"LINE
                2\")\n   player.message(\"LINE 3\")\nendfor\n\nPerhaps when sending
                \"LINE 1\" the lock cannot be achieved and\nis rescheduled or terminated.
                \ So the Player receives:\n\n\"LINE 2\"\n\"LINE 3\"\n\"LINE 1\"\n\nJust
                a few things to think about.  :)\n\n--\n--*     Jon A. Lambert - TychoMUD
                Email: jlsysinc@nospam.ix.netcom.com     *--\n--*     Mud Server Developer's
                Page <http://jlsysinc.home.netcom.com>      *--\n--* \"No Free man
                shall ever be debarred the use of arms.\" Thomas Jefferson *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: "Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                      name: From
                      value: '"Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Sun, 16 Jan 2000 22:52:17 -0500'
                      name: Date
                      value: Sun, 16 Jan 2000 22:52:17 -0500
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Question about multithreaded servers'
                      name: Subject
                      value: 'Re: [MUD-Dev] Question about multithreaded servers'
                    mbox_from: 
                  body: "Fabian wrote:\n>\n>I wasn't planning on having a fully transactional-based
                    system, or\n>otherwise, that is surely the most attractive and
                    elegant approach.  I may\n>just have to cut that ability out,
                    or find a way to reorganize it where it\n>will fail gracefully
                    if a lock attempt times-out.  I suppose just by making\n>a simple
                    requirement that all objects must be secured at the begining of
                    the\n>script would take care of that.  \n\nNot a simple requirement
                    though.  How about this sort of script construct:\n\nfor player
                    in connected\n   player.message(\"How about some spam!?!\")\nendfor\n\nDo
                    you lock every player object in the connected list?  \nWould the
                    above method be an atomic transaction requiring\ncompletion of
                    all events it would generate?\nOr would you spawn a new event
                    to each player object, \nand not worry about completion thus making
                    the method \nabove non-atomic?  \n\nAnd what about guaranteeing
                    event sequence?\n\nfor player in connected\n   player.message(\"LINE
                    1\")\n   player.message(\"LINE 2\")\n   player.message(\"LINE
                    3\")\nendfor\n\nPerhaps when sending \"LINE 1\" the lock cannot
                    be achieved and\nis rescheduled or terminated.  So the Player
                    receives:\n\n\"LINE 2\"\n\"LINE 3\"\n\"LINE 1\"\n\nJust a few
                    things to think about.  :)\n\n--\n--*     Jon A. Lambert - TychoMUD
                    Email: jlsysinc@nospam.ix.netcom.com     *--\n--*     Mud Server
                    Developer's Page <http://jlsysinc.home.netcom.com>      *--\n--*
                    \"No Free man shall ever be debarred the use of arms.\" Thomas
                    Jefferson *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Question about multithreaded servers'
              from: Jon A. Lambert <jlsysinc@ix.netcom.com>
              references: []
              date: 2000-01-17 03:52:17.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: JzUMT8Ua
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *104
          parent: *105
          children:
          - &373 !ruby/object:MessageContainer
            key: &106 !ruby/object:MessageId
              raw: 00uTkdoO@generated-message-id.chibrary.org
            value: !ruby/object:Message
              email: !ruby/object:Email
                raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Sun, 30 Jan 2000 13:27:07
                  -0800\nSubject: Re: [MUD-Dev] Question about multithreaded servers\n\nOn
                  Sun, 16 Jan 2000 13:11:40 -0600 \nFabian  <lemkef@execpc.com> wrote:\n\n>
                  I wasn't planning on having a fully transactional-based system,
                  or\n> otherwise, that is surely the most attractive and elegant\n>
                  approach.  I may just have to cut that ability out, or find a way\n>
                  to reorganize it where it will fail gracefully if a lock attempt\n>
                  times-out.  \n\nI don't know the circumstatnces that generate a
                  script referencing\nout-of-area objects, but have you considered
                  the hack of hacing such\nscripts split themselves at runtime into
                  multiple scripts, and\nthere-fore multiple threads of execution,
                  one per area?  Thus a\nscript which referenced objects in its own
                  area, and objects in\nareas A, B and C, you log scripts with the
                  executor thread for areas\nA, B, and C to do <whatever>, and then
                  continue on its own way to\nprocess its own objects.\n\n--\nJ C
                  Lawrence                                 Home: claw@kanga.nu\n----------(*)
                  \                             Other: coder@kanga.nu\n--=| A man
                  is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                header: !ruby/object:Headers
                  rmail: !ruby/object:RMail::Message
                    header: !ruby/object:RMail::Header
                      fields:
                      - !ruby/object:RMail::Header::Field
                        raw: 'From: J C Lawrence <claw@kanga.nu>'
                        name: From
                        value: J C Lawrence <claw@kanga.nu>
                      - !ruby/object:RMail::Header::Field
                        raw: 'Date: Sun, 30 Jan 2000 13:27:07 -0800'
                        name: Date
                        value: Sun, 30 Jan 2000 13:27:07 -0800
                      - !ruby/object:RMail::Header::Field
                        raw: 'Subject: Re: [MUD-Dev] Question about multithreaded
                          servers'
                        name: Subject
                        value: 'Re: [MUD-Dev] Question about multithreaded servers'
                      mbox_from: 
                    body: "On Sun, 16 Jan 2000 13:11:40 -0600 \nFabian  <lemkef@execpc.com>
                      wrote:\n\n> I wasn't planning on having a fully transactional-based
                      system, or\n> otherwise, that is surely the most attractive
                      and elegant\n> approach.  I may just have to cut that ability
                      out, or find a way\n> to reorganize it where it will fail gracefully
                      if a lock attempt\n> times-out.  \n\nI don't know the circumstatnces
                      that generate a script referencing\nout-of-area objects, but
                      have you considered the hack of hacing such\nscripts split themselves
                      at runtime into multiple scripts, and\nthere-fore multiple threads
                      of execution, one per area?  Thus a\nscript which referenced
                      objects in its own area, and objects in\nareas A, B and C, you
                      log scripts with the executor thread for areas\nA, B, and C
                      to do <whatever>, and then continue on its own way to\nprocess
                      its own objects.\n\n--\nJ C Lawrence                                 Home:
                      claw@kanga.nu\n----------(*)                              Other:
                      coder@kanga.nu\n--=| A man is as sane as he is dangerous to
                      his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    epilogue: 
                    preamble: 
                message_id: !ruby/object:MessageId
                  raw: "[invalid or missing message id]"
                subject: !ruby/object:Subject
                  original: 'Re: [MUD-Dev] Question about multithreaded servers'
                from: J C Lawrence <claw@kanga.nu>
                references: []
                date: 2000-01-30 21:27:07.000000000 Z
                no_archive: false
              call_number: !ruby/object:CallNumber
                str: 00uTkdoO
              source: archive
              list: !ruby/object:List
                slug: mud-dev
                name: 
                description: 
                homepage: 
                footer: 
              message_id: *106
            parent: *107
            children: []
    children: []
  ? &108 !ruby/object:MessageId
    raw: 00IyQgFc@generated-message-id.chibrary.org
  : &205 !ruby/object:MessageContainer
    key: *108
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Sun, 30 Jan 2000 13:57:09
          -0800\nSubject: Re: [MUD-Dev] Community Relations\n\nOn Tue, 18 Jan 2000
          00:10:11 -0500 \nJon A Lambert <jlsysinc@ix.netcom.com> wrote:\n\n> I understand
          that these are very common policies throughout the\n> \"mudding\" universe.\n\n>
          \"Thy shall not insult or offend any member of the administration\"\n> and
          \"Thy shall not insult or offend any player\"\n\nI would add the modifier,
          \"popular or significant\" to both.\n\n> Note that the former is usually
          enforced with great enthusiasm,\n> while enforcement of the latter is haphazard
          and oftentimes\n> explicitly non-existent.\n\nThus the modifier.\n\n> Any
          thoughts as to why this is so?\n\nA generic confusion between the operations
          of justice and morality?\n\n> Don't such obtuse policies essentially boil
          down to \"You can be\n> banned at our whim\"?\n\nI'd view them more as a
          form of implicit sycophancy, whether\nrealised or not.  More amusingly with
          my moderation of this list,\nthe same can profitably be said about this
          list and me, or if you\nwish:  \n\n  I'd better like you, or you'd better
          suck up to me if you want to\n  participate in MUD-Dev.\n\nEven better,
          no matter how hard I may work to avoid that\ncharacterisation, I implicitly
          can't avoid it.  Quite literally\nnothing happens on MUD-Dev without my
          explicit consetn, therefore\nMUD-Dev is highly filtered and tailored expression
          of me.\n\n<yeah, right>\n\n> What is it about administration personnel that
          makes them so much\n> more delicate and important when it comes to being
          insulted or\n> offended?\n\nThe fact that they require some sort of assumed
          authority and\naltitude over those they \"govern\".\n\n--\nJ C Lawrence
          \                                Home: claw@kanga.nu\n----------(*)                              Other:
          coder@kanga.nu\n--=| A man is as sane as he is dangerous to his environment
          |=--\n\n\n_______________________________________________\nMUD-Dev maillist
          \ -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Sun, 30 Jan 2000 13:57:09 -0800'
                name: Date
                value: Sun, 30 Jan 2000 13:57:09 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: [MUD-Dev] Community Relations'
                name: Subject
                value: 'Re: [MUD-Dev] Community Relations'
              mbox_from: 
            body: "On Tue, 18 Jan 2000 00:10:11 -0500 \nJon A Lambert <jlsysinc@ix.netcom.com>
              wrote:\n\n> I understand that these are very common policies throughout
              the\n> \"mudding\" universe.\n\n> \"Thy shall not insult or offend any
              member of the administration\"\n> and \"Thy shall not insult or offend
              any player\"\n\nI would add the modifier, \"popular or significant\"
              to both.\n\n> Note that the former is usually enforced with great enthusiasm,\n>
              while enforcement of the latter is haphazard and oftentimes\n> explicitly
              non-existent.\n\nThus the modifier.\n\n> Any thoughts as to why this
              is so?\n\nA generic confusion between the operations of justice and
              morality?\n\n> Don't such obtuse policies essentially boil down to \"You
              can be\n> banned at our whim\"?\n\nI'd view them more as a form of implicit
              sycophancy, whether\nrealised or not.  More amusingly with my moderation
              of this list,\nthe same can profitably be said about this list and me,
              or if you\nwish:  \n\n  I'd better like you, or you'd better suck up
              to me if you want to\n  participate in MUD-Dev.\n\nEven better, no matter
              how hard I may work to avoid that\ncharacterisation, I implicitly can't
              avoid it.  Quite literally\nnothing happens on MUD-Dev without my explicit
              consetn, therefore\nMUD-Dev is highly filtered and tailored expression
              of me.\n\n<yeah, right>\n\n> What is it about administration personnel
              that makes them so much\n> more delicate and important when it comes
              to being insulted or\n> offended?\n\nThe fact that they require some
              sort of assumed authority and\naltitude over those they \"govern\".\n\n--\nJ
              C Lawrence                                 Home: claw@kanga.nu\n----------(*)
              \                             Other: coder@kanga.nu\n--=| A man is as
              sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: [MUD-Dev] Community Relations'
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-30 21:57:09.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00IyQgFc
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *108
    parent: &204 !ruby/object:MessageContainer
      key: &109 !ruby/object:MessageId
        raw: JzBboAnA@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: \"Jon A. Lambert\" <jlsysinc@ix.netcom.com>\nDate: Thu, 20 Jan
            2000 22:46:31 -0500\nSubject: Re: [MUD-Dev] Community Relations\n\nMarian
            Griffith wrote:\n>\n>> \"Thy shall not insult or offend any member of
            the administration\"\n>> and\n>> \"Thy shall not insult or offend any
            player\"\n>\n>> Note that the former is usually enforced with great enthusiasm,
            while\n>> enforcement of the latter is haphazard and oftentimes explicitly
            \n>> non-existent.\n>\n>> Any thoughts as to why this is so?  \n>\n>That
            is easy :)  The person's capable of executing the punishment are\n>all
            falling  in the first category.  So insulting an admin  means you\n>are
            angering somebody capable of immediate and definitive retribution\n>Insulting
            a player means the victim must convince the same admin that\n>the insult
            was indeed worthy of being banned for. Unless you are very\n>creative
            or persistent  the admin will have a lot more room for sober\n>reflection
            in the second case.\n>\n\nI really like the police analogy.   Administrators
            in general behave very \nmuch like civilian police.  They are just as
            likely to overreact or make \nassumptions when it comes to a known \"perpetrator\".
            \ I'l bet a lot of\nadministrators even use \"profiling\" (i.e. users
            coming from AOL domains).\nA crime against a fellow officer invokes swift
            and harsh retribution.  \nConstant complainers may endure longer response
            times, \"domestic \nviolence complaint again over at the EvilPK clan headquarters,
            who \nwants to handle it?\".  \n\nThere are differences though.  Civilian
            police (generally speaking)\nexist theoretically \"to serve and protect\".
            \ They don't _own_ the town, \nthe citizens do.   The must respond to
            demands and maintain their integrity. \nAnd that often breaks down.  A
            badly adminstered mud can be very \nmuch like a corrupt town police force/government.
            \ IRL, Citizens usually \nhave the power to take up pitchforks, overthrow
            the system and turn the \nbuggers out.   Something quite rare in the mud
            world, no?   This is \nsomething Ola has posted quite frequently on.   There
            are a lot of posts \non this thread about ownership, who _owns_ the mud.
            \ I think Travis' game \nshop analogy is the best. (mostly because I'm
            familiar with a local game \nshop with that exact setup--- and has very
            mud-like problems...  :)\n \nI have argued for and been in the camp of
            implementor ownership over\nuser ownership.  The other seems unnatural
            to me...that is it is antithetic\nto my held ideologies.  I DO NOT want
            to discuss that here though, \nthe roots of things, and whether they are
            rights or wrongs are don't \nmatter here.   But I do want to posit a setup
            that might be interesting, \nalthough I'm not certain how _stable_ it
            would be.\n\nAssume that the role of the administrator is solely that
            of a police officer\nor executive government.  They may even be ranked
            in some heirarchy\nwhere there's a single authoritarian figure or committee
            at the top.  This \nsort of administrator doesn't have anything to do
            with coding, building, \nsecurity.  Their roles are primarily behavior
            control, enforcement of law.   \nAnd they have the means and level of
            trust to perform that role without \nrecourse to a higher power.  And
            what if these adminstrators were elected \nand deposed directly by users,
            and came from the user population.  \n\nNow it would take quite a bit
            of patience for an implementor to sit\nidly by and wait for some stable
            form of social structure to develop on \nthe mud, if ever.  There may
            be some audiences (playerbases) with\nwhich it might be more effective.
            \ (something akin to the population \nof MOO/Mush world comes to mind
            though I may be wrong).\n\nThis does not eliminate dissent, partisanship,
            corruption, and injustice,\nobviously.  We're back to human nature again.
            \ And it definitely does\nnot guarantee \"good governance/good administration\".
            \  However it\ndoes put power in the users' hands, perhaps a sense that
            this is our\nmud, we run things here.   I suppose the one could accuse
            the owner \nof abject laziness and a total abrogation of responsibility.
            \  Is it really?\nOr have they given the users a valuable gift?\n\nAn
            interesting experiment?  Has anyone attempted anything like it?  \nIs
            \"the LambdaMOO\" run anything like this?\n\n--\n--*     Jon A. Lambert
            - TychoMUD Email: jlsysinc@nospam.ix.netcom.com     *--\n--*     Mud Server
            Developer's Page <http://jlsysinc.home.netcom.com>      *--\n--* \"No
            Free man shall ever be debarred the use of arms.\" Thomas Jefferson *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: "Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                  name: From
                  value: '"Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Thu, 20 Jan 2000 22:46:31 -0500'
                  name: Date
                  value: Thu, 20 Jan 2000 22:46:31 -0500
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] Community Relations'
                  name: Subject
                  value: 'Re: [MUD-Dev] Community Relations'
                mbox_from: 
              body: "Marian Griffith wrote:\n>\n>> \"Thy shall not insult or offend
                any member of the administration\"\n>> and\n>> \"Thy shall not insult
                or offend any player\"\n>\n>> Note that the former is usually enforced
                with great enthusiasm, while\n>> enforcement of the latter is haphazard
                and oftentimes explicitly \n>> non-existent.\n>\n>> Any thoughts as
                to why this is so?  \n>\n>That is easy :)  The person's capable of
                executing the punishment are\n>all falling  in the first category.
                \ So insulting an admin  means you\n>are angering somebody capable
                of immediate and definitive retribution\n>Insulting a player means
                the victim must convince the same admin that\n>the insult was indeed
                worthy of being banned for. Unless you are very\n>creative or persistent
                \ the admin will have a lot more room for sober\n>reflection in the
                second case.\n>\n\nI really like the police analogy.   Administrators
                in general behave very \nmuch like civilian police.  They are just
                as likely to overreact or make \nassumptions when it comes to a known
                \"perpetrator\".  I'l bet a lot of\nadministrators even use \"profiling\"
                (i.e. users coming from AOL domains).\nA crime against a fellow officer
                invokes swift and harsh retribution.  \nConstant complainers may endure
                longer response times, \"domestic \nviolence complaint again over
                at the EvilPK clan headquarters, who \nwants to handle it?\".  \n\nThere
                are differences though.  Civilian police (generally speaking)\nexist
                theoretically \"to serve and protect\".  They don't _own_ the town,
                \nthe citizens do.   The must respond to demands and maintain their
                integrity. \nAnd that often breaks down.  A badly adminstered mud
                can be very \nmuch like a corrupt town police force/government.  IRL,
                Citizens usually \nhave the power to take up pitchforks, overthrow
                the system and turn the \nbuggers out.   Something quite rare in the
                mud world, no?   This is \nsomething Ola has posted quite frequently
                on.   There are a lot of posts \non this thread about ownership, who
                _owns_ the mud.  I think Travis' game \nshop analogy is the best.
                (mostly because I'm familiar with a local game \nshop with that exact
                setup--- and has very mud-like problems...  :)\n \nI have argued for
                and been in the camp of implementor ownership over\nuser ownership.
                \ The other seems unnatural to me...that is it is antithetic\nto my
                held ideologies.  I DO NOT want to discuss that here though, \nthe
                roots of things, and whether they are rights or wrongs are don't \nmatter
                here.   But I do want to posit a setup that might be interesting,
                \nalthough I'm not certain how _stable_ it would be.\n\nAssume that
                the role of the administrator is solely that of a police officer\nor
                executive government.  They may even be ranked in some heirarchy\nwhere
                there's a single authoritarian figure or committee at the top.  This
                \nsort of administrator doesn't have anything to do with coding, building,
                \nsecurity.  Their roles are primarily behavior control, enforcement
                of law.   \nAnd they have the means and level of trust to perform
                that role without \nrecourse to a higher power.  And what if these
                adminstrators were elected \nand deposed directly by users, and came
                from the user population.  \n\nNow it would take quite a bit of patience
                for an implementor to sit\nidly by and wait for some stable form of
                social structure to develop on \nthe mud, if ever.  There may be some
                audiences (playerbases) with\nwhich it might be more effective.  (something
                akin to the population \nof MOO/Mush world comes to mind though I
                may be wrong).\n\nThis does not eliminate dissent, partisanship, corruption,
                and injustice,\nobviously.  We're back to human nature again.  And
                it definitely does\nnot guarantee \"good governance/good administration\".
                \  However it\ndoes put power in the users' hands, perhaps a sense
                that this is our\nmud, we run things here.   I suppose the one could
                accuse the owner \nof abject laziness and a total abrogation of responsibility.
                \  Is it really?\nOr have they given the users a valuable gift?\n\nAn
                interesting experiment?  Has anyone attempted anything like it?  \nIs
                \"the LambdaMOO\" run anything like this?\n\n--\n--*     Jon A. Lambert
                - TychoMUD Email: jlsysinc@nospam.ix.netcom.com     *--\n--*     Mud
                Server Developer's Page <http://jlsysinc.home.netcom.com>      *--\n--*
                \"No Free man shall ever be debarred the use of arms.\" Thomas Jefferson
                *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] Community Relations'
          from: Jon A. Lambert <jlsysinc@ix.netcom.com>
          references: []
          date: 2000-01-21 03:46:31.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: JzBboAnA
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *109
      parent: &196 !ruby/object:MessageContainer
        key: &110 !ruby/object:MessageId
          raw: 00IySraq@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: Marian Griffith <gryphon@iaehv.nl>\nDate: Tue, 18 Jan 2000
              19:38:42 +0000 (GMT)\nSubject: Re: [MUD-Dev] Community Relations\n\nOn
              Tue 18 Jan, Jon A. Lambert wrote:\n> Dundee wrote:\n\n> > The player
              was banned for being insulting to me.  \n\n> I understand that these
              are very common policies throughout the \n> \"mudding\" universe.\n\n>
              \"Thy shall not insult or offend any member of the administration\"\n>
              and\n> \"Thy shall not insult or offend any player\"\n\n> Note that
              the former is usually enforced with great enthusiasm, while\n> enforcement
              of the latter is haphazard and oftentimes explicitly \n> non-existent.\n\n>
              Any thoughts as to why this is so?  \n\nThat is easy :)  The person's
              capable of executing the punishment are\nall falling  in the first category.
              \ So insulting an admin  means you\nare angering somebody capable of
              immediate and definitive retribution\nInsulting a player means the victim
              must convince the same admin that\nthe insult was indeed worthy of being
              banned for. Unless you are very\ncreative or persistent  the admin will
              have a lot more room for sober\nreflection in the second case.\n\n>
              Do such policies introduce a \"class\" system into a muds social\n>
              structure regardless of whether the administration is faceless or not?\n\nI
              think not. It is simply psychology.\n\n> Don't such obtuse policies
              essentially boil down to \n>     \"You can be banned at our whim\"?\n\nThat
              is true on the other hand, but most admin try to behave. Most of\nthe
              time. But I recall a policy statement of the admin of (I think it\nwas)
              \ Island mud,  that boiled down to:  admin must be irrational and\nfrequently
              kill players for no apparent reason, otherwise players can\ngain immortal
              ranks simply by being persistent.\nI admit it is not quite the same
              as banning, but the sentiment is the\nsame, I do not doubt ;)\n\n> What
              is it about administration personnel that makes them so much\n> more
              delicate and important when it comes to being insulted or \n> offended?\n\nNothing,
              they are simply capable of immediate retribution.\n\n\nMarian\n--\nYes
              - at last - You. I Choose you. Out of all the world,\nout of all the
              seeking, I have found you, young sister of\nmy heart! You are mine and
              I am yours - and never again\nwill there be loneliness ...\n\nRolan
              Choosing Talia,\nArrows of the Queen, by Mercedes Lackey\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: Marian Griffith <gryphon@iaehv.nl>'
                    name: From
                    value: Marian Griffith <gryphon@iaehv.nl>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Tue, 18 Jan 2000 19:38:42 +0000 (GMT)'
                    name: Date
                    value: Tue, 18 Jan 2000 19:38:42 +0000 (GMT)
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] Community Relations'
                    name: Subject
                    value: 'Re: [MUD-Dev] Community Relations'
                  mbox_from: 
                body: "On Tue 18 Jan, Jon A. Lambert wrote:\n> Dundee wrote:\n\n>
                  > The player was banned for being insulting to me.  \n\n> I understand
                  that these are very common policies throughout the \n> \"mudding\"
                  universe.\n\n> \"Thy shall not insult or offend any member of the
                  administration\"\n> and\n> \"Thy shall not insult or offend any
                  player\"\n\n> Note that the former is usually enforced with great
                  enthusiasm, while\n> enforcement of the latter is haphazard and
                  oftentimes explicitly \n> non-existent.\n\n> Any thoughts as to
                  why this is so?  \n\nThat is easy :)  The person's capable of executing
                  the punishment are\nall falling  in the first category.  So insulting
                  an admin  means you\nare angering somebody capable of immediate
                  and definitive retribution\nInsulting a player means the victim
                  must convince the same admin that\nthe insult was indeed worthy
                  of being banned for. Unless you are very\ncreative or persistent
                  \ the admin will have a lot more room for sober\nreflection in the
                  second case.\n\n> Do such policies introduce a \"class\" system
                  into a muds social\n> structure regardless of whether the administration
                  is faceless or not?\n\nI think not. It is simply psychology.\n\n>
                  Don't such obtuse policies essentially boil down to \n>     \"You
                  can be banned at our whim\"?\n\nThat is true on the other hand,
                  but most admin try to behave. Most of\nthe time. But I recall a
                  policy statement of the admin of (I think it\nwas)  Island mud,
                  \ that boiled down to:  admin must be irrational and\nfrequently
                  kill players for no apparent reason, otherwise players can\ngain
                  immortal ranks simply by being persistent.\nI admit it is not quite
                  the same as banning, but the sentiment is the\nsame, I do not doubt
                  ;)\n\n> What is it about administration personnel that makes them
                  so much\n> more delicate and important when it comes to being insulted
                  or \n> offended?\n\nNothing, they are simply capable of immediate
                  retribution.\n\n\nMarian\n--\nYes - at last - You. I Choose you.
                  Out of all the world,\nout of all the seeking, I have found you,
                  young sister of\nmy heart! You are mine and I am yours - and never
                  again\nwill there be loneliness ...\n\nRolan Choosing Talia,\nArrows
                  of the Queen, by Mercedes Lackey\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] Community Relations'
            from: Marian Griffith <gryphon@iaehv.nl>
            references: []
            date: 2000-01-18 19:38:42.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 00IySraq
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *110
        parent: &145 !ruby/object:MessageContainer
          key: &111 !ruby/object:MessageId
            raw: 000Dnsoa@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: Douglas Couch <dscouch@purdue.edu>\nDate: Tue, 18 Jan 2000
                14:09:30 -0500\nSubject: Re: [MUD-Dev] Community Relations\n\nAt 12:10
                AM 1/18/2000 -0500, Jon Lambert wrote:\n>Dundee wrote:\n>>\n>> The
                player was banned for being insulting to me.  \n>>\n>\n>I understand
                that these are very common policies throughout the \n>\"mudding\"
                universe.\n>\n>\"Thy shall not insult or offend any member of the
                administration\"\n>and\n>\"Thy shall not insult or offend any player\"\n>\n>Note
                that the former is usually enforced with great enthusiasm, while\n>enforcement
                of the latter is haphazard and oftentimes explicitly \n>non-existent.\n>\n>Any
                thoughts as to why this is so?  \n>\n>Do such policies introduce a
                \"class\" system into a muds social\n>structure regardless of whether
                the administration is faceless or not?\n>\n>Don't such obtuse policies
                essentially boil down to \n>    \"You can be banned at our whim\"?\n>\n>What
                is it about administration personnel that makes them so much\n>more
                delicate and important when it comes to being insulted or \n>offended?\n\n\nIn
                the typical US justice system, the law enforcement system have an\nimmediate
                solution whereby if someone is 'caught in the act' or there is\nsufficient
                proof of a person's guilt they are jailed temporarily until the\ncourt
                system can make a final ruling in their case.  \n\nWhat about giving
                individual GM's the power of a temporary account lock or\nban with
                a scheduled 'court date' where depending on the severity of the\ncrime
                the player is judged either by another GM or by a group of peers with\na
                GM arbitrating.  You could also have a system of 'bail' where a player\ncan
                pay either his own money or borrow to be allowed to continue to play\nuntil
                the 'court date'.  If the player doesn't show on his date for some\nreason
                then he is at the mercy of the judge and forfeits his money too.\n\nThis
                takes the majority of the responsibility out of the individual GM's\nhands
                and if a player is demanding an apology you could route it through\nsome
                kind of civil suit.  This would either have the effect of a  fair\ndecision
                or would bind it all up in a slow bureaucratic system leaving the\nplayer
                with a sense of no justice done, but no one to blame.  :-)\n\nDoug
                Couch\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: Douglas Couch <dscouch@purdue.edu>'
                      name: From
                      value: Douglas Couch <dscouch@purdue.edu>
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Tue, 18 Jan 2000 14:09:30 -0500'
                      name: Date
                      value: Tue, 18 Jan 2000 14:09:30 -0500
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Community Relations'
                      name: Subject
                      value: 'Re: [MUD-Dev] Community Relations'
                    mbox_from: 
                  body: "At 12:10 AM 1/18/2000 -0500, Jon Lambert wrote:\n>Dundee
                    wrote:\n>>\n>> The player was banned for being insulting to me.
                    \ \n>>\n>\n>I understand that these are very common policies throughout
                    the \n>\"mudding\" universe.\n>\n>\"Thy shall not insult or offend
                    any member of the administration\"\n>and\n>\"Thy shall not insult
                    or offend any player\"\n>\n>Note that the former is usually enforced
                    with great enthusiasm, while\n>enforcement of the latter is haphazard
                    and oftentimes explicitly \n>non-existent.\n>\n>Any thoughts as
                    to why this is so?  \n>\n>Do such policies introduce a \"class\"
                    system into a muds social\n>structure regardless of whether the
                    administration is faceless or not?\n>\n>Don't such obtuse policies
                    essentially boil down to \n>    \"You can be banned at our whim\"?\n>\n>What
                    is it about administration personnel that makes them so much\n>more
                    delicate and important when it comes to being insulted or \n>offended?\n\n\nIn
                    the typical US justice system, the law enforcement system have
                    an\nimmediate solution whereby if someone is 'caught in the act'
                    or there is\nsufficient proof of a person's guilt they are jailed
                    temporarily until the\ncourt system can make a final ruling in
                    their case.  \n\nWhat about giving individual GM's the power of
                    a temporary account lock or\nban with a scheduled 'court date'
                    where depending on the severity of the\ncrime the player is judged
                    either by another GM or by a group of peers with\na GM arbitrating.
                    \ You could also have a system of 'bail' where a player\ncan pay
                    either his own money or borrow to be allowed to continue to play\nuntil
                    the 'court date'.  If the player doesn't show on his date for
                    some\nreason then he is at the mercy of the judge and forfeits
                    his money too.\n\nThis takes the majority of the responsibility
                    out of the individual GM's\nhands and if a player is demanding
                    an apology you could route it through\nsome kind of civil suit.
                    \ This would either have the effect of a  fair\ndecision or would
                    bind it all up in a slow bureaucratic system leaving the\nplayer
                    with a sense of no justice done, but no one to blame.  :-)\n\nDoug
                    Couch\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Community Relations'
              from: Douglas Couch <dscouch@purdue.edu>
              references: []
              date: 2000-01-18 19:09:30.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: 000Dnsoa
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *111
          parent: &144 !ruby/object:MessageContainer
            key: &112 !ruby/object:MessageId
              raw: Jysr6zc8@generated-message-id.chibrary.org
            value: !ruby/object:Message
              email: !ruby/object:Email
                raw: "From: \"Koster, Raph\" <rkoster@origin.ea.com>\nDate: Mon, 17
                  Jan 2000 16:06:12 -0600\nSubject: RE: [MUD-Dev] Community Relations\n\n>
                  -----Original Message-----\n> From: Darrin Hyrup [mailto:shades@mythicgames.com]\n>
                  Sent: Monday, January 17, 2000 2:44 PM\n> To: mud-dev@kanga.nu\n>
                  Subject: Re: [MUD-Dev] Community Relations\n> \n> [snip]\n> \n>
                  I have no idea how they deal with problem players in Ultima Online
                  or\n> Asheron's Call, however I bet they have something similar.\n\nYep.
                  I'd rate UO has more hardline than EQ (in that UO is willing to
                  do\n\"guilt by association\" bannings in the cases of organized
                  use of\nexploits--if a guild is caught doing something bad, all
                  members will be\nbanned) and AC as less hardline (same situation
                  came up recently in AC and\nthey publicly acknowledged that the
                  guild had been exploiting, but\nessentially gave them al amnesty
                  and did not ban them).\n\n-Raph\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                header: !ruby/object:Headers
                  rmail: !ruby/object:RMail::Message
                    header: !ruby/object:RMail::Header
                      fields:
                      - !ruby/object:RMail::Header::Field
                        raw: 'From: "Koster, Raph" <rkoster@origin.ea.com>'
                        name: From
                        value: '"Koster, Raph" <rkoster@origin.ea.com>'
                      - !ruby/object:RMail::Header::Field
                        raw: 'Date: Mon, 17 Jan 2000 16:06:12 -0600'
                        name: Date
                        value: Mon, 17 Jan 2000 16:06:12 -0600
                      - !ruby/object:RMail::Header::Field
                        raw: 'Subject: RE: [MUD-Dev] Community Relations'
                        name: Subject
                        value: 'RE: [MUD-Dev] Community Relations'
                      mbox_from: 
                    body: "> -----Original Message-----\n> From: Darrin Hyrup [mailto:shades@mythicgames.com]\n>
                      Sent: Monday, January 17, 2000 2:44 PM\n> To: mud-dev@kanga.nu\n>
                      Subject: Re: [MUD-Dev] Community Relations\n> \n> [snip]\n>
                      \n> I have no idea how they deal with problem players in Ultima
                      Online or\n> Asheron's Call, however I bet they have something
                      similar.\n\nYep. I'd rate UO has more hardline than EQ (in that
                      UO is willing to do\n\"guilt by association\" bannings in the
                      cases of organized use of\nexploits--if a guild is caught doing
                      something bad, all members will be\nbanned) and AC as less hardline
                      (same situation came up recently in AC and\nthey publicly acknowledged
                      that the guild had been exploiting, but\nessentially gave them
                      al amnesty and did not ban them).\n\n-Raph\n\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    epilogue: 
                    preamble: 
                message_id: !ruby/object:MessageId
                  raw: "[invalid or missing message id]"
                subject: !ruby/object:Subject
                  original: 'RE: [MUD-Dev] Community Relations'
                from: Koster, Raph <rkoster@origin.ea.com>
                references: []
                date: 2000-01-17 22:06:12.000000000 Z
                no_archive: false
              call_number: !ruby/object:CallNumber
                str: Jysr6zc8
              source: archive
              list: !ruby/object:List
                slug: mud-dev
                name: 
                description: 
                homepage: 
                footer: 
              message_id: *112
            parent: &143 !ruby/object:MessageContainer
              key: &113 !ruby/object:MessageId
                raw: JzUMT8V6@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: |
                    From: Darrin Hyrup <shades@mythicgames.com>
                    Date: Mon, 17 Jan 2000 15:44:25 -0500
                    Subject: Re: [MUD-Dev] Community Relations

                    At 10:54 PM 1/14/00 -0800, Christopher Allen wrote:

                    >Gemstone & DragonRealms are commercial muds with over 30,000 paying users.
                    >They are very fast to warn someone who violates their rules, whether by
                    >using curse words in the game, using OOC info for IC vendettas, etc. If
                    >someone receives too many warnings, they are banned. However, unlike most
                    >muds, they are banned only for a temporary amount of time, typically a week
                    >or a month.

                    Actually, that is quite common in commercial online service.  Especially
                    for games (like the Simutronics offerings given above) having originated on
                    services like GEnie and AOL, where permanently banning a customer from a
                    game is frowned upon.

                    >Here is the surprising statement -- they said that people who have been
                    >banned multiple times (i.e. many warnings, a ban, many warning again,
                    >another ban, etc.) are almost always redeemable. They say in almost all
                    >cases the person if the person doesn't quit due to the temporary ban, they
                    >will eventually shape up, and can become a responible gamer.

                    I find that to be the case as well in most of our games as well.  However,
                    there are always a few who react in opposition to the norm, and the
                    bannings just encourage their anti-social behavior in (and sometimes out)
                    of game.  After the bans get longer and longer eventually these people are
                    permanently banned, and at that point either vanish, or start some kind of
                    grass-roots campaign to make the lives of the staff and players miserable
                    for having banned them to begin with.  On AOL its even worse when these
                    miscreants are account thieves and just come back with someone else's
                    account to continue their war on the games.  Even these people usually will
                    eventually disappear after 6 month or a year or so.

                    >I find that this is opposite of the way most free MUDs work -- when someone
                    >is banned, they are banned forever. If someone is known for not following
                    >whatever the rules are in a mud (player killing, cursing, or whatever) they
                    >are expected that they will never follow the rules.

                    Many commercial games also have in-game tools to help convince problem
                    players to play by the rules... things like profanity filters/switches,
                    interaction probabations, chat/message filters, etc.  Permanent banning is
                    the last option available, and is generally the least used.

                    >Anyone find their statement about redeemable to be true to their experience?
                    >Any free MUDs have similar policies? How about commercial games like Ultima
                    >and Everquest -- are bans permanent there?

                    I know that Everquest has a duration ban policy as well.  Although it
                    depends on what the player is being banned for.  In most cases, if the
                    player is being unruly in the game, they are warned, and with enough
                    warnings they get a temporary ban.  After which, to return to the game they
                    have to send a letter to the game administration convincing them of their
                    redemption.  However, they have an immediate permanent ban policy on client
                    hacking and major bug abuse, no questions asked.  Pretty brutal in fact.

                    I have no idea how they deal with problem players in Ultima Online or
                    Asheron's Call, however I bet they have something similar.  (I have never
                    even heard of anyone being banned in AC yet, but then again it is a fairly
                    new MMPG still.)

                    Best,

                    Darrin Hyrup
                    Mythic Entertainment



                    _______________________________________________
                    MUD-Dev maillist  -  MUD-Dev@kanga.nu
                    http://www.kanga.nu/lists/listinfo/mud-dev
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: Darrin Hyrup <shades@mythicgames.com>'
                          name: From
                          value: Darrin Hyrup <shades@mythicgames.com>
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Mon, 17 Jan 2000 15:44:25 -0500'
                          name: Date
                          value: Mon, 17 Jan 2000 15:44:25 -0500
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: Re: [MUD-Dev] Community Relations'
                          name: Subject
                          value: 'Re: [MUD-Dev] Community Relations'
                        mbox_from: 
                      body: |
                        At 10:54 PM 1/14/00 -0800, Christopher Allen wrote:

                        >Gemstone & DragonRealms are commercial muds with over 30,000 paying users.
                        >They are very fast to warn someone who violates their rules, whether by
                        >using curse words in the game, using OOC info for IC vendettas, etc. If
                        >someone receives too many warnings, they are banned. However, unlike most
                        >muds, they are banned only for a temporary amount of time, typically a week
                        >or a month.

                        Actually, that is quite common in commercial online service.  Especially
                        for games (like the Simutronics offerings given above) having originated on
                        services like GEnie and AOL, where permanently banning a customer from a
                        game is frowned upon.

                        >Here is the surprising statement -- they said that people who have been
                        >banned multiple times (i.e. many warnings, a ban, many warning again,
                        >another ban, etc.) are almost always redeemable. They say in almost all
                        >cases the person if the person doesn't quit due to the temporary ban, they
                        >will eventually shape up, and can become a responible gamer.

                        I find that to be the case as well in most of our games as well.  However,
                        there are always a few who react in opposition to the norm, and the
                        bannings just encourage their anti-social behavior in (and sometimes out)
                        of game.  After the bans get longer and longer eventually these people are
                        permanently banned, and at that point either vanish, or start some kind of
                        grass-roots campaign to make the lives of the staff and players miserable
                        for having banned them to begin with.  On AOL its even worse when these
                        miscreants are account thieves and just come back with someone else's
                        account to continue their war on the games.  Even these people usually will
                        eventually disappear after 6 month or a year or so.

                        >I find that this is opposite of the way most free MUDs work -- when someone
                        >is banned, they are banned forever. If someone is known for not following
                        >whatever the rules are in a mud (player killing, cursing, or whatever) they
                        >are expected that they will never follow the rules.

                        Many commercial games also have in-game tools to help convince problem
                        players to play by the rules... things like profanity filters/switches,
                        interaction probabations, chat/message filters, etc.  Permanent banning is
                        the last option available, and is generally the least used.

                        >Anyone find their statement about redeemable to be true to their experience?
                        >Any free MUDs have similar policies? How about commercial games like Ultima
                        >and Everquest -- are bans permanent there?

                        I know that Everquest has a duration ban policy as well.  Although it
                        depends on what the player is being banned for.  In most cases, if the
                        player is being unruly in the game, they are warned, and with enough
                        warnings they get a temporary ban.  After which, to return to the game they
                        have to send a letter to the game administration convincing them of their
                        redemption.  However, they have an immediate permanent ban policy on client
                        hacking and major bug abuse, no questions asked.  Pretty brutal in fact.

                        I have no idea how they deal with problem players in Ultima Online or
                        Asheron's Call, however I bet they have something similar.  (I have never
                        even heard of anyone being banned in AC yet, but then again it is a fairly
                        new MMPG still.)

                        Best,

                        Darrin Hyrup
                        Mythic Entertainment



                        _______________________________________________
                        MUD-Dev maillist  -  MUD-Dev@kanga.nu
                        http://www.kanga.nu/lists/listinfo/mud-dev
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'Re: [MUD-Dev] Community Relations'
                  from: Darrin Hyrup <shades@mythicgames.com>
                  references: []
                  date: 2000-01-17 20:44:25.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: JzUMT8V6
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *113
              parent: &136 !ruby/object:MessageContainer
                key: &114 !ruby/object:MessageId
                  raw: JzUMQxAe@generated-message-id.chibrary.org
                value: !ruby/object:Message
                  email: !ruby/object:Email
                    raw: |
                      From: "Christopher Allen" <ChristopherA@skotos.net>
                      Date: Fri, 14 Jan 2000 22:54:45 -0800
                      Subject: Re: [MUD-Dev] Community Relations

                      "Dundee" <SkeptAck@antisocial.com>:
                      > Would this be an appropriate forum to seek advice on how to handle an
                      > "incident" recently which has included, so far, name-calling on a message
                      > board, toading of a player, resignation of the mud hosts (without warning
                      no
                      > less, *poof* mud is gone) and still, apparently, continues on with friends
                      of
                      > the player who was banned seeking "support" from other players to demand
                      an
                      > apology from the admin.  Whom, as far as I can tell, is prepared to
                      apologize
                      > when hell freezes over and the sun turns to dust.
                      >
                      > Most of our players are scratching their heads wondering what happened,
                      and
                      > since we're not saying, their only source of information is the toad's
                      > friends - somewhat one-sided.
                      >
                      > So, I would like to explain what happened, and what's happening now, and
                      seek
                      > advice on how we should handle the whole matter.
                      >
                      > But I want to make sure that's appropriate for this mailing list, first.

                      Obviously since your message was passed on to the list without comment, the
                      list admin wasn't striking your topic out of hand. But first I want to say I
                      *really* appreciate you asking.

                      Though I'm interested in the human dymanics of your question, I'm prefer not
                      to see the specifics of it hashed out too much on this list. I'd prefer to
                      see this continue to be a more mud development focused list.

                      However, if you want to exposit some general issues of how admins might deal
                      with incidents, ask questions about what kinds of policies different muds
                      use, or what the definition of "banning" means, I'd be more open to that.

                      I'll open with something intriguing that I heard recently.

                      Gemstone & DragonRealms are commercial muds with over 30,000 paying users.
                      They are very fast to warn someone who violates their rules, whether by
                      using curse words in the game, using OOC info for IC vendettas, etc. If
                      someone receives too many warnings, they are banned. However, unlike most
                      muds, they are banned only for a temporary amount of time, typically a week
                      or a month.

                      Here is the surprising statement -- they said that people who have been
                      banned multiple times (i.e. many warnings, a ban, many warning again,
                      another ban, etc.) are almost always redeemable. They say in almost all
                      cases the person if the person doesn't quit due to the temporary ban, they
                      will eventually shape up, and can become a responible gamer.

                      Obviously they have an incentive to keep players since they are a pay MUD.
                      However, they are quite adamant that anti-social players will turn eventualy
                      around. One of the consequences of this is that they never publish the lists
                      of the people who are banned, and GMs can be dismissed for revealing that
                      someone has been banned to the victim of the incident. This sometimes
                      results in complaints from victims asking if the perpetrator was punished or
                      not.

                      I find that this is opposite of the way most free MUDs work -- when someone
                      is banned, they are banned forever. If someone is known for not following
                      whatever the rules are in a mud (player killing, cursing, or whatever) they
                      are expected that they will never follow the rules.

                      Anyone find their statement about redeemable to be true to their experience?
                      Any free MUDs have similar policies? How about commercial games like Ultima
                      and Everquest -- are bans permanent there?

                      ------------------------------------------------------------------------
                      .. Christopher Allen                                 Skotos Tech Inc. ..
                      ..                           1512 Walnut St., Berkeley, CA 94709-1513 ..
                      .. <http://www.Skotos.net>               o510/649-4030  f510/649-4034 ..




                      _______________________________________________
                      MUD-Dev maillist  -  MUD-Dev@kanga.nu
                      http://www.kanga.nu/lists/listinfo/mud-dev
                    header: !ruby/object:Headers
                      rmail: !ruby/object:RMail::Message
                        header: !ruby/object:RMail::Header
                          fields:
                          - !ruby/object:RMail::Header::Field
                            raw: 'From: "Christopher Allen" <ChristopherA@skotos.net>'
                            name: From
                            value: '"Christopher Allen" <ChristopherA@skotos.net>'
                          - !ruby/object:RMail::Header::Field
                            raw: 'Date: Fri, 14 Jan 2000 22:54:45 -0800'
                            name: Date
                            value: Fri, 14 Jan 2000 22:54:45 -0800
                          - !ruby/object:RMail::Header::Field
                            raw: 'Subject: Re: [MUD-Dev] Community Relations'
                            name: Subject
                            value: 'Re: [MUD-Dev] Community Relations'
                          mbox_from: 
                        body: |
                          "Dundee" <SkeptAck@antisocial.com>:
                          > Would this be an appropriate forum to seek advice on how to handle an
                          > "incident" recently which has included, so far, name-calling on a message
                          > board, toading of a player, resignation of the mud hosts (without warning
                          no
                          > less, *poof* mud is gone) and still, apparently, continues on with friends
                          of
                          > the player who was banned seeking "support" from other players to demand
                          an
                          > apology from the admin.  Whom, as far as I can tell, is prepared to
                          apologize
                          > when hell freezes over and the sun turns to dust.
                          >
                          > Most of our players are scratching their heads wondering what happened,
                          and
                          > since we're not saying, their only source of information is the toad's
                          > friends - somewhat one-sided.
                          >
                          > So, I would like to explain what happened, and what's happening now, and
                          seek
                          > advice on how we should handle the whole matter.
                          >
                          > But I want to make sure that's appropriate for this mailing list, first.

                          Obviously since your message was passed on to the list without comment, the
                          list admin wasn't striking your topic out of hand. But first I want to say I
                          *really* appreciate you asking.

                          Though I'm interested in the human dymanics of your question, I'm prefer not
                          to see the specifics of it hashed out too much on this list. I'd prefer to
                          see this continue to be a more mud development focused list.

                          However, if you want to exposit some general issues of how admins might deal
                          with incidents, ask questions about what kinds of policies different muds
                          use, or what the definition of "banning" means, I'd be more open to that.

                          I'll open with something intriguing that I heard recently.

                          Gemstone & DragonRealms are commercial muds with over 30,000 paying users.
                          They are very fast to warn someone who violates their rules, whether by
                          using curse words in the game, using OOC info for IC vendettas, etc. If
                          someone receives too many warnings, they are banned. However, unlike most
                          muds, they are banned only for a temporary amount of time, typically a week
                          or a month.

                          Here is the surprising statement -- they said that people who have been
                          banned multiple times (i.e. many warnings, a ban, many warning again,
                          another ban, etc.) are almost always redeemable. They say in almost all
                          cases the person if the person doesn't quit due to the temporary ban, they
                          will eventually shape up, and can become a responible gamer.

                          Obviously they have an incentive to keep players since they are a pay MUD.
                          However, they are quite adamant that anti-social players will turn eventualy
                          around. One of the consequences of this is that they never publish the lists
                          of the people who are banned, and GMs can be dismissed for revealing that
                          someone has been banned to the victim of the incident. This sometimes
                          results in complaints from victims asking if the perpetrator was punished or
                          not.

                          I find that this is opposite of the way most free MUDs work -- when someone
                          is banned, they are banned forever. If someone is known for not following
                          whatever the rules are in a mud (player killing, cursing, or whatever) they
                          are expected that they will never follow the rules.

                          Anyone find their statement about redeemable to be true to their experience?
                          Any free MUDs have similar policies? How about commercial games like Ultima
                          and Everquest -- are bans permanent there?

                          ------------------------------------------------------------------------
                          .. Christopher Allen                                 Skotos Tech Inc. ..
                          ..                           1512 Walnut St., Berkeley, CA 94709-1513 ..
                          .. <http://www.Skotos.net>               o510/649-4030  f510/649-4034 ..




                          _______________________________________________
                          MUD-Dev maillist  -  MUD-Dev@kanga.nu
                          http://www.kanga.nu/lists/listinfo/mud-dev
                        epilogue: 
                        preamble: 
                    message_id: !ruby/object:MessageId
                      raw: "[invalid or missing message id]"
                    subject: !ruby/object:Subject
                      original: 'Re: [MUD-Dev] Community Relations'
                    from: Christopher Allen <ChristopherA@skotos.net>
                    references: []
                    date: 2000-01-15 06:54:45.000000000 Z
                    no_archive: false
                  call_number: !ruby/object:CallNumber
                    str: JzUMQxAe
                  source: archive
                  list: !ruby/object:List
                    slug: mud-dev
                    name: 
                    description: 
                    homepage: 
                    footer: 
                  message_id: *114
                parent: &135 !ruby/object:MessageContainer
                  key: &115 !ruby/object:MessageId
                    raw: JzUMQw6a@generated-message-id.chibrary.org
                  value: !ruby/object:Message
                    email: !ruby/object:Email
                      raw: |
                        From: Marian Griffith <gryphon@iaehv.nl>
                        Date: Sun, 16 Jan 2000 22:27:58 +0000 (GMT)
                        Subject: Re: [MUD-Dev] Community Relations

                        On Fri 14 Jan, Dundee wrote:

                        > Would this be an appropriate forum to seek advice on how to handle an
                        > "incident" recently which has included, so far, name-calling on a message
                        > board, toading of a player, resignation of the mud hosts (without warning no
                        > less, *poof* mud is gone) and still, apparently, continues on with friends of
                        > the player who was banned seeking "support" from other players to demand an
                        > apology from the admin.  Whom, as far as I can tell, is prepared to apologize
                        > when hell freezes over and the sun turns to dust.

                        > Most of our players are scratching their heads wondering what happened, and
                        > since we're not saying, their only source of information is the toad's
                        > friends - somewhat one-sided.

                        > So, I would like to explain what happened, and what's happening now, and seek
                        > advice on how we should handle the whole matter.

                        > But I want to make sure that's appropriate for this mailing list, first.

                        I am not sure if this is truly appropriate for this list. At least not
                        any -specific- incident. This is meant to be a list about the develop-
                        ment of muds after all.  Dealing with conflicts however is very much a
                        topic that would fit in this list,  as are many forms of running a mud
                        as opposed to developing one.

                        Without further information  I would guess that in your case something
                        seriously went wrong with the -communication- between player and admin
                        and the situation deteriorated from there.  In my (admittedly limited)
                        experience,  it is very rare  to find a player  who seeks to destroy a
                        mud for no reason.  Most of the time both sides involved feel slighted
                        and are willing to go to quite silly lengths to either prove that they
                        are right or to get revenge.


                        Marian
                        --
                        Yes - at last - You. I Choose you. Out of all the world,
                        out of all the seeking, I have found you, young sister of
                        my heart! You are mine and I am yours - and never again
                        will there be loneliness ...

                        Rolan Choosing Talia,
                        Arrows of the Queen, by Mercedes Lackey




                        _______________________________________________
                        MUD-Dev maillist  -  MUD-Dev@kanga.nu
                        http://www.kanga.nu/lists/listinfo/mud-dev
                      header: !ruby/object:Headers
                        rmail: !ruby/object:RMail::Message
                          header: !ruby/object:RMail::Header
                            fields:
                            - !ruby/object:RMail::Header::Field
                              raw: 'From: Marian Griffith <gryphon@iaehv.nl>'
                              name: From
                              value: Marian Griffith <gryphon@iaehv.nl>
                            - !ruby/object:RMail::Header::Field
                              raw: 'Date: Sun, 16 Jan 2000 22:27:58 +0000 (GMT)'
                              name: Date
                              value: Sun, 16 Jan 2000 22:27:58 +0000 (GMT)
                            - !ruby/object:RMail::Header::Field
                              raw: 'Subject: Re: [MUD-Dev] Community Relations'
                              name: Subject
                              value: 'Re: [MUD-Dev] Community Relations'
                            mbox_from: 
                          body: |
                            On Fri 14 Jan, Dundee wrote:

                            > Would this be an appropriate forum to seek advice on how to handle an
                            > "incident" recently which has included, so far, name-calling on a message
                            > board, toading of a player, resignation of the mud hosts (without warning no
                            > less, *poof* mud is gone) and still, apparently, continues on with friends of
                            > the player who was banned seeking "support" from other players to demand an
                            > apology from the admin.  Whom, as far as I can tell, is prepared to apologize
                            > when hell freezes over and the sun turns to dust.

                            > Most of our players are scratching their heads wondering what happened, and
                            > since we're not saying, their only source of information is the toad's
                            > friends - somewhat one-sided.

                            > So, I would like to explain what happened, and what's happening now, and seek
                            > advice on how we should handle the whole matter.

                            > But I want to make sure that's appropriate for this mailing list, first.

                            I am not sure if this is truly appropriate for this list. At least not
                            any -specific- incident. This is meant to be a list about the develop-
                            ment of muds after all.  Dealing with conflicts however is very much a
                            topic that would fit in this list,  as are many forms of running a mud
                            as opposed to developing one.

                            Without further information  I would guess that in your case something
                            seriously went wrong with the -communication- between player and admin
                            and the situation deteriorated from there.  In my (admittedly limited)
                            experience,  it is very rare  to find a player  who seeks to destroy a
                            mud for no reason.  Most of the time both sides involved feel slighted
                            and are willing to go to quite silly lengths to either prove that they
                            are right or to get revenge.


                            Marian
                            --
                            Yes - at last - You. I Choose you. Out of all the world,
                            out of all the seeking, I have found you, young sister of
                            my heart! You are mine and I am yours - and never again
                            will there be loneliness ...

                            Rolan Choosing Talia,
                            Arrows of the Queen, by Mercedes Lackey




                            _______________________________________________
                            MUD-Dev maillist  -  MUD-Dev@kanga.nu
                            http://www.kanga.nu/lists/listinfo/mud-dev
                          epilogue: 
                          preamble: 
                      message_id: !ruby/object:MessageId
                        raw: "[invalid or missing message id]"
                      subject: !ruby/object:Subject
                        original: 'Re: [MUD-Dev] Community Relations'
                      from: Marian Griffith <gryphon@iaehv.nl>
                      references: []
                      date: 2000-01-16 22:27:58.000000000 Z
                      no_archive: false
                    call_number: !ruby/object:CallNumber
                      str: JzUMQw6a
                    source: archive
                    list: !ruby/object:List
                      slug: mud-dev
                      name: 
                      description: 
                      homepage: 
                      footer: 
                    message_id: *115
                  parent: &118 !ruby/object:MessageContainer
                    key: &116 !ruby/object:MessageId
                      raw: 00uTmqC8@generated-message-id.chibrary.org
                    value: !ruby/object:Message
                      email: !ruby/object:Email
                        raw: |
                          From: "Dundee" <SkeptAck@antisocial.com>
                          Date: Fri, 14 Jan 2000 15:37:13 GMT
                          Subject: [MUD-Dev] Community Relations

                          Would this be an appropriate forum to seek advice on how to handle an
                          "incident" recently which has included, so far, name-calling on a message
                          board, toading of a player, resignation of the mud hosts (without warning=
                           no
                          less, *poof* mud is gone) and still, apparently, continues on with =
                          friends of
                          the player who was banned seeking "support" from other players to demand =
                          an
                          apology from the admin.  Whom, as far as I can tell, is prepared to =
                          apologize
                          when hell freezes over and the sun turns to dust.

                          Most of our players are scratching their heads wondering what happened, =
                          and
                          since we're not saying, their only source of information is the toad's
                          friends - somewhat one-sided.

                          So, I would like to explain what happened, and what's happening now, and =
                          seek
                          advice on how we should handle the whole matter.

                          But I want to make sure that's appropriate for this mailing list, first.

                          --=20
                          http://dundee.uong.com/



                          _______________________________________________
                          MUD-Dev maillist  -  MUD-Dev@kanga.nu
                          http://www.kanga.nu/lists/listinfo/mud-dev
                        header: !ruby/object:Headers
                          rmail: !ruby/object:RMail::Message
                            header: !ruby/object:RMail::Header
                              fields:
                              - !ruby/object:RMail::Header::Field
                                raw: 'From: "Dundee" <SkeptAck@antisocial.com>'
                                name: From
                                value: '"Dundee" <SkeptAck@antisocial.com>'
                              - !ruby/object:RMail::Header::Field
                                raw: 'Date: Fri, 14 Jan 2000 15:37:13 GMT'
                                name: Date
                                value: Fri, 14 Jan 2000 15:37:13 GMT
                              - !ruby/object:RMail::Header::Field
                                raw: 'Subject: [MUD-Dev] Community Relations'
                                name: Subject
                                value: "[MUD-Dev] Community Relations"
                              mbox_from: 
                            body: |
                              Would this be an appropriate forum to seek advice on how to handle an
                              "incident" recently which has included, so far, name-calling on a message
                              board, toading of a player, resignation of the mud hosts (without warning=
                               no
                              less, *poof* mud is gone) and still, apparently, continues on with =
                              friends of
                              the player who was banned seeking "support" from other players to demand =
                              an
                              apology from the admin.  Whom, as far as I can tell, is prepared to =
                              apologize
                              when hell freezes over and the sun turns to dust.

                              Most of our players are scratching their heads wondering what happened, =
                              and
                              since we're not saying, their only source of information is the toad's
                              friends - somewhat one-sided.

                              So, I would like to explain what happened, and what's happening now, and =
                              seek
                              advice on how we should handle the whole matter.

                              But I want to make sure that's appropriate for this mailing list, first.

                              --=20
                              http://dundee.uong.com/



                              _______________________________________________
                              MUD-Dev maillist  -  MUD-Dev@kanga.nu
                              http://www.kanga.nu/lists/listinfo/mud-dev
                            epilogue: 
                            preamble: 
                        message_id: !ruby/object:MessageId
                          raw: "[invalid or missing message id]"
                        subject: !ruby/object:Subject
                          original: "[MUD-Dev] Community Relations"
                        from: Dundee <SkeptAck@antisocial.com>
                        references: []
                        date: 2000-01-14 15:37:13.000000000 Z
                        no_archive: false
                      call_number: !ruby/object:CallNumber
                        str: 00uTmqC8
                      source: archive
                      list: !ruby/object:List
                        slug: mud-dev
                        name: 
                        description: 
                        homepage: 
                        footer: 
                      message_id: *116
                    parent: 
                    children:
                    - &314 !ruby/object:MessageContainer
                      key: &117 !ruby/object:MessageId
                        raw: JzBblxK4@generated-message-id.chibrary.org
                      value: !ruby/object:Message
                        email: !ruby/object:Email
                          raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Wed, 19
                            Jan 2000 19:46:31 -0800\nSubject: Re: [MUD-Dev] Community
                            Relations\n\nOn Wed, 19 Jan 2000 16:50:07 -0800 (PST)
                            \nMatthew Mihaly <diablo@best.com> wrote:\n\n> America's...\n\nWritng
                            as list owner:\n\n  For the purpose of this list let's
                            take this as a metaphorical\nexample and NOT attempt to
                            debate the example itself.\n\n--\nJ C Lawrence                                 Home:
                            claw@kanga.nu\n----------(*)                              Other:
                            coder@kanga.nu\n--=| A man is as sane as he is dangerous
                            to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                          header: !ruby/object:Headers
                            rmail: !ruby/object:RMail::Message
                              header: !ruby/object:RMail::Header
                                fields:
                                - !ruby/object:RMail::Header::Field
                                  raw: 'From: J C Lawrence <claw@kanga.nu>'
                                  name: From
                                  value: J C Lawrence <claw@kanga.nu>
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Date: Wed, 19 Jan 2000 19:46:31 -0800'
                                  name: Date
                                  value: Wed, 19 Jan 2000 19:46:31 -0800
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                  name: Subject
                                  value: 'Re: [MUD-Dev] Community Relations'
                                mbox_from: 
                              body: "On Wed, 19 Jan 2000 16:50:07 -0800 (PST) \nMatthew
                                Mihaly <diablo@best.com> wrote:\n\n> America's...\n\nWritng
                                as list owner:\n\n  For the purpose of this list let's
                                take this as a metaphorical\nexample and NOT attempt
                                to debate the example itself.\n\n--\nJ C Lawrence
                                \                                Home: claw@kanga.nu\n----------(*)
                                \                             Other: coder@kanga.nu\n--=|
                                A man is as sane as he is dangerous to his environment
                                |=--\n\n\n_______________________________________________\nMUD-Dev
                                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                              epilogue: 
                              preamble: 
                          message_id: !ruby/object:MessageId
                            raw: "[invalid or missing message id]"
                          subject: !ruby/object:Subject
                            original: 'Re: [MUD-Dev] Community Relations'
                          from: J C Lawrence <claw@kanga.nu>
                          references: []
                          date: 2000-01-20 03:46:31.000000000 Z
                          no_archive: false
                        call_number: !ruby/object:CallNumber
                          str: JzBblxK4
                        source: archive
                        list: !ruby/object:List
                          slug: mud-dev
                          name: 
                          description: 
                          homepage: 
                          footer: 
                        message_id: *117
                      parent: *118
                      children: []
                    - &355 !ruby/object:MessageContainer
                      key: &119 !ruby/object:MessageId
                        raw: 00bj5dxo@generated-message-id.chibrary.org
                      value: !ruby/object:Message
                        email: !ruby/object:Email
                          raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Thu, 20
                            Jan 2000 19:43:04 -0800\nSubject: Re: [MUD-Dev] Community
                            Relations\n\nOn Fri, 21 Jan 2000 00:01:50 +0100 \nolag
                            \ <Ola> wrote:\n\nWriting as lit owner:\n\n  Let's let
                            the religious/political philosophy thread die here.  Its\noff-topic.\n\n--\nJ
                            C Lawrence                                 Home: claw@kanga.nu\n----------(*)
                            \                             Other: coder@kanga.nu\n--=|
                            A man is as sane as he is dangerous to his environment
                            |=--\n\n\n_______________________________________________\nMUD-Dev
                            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                          header: !ruby/object:Headers
                            rmail: !ruby/object:RMail::Message
                              header: !ruby/object:RMail::Header
                                fields:
                                - !ruby/object:RMail::Header::Field
                                  raw: 'From: J C Lawrence <claw@kanga.nu>'
                                  name: From
                                  value: J C Lawrence <claw@kanga.nu>
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Date: Thu, 20 Jan 2000 19:43:04 -0800'
                                  name: Date
                                  value: Thu, 20 Jan 2000 19:43:04 -0800
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                  name: Subject
                                  value: 'Re: [MUD-Dev] Community Relations'
                                mbox_from: 
                              body: "On Fri, 21 Jan 2000 00:01:50 +0100 \nolag  <Ola>
                                wrote:\n\nWriting as lit owner:\n\n  Let's let the
                                religious/political philosophy thread die here.  Its\noff-topic.\n\n--\nJ
                                C Lawrence                                 Home: claw@kanga.nu\n----------(*)
                                \                             Other: coder@kanga.nu\n--=|
                                A man is as sane as he is dangerous to his environment
                                |=--\n\n\n_______________________________________________\nMUD-Dev
                                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                              epilogue: 
                              preamble: 
                          message_id: !ruby/object:MessageId
                            raw: "[invalid or missing message id]"
                          subject: !ruby/object:Subject
                            original: 'Re: [MUD-Dev] Community Relations'
                          from: J C Lawrence <claw@kanga.nu>
                          references: []
                          date: 2000-01-21 03:43:04.000000000 Z
                          no_archive: false
                        call_number: !ruby/object:CallNumber
                          str: 00bj5dxo
                        source: archive
                        list: !ruby/object:List
                          slug: mud-dev
                          name: 
                          description: 
                          homepage: 
                          footer: 
                        message_id: *119
                      parent: *118
                      children: []
                    - &370 !ruby/object:MessageContainer
                      key: &120 !ruby/object:MessageId
                        raw: 000DlhTc@generated-message-id.chibrary.org
                      value: !ruby/object:Message
                        email: !ruby/object:Email
                          raw: "From: \"F. Randall Farmer\" <randy@communities.com>\nDate:
                            Fri, 21 Jan 2000 10:59:41 -0800\nSubject: Re: [MUD-Dev]
                            Community Relations\n\nA question: In what way do you
                            manifest yourself as the immortal?\n\nThe services I've
                            been involved with have never had manifested deity,\neven
                            when the universe had a mythology (as was the case in
                            Dreamscape.)\nWe've never needed an immortal \"in-world.\"
                            \ [Of course, I've never\nbuilt a combat-mud like most
                            of you here seem to build.]\n\nThe closest thing we had
                            to an \"immortal\": Lucasfilm's Habitat had\n\"The Oracle\"
                            which was a fountain in the middle of town. If you spoke\nto
                            it, the reply was always \"I'll see what I can do.\" and
                            it logged the\nmessage for later admin review. The Oracle
                            never made appearances.\n(Every Habitat since then has
                            featured a fountain in the middle of town,\nbut they aren't
                            \"a transmitter for talking to God\" like the original.)\nDreamscape
                            has Morpheus who, of course, has many faces but also never\nappears.\n\nWe've
                            always used a combination paid and volunteer moderation
                            model,\nusually tiered, with the paid folks at top. :-)
                            Each tier has a reserved\ntitle. Administrative capabilities
                            are usually tiered, though there is\nnot always a one-to-one
                            correspondence with moderator tiers. A classic\nexample
                            of the difference is the separation of \"authoring\" capabilities\nfrom
                            \"crowd control\" capabilities. As I'm sure most here
                            will agree,\nthese are two different skill sets. :-)\n\nBack
                            to the question: In the products I've been closely associated
                            with -\n\nProduct                 Immortal Manifestation
                            \       Live Admin offices\n-------                 ----------------------
                            \       ------------------\nLucasfilm's Habitat     The
                            Fountain Oracle (batch)   Guides\nClub Caribe             None
                            (no myth)                Guides\n                                                      Guardian
                            Angels\nFujistu Habitat         ???                           Oracles\nWorldsAway/Dreamscape
                            \  None (Morpheus myth)          Oracles,Acolytes\nThe
                            Palace              None (think CHAT)             Owners,
                            Operators\n                                                      (formerly
                            Gods,Wizards)\n\nRandy\n\nF. Randall Farmer                \"Home
                            pages are passe', everybody's\nCommunities.com                  building
                            a palace\" - Time Magazine\nCofounder and VP Services
                            \       http://www.communities.com\n   \nrandy@communities.com
                            \           \n\n\n\n\n_______________________________________________\nMUD-Dev
                            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                          header: !ruby/object:Headers
                            rmail: !ruby/object:RMail::Message
                              header: !ruby/object:RMail::Header
                                fields:
                                - !ruby/object:RMail::Header::Field
                                  raw: 'From: "F. Randall Farmer" <randy@communities.com>'
                                  name: From
                                  value: '"F. Randall Farmer" <randy@communities.com>'
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Date: Fri, 21 Jan 2000 10:59:41 -0800'
                                  name: Date
                                  value: Fri, 21 Jan 2000 10:59:41 -0800
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                  name: Subject
                                  value: 'Re: [MUD-Dev] Community Relations'
                                mbox_from: 
                              body: "A question: In what way do you manifest yourself
                                as the immortal?\n\nThe services I've been involved
                                with have never had manifested deity,\neven when the
                                universe had a mythology (as was the case in Dreamscape.)\nWe've
                                never needed an immortal \"in-world.\"  [Of course,
                                I've never\nbuilt a combat-mud like most of you here
                                seem to build.]\n\nThe closest thing we had to an
                                \"immortal\": Lucasfilm's Habitat had\n\"The Oracle\"
                                which was a fountain in the middle of town. If you
                                spoke\nto it, the reply was always \"I'll see what
                                I can do.\" and it logged the\nmessage for later admin
                                review. The Oracle never made appearances.\n(Every
                                Habitat since then has featured a fountain in the
                                middle of town,\nbut they aren't \"a transmitter for
                                talking to God\" like the original.)\nDreamscape has
                                Morpheus who, of course, has many faces but also never\nappears.\n\nWe've
                                always used a combination paid and volunteer moderation
                                model,\nusually tiered, with the paid folks at top.
                                :-) Each tier has a reserved\ntitle. Administrative
                                capabilities are usually tiered, though there is\nnot
                                always a one-to-one correspondence with moderator
                                tiers. A classic\nexample of the difference is the
                                separation of \"authoring\" capabilities\nfrom \"crowd
                                control\" capabilities. As I'm sure most here will
                                agree,\nthese are two different skill sets. :-)\n\nBack
                                to the question: In the products I've been closely
                                associated with -\n\nProduct                 Immortal
                                Manifestation        Live Admin offices\n-------                 ----------------------
                                \       ------------------\nLucasfilm's Habitat     The
                                Fountain Oracle (batch)   Guides\nClub Caribe             None
                                (no myth)                Guides\n                                                      Guardian
                                Angels\nFujistu Habitat         ???                           Oracles\nWorldsAway/Dreamscape
                                \  None (Morpheus myth)          Oracles,Acolytes\nThe
                                Palace              None (think CHAT)             Owners,
                                Operators\n                                                      (formerly
                                Gods,Wizards)\n\nRandy\n\nF. Randall Farmer                \"Home
                                pages are passe', everybody's\nCommunities.com                  building
                                a palace\" - Time Magazine\nCofounder and VP Services
                                \       http://www.communities.com\n   \nrandy@communities.com
                                \           \n\n\n\n\n_______________________________________________\nMUD-Dev
                                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                              epilogue: 
                              preamble: 
                          message_id: !ruby/object:MessageId
                            raw: "[invalid or missing message id]"
                          subject: !ruby/object:Subject
                            original: 'Re: [MUD-Dev] Community Relations'
                          from: F. Randall Farmer <randy@communities.com>
                          references: []
                          date: 2000-01-21 18:59:41.000000000 Z
                          no_archive: false
                        call_number: !ruby/object:CallNumber
                          str: 000DlhTc
                        source: archive
                        list: !ruby/object:List
                          slug: mud-dev
                          name: 
                          description: 
                          homepage: 
                          footer: 
                        message_id: *120
                      parent: *118
                      children: []
                    - &372 !ruby/object:MessageContainer
                      key: &121 !ruby/object:MessageId
                        raw: JzUDNzPs@generated-message-id.chibrary.org
                      value: !ruby/object:Message
                        email: !ruby/object:Email
                          raw: |
                            From: Matthew Mihaly <diablo@best.com>
                            Date: Wed, 19 Jan 2000 16:50:07 -0800 (PST)
                            Subject: Re: [MUD-Dev] Community Relations

                            And here begins a spate of responses from me...

                            On Wed, 19 Jan 2000, Ola Fosheim [iso-8859-1] Gr=F8stad wrote:

                            > Let's be really pedantic. It is clearly possible to have invalid goals.
                            > You will never reach it, but you can still act and believe that what you
                            > do will get you there ("there" is ill-defined). That said, it isn't
                            > obvious that people act in order to satisfy explicit goals.

                            Just because you will never reach it doesn't make it an invalid goal. It
                            makes it an impossible goal (for you at least).


                            > It is rather obvious that for ethical reasons, the MUD should somehow be
                            > beneficial to the players and at least not damaging to them.  This is
                            > the criterion which the validity of most systems are judged by in a
                            > democracy, and I see no reason for why MUDs should be different.  If you
                            > create a social interaction system then it is rather irresponsible to
                            > claim that you are irresponsible! If enough stupid people act
                            > cluelessly, perhaps with suicides as the outcome, then a law is passed
                            > and a bad practice has became illegal.  Do you need laws to be passed
                            > in order to act responsible??

                            So I'm curious, who judges what is beneficial and not damaging to the
                            players? I also have no idea what you are talking about when you say that
                            this is the criteria by which most systems are judged in a democracy. My
                            degree is in political science, and I certainly have never heard democracy
                            phrased that way. Further, beneficial to WHICH players? I think you'd have
                            a hard time finding ANY wide-spread program that is beneficial to all the
                            players (or citizens in a democracy). And again, define beneficial. Is
                            giving money to the poor beneficial to them? Not such an easy question to
                            answer. If you are truly concerned about the players, then shut down your
                            mud and urge them to go do things that will more efficiently improve their
                            lives. I, for one, am not convined that the players spending thousands of
                            dollars to play my game are truly benefiting. They are enjoying
                            themselves, but frankly, I suspect that they would benefit more in the
                            long run from doing other things with the money and time.

                            =20
                            > You may of course claim the anarchist religion as your belief system,
                            > but that doesn't really fit with the way you seem to run your mud ;).

                            I have, in fact, been an anarchist (anarcho-capitalist primarily) in the
                            past, but now I simply don't care, as long as I can do what I want, which
                            is generally the case. Further, the way I run my mud is _completely_
                            consistent with anarcho-capitalism. I own the mud, therefore I can do
                            whatever I please with it, providing it does not violate an explicit
                            contractual arrangement.=20

                            =20
                            > > Poorly phrased by me. My point is that regardless of where the content =
                            is
                            > > coming from (players or creator), the fact is, the world is _owned_ by =
                            the
                            > > creator (or his assignee). He does not have any real responsibilities t=
                            o
                            > > his players unless he chooses to accept them.
                            >=20
                            > I hope you realize that the idea of "ownership" is as culturally
                            > dependent as that of "moral". So basically you cannot dismiss
                            > responsibilities assumed by a culture without also dismissing the
                            > validity (or connotations) of "ownership".  So the basic issue is which
                            > "system of beliefs" is most sound and rigorously thought out? I'll claim
                            > that you probably will have to look at philosophy and
                            > cross-cultural/cross-religious invariance to find a decent answer.

                            Of course I realize that. Ownership is as fictitious as any morality, and
                            it is why I ended up giving up on anarcho-capitalism, as I couldn't see
                            any way to justify property ownership in a ethical system based on never
                            initiating the use or threat of force.

                            And I most certainly can dismiss responsibilities that aren't enforced by
                            law, because they are _imaginary_. Ownership exists because people with
                            guns (proverbial or otherwise) are willing to enforce it. If no one is
                            willing to enforce a "responsibility" then it's just a bunch of mental
                            masturbation. As someone once said (Lenny Bruce maybe?), "What is is what
                            is. Should is a dirty lie."

                            I also think that you cannot possibly believe that the basic issue is
                            which system of beliefs is the most sound and rigorously thought out. That
                            would be true if we all started with the same basic assumptions, upon
                            which we then built our systems. If that was the case, it would be easy to
                            mathematically deduce the most sound system of beliefs for
                            everyone. However, that is not the case. The search for a single system of
                            beliefs that is best for everyone is futile. Isaiah Berlin wrote an
                            excellent essay on this called 'The Pursuit of the Ideal' in which he
                            talks about how most ethical thinkers throughout time have implicitly (and
                            without good reason) assumed that if only certainy could be established in
                            our knowledgeof the external world by rational methods, then surely the
                            same methods would yield equal certainty when we speak of human behavior
                            -- what we should be, and how we should live.


                            >=20
                            > Is is rather obvious from a psychological perspective that some admins
                            > choose their belief system based on what is convenient in that
                            > particular situation. They would probably choose a different set of
                            > beliefs in a different situation. This is generally not viewed as having
                            > high moral standards?

                            Like the way people generally tend to act? Given that I have yet to meet
                            someone who does not bend morality to fit circumstances, it's hardly a
                            surprise that admins do it. Christians are against murder, unless it's
                            done on a really large scale it seems. America's slob of a president
                            stands up and calls terrorists cowards, and then turns around and bombs a
                            drugs factory in the Sudan. Americans claim that all people are equal, yet
                            see apparently no problem with bombing and  killing tons of innocent
                            civilians in order to reduce the risk that even 1 american life may be
                            lost on the ground.

                            High moral standards are also completely subjective, and how they are
                            generally viewed isn't important, at least to me. My ethical beliefs, at
                            least, are not based on popular consensus. (sorry if that sounds holier
                            than though. It's not meant to.)


                            > You are indeed responsible the moment you open your system to the
                            > general public, even in the legal sense of the word (depending on how
                            > "public" is defined).  Perhaps you even explicitly invite people, making
                            > promises? How can you then deny responsibility? You assume more
                            > responsibility when you are public than when you run a private closed
                            > MUD where the players can be assumed to understand the premises.  Do you
                            > refute this?  A MUD is not a party in your private house, and you are
                            > in fact not allowed to abuse visitors to your private home either.
                            > A club is perhaps more fitting for analogies.

                            Because responsibility is a fiction, that's why. It doesn't exist except
                            in your mind. You may find yourself being beaten up by government thugs if
                            you shirk the responsibilities they claim you have (draft, jury duty,
                            whatever), but responsibility in that case really has no meaning, except
                            that people with more force than you have decided to force you into doing
                            something. I'm sure many of you on this list would say that a parent has a
                            responsibility to a new-born child, but I don't see it that way, and
                            neither have many other cultures. I have no problem at all with
                            infanticide, or just leaving a baby outside to die of the elements, for
                            instance, providing it is your baby.


                             =20
                            > I'm starting to believe that when you say "right" you actually mean: it
                            > is "legally possible". A lot of bad stuff is possible and legal,
                            > depending on which country you live in. So that is really not
                            > appropriate base for discussing ethical issues.  Or maybe what you are
                            > saying is "I am making a lot of bad decisions that make other people
                            > miserable, but I want to deny this feeling of guilt, therefore I assume
                            > the position that all goals and practices are acceptable"?

                            Yes, by right I mean what is legally possible. I don't believe in
                            "rights" because they don't exist. From where do rights derive? A right,
                            like a responsibility, is a fiction. If someone who can make you do
                            something, or stop others from doing things to you, claims you have a
                            responsibility or a right, and is willing to use force to back that up,
                            then those words have some semblance of reality. Otherwise, they are just
                            words. I'm not a Christian, and I don't believe in God. I think the entire
                            concept of natural rights is a joke. So where do these rights derive
                            from? Your arguments, it seems to me, presuppose that the Christian
                            ethical structure is right, and that is entirely as arbitrary as any other
                            system of ethics.


                            --matt




                            _______________________________________________
                            MUD-Dev maillist  -  MUD-Dev@kanga.nu
                            http://www.kanga.nu/lists/listinfo/mud-dev
                          header: !ruby/object:Headers
                            rmail: !ruby/object:RMail::Message
                              header: !ruby/object:RMail::Header
                                fields:
                                - !ruby/object:RMail::Header::Field
                                  raw: 'From: Matthew Mihaly <diablo@best.com>'
                                  name: From
                                  value: Matthew Mihaly <diablo@best.com>
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Date: Wed, 19 Jan 2000 16:50:07 -0800 (PST)'
                                  name: Date
                                  value: Wed, 19 Jan 2000 16:50:07 -0800 (PST)
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                  name: Subject
                                  value: 'Re: [MUD-Dev] Community Relations'
                                mbox_from: 
                              body: |
                                And here begins a spate of responses from me...

                                On Wed, 19 Jan 2000, Ola Fosheim [iso-8859-1] Gr=F8stad wrote:

                                > Let's be really pedantic. It is clearly possible to have invalid goals.
                                > You will never reach it, but you can still act and believe that what you
                                > do will get you there ("there" is ill-defined). That said, it isn't
                                > obvious that people act in order to satisfy explicit goals.

                                Just because you will never reach it doesn't make it an invalid goal. It
                                makes it an impossible goal (for you at least).


                                > It is rather obvious that for ethical reasons, the MUD should somehow be
                                > beneficial to the players and at least not damaging to them.  This is
                                > the criterion which the validity of most systems are judged by in a
                                > democracy, and I see no reason for why MUDs should be different.  If you
                                > create a social interaction system then it is rather irresponsible to
                                > claim that you are irresponsible! If enough stupid people act
                                > cluelessly, perhaps with suicides as the outcome, then a law is passed
                                > and a bad practice has became illegal.  Do you need laws to be passed
                                > in order to act responsible??

                                So I'm curious, who judges what is beneficial and not damaging to the
                                players? I also have no idea what you are talking about when you say that
                                this is the criteria by which most systems are judged in a democracy. My
                                degree is in political science, and I certainly have never heard democracy
                                phrased that way. Further, beneficial to WHICH players? I think you'd have
                                a hard time finding ANY wide-spread program that is beneficial to all the
                                players (or citizens in a democracy). And again, define beneficial. Is
                                giving money to the poor beneficial to them? Not such an easy question to
                                answer. If you are truly concerned about the players, then shut down your
                                mud and urge them to go do things that will more efficiently improve their
                                lives. I, for one, am not convined that the players spending thousands of
                                dollars to play my game are truly benefiting. They are enjoying
                                themselves, but frankly, I suspect that they would benefit more in the
                                long run from doing other things with the money and time.

                                =20
                                > You may of course claim the anarchist religion as your belief system,
                                > but that doesn't really fit with the way you seem to run your mud ;).

                                I have, in fact, been an anarchist (anarcho-capitalist primarily) in the
                                past, but now I simply don't care, as long as I can do what I want, which
                                is generally the case. Further, the way I run my mud is _completely_
                                consistent with anarcho-capitalism. I own the mud, therefore I can do
                                whatever I please with it, providing it does not violate an explicit
                                contractual arrangement.=20

                                =20
                                > > Poorly phrased by me. My point is that regardless of where the content =
                                is
                                > > coming from (players or creator), the fact is, the world is _owned_ by =
                                the
                                > > creator (or his assignee). He does not have any real responsibilities t=
                                o
                                > > his players unless he chooses to accept them.
                                >=20
                                > I hope you realize that the idea of "ownership" is as culturally
                                > dependent as that of "moral". So basically you cannot dismiss
                                > responsibilities assumed by a culture without also dismissing the
                                > validity (or connotations) of "ownership".  So the basic issue is which
                                > "system of beliefs" is most sound and rigorously thought out? I'll claim
                                > that you probably will have to look at philosophy and
                                > cross-cultural/cross-religious invariance to find a decent answer.

                                Of course I realize that. Ownership is as fictitious as any morality, and
                                it is why I ended up giving up on anarcho-capitalism, as I couldn't see
                                any way to justify property ownership in a ethical system based on never
                                initiating the use or threat of force.

                                And I most certainly can dismiss responsibilities that aren't enforced by
                                law, because they are _imaginary_. Ownership exists because people with
                                guns (proverbial or otherwise) are willing to enforce it. If no one is
                                willing to enforce a "responsibility" then it's just a bunch of mental
                                masturbation. As someone once said (Lenny Bruce maybe?), "What is is what
                                is. Should is a dirty lie."

                                I also think that you cannot possibly believe that the basic issue is
                                which system of beliefs is the most sound and rigorously thought out. That
                                would be true if we all started with the same basic assumptions, upon
                                which we then built our systems. If that was the case, it would be easy to
                                mathematically deduce the most sound system of beliefs for
                                everyone. However, that is not the case. The search for a single system of
                                beliefs that is best for everyone is futile. Isaiah Berlin wrote an
                                excellent essay on this called 'The Pursuit of the Ideal' in which he
                                talks about how most ethical thinkers throughout time have implicitly (and
                                without good reason) assumed that if only certainy could be established in
                                our knowledgeof the external world by rational methods, then surely the
                                same methods would yield equal certainty when we speak of human behavior
                                -- what we should be, and how we should live.


                                >=20
                                > Is is rather obvious from a psychological perspective that some admins
                                > choose their belief system based on what is convenient in that
                                > particular situation. They would probably choose a different set of
                                > beliefs in a different situation. This is generally not viewed as having
                                > high moral standards?

                                Like the way people generally tend to act? Given that I have yet to meet
                                someone who does not bend morality to fit circumstances, it's hardly a
                                surprise that admins do it. Christians are against murder, unless it's
                                done on a really large scale it seems. America's slob of a president
                                stands up and calls terrorists cowards, and then turns around and bombs a
                                drugs factory in the Sudan. Americans claim that all people are equal, yet
                                see apparently no problem with bombing and  killing tons of innocent
                                civilians in order to reduce the risk that even 1 american life may be
                                lost on the ground.

                                High moral standards are also completely subjective, and how they are
                                generally viewed isn't important, at least to me. My ethical beliefs, at
                                least, are not based on popular consensus. (sorry if that sounds holier
                                than though. It's not meant to.)


                                > You are indeed responsible the moment you open your system to the
                                > general public, even in the legal sense of the word (depending on how
                                > "public" is defined).  Perhaps you even explicitly invite people, making
                                > promises? How can you then deny responsibility? You assume more
                                > responsibility when you are public than when you run a private closed
                                > MUD where the players can be assumed to understand the premises.  Do you
                                > refute this?  A MUD is not a party in your private house, and you are
                                > in fact not allowed to abuse visitors to your private home either.
                                > A club is perhaps more fitting for analogies.

                                Because responsibility is a fiction, that's why. It doesn't exist except
                                in your mind. You may find yourself being beaten up by government thugs if
                                you shirk the responsibilities they claim you have (draft, jury duty,
                                whatever), but responsibility in that case really has no meaning, except
                                that people with more force than you have decided to force you into doing
                                something. I'm sure many of you on this list would say that a parent has a
                                responsibility to a new-born child, but I don't see it that way, and
                                neither have many other cultures. I have no problem at all with
                                infanticide, or just leaving a baby outside to die of the elements, for
                                instance, providing it is your baby.


                                 =20
                                > I'm starting to believe that when you say "right" you actually mean: it
                                > is "legally possible". A lot of bad stuff is possible and legal,
                                > depending on which country you live in. So that is really not
                                > appropriate base for discussing ethical issues.  Or maybe what you are
                                > saying is "I am making a lot of bad decisions that make other people
                                > miserable, but I want to deny this feeling of guilt, therefore I assume
                                > the position that all goals and practices are acceptable"?

                                Yes, by right I mean what is legally possible. I don't believe in
                                "rights" because they don't exist. From where do rights derive? A right,
                                like a responsibility, is a fiction. If someone who can make you do
                                something, or stop others from doing things to you, claims you have a
                                responsibility or a right, and is willing to use force to back that up,
                                then those words have some semblance of reality. Otherwise, they are just
                                words. I'm not a Christian, and I don't believe in God. I think the entire
                                concept of natural rights is a joke. So where do these rights derive
                                from? Your arguments, it seems to me, presuppose that the Christian
                                ethical structure is right, and that is entirely as arbitrary as any other
                                system of ethics.


                                --matt




                                _______________________________________________
                                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                                http://www.kanga.nu/lists/listinfo/mud-dev
                              epilogue: 
                              preamble: 
                          message_id: !ruby/object:MessageId
                            raw: "[invalid or missing message id]"
                          subject: !ruby/object:Subject
                            original: 'Re: [MUD-Dev] Community Relations'
                          from: Matthew Mihaly <diablo@best.com>
                          references: []
                          date: 2000-01-20 00:50:07.000000000 Z
                          no_archive: false
                        call_number: !ruby/object:CallNumber
                          str: JzUDNzPs
                        source: archive
                        list: !ruby/object:List
                          slug: mud-dev
                          name: 
                          description: 
                          homepage: 
                          footer: 
                        message_id: *121
                      parent: *118
                      children: []
                    - &124 !ruby/object:MessageContainer
                      key: &122 !ruby/object:MessageId
                        raw: JzUMQw6K@generated-message-id.chibrary.org
                      value: !ruby/object:Message
                        email: !ruby/object:Email
                          raw: "From: Wes Connell <wconnell@adhesive.com>\nDate: Wed,
                            19 Jan 2000 13:36:04 -0600 (CST)\nSubject: Re: [MUD-Dev]
                            Community Relations\n\nA question: In what way do you
                            manifest yourself as the immortal?\nIs it plainly a 'Bubba
                            the Immortal is standing here.' ?\n\nI was considering
                            this last night while playing UO. In UO whenever there\nis
                            a problem that requires GM interaction the guy that appears
                            is nothing\nmore that another human in a red robe. Most
                            players totally rag on these\nguys. Perhaps if they were
                            to appear as a Balron or some other hideous \ncreature
                            they could gain some more respect.\n\nThink about The
                            Wizard of Oz. When the group first went into the room
                            and\nthe fire blazed and the big head had a booming voice.
                            At that point the Wizard\nwas in COMPLETE control. Once
                            the group found the man behind the curtain then\nhis power
                            was shifted to Dorothy.\n\nThinking back to earlier admin
                            experiences with troublesome players I wish I\nwould of
                            projected my self as a big head or something menacing.
                            \n\nMaybe a troublesome player could be yanked into a
                            totally dark room. Each time\nhe said something in the
                            room it would always comeout as a whisper. Each time\nthe
                            immortal said something it would be a booming voice. Or
                            the head could \ndissappear and reappear next to the players
                            ear. Add in some confusion and \nthe immortal would control
                            the situation.\n\nOf course I wouldn't use something like
                            this for a player that is reporting a\nbug or something.
                            Use the correct manfiestation for the correct situation.\n\nA
                            cute puppy dog in a field for praises.\nA giant judge
                            at his desk for player disputes.\nA blood-thirsty elder
                            daemon for trouble makers.\nA ticket scalper for bug reports?
                            (i'm grasping here)\netc.\netc.\n\nWes Connell               wconnell@adhesive.com\nAdhesive
                            Software, Inc. - Dynamic Web Site Management Solutions\nhttp://www.adhesive.com
                            \       512-647-1200        512-647-1299 Fax\n!07/11 PDP
                            a ni deppart m'I  !pleH\n\n\n\n\n_______________________________________________\nMUD-Dev
                            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                          header: !ruby/object:Headers
                            rmail: !ruby/object:RMail::Message
                              header: !ruby/object:RMail::Header
                                fields:
                                - !ruby/object:RMail::Header::Field
                                  raw: 'From: Wes Connell <wconnell@adhesive.com>'
                                  name: From
                                  value: Wes Connell <wconnell@adhesive.com>
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Date: Wed, 19 Jan 2000 13:36:04 -0600 (CST)'
                                  name: Date
                                  value: Wed, 19 Jan 2000 13:36:04 -0600 (CST)
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                  name: Subject
                                  value: 'Re: [MUD-Dev] Community Relations'
                                mbox_from: 
                              body: "A question: In what way do you manifest yourself
                                as the immortal?\nIs it plainly a 'Bubba the Immortal
                                is standing here.' ?\n\nI was considering this last
                                night while playing UO. In UO whenever there\nis a
                                problem that requires GM interaction the guy that
                                appears is nothing\nmore that another human in a red
                                robe. Most players totally rag on these\nguys. Perhaps
                                if they were to appear as a Balron or some other hideous
                                \ncreature they could gain some more respect.\n\nThink
                                about The Wizard of Oz. When the group first went
                                into the room and\nthe fire blazed and the big head
                                had a booming voice. At that point the Wizard\nwas
                                in COMPLETE control. Once the group found the man
                                behind the curtain then\nhis power was shifted to
                                Dorothy.\n\nThinking back to earlier admin experiences
                                with troublesome players I wish I\nwould of projected
                                my self as a big head or something menacing. \n\nMaybe
                                a troublesome player could be yanked into a totally
                                dark room. Each time\nhe said something in the room
                                it would always comeout as a whisper. Each time\nthe
                                immortal said something it would be a booming voice.
                                Or the head could \ndissappear and reappear next to
                                the players ear. Add in some confusion and \nthe immortal
                                would control the situation.\n\nOf course I wouldn't
                                use something like this for a player that is reporting
                                a\nbug or something. Use the correct manfiestation
                                for the correct situation.\n\nA cute puppy dog in
                                a field for praises.\nA giant judge at his desk for
                                player disputes.\nA blood-thirsty elder daemon for
                                trouble makers.\nA ticket scalper for bug reports?
                                (i'm grasping here)\netc.\netc.\n\nWes Connell               wconnell@adhesive.com\nAdhesive
                                Software, Inc. - Dynamic Web Site Management Solutions\nhttp://www.adhesive.com
                                \       512-647-1200        512-647-1299 Fax\n!07/11
                                PDP a ni deppart m'I  !pleH\n\n\n\n\n_______________________________________________\nMUD-Dev
                                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                              epilogue: 
                              preamble: 
                          message_id: !ruby/object:MessageId
                            raw: "[invalid or missing message id]"
                          subject: !ruby/object:Subject
                            original: 'Re: [MUD-Dev] Community Relations'
                          from: Wes Connell <wconnell@adhesive.com>
                          references: []
                          date: 2000-01-19 19:36:04.000000000 Z
                          no_archive: false
                        call_number: !ruby/object:CallNumber
                          str: JzUMQw6K
                        source: archive
                        list: !ruby/object:List
                          slug: mud-dev
                          name: 
                          description: 
                          homepage: 
                          footer: 
                        message_id: *122
                      parent: *118
                      children:
                      - &126 !ruby/object:MessageContainer
                        key: &123 !ruby/object:MessageId
                          raw: 00IySsdM@generated-message-id.chibrary.org
                        value: !ruby/object:Message
                          email: !ruby/object:Email
                            raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Sat, 29
                              Jan 2000 22:35:04 -0800\nSubject: Re: [MUD-Dev] Community
                              Relations\n\nOn Fri, 21 Jan 2000 10:59:41 -0800 \nF
                              Randall Farmer <randy@communities.com> wrote:\n\n> A
                              question: In what way do you manifest yourself as the
                              immortal?\n\nMy general preference: Never do.  Never
                              have a presence in the game\nas an admin or \"immortal\".
                              \ Never have an identity in the game that\ncan be isolated
                              or identified as functioning as an admin.  You can\nof
                              course have various \"tester\" characters that you mess
                              with as an\nadmin (checking say that various functions
                              work as designed), but\nthey need to be obvious drones
                              and not actually \"player characters\"\nthat compete
                              with or fuction either as competition for players or
                              as\ntargets for appeals.\n\nWhile it is possible to
                              manage having a player character that is\nknown to be
                              run by an admin, and to keep the roles and activities
                              of\neach sufficiently different in-game, I've found
                              that the people\ncapable of doing such are vanishingly
                              rare.  Given a known admin\nplayer character, accusations
                              of favourtism, preferential treatment,\nhobby horsing,
                              bias, vendetta, and all the other sorts of unpleasant\npolitiking
                              and human emotion and reaction will almost certainly\noccur,
                              and worse, are indefensible.\n\n  It is easy to accuse
                              someone of being biased.\n\n  It is next to impossible
                              to prove that one is not.\n\nMy preference is to keep
                              all Admin/Immortal communications OOB as\nconcerns the
                              game.  It can be in email, via a weblog or board of\nsome
                              sort, IRC, whatever, but always in a form and venue
                              outside of\nthe MUD itself.  There were recently a few
                              comments between Raph an\nmyself on this area in reference
                              to Raph's position as Designer\nDragon on UOL, and how
                              his abstraction from the game helped his\nposition there.
                              \ The following is one of my posts on the area.  You\nshould
                              be able to find others both by thread and picking keywords:\n\n
                              \ http://www.kanga.nu/archives/MUD-Dev-L/1999Q4/msg00473.html\n\n>
                              [Of course, I've never built a combat-mud like most
                              of you here\n> seem to build.]\n\nAt one point MUD-Dev
                              had a strong population of Talker/Tiny-clan\nauthors/users.
                              \ Unfortunately we scared/ran 'em off.  I regret this.\n\n--\nJ
                              C Lawrence                                 Home: claw@kanga.nu\n----------(*)
                              \                             Other: coder@kanga.nu\n--=|
                              A man is as sane as he is dangerous to his environment
                              |=--\n\n\n_______________________________________________\nMUD-Dev
                              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                            header: !ruby/object:Headers
                              rmail: !ruby/object:RMail::Message
                                header: !ruby/object:RMail::Header
                                  fields:
                                  - !ruby/object:RMail::Header::Field
                                    raw: 'From: J C Lawrence <claw@kanga.nu>'
                                    name: From
                                    value: J C Lawrence <claw@kanga.nu>
                                  - !ruby/object:RMail::Header::Field
                                    raw: 'Date: Sat, 29 Jan 2000 22:35:04 -0800'
                                    name: Date
                                    value: Sat, 29 Jan 2000 22:35:04 -0800
                                  - !ruby/object:RMail::Header::Field
                                    raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                    name: Subject
                                    value: 'Re: [MUD-Dev] Community Relations'
                                  mbox_from: 
                                body: "On Fri, 21 Jan 2000 10:59:41 -0800 \nF Randall
                                  Farmer <randy@communities.com> wrote:\n\n> A question:
                                  In what way do you manifest yourself as the immortal?\n\nMy
                                  general preference: Never do.  Never have a presence
                                  in the game\nas an admin or \"immortal\".  Never
                                  have an identity in the game that\ncan be isolated
                                  or identified as functioning as an admin.  You can\nof
                                  course have various \"tester\" characters that you
                                  mess with as an\nadmin (checking say that various
                                  functions work as designed), but\nthey need to be
                                  obvious drones and not actually \"player characters\"\nthat
                                  compete with or fuction either as competition for
                                  players or as\ntargets for appeals.\n\nWhile it
                                  is possible to manage having a player character
                                  that is\nknown to be run by an admin, and to keep
                                  the roles and activities of\neach sufficiently different
                                  in-game, I've found that the people\ncapable of
                                  doing such are vanishingly rare.  Given a known
                                  admin\nplayer character, accusations of favourtism,
                                  preferential treatment,\nhobby horsing, bias, vendetta,
                                  and all the other sorts of unpleasant\npolitiking
                                  and human emotion and reaction will almost certainly\noccur,
                                  and worse, are indefensible.\n\n  It is easy to
                                  accuse someone of being biased.\n\n  It is next
                                  to impossible to prove that one is not.\n\nMy preference
                                  is to keep all Admin/Immortal communications OOB
                                  as\nconcerns the game.  It can be in email, via
                                  a weblog or board of\nsome sort, IRC, whatever,
                                  but always in a form and venue outside of\nthe MUD
                                  itself.  There were recently a few comments between
                                  Raph an\nmyself on this area in reference to Raph's
                                  position as Designer\nDragon on UOL, and how his
                                  abstraction from the game helped his\nposition there.
                                  \ The following is one of my posts on the area.
                                  \ You\nshould be able to find others both by thread
                                  and picking keywords:\n\n  http://www.kanga.nu/archives/MUD-Dev-L/1999Q4/msg00473.html\n\n>
                                  [Of course, I've never built a combat-mud like most
                                  of you here\n> seem to build.]\n\nAt one point MUD-Dev
                                  had a strong population of Talker/Tiny-clan\nauthors/users.
                                  \ Unfortunately we scared/ran 'em off.  I regret
                                  this.\n\n--\nJ C Lawrence                                 Home:
                                  claw@kanga.nu\n----------(*)                              Other:
                                  coder@kanga.nu\n--=| A man is as sane as he is dangerous
                                  to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                                epilogue: 
                                preamble: 
                            message_id: !ruby/object:MessageId
                              raw: "[invalid or missing message id]"
                            subject: !ruby/object:Subject
                              original: 'Re: [MUD-Dev] Community Relations'
                            from: J C Lawrence <claw@kanga.nu>
                            references: []
                            date: 2000-01-30 06:35:04.000000000 Z
                            no_archive: false
                          call_number: !ruby/object:CallNumber
                            str: 00IySsdM
                          source: archive
                          list: !ruby/object:List
                            slug: mud-dev
                            name: 
                            description: 
                            homepage: 
                            footer: 
                          message_id: *123
                        parent: *124
                        children:
                        - &128 !ruby/object:MessageContainer
                          key: &125 !ruby/object:MessageId
                            raw: JzBblyOe@generated-message-id.chibrary.org
                          value: !ruby/object:Message
                            email: !ruby/object:Email
                              raw: "From: Matthew Mihaly <diablo@best.com>\nDate:
                                Sat, 15 Jan 2000 00:41:36 -0800 (PST)\nSubject: Re:
                                [MUD-Dev] Community Relations\n\nOn Fri, 14 Jan 2000,
                                Christopher Allen wrote:\n\n<The below refers to the
                                Simutronics muds>\n\n> Here is the surprising statement
                                -- they said that people who have been\n> banned multiple
                                times (i.e. many warnings, a ban, many warning again,\n>
                                another ban, etc.) are almost always redeemable. They
                                say in almost all\n> cases the person if the person
                                doesn't quit due to the temporary ban, they\n> will
                                eventually shape up, and can become a responible gamer.\n\nI've
                                found this is true provided the customer is of a certain
                                age or\nmaturity level. They also will have your credit
                                information on file, and\nsimply knowing that the
                                admins know who you are is a disincentive to be a\nserious
                                trouble maker. \n\n \n> Obviously they have an incentive
                                to keep players since they are a pay MUD.\n> However,
                                they are quite adamant that anti-social players will
                                turn eventualy\n> around. One of the consequences
                                of this is that they never publish the lists\n> of
                                the people who are banned, and GMs can be dismissed
                                for revealing that\n> someone has been banned to the
                                victim of the incident. This sometimes\n> results
                                in complaints from victims asking if the perpetrator
                                was punished or\n> not.\n> \n> I find that this is
                                opposite of the way most free MUDs work -- when someone\n>
                                is banned, they are banned forever. If someone is
                                known for not following\n> whatever the rules are
                                in a mud (player killing, cursing, or whatever) they\n>
                                are expected that they will never follow the rules.\n\nCan
                                hardly blame the free muds. If I didn't have to worry
                                about losing\ncustomers, I would ban a lot more people
                                than I do now. If my enjoyment in\ncreating the world
                                was all I cared about, I don't think I'd see any reason\nto
                                give a damn if someone is redeemed or not. As it is,
                                I have told major\ncustomers to leave because they
                                irritated me enough. As far as I'm\nconcerned, that's
                                the perk of being the boss and not answering to the\nbottom
                                line of a corporation.\n\n \n> Anyone find their statement
                                about redeemable to be true to their experience?\n>
                                Any free MUDs have similar policies? How about commercial
                                games like Ultima\n> and Everquest -- are bans permanent
                                there?\n\nWe don't actually ban players generally,
                                only domains from libraries, high\nschools, etc. If
                                a player becomes a serious problem, we generally remove\nhis
                                ability to continue doing whatever it was he was doing.
                                If he is using\nfoul language around people who don't
                                care to hear it, and is being\nobviously obnoxious
                                about it, he can kiss his voice goodbye for awhile.
                                If\nhe's killing too many people without a decent
                                reason, he may find himself\nunable to commit offensive
                                acts for a week or so. In the sense that this\nis
                                banning (ie it bans a player from doing whatever it
                                is you don't want\nhim doing), I find that most players
                                reform. There are, of course, a few\n(generally of
                                the teenage male variety) who won't accept being punished,\nand
                                just leave. Good riddance.\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                              header: !ruby/object:Headers
                                rmail: !ruby/object:RMail::Message
                                  header: !ruby/object:RMail::Header
                                    fields:
                                    - !ruby/object:RMail::Header::Field
                                      raw: 'From: Matthew Mihaly <diablo@best.com>'
                                      name: From
                                      value: Matthew Mihaly <diablo@best.com>
                                    - !ruby/object:RMail::Header::Field
                                      raw: 'Date: Sat, 15 Jan 2000 00:41:36 -0800
                                        (PST)'
                                      name: Date
                                      value: Sat, 15 Jan 2000 00:41:36 -0800 (PST)
                                    - !ruby/object:RMail::Header::Field
                                      raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                      name: Subject
                                      value: 'Re: [MUD-Dev] Community Relations'
                                    mbox_from: 
                                  body: "On Fri, 14 Jan 2000, Christopher Allen wrote:\n\n<The
                                    below refers to the Simutronics muds>\n\n> Here
                                    is the surprising statement -- they said that
                                    people who have been\n> banned multiple times
                                    (i.e. many warnings, a ban, many warning again,\n>
                                    another ban, etc.) are almost always redeemable.
                                    They say in almost all\n> cases the person if
                                    the person doesn't quit due to the temporary ban,
                                    they\n> will eventually shape up, and can become
                                    a responible gamer.\n\nI've found this is true
                                    provided the customer is of a certain age or\nmaturity
                                    level. They also will have your credit information
                                    on file, and\nsimply knowing that the admins know
                                    who you are is a disincentive to be a\nserious
                                    trouble maker. \n\n \n> Obviously they have an
                                    incentive to keep players since they are a pay
                                    MUD.\n> However, they are quite adamant that anti-social
                                    players will turn eventualy\n> around. One of
                                    the consequences of this is that they never publish
                                    the lists\n> of the people who are banned, and
                                    GMs can be dismissed for revealing that\n> someone
                                    has been banned to the victim of the incident.
                                    This sometimes\n> results in complaints from victims
                                    asking if the perpetrator was punished or\n> not.\n>
                                    \n> I find that this is opposite of the way most
                                    free MUDs work -- when someone\n> is banned, they
                                    are banned forever. If someone is known for not
                                    following\n> whatever the rules are in a mud (player
                                    killing, cursing, or whatever) they\n> are expected
                                    that they will never follow the rules.\n\nCan
                                    hardly blame the free muds. If I didn't have to
                                    worry about losing\ncustomers, I would ban a lot
                                    more people than I do now. If my enjoyment in\ncreating
                                    the world was all I cared about, I don't think
                                    I'd see any reason\nto give a damn if someone
                                    is redeemed or not. As it is, I have told major\ncustomers
                                    to leave because they irritated me enough. As
                                    far as I'm\nconcerned, that's the perk of being
                                    the boss and not answering to the\nbottom line
                                    of a corporation.\n\n \n> Anyone find their statement
                                    about redeemable to be true to their experience?\n>
                                    Any free MUDs have similar policies? How about
                                    commercial games like Ultima\n> and Everquest
                                    -- are bans permanent there?\n\nWe don't actually
                                    ban players generally, only domains from libraries,
                                    high\nschools, etc. If a player becomes a serious
                                    problem, we generally remove\nhis ability to continue
                                    doing whatever it was he was doing. If he is using\nfoul
                                    language around people who don't care to hear
                                    it, and is being\nobviously obnoxious about it,
                                    he can kiss his voice goodbye for awhile. If\nhe's
                                    killing too many people without a decent reason,
                                    he may find himself\nunable to commit offensive
                                    acts for a week or so. In the sense that this\nis
                                    banning (ie it bans a player from doing whatever
                                    it is you don't want\nhim doing), I find that
                                    most players reform. There are, of course, a few\n(generally
                                    of the teenage male variety) who won't accept
                                    being punished,\nand just leave. Good riddance.\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                                  epilogue: 
                                  preamble: 
                              message_id: !ruby/object:MessageId
                                raw: "[invalid or missing message id]"
                              subject: !ruby/object:Subject
                                original: 'Re: [MUD-Dev] Community Relations'
                              from: Matthew Mihaly <diablo@best.com>
                              references: []
                              date: 2000-01-15 08:41:36.000000000 Z
                              no_archive: false
                            call_number: !ruby/object:CallNumber
                              str: JzBblyOe
                            source: archive
                            list: !ruby/object:List
                              slug: mud-dev
                              name: 
                              description: 
                              homepage: 
                              footer: 
                            message_id: *125
                          parent: *126
                          children:
                          - &388 !ruby/object:MessageContainer
                            key: &127 !ruby/object:MessageId
                              raw: 00IyQgG8@generated-message-id.chibrary.org
                            value: !ruby/object:Message
                              email: !ruby/object:Email
                                raw: |
                                  From: Greg Miller <gmiller@classic-games.com>
                                  Date: Mon, 17 Jan 2000 12:00:20 -0600
                                  Subject: Re: [MUD-Dev] Community Relations

                                  Christopher Allen wrote:
                                  > Here is the surprising statement -- they said that people who have been
                                  > banned multiple times (i.e. many warnings, a ban, many warning again,
                                  > another ban, etc.) are almost always redeemable. They say in almost all
                                  > cases the person if the person doesn't quit due to the temporary ban, they
                                  > will eventually shape up, and can become a responible gamer.

                                  [snip]

                                  > I find that this is opposite of the way most free MUDs work -- when someone
                                  > is banned, they are banned forever. If someone is known for not following
                                  > whatever the rules are in a mud (player killing, cursing, or whatever) they
                                  > are expected that they will never follow the rules.

                                  There is some expectation of this on AA. Mild infractions often get you
                                  an "archkill" which prevents you from logging on anywhere from 1 to 30
                                  days. Stronger infractions may get all your characters banished, but
                                  these bans are sometimes removed, and if you were to come back in a
                                  month or two with a different free email address, Law will typically
                                  look the other way as long as you behave. Official policy and unofficial
                                  policy may differ, if the unofficial policy works.

                                  And, no, I don't have any explanation for Opie.
                                  --
                                  http://www.classic-games.com/
                                  History does not repeat itself, but it does rhyme.
                                  *** Please limit .sigs to four lines and avoid HTML mail or posts. ***



                                  _______________________________________________
                                  MUD-Dev maillist  -  MUD-Dev@kanga.nu
                                  http://www.kanga.nu/lists/listinfo/mud-dev
                                header: !ruby/object:Headers
                                  rmail: !ruby/object:RMail::Message
                                    header: !ruby/object:RMail::Header
                                      fields:
                                      - !ruby/object:RMail::Header::Field
                                        raw: 'From: Greg Miller <gmiller@classic-games.com>'
                                        name: From
                                        value: Greg Miller <gmiller@classic-games.com>
                                      - !ruby/object:RMail::Header::Field
                                        raw: 'Date: Mon, 17 Jan 2000 12:00:20 -0600'
                                        name: Date
                                        value: Mon, 17 Jan 2000 12:00:20 -0600
                                      - !ruby/object:RMail::Header::Field
                                        raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                        name: Subject
                                        value: 'Re: [MUD-Dev] Community Relations'
                                      mbox_from: 
                                    body: |
                                      Christopher Allen wrote:
                                      > Here is the surprising statement -- they said that people who have been
                                      > banned multiple times (i.e. many warnings, a ban, many warning again,
                                      > another ban, etc.) are almost always redeemable. They say in almost all
                                      > cases the person if the person doesn't quit due to the temporary ban, they
                                      > will eventually shape up, and can become a responible gamer.

                                      [snip]

                                      > I find that this is opposite of the way most free MUDs work -- when someone
                                      > is banned, they are banned forever. If someone is known for not following
                                      > whatever the rules are in a mud (player killing, cursing, or whatever) they
                                      > are expected that they will never follow the rules.

                                      There is some expectation of this on AA. Mild infractions often get you
                                      an "archkill" which prevents you from logging on anywhere from 1 to 30
                                      days. Stronger infractions may get all your characters banished, but
                                      these bans are sometimes removed, and if you were to come back in a
                                      month or two with a different free email address, Law will typically
                                      look the other way as long as you behave. Official policy and unofficial
                                      policy may differ, if the unofficial policy works.

                                      And, no, I don't have any explanation for Opie.
                                      --
                                      http://www.classic-games.com/
                                      History does not repeat itself, but it does rhyme.
                                      *** Please limit .sigs to four lines and avoid HTML mail or posts. ***



                                      _______________________________________________
                                      MUD-Dev maillist  -  MUD-Dev@kanga.nu
                                      http://www.kanga.nu/lists/listinfo/mud-dev
                                    epilogue: 
                                    preamble: 
                                message_id: !ruby/object:MessageId
                                  raw: "[invalid or missing message id]"
                                subject: !ruby/object:Subject
                                  original: 'Re: [MUD-Dev] Community Relations'
                                from: Greg Miller <gmiller@classic-games.com>
                                references: []
                                date: 2000-01-17 18:00:20.000000000 Z
                                no_archive: false
                              call_number: !ruby/object:CallNumber
                                str: 00IyQgG8
                              source: archive
                              list: !ruby/object:List
                                slug: mud-dev
                                name: 
                                description: 
                                homepage: 
                                footer: 
                              message_id: *127
                            parent: *128
                            children: []
                        - &131 !ruby/object:MessageContainer
                          key: &129 !ruby/object:MessageId
                            raw: 00IyQfBI@generated-message-id.chibrary.org
                          value: !ruby/object:Message
                            email: !ruby/object:Email
                              raw: "From: Marc Bowden <ryumo@merit.edu>\nDate: Wed,
                                19 Jan 2000 13:48:04 -0500\nSubject: Re: [MUD-Dev]
                                Community Relations\n\n--On Wed, Jan 19, 2000 1:36
                                PM -0600 Wes Connell\n<wconnell@adhesive.com> wrote:\n\n>
                                \n> A question: In what way do you manifest yourself
                                as the immortal?\n> Is it plainly a 'Bubba the Immortal
                                is standing here.' ?\n> \n\n  I tend to send my Herald
                                (a wolf the size of a volkswagon) as a\ntoken of my
                                displeasure. These kids have the survival instincts
                                of a\npop tart - they swing on him nearly every time.
                                He has a rather\nimpressive body count. Most of the
                                time I simply command him to\nfollow the little twit
                                around, so he *knows* he's earned our full\nattention.
                                They tend to become very well behaved once this happens\nbecause
                                (a) they always assume I'm senselinked into him -
                                impractical\nand annoying, but an entertaining fiction,
                                and (b) he does it until I\ncall him back. Even across
                                logins. Even across reboots. Even across\nrerolls.
                                For some reason they tend to find that unnerving.\n\n
                                \ When I come as myself, I usually select a wardrobe
                                appropriate to\nthe task at hand. In extreme cases,
                                I simply don't manifest, and am\nan extremely good
                                shot with a reflex cannon.\n\n  I'm kidding about
                                that last part; my world doesn't support energy\nweapons
                                or protoculture power.\n\n  But it's not like I haven't
                                thought about it some days.\n\n--------------------------------------------------------------------\nMarc
                                Bowden - Soulsinger         Dreamshadow:The Legacy
                                of the Three\n  ryumo@merit.edu                                 206.246.120.2
                                3333\n--------------------------------------------------------------------\n
                                \n\n\n\n_______________________________________________\nMUD-Dev
                                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                              header: !ruby/object:Headers
                                rmail: !ruby/object:RMail::Message
                                  header: !ruby/object:RMail::Header
                                    fields:
                                    - !ruby/object:RMail::Header::Field
                                      raw: 'From: Marc Bowden <ryumo@merit.edu>'
                                      name: From
                                      value: Marc Bowden <ryumo@merit.edu>
                                    - !ruby/object:RMail::Header::Field
                                      raw: 'Date: Wed, 19 Jan 2000 13:48:04 -0500'
                                      name: Date
                                      value: Wed, 19 Jan 2000 13:48:04 -0500
                                    - !ruby/object:RMail::Header::Field
                                      raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                      name: Subject
                                      value: 'Re: [MUD-Dev] Community Relations'
                                    mbox_from: 
                                  body: "--On Wed, Jan 19, 2000 1:36 PM -0600 Wes
                                    Connell\n<wconnell@adhesive.com> wrote:\n\n> \n>
                                    A question: In what way do you manifest yourself
                                    as the immortal?\n> Is it plainly a 'Bubba the
                                    Immortal is standing here.' ?\n> \n\n  I tend
                                    to send my Herald (a wolf the size of a volkswagon)
                                    as a\ntoken of my displeasure. These kids have
                                    the survival instincts of a\npop tart - they swing
                                    on him nearly every time. He has a rather\nimpressive
                                    body count. Most of the time I simply command
                                    him to\nfollow the little twit around, so he *knows*
                                    he's earned our full\nattention. They tend to
                                    become very well behaved once this happens\nbecause
                                    (a) they always assume I'm senselinked into him
                                    - impractical\nand annoying, but an entertaining
                                    fiction, and (b) he does it until I\ncall him
                                    back. Even across logins. Even across reboots.
                                    Even across\nrerolls. For some reason they tend
                                    to find that unnerving.\n\n  When I come as myself,
                                    I usually select a wardrobe appropriate to\nthe
                                    task at hand. In extreme cases, I simply don't
                                    manifest, and am\nan extremely good shot with
                                    a reflex cannon.\n\n  I'm kidding about that last
                                    part; my world doesn't support energy\nweapons
                                    or protoculture power.\n\n  But it's not like
                                    I haven't thought about it some days.\n\n--------------------------------------------------------------------\nMarc
                                    Bowden - Soulsinger         Dreamshadow:The Legacy
                                    of the Three\n  ryumo@merit.edu                                 206.246.120.2
                                    3333\n--------------------------------------------------------------------\n
                                    \n\n\n\n_______________________________________________\nMUD-Dev
                                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                                  epilogue: 
                                  preamble: 
                              message_id: !ruby/object:MessageId
                                raw: "[invalid or missing message id]"
                              subject: !ruby/object:Subject
                                original: 'Re: [MUD-Dev] Community Relations'
                              from: Marc Bowden <ryumo@merit.edu>
                              references: []
                              date: 2000-01-19 18:48:04.000000000 Z
                              no_archive: false
                            call_number: !ruby/object:CallNumber
                              str: 00IyQfBI
                            source: archive
                            list: !ruby/object:List
                              slug: mud-dev
                              name: 
                              description: 
                              homepage: 
                              footer: 
                            message_id: *129
                          parent: *126
                          children:
                          - &260 !ruby/object:MessageContainer
                            key: &130 !ruby/object:MessageId
                              raw: Jysr6yXo@generated-message-id.chibrary.org
                            value: !ruby/object:Message
                              email: !ruby/object:Email
                                raw: |
                                  From: "Dundee" <SkeptAck@antisocial.com>
                                  Date: Wed, 19 Jan 2000 18:51:36 GMT
                                  Subject: Re: [MUD-Dev] Community Relations

                                  Wes Connell wrote:
                                  > A question: In what way do you manifest yourself as the immortal?
                                  > Is it plainly a 'Bubba the Immortal is standing here.' ?

                                  Now that we're finally getting some sort of policy there... our admins =
                                  show
                                  up as NPCs appropriate to the circumstance.  Usually people are stuck in =
                                  the
                                  art, want to buy or sell a house (which is something I'll automate
                                  eventually, but haven't yet, so they have to mash the help button to do =
                                  it),
                                  or because they want to buy something special that we can't sell on npc
                                  merchants (like, for example, a corral).

                                  So the admins show up as "Ernie the realtor" or "Gus the gardener" or
                                  whatever is appropriate.

                                  --=20
                                  http://dundee.uong.com/



                                  _______________________________________________
                                  MUD-Dev maillist  -  MUD-Dev@kanga.nu
                                  http://www.kanga.nu/lists/listinfo/mud-dev
                                header: !ruby/object:Headers
                                  rmail: !ruby/object:RMail::Message
                                    header: !ruby/object:RMail::Header
                                      fields:
                                      - !ruby/object:RMail::Header::Field
                                        raw: 'From: "Dundee" <SkeptAck@antisocial.com>'
                                        name: From
                                        value: '"Dundee" <SkeptAck@antisocial.com>'
                                      - !ruby/object:RMail::Header::Field
                                        raw: 'Date: Wed, 19 Jan 2000 18:51:36 GMT'
                                        name: Date
                                        value: Wed, 19 Jan 2000 18:51:36 GMT
                                      - !ruby/object:RMail::Header::Field
                                        raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                        name: Subject
                                        value: 'Re: [MUD-Dev] Community Relations'
                                      mbox_from: 
                                    body: |
                                      Wes Connell wrote:
                                      > A question: In what way do you manifest yourself as the immortal?
                                      > Is it plainly a 'Bubba the Immortal is standing here.' ?

                                      Now that we're finally getting some sort of policy there... our admins =
                                      show
                                      up as NPCs appropriate to the circumstance.  Usually people are stuck in =
                                      the
                                      art, want to buy or sell a house (which is something I'll automate
                                      eventually, but haven't yet, so they have to mash the help button to do =
                                      it),
                                      or because they want to buy something special that we can't sell on npc
                                      merchants (like, for example, a corral).

                                      So the admins show up as "Ernie the realtor" or "Gus the gardener" or
                                      whatever is appropriate.

                                      --=20
                                      http://dundee.uong.com/



                                      _______________________________________________
                                      MUD-Dev maillist  -  MUD-Dev@kanga.nu
                                      http://www.kanga.nu/lists/listinfo/mud-dev
                                    epilogue: 
                                    preamble: 
                                message_id: !ruby/object:MessageId
                                  raw: "[invalid or missing message id]"
                                subject: !ruby/object:Subject
                                  original: 'Re: [MUD-Dev] Community Relations'
                                from: Dundee <SkeptAck@antisocial.com>
                                references: []
                                date: 2000-01-19 18:51:36.000000000 Z
                                no_archive: false
                              call_number: !ruby/object:CallNumber
                                str: Jysr6yXo
                              source: archive
                              list: !ruby/object:List
                                slug: mud-dev
                                name: 
                                description: 
                                homepage: 
                                footer: 
                              message_id: *130
                            parent: *131
                            children: []
                        - &386 !ruby/object:MessageContainer
                          key: &132 !ruby/object:MessageId
                            raw: JzBbo9ia@generated-message-id.chibrary.org
                          value: !ruby/object:Message
                            email: !ruby/object:Email
                              raw: "From: \"Dr. Cat\" <cat@realtime.net>\nDate: Sun,
                                23 Jan 2000 22:21:27 -0600 (CST)\nSubject: Re: [MUD-Dev]
                                Community Relations\n\n-- Start of included mail From:
                                \ \"F. Randall Farmer\" <randy@communities.com>\n\n>
                                Date:  Fri, 21 Jan 2000 10:59:41 -0800\n\n> A question:
                                In what way do you manifest yourself as the immortal?\n\nIn
                                Furcadia, my partner and I appear as regular characters,
                                for the\nmost part.  We want players to feel that
                                we're people just like them, who\nenjoy spending time
                                in the game world and socializing - which we do.\nI've
                                delegated most of our early responsibilities for taking
                                care of\nthe few really persistent troublemakers to
                                our volunteer staff, and\nrefer most complaints to
                                them.  If people have questions about what's\ncoming
                                for the game in the future, I try to answer them all
                                patiently\nand politely.  When people make a big deal
                                about me or call me a \"god\"\nor something, I invariable
                                say \"I'm just this cat you know\", which I\ndeliberately
                                leave ambiguous.  I intend for it to be unclear whether
                                I\nmean \"You know, I'm just another cat\" or \"I'm
                                just some cat with whom you\nare acquainted\", or
                                perhaps both.  I like it that way.\n\nI will confess
                                that when we put a premium option into the game to
                                let\npeople have wings for a modest fee, I gave my
                                partner and I both a set.\nWhen I add the option to
                                turn them on and off, though, I intend to walk\naround
                                without them a fair amount of the time.  And when
                                we add the more\nexpensive (and therefore rarer and
                                more \"special\") option to play as a\ndragon character,
                                I intend to stay a cat - thus letting some of the\nplayers
                                have a more rare and interesting form than the game
                                founders.\n\nAnyway, one of the main purposes in going
                                around amongst the players is to\nmake them feel that
                                the creators of the game care about the world and
                                the\ncommunity, and participate in it.  With a secondary
                                benefit of some\npercentage of the players getting
                                the same pleasure that people get from\nmeeting creators
                                at public autographing sessions, book tours, etc.
                                \ This\nis, of course, a solution that doesn't scale
                                well at all.  When the player\nbase goes up by an
                                order of magnitude, the amount of personal contact
                                with\nthe creators each player gets will go down by
                                an order of magnitude.\nStill, I think it's vitally
                                important to \"seed\" a new environment with a\nreally
                                strong sense of involvement and emotional bonding
                                to each other and\nto the game.  And I think we've
                                been very effective at that.  I just hope\nit will
                                help shape the society that emerges when swarms of
                                new people come\nflooding into the environment, rather
                                than being swept away by them.\n\nI also hope that
                                word can be made to get around that we play in the
                                game\nregularly even when it's huge, through players
                                talking to each other about\nit.  I certainly heard
                                a lot of talk on the net in the early days of\nUltima
                                Online about the fact that Lord British almost never
                                logged on to\nplay, and it was clear people wished
                                he would.  And it's also clear that\nwhen people became
                                aware of Designer Dragon as someone who did spend
                                time\nthere and who did talk to people and answer
                                questions, the community liked\nthat quite a bit.\n\nI'd
                                like to note, by the way, that I'm very glad to see
                                you on the list.\nI've been following your work and
                                your writings ever since the early\nQuantum Link days,
                                and I always recommend the articles you and your\ncolleagues
                                wrote about Habitat as some of the best things to
                                read to learn\nabout online community issues.  It's
                                nice to finally get a chance to say\nthanks.\n\nThanks!\n\n*-------------------------------------------**-----------------------------*
                                \n   Dr. Cat / Dragon's Eye Productions       ||       Free
                                alpha test:\n*-------------------------------------------**
                                \ http://www.bga.com/furcadia\n    Furcadia - a graphic
                                mud for PCs!       ||  Let your imagination soar!\n*-------------------------------------------**-----------------------------*\n\n\n\n_______________________________________________\nMUD-Dev
                                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                              header: !ruby/object:Headers
                                rmail: !ruby/object:RMail::Message
                                  header: !ruby/object:RMail::Header
                                    fields:
                                    - !ruby/object:RMail::Header::Field
                                      raw: 'From: "Dr. Cat" <cat@realtime.net>'
                                      name: From
                                      value: '"Dr. Cat" <cat@realtime.net>'
                                    - !ruby/object:RMail::Header::Field
                                      raw: 'Date: Sun, 23 Jan 2000 22:21:27 -0600
                                        (CST)'
                                      name: Date
                                      value: Sun, 23 Jan 2000 22:21:27 -0600 (CST)
                                    - !ruby/object:RMail::Header::Field
                                      raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                      name: Subject
                                      value: 'Re: [MUD-Dev] Community Relations'
                                    mbox_from: 
                                  body: "-- Start of included mail From:  \"F. Randall
                                    Farmer\" <randy@communities.com>\n\n> Date:  Fri,
                                    21 Jan 2000 10:59:41 -0800\n\n> A question: In
                                    what way do you manifest yourself as the immortal?\n\nIn
                                    Furcadia, my partner and I appear as regular characters,
                                    for the\nmost part.  We want players to feel that
                                    we're people just like them, who\nenjoy spending
                                    time in the game world and socializing - which
                                    we do.\nI've delegated most of our early responsibilities
                                    for taking care of\nthe few really persistent
                                    troublemakers to our volunteer staff, and\nrefer
                                    most complaints to them.  If people have questions
                                    about what's\ncoming for the game in the future,
                                    I try to answer them all patiently\nand politely.
                                    \ When people make a big deal about me or call
                                    me a \"god\"\nor something, I invariable say \"I'm
                                    just this cat you know\", which I\ndeliberately
                                    leave ambiguous.  I intend for it to be unclear
                                    whether I\nmean \"You know, I'm just another cat\"
                                    or \"I'm just some cat with whom you\nare acquainted\",
                                    or perhaps both.  I like it that way.\n\nI will
                                    confess that when we put a premium option into
                                    the game to let\npeople have wings for a modest
                                    fee, I gave my partner and I both a set.\nWhen
                                    I add the option to turn them on and off, though,
                                    I intend to walk\naround without them a fair amount
                                    of the time.  And when we add the more\nexpensive
                                    (and therefore rarer and more \"special\") option
                                    to play as a\ndragon character, I intend to stay
                                    a cat - thus letting some of the\nplayers have
                                    a more rare and interesting form than the game
                                    founders.\n\nAnyway, one of the main purposes
                                    in going around amongst the players is to\nmake
                                    them feel that the creators of the game care about
                                    the world and the\ncommunity, and participate
                                    in it.  With a secondary benefit of some\npercentage
                                    of the players getting the same pleasure that
                                    people get from\nmeeting creators at public autographing
                                    sessions, book tours, etc.  This\nis, of course,
                                    a solution that doesn't scale well at all.  When
                                    the player\nbase goes up by an order of magnitude,
                                    the amount of personal contact with\nthe creators
                                    each player gets will go down by an order of magnitude.\nStill,
                                    I think it's vitally important to \"seed\" a new
                                    environment with a\nreally strong sense of involvement
                                    and emotional bonding to each other and\nto the
                                    game.  And I think we've been very effective at
                                    that.  I just hope\nit will help shape the society
                                    that emerges when swarms of new people come\nflooding
                                    into the environment, rather than being swept
                                    away by them.\n\nI also hope that word can be
                                    made to get around that we play in the game\nregularly
                                    even when it's huge, through players talking to
                                    each other about\nit.  I certainly heard a lot
                                    of talk on the net in the early days of\nUltima
                                    Online about the fact that Lord British almost
                                    never logged on to\nplay, and it was clear people
                                    wished he would.  And it's also clear that\nwhen
                                    people became aware of Designer Dragon as someone
                                    who did spend time\nthere and who did talk to
                                    people and answer questions, the community liked\nthat
                                    quite a bit.\n\nI'd like to note, by the way,
                                    that I'm very glad to see you on the list.\nI've
                                    been following your work and your writings ever
                                    since the early\nQuantum Link days, and I always
                                    recommend the articles you and your\ncolleagues
                                    wrote about Habitat as some of the best things
                                    to read to learn\nabout online community issues.
                                    \ It's nice to finally get a chance to say\nthanks.\n\nThanks!\n\n*-------------------------------------------**-----------------------------*
                                    \n   Dr. Cat / Dragon's Eye Productions       ||
                                    \      Free alpha test:\n*-------------------------------------------**
                                    \ http://www.bga.com/furcadia\n    Furcadia -
                                    a graphic mud for PCs!       ||  Let your imagination
                                    soar!\n*-------------------------------------------**-----------------------------*\n\n\n\n_______________________________________________\nMUD-Dev
                                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                                  epilogue: 
                                  preamble: 
                              message_id: !ruby/object:MessageId
                                raw: "[invalid or missing message id]"
                              subject: !ruby/object:Subject
                                original: 'Re: [MUD-Dev] Community Relations'
                              from: Dr. Cat <cat@realtime.net>
                              references: []
                              date: 2000-01-24 04:21:27.000000000 Z
                              no_archive: false
                            call_number: !ruby/object:CallNumber
                              str: JzBbo9ia
                            source: archive
                            list: !ruby/object:List
                              slug: mud-dev
                              name: 
                              description: 
                              homepage: 
                              footer: 
                            message_id: *132
                          parent: *126
                          children: []
                    - &383 !ruby/object:MessageContainer
                      key: &133 !ruby/object:MessageId
                        raw: 00uTkdpQ@generated-message-id.chibrary.org
                      value: !ruby/object:Message
                        email: !ruby/object:Email
                          raw: "From: Ola Fosheim Gr��stad <olag@ifi.uio.no>\nDate:
                            Thu, 20 Jan 2000 01:09:55 +0100\nSubject: Re: [MUD-Dev]
                            Community Relations\n\nDundee wrote:\r\n> Ola Fosheim
                            Gr=F8stad <olag@ifi.uio.no> wrote:\r\n> > Most admins
                            will justify anything they do (I had no choice, it is
                            my =\r\nsystem,\r\n> > he asked for it, it would have
                            happened anyway...), and that's rather=\r\n typical of\r\n>
                            > people that acquire positions where they can exercise.\r\n\r\n..power.
                            For the record, that sentence wasn't meant to target you\r\nspecifically,
                            I was aiming at some attitudes that has been aired on
                            this\r\nlist... since forever.\r\n\r\n> right.  I still
                            don't think that I *did* deal with it.  I think I tried=\r\n,\r\n>
                            couldn't do it, and finally banned the player just to
                            shut him up.  I p=\r\nunted.\r\n\r\nMmmh, but if I got
                            it right, you didn't cause the real problem which was\r\nthat
                            banning was used in the heat of the moment by a person
                            that (as far\r\nas I can tell) probably shouldn't have
                            held those powers in the first\r\nplace? I think perhaps
                            only one calm person should have access to such\r\nfunctionality,
                            and that you need policies for how to deal with such\r\nsituations
                            before they happen?\r\n\r\nI can't tell you what to do
                            explicitly, due to my lack of admin\r\nexperience (and
                            I don't want it either, if I can avoid it), but if you\r\nare
                            interested in the theme, then I really think you ought
                            to look at\r\nsome literature on group dynamics and pathological
                            communication\r\n(psychology, marriage counselling etc).
                            That ought to provide some tools\r\nfor understanding
                            why things went the way they did.\r\n\r\nThe Smith book
                            chapter could be useful too, as it suggests that you have\r\na
                            mediator that handles admin-player conflicts. It was obviously\r\ndifficult
                            for you to resolve the conflict because the player had
                            reasons\r\nto distrust the admins (\"how can such a bad
                            admin be allowed to stay in\r\nhis position?\"). A (very)
                            skilled person which both parties trust can\r\nthrough
                            \"arbitration\" or some similar strategy suggest a\r\nsettlement/solution.\r\n\r\nYou
                            should look at the Suler papers too. I am not sure if
                            I agree with\r\neverything (do I ever??), I think the
                            \"bad boys\" paper is too biased\r\ntowards the admin
                            perspective, but...\r\n\r\nAnother area to look for ideas
                            for administration is decision/control\r\nsystems used
                            in organizations (how to avoid bad decisions, risk analysis\r\n).
                            Maybe certain actions should only be executed by two admins
                            etc.\r\n\r\n> But I'm not happy with that solution, and
                            I don't like the aura of fear=\r\n I\r\n> sense now on
                            the game message boards and such.  People are afraid to
                            co=\r\nmplain\r\n> now - even about legitimate problems
                            with game mechanics (and they were=\r\n never\r\n> shy
                            about reporting these problems before).\r\n\r\nSo how
                            does your experiences as an admin compare to your or your\r\nfriends'
                            experiences with \"bad admins\"/\"clueless designers\"
                            on UO?  What\r\ndoes the other side of the fence look
                            like, so to speak?\r\n\r\n> > I am personally in favour
                            of the empathic/autonomous/peerage with no =\r\nvisible\r\n>
                            > admin, but that assumes a design without serious flaws...\r\n>=20\r\n>
                            I think we're stuck with the fascist model.  heh.\r\n\r\nWhen
                            thinking about it, it is probably only the autonomous
                            model that\r\nrequires a fairly flawless design. Empathic
                            seems to go with fairly\r\nsmall and tight community?\r\n\r\n>
                            prevent it.  We still don't even have a code of conduct
                            posted, for eit=\r\nher\r\n> players or admins.\r\n\r\nI
                            wonder if such work for players (Do they read them)?  It
                            ought to be a\r\nrequirement for admins.  If you don't
                            act consistently then you probably\r\ncan expect to be
                            accused of favouring your friends. If you don't have a\r\npolicy
                            applicable to most situations what is there then to prevent
                            an\r\nupset admin to make an ass of himself.\r\n\r\n>
                            I wish there was a check-list somewhere.  Setting up a
                            mud: a) Post thi=\r\ns, b)\r\n> Post that, c) Decide this
                            or that, d) etc.\r\n\r\nMaybe Raph could get you one?
                            :)\r\n\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                            maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                          header: !ruby/object:Headers
                            rmail: !ruby/object:RMail::Message
                              header: !ruby/object:RMail::Header
                                fields:
                                - !ruby/object:RMail::Header::Field
                                  raw: 'From: Ola Fosheim Gr��stad <olag@ifi.uio.no>'
                                  name: From
                                  value: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Date: Thu, 20 Jan 2000 01:09:55 +0100'
                                  name: Date
                                  value: Thu, 20 Jan 2000 01:09:55 +0100
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                  name: Subject
                                  value: 'Re: [MUD-Dev] Community Relations'
                                mbox_from: 
                              body: "Dundee wrote:\r\n> Ola Fosheim Gr=F8stad <olag@ifi.uio.no>
                                wrote:\r\n> > Most admins will justify anything they
                                do (I had no choice, it is my =\r\nsystem,\r\n> >
                                he asked for it, it would have happened anyway...),
                                and that's rather=\r\n typical of\r\n> > people that
                                acquire positions where they can exercise.\r\n\r\n..power.
                                For the record, that sentence wasn't meant to target
                                you\r\nspecifically, I was aiming at some attitudes
                                that has been aired on this\r\nlist... since forever.\r\n\r\n>
                                right.  I still don't think that I *did* deal with
                                it.  I think I tried=\r\n,\r\n> couldn't do it, and
                                finally banned the player just to shut him up.  I
                                p=\r\nunted.\r\n\r\nMmmh, but if I got it right, you
                                didn't cause the real problem which was\r\nthat banning
                                was used in the heat of the moment by a person that
                                (as far\r\nas I can tell) probably shouldn't have
                                held those powers in the first\r\nplace? I think perhaps
                                only one calm person should have access to such\r\nfunctionality,
                                and that you need policies for how to deal with such\r\nsituations
                                before they happen?\r\n\r\nI can't tell you what to
                                do explicitly, due to my lack of admin\r\nexperience
                                (and I don't want it either, if I can avoid it), but
                                if you\r\nare interested in the theme, then I really
                                think you ought to look at\r\nsome literature on group
                                dynamics and pathological communication\r\n(psychology,
                                marriage counselling etc). That ought to provide some
                                tools\r\nfor understanding why things went the way
                                they did.\r\n\r\nThe Smith book chapter could be useful
                                too, as it suggests that you have\r\na mediator that
                                handles admin-player conflicts. It was obviously\r\ndifficult
                                for you to resolve the conflict because the player
                                had reasons\r\nto distrust the admins (\"how can such
                                a bad admin be allowed to stay in\r\nhis position?\").
                                A (very) skilled person which both parties trust can\r\nthrough
                                \"arbitration\" or some similar strategy suggest a\r\nsettlement/solution.\r\n\r\nYou
                                should look at the Suler papers too. I am not sure
                                if I agree with\r\neverything (do I ever??), I think
                                the \"bad boys\" paper is too biased\r\ntowards the
                                admin perspective, but...\r\n\r\nAnother area to look
                                for ideas for administration is decision/control\r\nsystems
                                used in organizations (how to avoid bad decisions,
                                risk analysis\r\n). Maybe certain actions should only
                                be executed by two admins etc.\r\n\r\n> But I'm not
                                happy with that solution, and I don't like the aura
                                of fear=\r\n I\r\n> sense now on the game message
                                boards and such.  People are afraid to co=\r\nmplain\r\n>
                                now - even about legitimate problems with game mechanics
                                (and they were=\r\n never\r\n> shy about reporting
                                these problems before).\r\n\r\nSo how does your experiences
                                as an admin compare to your or your\r\nfriends' experiences
                                with \"bad admins\"/\"clueless designers\" on UO?
                                \ What\r\ndoes the other side of the fence look like,
                                so to speak?\r\n\r\n> > I am personally in favour
                                of the empathic/autonomous/peerage with no =\r\nvisible\r\n>
                                > admin, but that assumes a design without serious
                                flaws...\r\n>=20\r\n> I think we're stuck with the
                                fascist model.  heh.\r\n\r\nWhen thinking about it,
                                it is probably only the autonomous model that\r\nrequires
                                a fairly flawless design. Empathic seems to go with
                                fairly\r\nsmall and tight community?\r\n\r\n> prevent
                                it.  We still don't even have a code of conduct posted,
                                for eit=\r\nher\r\n> players or admins.\r\n\r\nI wonder
                                if such work for players (Do they read them)?  It
                                ought to be a\r\nrequirement for admins.  If you don't
                                act consistently then you probably\r\ncan expect to
                                be accused of favouring your friends. If you don't
                                have a\r\npolicy applicable to most situations what
                                is there then to prevent an\r\nupset admin to make
                                an ass of himself.\r\n\r\n> I wish there was a check-list
                                somewhere.  Setting up a mud: a) Post thi=\r\ns, b)\r\n>
                                Post that, c) Decide this or that, d) etc.\r\n\r\nMaybe
                                Raph could get you one? :)\r\n\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                                maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                              epilogue: 
                              preamble: 
                          message_id: !ruby/object:MessageId
                            raw: "[invalid or missing message id]"
                          subject: !ruby/object:Subject
                            original: 'Re: [MUD-Dev] Community Relations'
                          from: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                          references: []
                          date: 2000-01-20 00:09:55.000000000 Z
                          no_archive: false
                        call_number: !ruby/object:CallNumber
                          str: 00uTkdpQ
                        source: archive
                        list: !ruby/object:List
                          slug: mud-dev
                          name: 
                          description: 
                          homepage: 
                          footer: 
                        message_id: *133
                      parent: *118
                      children: []
                    - &405 !ruby/object:MessageContainer
                      key: &134 !ruby/object:MessageId
                        raw: 00uTmp84@generated-message-id.chibrary.org
                      value: !ruby/object:Message
                        email: !ruby/object:Email
                          raw: "From: \"Jon A. Lambert\" <jlsysinc@ix.netcom.com>\nDate:
                            Tue, 18 Jan 2000 00:10:11 -0500\nSubject: Re: [MUD-Dev]
                            Community Relations\n\nDundee wrote:\n>\n> The player
                            was banned for being insulting to me.  \n>\n\nI understand
                            that these are very common policies throughout the \n\"mudding\"
                            universe.\n\n\"Thy shall not insult or offend any member
                            of the administration\"\nand\n\"Thy shall not insult or
                            offend any player\"\n\nNote that the former is usually
                            enforced with great enthusiasm, while\nenforcement of
                            the latter is haphazard and oftentimes explicitly \nnon-existent.\n\nAny
                            thoughts as to why this is so?  \n\nDo such policies introduce
                            a \"class\" system into a muds social\nstructure regardless
                            of whether the administration is faceless or not?\n\nDon't
                            such obtuse policies essentially boil down to \n    \"You
                            can be banned at our whim\"?\n\nWhat is it about administration
                            personnel that makes them so much\nmore delicate and important
                            when it comes to being insulted or \noffended?\n\n--\n--*
                            \    Jon A. Lambert - TychoMUD Email: jlsysinc@nospam.ix.netcom.com
                            \    *--\n--*     Mud Server Developer's Page <http://jlsysinc.home.netcom.com>
                            \     *--\n--* \"No Free man shall ever be debarred the
                            use of arms.\" Thomas Jefferson *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                          header: !ruby/object:Headers
                            rmail: !ruby/object:RMail::Message
                              header: !ruby/object:RMail::Header
                                fields:
                                - !ruby/object:RMail::Header::Field
                                  raw: 'From: "Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                                  name: From
                                  value: '"Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Date: Tue, 18 Jan 2000 00:10:11 -0500'
                                  name: Date
                                  value: Tue, 18 Jan 2000 00:10:11 -0500
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                  name: Subject
                                  value: 'Re: [MUD-Dev] Community Relations'
                                mbox_from: 
                              body: "Dundee wrote:\n>\n> The player was banned for
                                being insulting to me.  \n>\n\nI understand that these
                                are very common policies throughout the \n\"mudding\"
                                universe.\n\n\"Thy shall not insult or offend any
                                member of the administration\"\nand\n\"Thy shall not
                                insult or offend any player\"\n\nNote that the former
                                is usually enforced with great enthusiasm, while\nenforcement
                                of the latter is haphazard and oftentimes explicitly
                                \nnon-existent.\n\nAny thoughts as to why this is
                                so?  \n\nDo such policies introduce a \"class\" system
                                into a muds social\nstructure regardless of whether
                                the administration is faceless or not?\n\nDon't such
                                obtuse policies essentially boil down to \n    \"You
                                can be banned at our whim\"?\n\nWhat is it about administration
                                personnel that makes them so much\nmore delicate and
                                important when it comes to being insulted or \noffended?\n\n--\n--*
                                \    Jon A. Lambert - TychoMUD Email: jlsysinc@nospam.ix.netcom.com
                                \    *--\n--*     Mud Server Developer's Page <http://jlsysinc.home.netcom.com>
                                \     *--\n--* \"No Free man shall ever be debarred
                                the use of arms.\" Thomas Jefferson *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                              epilogue: 
                              preamble: 
                          message_id: !ruby/object:MessageId
                            raw: "[invalid or missing message id]"
                          subject: !ruby/object:Subject
                            original: 'Re: [MUD-Dev] Community Relations'
                          from: Jon A. Lambert <jlsysinc@ix.netcom.com>
                          references: []
                          date: 2000-01-18 05:10:11.000000000 Z
                          no_archive: false
                        call_number: !ruby/object:CallNumber
                          str: 00uTmp84
                        source: archive
                        list: !ruby/object:List
                          slug: mud-dev
                          name: 
                          description: 
                          homepage: 
                          footer: 
                        message_id: *134
                      parent: *118
                      children: []
                    - *135
                  children:
                  - *136
                children:
                - &139 !ruby/object:MessageContainer
                  key: &137 !ruby/object:MessageId
                    raw: JzBboAnQ@generated-message-id.chibrary.org
                  value: !ruby/object:Message
                    email: !ruby/object:Email
                      raw: |
                        From: "Dundee" <SkeptAck@antisocial.com>
                        Date: Mon, 17 Jan 2000 19:53:31 -0600
                        Subject: Re: [MUD-Dev] Community Relations

                        From: Christopher Allen <ChristopherA@skotos.net>
                        >Though I'm interested in the human dymanics of your question, I'm prefer
                        not
                        >to see the specifics of it hashed out too much on this list. I'd prefer to
                        >see this continue to be a more mud development focused list.

                        Right.  I've kept quiet, as I've dealt with this and read the various
                        responses in this thread.

                        I guess my take on it is that I don't think people changed all that much.
                        The guy hosting the mud pulled the plug over this without warning and
                        without explanation.  My thought is, in a month or two, something else would
                        have happened and he would have pulled the plug over that, so it doesn't
                        even matter if this incident never occurred, as far as that goes.  I had
                        five people with megabandwidth offer to host the thing (actually, we're on a
                        better setup now than we were).

                        I guess, the main thing that happened, a GM banned a player and referred to
                        that player as an "idiot whiner" when she did.  The player was banned for
                        being insulting to me.  I felt that the player was insulting me because I
                        was sarcastic to her.  I offered to reinstate the player's account and
                        apologized for being sarcastic.

                        The player, however, demanded an apology from the GM.  The GM's attitude was
                        that the player was insulting, and even though my sarcasm provoked that, the
                        player's sarcasm provoked THAT, and there's nothing wrong with insulting
                        people who are insulting, or being sarcastic to people who are sarcastic.

                        The banned player's friend also demanded an apology, mainly for the GM
                        "cussing" at the banned played.  I've read the log, it never happened.

                        Essentially my offer was a "do over".  Forget it happened, move on.

                        The banned player's friend pushed for an apology, lied about what had
                        happened to other players, in-game and out.  Finally I just banned him and
                        the idiot whiner.

                        >However, if you want to exposit some general issues of how admins might
                        deal
                        >with incidents, ask questions about what kinds of policies different muds
                        >use, or what the definition of "banning" means, I'd be more open to that.


                        General Issue:  What are we doing wrong that lead to this incident in the
                        first place?  What do you do with a player that will not accept the "final
                        decision" from the administration (and yet, doesn't quit)?

                        They made a big issue of the name-calling, but it's ok when they're
                        basically doing the same thing to us.  I don't get that.

                        Main thing is, the guy would not let it go.  I mean, to the point of "Fine,
                        you *can't* play here, then.  Been nice knowing you."

                        And I go back to my first impulse which is - and seems to fly in the face of
                        what everyone's been saying - that if it hadn't been this incident, it would
                        be some other incident.  The guy wouldn't take "shut up" for an answer
                        (well, phrased more nicely than that) and pushed until I banned him.  Not
                        just pushed - but lied to other players and generally caused as much
                        disruption as he could.  My thought is we did the right thing to get rid of
                        him.  The next incident might be six months down the road, when he's more
                        invested (socially, more friends, etc.), and banning him will be more
                        disruptive than it is now.  And if it hadn't been a GM calling his friend an
                        idiot whiner, it would be over some other incident.  I mean, eventually I'd
                        make a decision he refused to accept, as in this case, regardless of the
                        details.

                        Temporary ban seems to be the consensus here (or "permanent ban, but look
                        the other way if they sneak back in"), but I can't help but think that if I
                        let this guy rejoin in a month or three, he's just going to go nuts over
                        some other incident eventually, refuse to accept whatever I decide to do
                        about it, and again cause as much fuss as possible.






                        _______________________________________________
                        MUD-Dev maillist  -  MUD-Dev@kanga.nu
                        http://www.kanga.nu/lists/listinfo/mud-dev
                      header: !ruby/object:Headers
                        rmail: !ruby/object:RMail::Message
                          header: !ruby/object:RMail::Header
                            fields:
                            - !ruby/object:RMail::Header::Field
                              raw: 'From: "Dundee" <SkeptAck@antisocial.com>'
                              name: From
                              value: '"Dundee" <SkeptAck@antisocial.com>'
                            - !ruby/object:RMail::Header::Field
                              raw: 'Date: Mon, 17 Jan 2000 19:53:31 -0600'
                              name: Date
                              value: Mon, 17 Jan 2000 19:53:31 -0600
                            - !ruby/object:RMail::Header::Field
                              raw: 'Subject: Re: [MUD-Dev] Community Relations'
                              name: Subject
                              value: 'Re: [MUD-Dev] Community Relations'
                            mbox_from: 
                          body: |
                            From: Christopher Allen <ChristopherA@skotos.net>
                            >Though I'm interested in the human dymanics of your question, I'm prefer
                            not
                            >to see the specifics of it hashed out too much on this list. I'd prefer to
                            >see this continue to be a more mud development focused list.

                            Right.  I've kept quiet, as I've dealt with this and read the various
                            responses in this thread.

                            I guess my take on it is that I don't think people changed all that much.
                            The guy hosting the mud pulled the plug over this without warning and
                            without explanation.  My thought is, in a month or two, something else would
                            have happened and he would have pulled the plug over that, so it doesn't
                            even matter if this incident never occurred, as far as that goes.  I had
                            five people with megabandwidth offer to host the thing (actually, we're on a
                            better setup now than we were).

                            I guess, the main thing that happened, a GM banned a player and referred to
                            that player as an "idiot whiner" when she did.  The player was banned for
                            being insulting to me.  I felt that the player was insulting me because I
                            was sarcastic to her.  I offered to reinstate the player's account and
                            apologized for being sarcastic.

                            The player, however, demanded an apology from the GM.  The GM's attitude was
                            that the player was insulting, and even though my sarcasm provoked that, the
                            player's sarcasm provoked THAT, and there's nothing wrong with insulting
                            people who are insulting, or being sarcastic to people who are sarcastic.

                            The banned player's friend also demanded an apology, mainly for the GM
                            "cussing" at the banned played.  I've read the log, it never happened.

                            Essentially my offer was a "do over".  Forget it happened, move on.

                            The banned player's friend pushed for an apology, lied about what had
                            happened to other players, in-game and out.  Finally I just banned him and
                            the idiot whiner.

                            >However, if you want to exposit some general issues of how admins might
                            deal
                            >with incidents, ask questions about what kinds of policies different muds
                            >use, or what the definition of "banning" means, I'd be more open to that.


                            General Issue:  What are we doing wrong that lead to this incident in the
                            first place?  What do you do with a player that will not accept the "final
                            decision" from the administration (and yet, doesn't quit)?

                            They made a big issue of the name-calling, but it's ok when they're
                            basically doing the same thing to us.  I don't get that.

                            Main thing is, the guy would not let it go.  I mean, to the point of "Fine,
                            you *can't* play here, then.  Been nice knowing you."

                            And I go back to my first impulse which is - and seems to fly in the face of
                            what everyone's been saying - that if it hadn't been this incident, it would
                            be some other incident.  The guy wouldn't take "shut up" for an answer
                            (well, phrased more nicely than that) and pushed until I banned him.  Not
                            just pushed - but lied to other players and generally caused as much
                            disruption as he could.  My thought is we did the right thing to get rid of
                            him.  The next incident might be six months down the road, when he's more
                            invested (socially, more friends, etc.), and banning him will be more
                            disruptive than it is now.  And if it hadn't been a GM calling his friend an
                            idiot whiner, it would be over some other incident.  I mean, eventually I'd
                            make a decision he refused to accept, as in this case, regardless of the
                            details.

                            Temporary ban seems to be the consensus here (or "permanent ban, but look
                            the other way if they sneak back in"), but I can't help but think that if I
                            let this guy rejoin in a month or three, he's just going to go nuts over
                            some other incident eventually, refuse to accept whatever I decide to do
                            about it, and again cause as much fuss as possible.






                            _______________________________________________
                            MUD-Dev maillist  -  MUD-Dev@kanga.nu
                            http://www.kanga.nu/lists/listinfo/mud-dev
                          epilogue: 
                          preamble: 
                      message_id: !ruby/object:MessageId
                        raw: "[invalid or missing message id]"
                      subject: !ruby/object:Subject
                        original: 'Re: [MUD-Dev] Community Relations'
                      from: Dundee <SkeptAck@antisocial.com>
                      references: []
                      date: 2000-01-18 01:53:31.000000000 Z
                      no_archive: false
                    call_number: !ruby/object:CallNumber
                      str: JzBboAnQ
                    source: archive
                    list: !ruby/object:List
                      slug: mud-dev
                      name: 
                      description: 
                      homepage: 
                      footer: 
                    message_id: *137
                  parent: *136
                  children:
                  - &141 !ruby/object:MessageContainer
                    key: &138 !ruby/object:MessageId
                      raw: 00bj7rQO@generated-message-id.chibrary.org
                    value: !ruby/object:Message
                      email: !ruby/object:Email
                        raw: "From: Ola Fosheim Gr��stad <olag@ifi.uio.no>\nDate:
                          Tue, 18 Jan 2000 13:41:13 +0100\nSubject: Re: [MUD-Dev]
                          Community Relations\n\nI'm not an admin person and not really
                          qualified, so I'll try to\r\nrestrict myself to stating
                          the obvious. \r\n\r\nAnd I don't think there is much use
                          in getting into the specifics\r\nwithout getting the other
                          parties viewpoint either. Most admins will\r\njustify anything
                          they do (I had no choice, it is my system, he asked for\r\nit,
                          it would have happened anyway...), and that's rather typical
                          of\r\npeople that acquire positions where they can exercise.\r\n\r\nI
                          think there are at least 3 working approaches to control
                          in a mud:\r\n\r\n- empathic: those that are largely based
                          on bonding and socializing.\r\nAdmins help you out when
                          you first log on to the system, they\r\nacknowledge your
                          progression with kind words, do favours for you, spend\r\ntime
                          explaining thing, try to establish peerage, exercise of
                          power is\r\ngenerally frowned upon.\r\n\r\n- autonomous
                          segments: IRC/Alphaworld, control is built into the\r\nsoftware,
                          the world is segmented.\r\n\r\n- fascist: the easy path,
                          can be used to cover up design flaws, lack of\r\nadmin-training
                          etc ;-) As most MUDs fall into this category you can\r\nexpect
                          a large number of variations. Ranging from fascist anarchy
                          (admin\r\nsolidarity, individual admins do whatever they
                          like, and they are always\r\nright) to bureaucracies with
                          well-defined policies that are enforced\r\nwith rigour.\r\n\r\nThen
                          you have democracy and anarchy, but I can't remember any
                          such\r\nsystem that works.  Another possibility is to create
                          smaller systems\r\nwhere everybody has agreed upon some
                          kind of prototype (such as fiction\r\nor design goal), but
                          I have no example. I am personally in favour of the\r\nempathic/autonomous/peerage
                          with no visible admin, but that assumes a\r\ndesign without
                          serious flaws...\r\n\r\nAnyway, I think there is more than
                          one ideal to choose from.  Some\r\nplayers prefer stability
                          and regularity and welcome the fascist\r\nbureaucracy.  Others
                          can't live with it.\r\n\r\n\r\nDundee wrote:\r\n> I guess,
                          the main thing that happened, a GM banned a player and referred
                          to\r\n> that player as an \"idiot whiner\" when she did.
                          \ The player was banned for\r\n                     ^^^^\r\n>
                          The banned player's friend also demanded an apology, mainly
                          for the GM\r\n> \"cussing\" at the banned played.  I've
                          read the log, it never happened.\r\n                                                       ^^^^\r\n??\r\n\r\n>
                          The banned player's friend pushed for an apology, lied about
                          what had\r\n> happened to other players, in-game and out.
                          \ Finally I just banned him and\r\n> the idiot whiner.\r\n\r\nOf
                          course, from the players point of view it was merely reasonable\r\nextrapolations.\r\n\r\n>
                          General Issue:  What are we doing wrong that lead to this
                          incident in the\r\n> first place?\r\n\r\nMixing of admin
                          and personal relations?  Bad selection of admins? \r\nInsufficient
                          procedures to avoid bad decisions being made.  Lack of\r\nclear
                          policies? Making decisions based on local moral, rather
                          than on\r\nwhat matters for the global system?\r\n\r\nThink
                          about physical life situations.  Some people make a conflict\r\nescalate,
                          other people turn bad situations into situations which are
                          fun\r\nfor everybody.  Of course, the latter is a rare skill.\r\n\r\n>
                          They made a big issue of the name-calling, but it's ok when
                          they're\r\n> basically doing the same thing to us.  I don't
                          get that.\r\n\r\nThere is a difference between the prime
                          minister saying \"poor black\r\npeople are lazy cowards\"
                          and poor black people saying \"politicians are\r\nlazy cowards\".\r\n\r\nBasically
                          humans strive for peerage, and deal out the same stuff they\r\nreceive.
                          Unfortunately the estimate is fairly rough. If the two people\r\nin
                          the conflict judge the situation differently it will escalate.\r\n\r\nIt
                          IS reasonable for those with less power to compensate when
                          having an\r\nargument with those in power. You can multiply
                          the effect of what an\r\nadmin or a powerful player says
                          with a factor of 100. \r\n\r\n> Main thing is, the guy would
                          not let it go.  I mean, to the point of \"Fine,\r\n> you
                          *can't* play here, then.  Been nice knowing you.\"\r\n\r\nWhat
                          you are talking about is \"how to recover from a mistake\",
                          not \"how\r\nto gracefully deal with a conflict\".  Basically
                          an admin should use the\r\navailable tools, but to use them
                          you need to understand the offended and\r\nthe psychology
                          of the situation?  It doesn't sound like your admin\r\ntried?\r\n\r\n>
                          Not\r\n> just pushed - but lied to other players and generally
                          caused as much\r\n> disruption as he could.\r\n\r\nYes,
                          that's his only source of power.\r\n\r\n> My thought is
                          we did the right thing to get rid of\r\n> him.\r\n\r\nYes,
                          but the real question is not how to deal with him, but what
                          skills\r\ndo you require from your admins and what systems
                          are in place to avoid\r\nthe admin-player conflict?\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                          maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                        header: !ruby/object:Headers
                          rmail: !ruby/object:RMail::Message
                            header: !ruby/object:RMail::Header
                              fields:
                              - !ruby/object:RMail::Header::Field
                                raw: 'From: Ola Fosheim Gr��stad <olag@ifi.uio.no>'
                                name: From
                                value: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                              - !ruby/object:RMail::Header::Field
                                raw: 'Date: Tue, 18 Jan 2000 13:41:13 +0100'
                                name: Date
                                value: Tue, 18 Jan 2000 13:41:13 +0100
                              - !ruby/object:RMail::Header::Field
                                raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                name: Subject
                                value: 'Re: [MUD-Dev] Community Relations'
                              mbox_from: 
                            body: "I'm not an admin person and not really qualified,
                              so I'll try to\r\nrestrict myself to stating the obvious.
                              \r\n\r\nAnd I don't think there is much use in getting
                              into the specifics\r\nwithout getting the other parties
                              viewpoint either. Most admins will\r\njustify anything
                              they do (I had no choice, it is my system, he asked
                              for\r\nit, it would have happened anyway...), and that's
                              rather typical of\r\npeople that acquire positions where
                              they can exercise.\r\n\r\nI think there are at least
                              3 working approaches to control in a mud:\r\n\r\n- empathic:
                              those that are largely based on bonding and socializing.\r\nAdmins
                              help you out when you first log on to the system, they\r\nacknowledge
                              your progression with kind words, do favours for you,
                              spend\r\ntime explaining thing, try to establish peerage,
                              exercise of power is\r\ngenerally frowned upon.\r\n\r\n-
                              autonomous segments: IRC/Alphaworld, control is built
                              into the\r\nsoftware, the world is segmented.\r\n\r\n-
                              fascist: the easy path, can be used to cover up design
                              flaws, lack of\r\nadmin-training etc ;-) As most MUDs
                              fall into this category you can\r\nexpect a large number
                              of variations. Ranging from fascist anarchy (admin\r\nsolidarity,
                              individual admins do whatever they like, and they are
                              always\r\nright) to bureaucracies with well-defined
                              policies that are enforced\r\nwith rigour.\r\n\r\nThen
                              you have democracy and anarchy, but I can't remember
                              any such\r\nsystem that works.  Another possibility
                              is to create smaller systems\r\nwhere everybody has
                              agreed upon some kind of prototype (such as fiction\r\nor
                              design goal), but I have no example. I am personally
                              in favour of the\r\nempathic/autonomous/peerage with
                              no visible admin, but that assumes a\r\ndesign without
                              serious flaws...\r\n\r\nAnyway, I think there is more
                              than one ideal to choose from.  Some\r\nplayers prefer
                              stability and regularity and welcome the fascist\r\nbureaucracy.
                              \ Others can't live with it.\r\n\r\n\r\nDundee wrote:\r\n>
                              I guess, the main thing that happened, a GM banned a
                              player and referred to\r\n> that player as an \"idiot
                              whiner\" when she did.  The player was banned for\r\n
                              \                    ^^^^\r\n> The banned player's friend
                              also demanded an apology, mainly for the GM\r\n> \"cussing\"
                              at the banned played.  I've read the log, it never happened.\r\n
                              \                                                      ^^^^\r\n??\r\n\r\n>
                              The banned player's friend pushed for an apology, lied
                              about what had\r\n> happened to other players, in-game
                              and out.  Finally I just banned him and\r\n> the idiot
                              whiner.\r\n\r\nOf course, from the players point of
                              view it was merely reasonable\r\nextrapolations.\r\n\r\n>
                              General Issue:  What are we doing wrong that lead to
                              this incident in the\r\n> first place?\r\n\r\nMixing
                              of admin and personal relations?  Bad selection of admins?
                              \r\nInsufficient procedures to avoid bad decisions being
                              made.  Lack of\r\nclear policies? Making decisions based
                              on local moral, rather than on\r\nwhat matters for the
                              global system?\r\n\r\nThink about physical life situations.
                              \ Some people make a conflict\r\nescalate, other people
                              turn bad situations into situations which are fun\r\nfor
                              everybody.  Of course, the latter is a rare skill.\r\n\r\n>
                              They made a big issue of the name-calling, but it's
                              ok when they're\r\n> basically doing the same thing
                              to us.  I don't get that.\r\n\r\nThere is a difference
                              between the prime minister saying \"poor black\r\npeople
                              are lazy cowards\" and poor black people saying \"politicians
                              are\r\nlazy cowards\".\r\n\r\nBasically humans strive
                              for peerage, and deal out the same stuff they\r\nreceive.
                              Unfortunately the estimate is fairly rough. If the two
                              people\r\nin the conflict judge the situation differently
                              it will escalate.\r\n\r\nIt IS reasonable for those
                              with less power to compensate when having an\r\nargument
                              with those in power. You can multiply the effect of
                              what an\r\nadmin or a powerful player says with a factor
                              of 100. \r\n\r\n> Main thing is, the guy would not let
                              it go.  I mean, to the point of \"Fine,\r\n> you *can't*
                              play here, then.  Been nice knowing you.\"\r\n\r\nWhat
                              you are talking about is \"how to recover from a mistake\",
                              not \"how\r\nto gracefully deal with a conflict\".  Basically
                              an admin should use the\r\navailable tools, but to use
                              them you need to understand the offended and\r\nthe
                              psychology of the situation?  It doesn't sound like
                              your admin\r\ntried?\r\n\r\n> Not\r\n> just pushed -
                              but lied to other players and generally caused as much\r\n>
                              disruption as he could.\r\n\r\nYes, that's his only
                              source of power.\r\n\r\n> My thought is we did the right
                              thing to get rid of\r\n> him.\r\n\r\nYes, but the real
                              question is not how to deal with him, but what skills\r\ndo
                              you require from your admins and what systems are in
                              place to avoid\r\nthe admin-player conflict?\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                              maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                            epilogue: 
                            preamble: 
                        message_id: !ruby/object:MessageId
                          raw: "[invalid or missing message id]"
                        subject: !ruby/object:Subject
                          original: 'Re: [MUD-Dev] Community Relations'
                        from: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                        references: []
                        date: 2000-01-18 12:41:13.000000000 Z
                        no_archive: false
                      call_number: !ruby/object:CallNumber
                        str: 00bj7rQO
                      source: archive
                      list: !ruby/object:List
                        slug: mud-dev
                        name: 
                        description: 
                        homepage: 
                        footer: 
                      message_id: *138
                    parent: *139
                    children:
                    - &406 !ruby/object:MessageContainer
                      key: &140 !ruby/object:MessageId
                        raw: 00bj7rQe@generated-message-id.chibrary.org
                      value: !ruby/object:Message
                        email: !ruby/object:Email
                          raw: |
                            From: "Dundee" <SkeptAck@antisocial.com>
                            Date: Thu, 20 Jan 2000 18:41:54 GMT
                            Subject: Re: [MUD-Dev] Community Relations

                            Ola Fosheim Gr=F8stad wrote:
                            > Mmmh, but if I got it right, you didn't cause the real problem=20

                            Not really.  Something you wrote in an earlier message about the weight =
                            of
                            anything an admin says being magnified by about 100, just because they =
                            are
                            admins:  I think, not realizing that (or ignoring it), I caused the whole
                            mess by being hostile and sarcastic.

                            > which was that banning was used in the heat of the moment by a person=20
                            > that (as far as I can tell) probably shouldn't have held those powers =
                            in the first
                            > place?

                            I think when we were running without any posted guidelines (or much of
                            anything else), an invitation-only, private club sort of thing, we didn't
                            have admins so much as we had bouncers.  She bounced.  'Did a pretty good
                            job, too.

                            It's only now that we're trying to ... ah... run things differently.

                            > I think perhaps only one calm person should have access to such
                            > functionality, and that you need policies for how to deal with such
                            > situations before they happen?

                            I agree.

                            > So how does your experiences as an admin compare to your or your
                            > friends' experiences with "bad admins"/"clueless designers" on UO?  =
                            What
                            > does the other side of the fence look like, so to speak?

                            I don't think the situations are similar enough to compare.  They aren't
                            paying us so they don't have the same sense of entitlement, they're =
                            afraid to
                            give me the kind of heat they gave to OSI (and not just afraid of admin
                            retribution, but afraid of being ostracized by the other players), we're =
                            a
                            *much* smaller group with the game itself being cooperative rather than
                            competitive, and we have a much higher player-admin ratio so there's just
                            less to complain about.

                            One fellow, quite a while back, took the aggressive "You're clueless, =
                            this is
                            stupid" approach to expressing himself.   The players banned him:  No one
                            would play with him or talk to him (other than to flood his mailbox with
                            flames).  He finally just got lonely enough to quit playing.  I think he =
                            went
                            back to OSI servers where he can call the admins names and the other =
                            players
                            giggle and attaboy him.

                            Anyway, when I'm not being a chump, the players defend me pretty
                            aggressively.

                            --=20
                            http://dundee.uong.com/



                            _______________________________________________
                            MUD-Dev maillist  -  MUD-Dev@kanga.nu
                            http://www.kanga.nu/lists/listinfo/mud-dev
                          header: !ruby/object:Headers
                            rmail: !ruby/object:RMail::Message
                              header: !ruby/object:RMail::Header
                                fields:
                                - !ruby/object:RMail::Header::Field
                                  raw: 'From: "Dundee" <SkeptAck@antisocial.com>'
                                  name: From
                                  value: '"Dundee" <SkeptAck@antisocial.com>'
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Date: Thu, 20 Jan 2000 18:41:54 GMT'
                                  name: Date
                                  value: Thu, 20 Jan 2000 18:41:54 GMT
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                  name: Subject
                                  value: 'Re: [MUD-Dev] Community Relations'
                                mbox_from: 
                              body: |
                                Ola Fosheim Gr=F8stad wrote:
                                > Mmmh, but if I got it right, you didn't cause the real problem=20

                                Not really.  Something you wrote in an earlier message about the weight =
                                of
                                anything an admin says being magnified by about 100, just because they =
                                are
                                admins:  I think, not realizing that (or ignoring it), I caused the whole
                                mess by being hostile and sarcastic.

                                > which was that banning was used in the heat of the moment by a person=20
                                > that (as far as I can tell) probably shouldn't have held those powers =
                                in the first
                                > place?

                                I think when we were running without any posted guidelines (or much of
                                anything else), an invitation-only, private club sort of thing, we didn't
                                have admins so much as we had bouncers.  She bounced.  'Did a pretty good
                                job, too.

                                It's only now that we're trying to ... ah... run things differently.

                                > I think perhaps only one calm person should have access to such
                                > functionality, and that you need policies for how to deal with such
                                > situations before they happen?

                                I agree.

                                > So how does your experiences as an admin compare to your or your
                                > friends' experiences with "bad admins"/"clueless designers" on UO?  =
                                What
                                > does the other side of the fence look like, so to speak?

                                I don't think the situations are similar enough to compare.  They aren't
                                paying us so they don't have the same sense of entitlement, they're =
                                afraid to
                                give me the kind of heat they gave to OSI (and not just afraid of admin
                                retribution, but afraid of being ostracized by the other players), we're =
                                a
                                *much* smaller group with the game itself being cooperative rather than
                                competitive, and we have a much higher player-admin ratio so there's just
                                less to complain about.

                                One fellow, quite a while back, took the aggressive "You're clueless, =
                                this is
                                stupid" approach to expressing himself.   The players banned him:  No one
                                would play with him or talk to him (other than to flood his mailbox with
                                flames).  He finally just got lonely enough to quit playing.  I think he =
                                went
                                back to OSI servers where he can call the admins names and the other =
                                players
                                giggle and attaboy him.

                                Anyway, when I'm not being a chump, the players defend me pretty
                                aggressively.

                                --=20
                                http://dundee.uong.com/



                                _______________________________________________
                                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                                http://www.kanga.nu/lists/listinfo/mud-dev
                              epilogue: 
                              preamble: 
                          message_id: !ruby/object:MessageId
                            raw: "[invalid or missing message id]"
                          subject: !ruby/object:Subject
                            original: 'Re: [MUD-Dev] Community Relations'
                          from: Dundee <SkeptAck@antisocial.com>
                          references: []
                          date: 2000-01-20 18:41:54.000000000 Z
                          no_archive: false
                        call_number: !ruby/object:CallNumber
                          str: 00bj7rQe
                        source: archive
                        list: !ruby/object:List
                          slug: mud-dev
                          name: 
                          description: 
                          homepage: 
                          footer: 
                        message_id: *140
                      parent: *141
                      children: []
                    - &427 !ruby/object:MessageContainer
                      key: &142 !ruby/object:MessageId
                        raw: 00bj7rQu@generated-message-id.chibrary.org
                      value: !ruby/object:Message
                        email: !ruby/object:Email
                          raw: |
                            From: "Dundee" <SkeptAck@antisocial.com>
                            Date: Tue, 18 Jan 2000 21:28:14 GMT
                            Subject: Re: [MUD-Dev] Community Relations

                            Ola Fosheim Gr=F8stad <olag@ifi.uio.no> wrote:

                            > And I don't think there is much use in getting into the specifics
                            > without getting the other parties viewpoint either.=20

                            Right, sorry.  I don't mean to get into the specifics so much at all.  =
                            I'm
                            just not sure what questions to ask.  As far as I can tell, the things I =
                            need
                            to be doing are on the "Well, duh" level.

                            > Most admins will justify anything they do (I had no choice, it is my =
                            system,=20
                            > he asked for it, it would have happened anyway...), and that's rather =
                            typical of
                            > people that acquire positions where they can exercise.

                            I should explain, maybe.  We've been up for ~6 months.  I have ~6 months
                            experience as an admin - and all of that's been on the game design and
                            development front, nothing to do with player-relations apart from =
                            listening
                            to them gripe about how various things work, or don't work, or should =
                            work,
                            etc., explaining what changes I'm making and why, and so on.  The dialog =
                            I've
                            had with players up to this point has purely revolved around game =
                            mechanics.

                            =46our of us setup the mud.  No posted policies beyond "How to join" and =
                            "Don't
                            be a jerk".  No mud hierarchy.  No Arch-Wizard or Grand Poobah or =
                            whatever
                            you want to call it.  The host pulled the plug a few days ago, I found a =
                            new
                            host and put it back online.  And now I have a few days experience being =
                            the
                            Arch-Wizard or Grand Poobah or whatever you want to call it.

                            And the first thing I had to do, was to deal with this incident - which,
                            yeah, never would have happened in the first place if we'd done anything
                            right.  I still don't think that I *did* deal with it.  I think I tried,
                            couldn't do it, and finally banned the player just to shut him up.  I =
                            punted.

                            But I'm not happy with that solution, and I don't like the aura of fear I
                            sense now on the game message boards and such.  People are afraid to =
                            complain
                            now - even about legitimate problems with game mechanics (and they were =
                            never
                            shy about reporting these problems before).

                            > I am personally in favour of the empathic/autonomous/peerage with no =
                            visible=20
                            > admin, but that assumes a design without serious flaws...

                            I think we're stuck with the fascist model.  heh.

                            > Yes, but the real question is not how to deal with him, but what skills
                            > do you require from your admins and what systems are in place to avoid
                            > the admin-player conflict?

                            That's a good question.  Currently there aren't any systems in place to
                            prevent it.  We still don't even have a code of conduct posted, for =
                            either
                            players or admins.

                            I wish there was a check-list somewhere.  Setting up a mud: a) Post this,=
                             b)
                            Post that, c) Decide this or that, d) etc.

                            --=20
                            http://dundee.uong.com/



                            _______________________________________________
                            MUD-Dev maillist  -  MUD-Dev@kanga.nu
                            http://www.kanga.nu/lists/listinfo/mud-dev
                          header: !ruby/object:Headers
                            rmail: !ruby/object:RMail::Message
                              header: !ruby/object:RMail::Header
                                fields:
                                - !ruby/object:RMail::Header::Field
                                  raw: 'From: "Dundee" <SkeptAck@antisocial.com>'
                                  name: From
                                  value: '"Dundee" <SkeptAck@antisocial.com>'
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Date: Tue, 18 Jan 2000 21:28:14 GMT'
                                  name: Date
                                  value: Tue, 18 Jan 2000 21:28:14 GMT
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                  name: Subject
                                  value: 'Re: [MUD-Dev] Community Relations'
                                mbox_from: 
                              body: |
                                Ola Fosheim Gr=F8stad <olag@ifi.uio.no> wrote:

                                > And I don't think there is much use in getting into the specifics
                                > without getting the other parties viewpoint either.=20

                                Right, sorry.  I don't mean to get into the specifics so much at all.  =
                                I'm
                                just not sure what questions to ask.  As far as I can tell, the things I =
                                need
                                to be doing are on the "Well, duh" level.

                                > Most admins will justify anything they do (I had no choice, it is my =
                                system,=20
                                > he asked for it, it would have happened anyway...), and that's rather =
                                typical of
                                > people that acquire positions where they can exercise.

                                I should explain, maybe.  We've been up for ~6 months.  I have ~6 months
                                experience as an admin - and all of that's been on the game design and
                                development front, nothing to do with player-relations apart from =
                                listening
                                to them gripe about how various things work, or don't work, or should =
                                work,
                                etc., explaining what changes I'm making and why, and so on.  The dialog =
                                I've
                                had with players up to this point has purely revolved around game =
                                mechanics.

                                =46our of us setup the mud.  No posted policies beyond "How to join" and =
                                "Don't
                                be a jerk".  No mud hierarchy.  No Arch-Wizard or Grand Poobah or =
                                whatever
                                you want to call it.  The host pulled the plug a few days ago, I found a =
                                new
                                host and put it back online.  And now I have a few days experience being =
                                the
                                Arch-Wizard or Grand Poobah or whatever you want to call it.

                                And the first thing I had to do, was to deal with this incident - which,
                                yeah, never would have happened in the first place if we'd done anything
                                right.  I still don't think that I *did* deal with it.  I think I tried,
                                couldn't do it, and finally banned the player just to shut him up.  I =
                                punted.

                                But I'm not happy with that solution, and I don't like the aura of fear I
                                sense now on the game message boards and such.  People are afraid to =
                                complain
                                now - even about legitimate problems with game mechanics (and they were =
                                never
                                shy about reporting these problems before).

                                > I am personally in favour of the empathic/autonomous/peerage with no =
                                visible=20
                                > admin, but that assumes a design without serious flaws...

                                I think we're stuck with the fascist model.  heh.

                                > Yes, but the real question is not how to deal with him, but what skills
                                > do you require from your admins and what systems are in place to avoid
                                > the admin-player conflict?

                                That's a good question.  Currently there aren't any systems in place to
                                prevent it.  We still don't even have a code of conduct posted, for =
                                either
                                players or admins.

                                I wish there was a check-list somewhere.  Setting up a mud: a) Post this,=
                                 b)
                                Post that, c) Decide this or that, d) etc.

                                --=20
                                http://dundee.uong.com/



                                _______________________________________________
                                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                                http://www.kanga.nu/lists/listinfo/mud-dev
                              epilogue: 
                              preamble: 
                          message_id: !ruby/object:MessageId
                            raw: "[invalid or missing message id]"
                          subject: !ruby/object:Subject
                            original: 'Re: [MUD-Dev] Community Relations'
                          from: Dundee <SkeptAck@antisocial.com>
                          references: []
                          date: 2000-01-18 21:28:14.000000000 Z
                          no_archive: false
                        call_number: !ruby/object:CallNumber
                          str: 00bj7rQu
                        source: archive
                        list: !ruby/object:List
                          slug: mud-dev
                          name: 
                          description: 
                          homepage: 
                          footer: 
                        message_id: *142
                      parent: *141
                      children: []
                - *143
              children:
              - *144
            children:
            - *145
            - &148 !ruby/object:MessageContainer
              key: &146 !ruby/object:MessageId
                raw: Jzmy0lns@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: "From: \"Koster, Raph\" <rkoster@origin.ea.com>\nDate: Wed,
                    19 Jan 2000 09:48:22 -0600\nSubject: RE: [MUD-Dev] Community Relations\n\nMatt,
                    and you thought YOU were harsh... :) My apologies in advance.\n\n>
                    -----Original Message-----\n> From: Matthew Mihaly [mailto:diablo@best.com]\n>
                    Sent: Wednesday, January 19, 2000 12:24 AM\n> To: mud-dev@kanga.nu\n>
                    Subject: Re: [MUD-Dev] Community Relations\n> \n> \n> On Tue,
                    18 Jan 2000, Raph & Kristen Koster wrote:\n> \n> > \n> > -----
                    Original Message -----\n> > From: Matthew Mihaly <diablo@best.com>\n>
                    > To: <mud-dev@kanga.nu>\n> > Sent: Tuesday, January 18, 2000
                    3:22 PM\n> > Subject: Re: [MUD-Dev] Community Relations\n\n> >
                    > Remember though that many of us are involved in \n> commercial
                    endeavours, and\n> > > that attitude is not appropriate for most
                    commercial endeavours.\n> > \n> > It is misguided regardless of
                    whether the venture is a \n> for-profit mud or\n> > not.\n> \n>
                    I disagree, and I don't think you thought about this \n> statement
                    before you\n> made it. \"Misguided\" mean not guided towards something,
                    \n> presumably your\n> goal.\n\nActually, I was speaking of the
                    admin's responsibility towards his players.\nIf he wants to run
                    a psych experiment, a mud devoted towards driving players\ninsane,
                    a mud to experiment with poor management, etc, then he had better
                    be\nwarning players away with huge banners. If he's not explicitly
                    trying to do\nthat, then he had better cut out that behavior.
                    To my mind, when you open a\npublic facility of ANY sort, you
                    are then responsible for it on many levels,\nregardless of whether
                    he is trying to maximize playerbase size. The fact\nthat playerbse
                    size WILl increase if the place is well-managed is\ncoincidental:
                    you manage it well because you owe it to the players to manage\nit
                    well, because you have created a public space. If you want to
                    make a\nprivate space, then don't tell anyone about it. If you
                    opened a public space\nin order to get an ego-boo, get over yourself
                    and realize what you've done.\n\n> It is a mistake, I think, to
                    implicitly assume that the \n> goal of a\n> mud is maximize the
                    size of the player base. It's a bias that I see on\n> this list
                    all the time, and it's a completely unwarranted \n> one. \n\nA
                    commercial mud has as its goal maximizing revenue. Not playerbase\nsize--they
                    are not necessarily the same thing.\n\nA free mud may have many
                    different goals. Almost all of them (certainly all\nthe justifiable
                    ones in the case of an advertised, publicly accessible mud)\nrequire
                    a playerbase. \n\nIf a playerbase is well-treated, it will attract
                    new players. This does not\nimply growth of the playerbase, as
                    other factors such as retention and\nadvertising may still result
                    in a net loss. Treating the playerbase\nwell--actually, let me
                    make that blunter: treating them decently but also\nmanipulating
                    the hell out of them for the common good--is, to my mind, a\nresponsibility
                    of the admin regardless of which goal they are pursuing, if\nthey
                    are running a publicly accessible space.\n\n> In summary then,
                    if some mud admins choose to run their muds \n> capriciously,\n>
                    I don't see where anyone gets off criticizing them on more than
                    a\n> \"personal preferences\" level. In other words, perhaps you
                    \n> find that sort\n> of style distasteful, but that doesn't mean
                    it's Wrong or Misguided in\n> some universal sense.\n\nI say it
                    is wrong or misguided in a universal sense, and you're not likely\nto
                    convince me otherwise mostly because my conviction relies on some\narticles
                    of faith about people.\n\nPlayers are people. Just because they
                    are people far away on the other side\nof a lot of wires and computers
                    and routers does not mean they are any less\nof people. Treating
                    people capriciously in the real world is wrong,\nespecially when
                    you have power over them. Treating them capriciously in the\nvirtual
                    world is also wrong. Admins have power over PEOPLE, not just\ncharacters.
                    Those are real feelings over there.\n\nA mud admin who advertises
                    his mud is asking real people to come into a\nvirtual space he
                    created. If he does it for the purpose of knowingly\ntormenting
                    them, abusing them, or causing them pain, then that is\nreprehensible.
                    If he torments them, abuses them, or otherwise puts them\nthrough
                    emotional pain out of ignorance, it can be forgiven, but he had\nbetter
                    realize quickly that they are PEOPLE.\n\nHe also needs to realize
                    that the reason they are there in his space is\npartly because
                    of the nature of the space he created, and partly for the\nother
                    people. All of those people have put themselves in his hands,
                    under\nhis power, in his control. To say he has no responsibility
                    for their welfare\nis shortsighted and frankly cruel. They do
                    not HAVE the power, in the\ncurrent state of the art, to manage
                    their affairs completely. Current mud\ndesigns RELY on that admin
                    stepping up to the plate and acting in a mature,\nresponsible
                    fashion. In fact, they practically require an inhuman level of\ndevotion
                    to duty.\n\nThe players doe snot think in these terms. He is generally
                    naive about these\nmatters when he first logs on. But he'll catch
                    on, though he may never be\nable to articulate it. But the admin--to
                    my mind, the admin damn well better\nlearn this stuff, preferably
                    before advertising any site locations. It\ndoesn't matter what
                    he made the mud for: as soon as he opened the doors, he\neffectively
                    said, \"this isn't mine anymore, it's yours.\"\n \n> The goal\n>
                    of this list is the advancement of muds, not the advancement \n>
                    of the bottom\n> line for the companies that own muds. \n\nIt
                    would take an exceptionally farsighted company to consider the
                    cost of\ncareful community building to be a necessary upfront
                    expense. :) I am not\nsaying these things in the light of only
                    commercial practices. This is the\nstandard to which I held my
                    immorts on LegendMUD, and frankly, it is the\nstandard to which
                    players *everywhere* hold their immorts. \n\n> I'm sorry if I
                    sound \n> harsh Raph, but\n> the point of view I'm railing against
                    is one that I hear most of the\n> commercial people on here (myself
                    included) implicitly \n> espousing a lot,\n> and upon reflection,
                    I don't think it's justified. The \n> advancement of muds\n> does
                    not implicitly require commercial-style management.\n\nSeparate
                    debate, but IMHO the advancement of muds DOES require improved\ncommunity
                    management. This does not, however, imply administrative\nmanagement.\n\n>
                    Only \n> muds which\n> are concerned with either profit maximization
                    or as large a \n> player-base as\n> possible do.\n\nIf you look
                    at the goals you listed, you'll find that they all depend on\nplayerbase
                    to one extent or another, and the most common of them (which\nsadly,
                    includes ego-boo) depend very literally on increasing playerbase
                    over\ntime.\n\n> Poorly phrased by me. My point is that regardless
                    of where \n> the content is\n> coming from (players or creator),
                    the fact is, the world is \n> _owned_ by the\n> creator (or his
                    assignee). He does not have any real \n> responsibilities to\n>
                    his players unless he chooses to accept them.\n\nSo here we have
                    a fundamental disagreement.\n\n> I agree that few admins\n> actually
                    have any clue what it is they are creating, but I don't think\n>
                    that's relevant. They own the world, end of story. If I want \n>
                    invite you to\n> my house for a party,\n\nIt is no longer your
                    house, in the case of a mud. Rather, it's actually\npublic parkland.
                    You can choose to take it back, but it is still public\nparkland
                    until such time as you do. And to my mind, that changes the nature\nof
                    the equation.\n\n> and I decide to arbitrarily insult you \n>
                    and throw you\n> out, that's my right, and thank god for it.\n\nActually,
                    doing this sort of thing could very well land you in legal\ntrouble,
                    for the precise reason that it is an activity detrimental to the\ncommunity.\n\n>
                    In the end, people volunteer because they get something out of
                    it,\n> generally either status in the community or a good feeling
                    \n> inside. If a\n> mud creator/admin runs his mud in a capricious,
                    vindictive, \n> arbitrary way,\n> and it makes him feel good,
                    bully for him I say. He's the one \n> that put in\n> the effort,
                    time, and possibly money, and I, for one, am not \n> going to
                    tell\n> him that he must treat the beneficiaries of his time,
                    effort, \n> and money in\n> any particular way.\n\nUgh. If a park
                    administrator, restaurant owner, mayor, or president runs his\nrestaurant,
                    park, city, or country in a capricious, vindictive, arbitrary\nway
                    because it makes him feel good, we usually call him a jerk. He
                    may be\nthe one who put in the effort, time, and possibly money,
                    but I, for one, am\nstill going to tell him he is being a jerk
                    by playing with people that way.\n\n-Raph\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: "Koster, Raph" <rkoster@origin.ea.com>'
                          name: From
                          value: '"Koster, Raph" <rkoster@origin.ea.com>'
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Wed, 19 Jan 2000 09:48:22 -0600'
                          name: Date
                          value: Wed, 19 Jan 2000 09:48:22 -0600
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: RE: [MUD-Dev] Community Relations'
                          name: Subject
                          value: 'RE: [MUD-Dev] Community Relations'
                        mbox_from: 
                      body: "Matt, and you thought YOU were harsh... :) My apologies
                        in advance.\n\n> -----Original Message-----\n> From: Matthew
                        Mihaly [mailto:diablo@best.com]\n> Sent: Wednesday, January
                        19, 2000 12:24 AM\n> To: mud-dev@kanga.nu\n> Subject: Re:
                        [MUD-Dev] Community Relations\n> \n> \n> On Tue, 18 Jan 2000,
                        Raph & Kristen Koster wrote:\n> \n> > \n> > ----- Original
                        Message -----\n> > From: Matthew Mihaly <diablo@best.com>\n>
                        > To: <mud-dev@kanga.nu>\n> > Sent: Tuesday, January 18, 2000
                        3:22 PM\n> > Subject: Re: [MUD-Dev] Community Relations\n\n>
                        > > Remember though that many of us are involved in \n> commercial
                        endeavours, and\n> > > that attitude is not appropriate for
                        most commercial endeavours.\n> > \n> > It is misguided regardless
                        of whether the venture is a \n> for-profit mud or\n> > not.\n>
                        \n> I disagree, and I don't think you thought about this \n>
                        statement before you\n> made it. \"Misguided\" mean not guided
                        towards something, \n> presumably your\n> goal.\n\nActually,
                        I was speaking of the admin's responsibility towards his players.\nIf
                        he wants to run a psych experiment, a mud devoted towards
                        driving players\ninsane, a mud to experiment with poor management,
                        etc, then he had better be\nwarning players away with huge
                        banners. If he's not explicitly trying to do\nthat, then he
                        had better cut out that behavior. To my mind, when you open
                        a\npublic facility of ANY sort, you are then responsible for
                        it on many levels,\nregardless of whether he is trying to
                        maximize playerbase size. The fact\nthat playerbse size WILl
                        increase if the place is well-managed is\ncoincidental: you
                        manage it well because you owe it to the players to manage\nit
                        well, because you have created a public space. If you want
                        to make a\nprivate space, then don't tell anyone about it.
                        If you opened a public space\nin order to get an ego-boo,
                        get over yourself and realize what you've done.\n\n> It is
                        a mistake, I think, to implicitly assume that the \n> goal
                        of a\n> mud is maximize the size of the player base. It's
                        a bias that I see on\n> this list all the time, and it's a
                        completely unwarranted \n> one. \n\nA commercial mud has as
                        its goal maximizing revenue. Not playerbase\nsize--they are
                        not necessarily the same thing.\n\nA free mud may have many
                        different goals. Almost all of them (certainly all\nthe justifiable
                        ones in the case of an advertised, publicly accessible mud)\nrequire
                        a playerbase. \n\nIf a playerbase is well-treated, it will
                        attract new players. This does not\nimply growth of the playerbase,
                        as other factors such as retention and\nadvertising may still
                        result in a net loss. Treating the playerbase\nwell--actually,
                        let me make that blunter: treating them decently but also\nmanipulating
                        the hell out of them for the common good--is, to my mind,
                        a\nresponsibility of the admin regardless of which goal they
                        are pursuing, if\nthey are running a publicly accessible space.\n\n>
                        In summary then, if some mud admins choose to run their muds
                        \n> capriciously,\n> I don't see where anyone gets off criticizing
                        them on more than a\n> \"personal preferences\" level. In
                        other words, perhaps you \n> find that sort\n> of style distasteful,
                        but that doesn't mean it's Wrong or Misguided in\n> some universal
                        sense.\n\nI say it is wrong or misguided in a universal sense,
                        and you're not likely\nto convince me otherwise mostly because
                        my conviction relies on some\narticles of faith about people.\n\nPlayers
                        are people. Just because they are people far away on the other
                        side\nof a lot of wires and computers and routers does not
                        mean they are any less\nof people. Treating people capriciously
                        in the real world is wrong,\nespecially when you have power
                        over them. Treating them capriciously in the\nvirtual world
                        is also wrong. Admins have power over PEOPLE, not just\ncharacters.
                        Those are real feelings over there.\n\nA mud admin who advertises
                        his mud is asking real people to come into a\nvirtual space
                        he created. If he does it for the purpose of knowingly\ntormenting
                        them, abusing them, or causing them pain, then that is\nreprehensible.
                        If he torments them, abuses them, or otherwise puts them\nthrough
                        emotional pain out of ignorance, it can be forgiven, but he
                        had\nbetter realize quickly that they are PEOPLE.\n\nHe also
                        needs to realize that the reason they are there in his space
                        is\npartly because of the nature of the space he created,
                        and partly for the\nother people. All of those people have
                        put themselves in his hands, under\nhis power, in his control.
                        To say he has no responsibility for their welfare\nis shortsighted
                        and frankly cruel. They do not HAVE the power, in the\ncurrent
                        state of the art, to manage their affairs completely. Current
                        mud\ndesigns RELY on that admin stepping up to the plate and
                        acting in a mature,\nresponsible fashion. In fact, they practically
                        require an inhuman level of\ndevotion to duty.\n\nThe players
                        doe snot think in these terms. He is generally naive about
                        these\nmatters when he first logs on. But he'll catch on,
                        though he may never be\nable to articulate it. But the admin--to
                        my mind, the admin damn well better\nlearn this stuff, preferably
                        before advertising any site locations. It\ndoesn't matter
                        what he made the mud for: as soon as he opened the doors,
                        he\neffectively said, \"this isn't mine anymore, it's yours.\"\n
                        \n> The goal\n> of this list is the advancement of muds, not
                        the advancement \n> of the bottom\n> line for the companies
                        that own muds. \n\nIt would take an exceptionally farsighted
                        company to consider the cost of\ncareful community building
                        to be a necessary upfront expense. :) I am not\nsaying these
                        things in the light of only commercial practices. This is
                        the\nstandard to which I held my immorts on LegendMUD, and
                        frankly, it is the\nstandard to which players *everywhere*
                        hold their immorts. \n\n> I'm sorry if I sound \n> harsh Raph,
                        but\n> the point of view I'm railing against is one that I
                        hear most of the\n> commercial people on here (myself included)
                        implicitly \n> espousing a lot,\n> and upon reflection, I
                        don't think it's justified. The \n> advancement of muds\n>
                        does not implicitly require commercial-style management.\n\nSeparate
                        debate, but IMHO the advancement of muds DOES require improved\ncommunity
                        management. This does not, however, imply administrative\nmanagement.\n\n>
                        Only \n> muds which\n> are concerned with either profit maximization
                        or as large a \n> player-base as\n> possible do.\n\nIf you
                        look at the goals you listed, you'll find that they all depend
                        on\nplayerbase to one extent or another, and the most common
                        of them (which\nsadly, includes ego-boo) depend very literally
                        on increasing playerbase over\ntime.\n\n> Poorly phrased by
                        me. My point is that regardless of where \n> the content is\n>
                        coming from (players or creator), the fact is, the world is
                        \n> _owned_ by the\n> creator (or his assignee). He does not
                        have any real \n> responsibilities to\n> his players unless
                        he chooses to accept them.\n\nSo here we have a fundamental
                        disagreement.\n\n> I agree that few admins\n> actually have
                        any clue what it is they are creating, but I don't think\n>
                        that's relevant. They own the world, end of story. If I want
                        \n> invite you to\n> my house for a party,\n\nIt is no longer
                        your house, in the case of a mud. Rather, it's actually\npublic
                        parkland. You can choose to take it back, but it is still
                        public\nparkland until such time as you do. And to my mind,
                        that changes the nature\nof the equation.\n\n> and I decide
                        to arbitrarily insult you \n> and throw you\n> out, that's
                        my right, and thank god for it.\n\nActually, doing this sort
                        of thing could very well land you in legal\ntrouble, for the
                        precise reason that it is an activity detrimental to the\ncommunity.\n\n>
                        In the end, people volunteer because they get something out
                        of it,\n> generally either status in the community or a good
                        feeling \n> inside. If a\n> mud creator/admin runs his mud
                        in a capricious, vindictive, \n> arbitrary way,\n> and it
                        makes him feel good, bully for him I say. He's the one \n>
                        that put in\n> the effort, time, and possibly money, and I,
                        for one, am not \n> going to tell\n> him that he must treat
                        the beneficiaries of his time, effort, \n> and money in\n>
                        any particular way.\n\nUgh. If a park administrator, restaurant
                        owner, mayor, or president runs his\nrestaurant, park, city,
                        or country in a capricious, vindictive, arbitrary\nway because
                        it makes him feel good, we usually call him a jerk. He may
                        be\nthe one who put in the effort, time, and possibly money,
                        but I, for one, am\nstill going to tell him he is being a
                        jerk by playing with people that way.\n\n-Raph\n\n\n\n_______________________________________________\nMUD-Dev
                        maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'RE: [MUD-Dev] Community Relations'
                  from: Koster, Raph <rkoster@origin.ea.com>
                  references: []
                  date: 2000-01-19 15:48:22.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: Jzmy0lns
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *146
              parent: *144
              children:
              - &150 !ruby/object:MessageContainer
                key: &147 !ruby/object:MessageId
                  raw: Jysr6zdQ@generated-message-id.chibrary.org
                value: !ruby/object:Message
                  email: !ruby/object:Email
                    raw: |
                      From: Travis Casey <efindel@io.com>
                      Date: Wed, 19 Jan 2000 13:31:17 -0500
                      Subject: Re[2]: [MUD-Dev] Community Relations

                      On Wednesday, January 19, 2000, Koster, Raph wrote:

                      > Actually, I was speaking of the admin's responsibility towards his players.
                      > If he wants to run a psych experiment, a mud devoted towards driving players
                      > insane, a mud to experiment with poor management, etc, then he had better be
                      > warning players away with huge banners. If he's not explicitly trying to do
                      > that, then he had better cut out that behavior. To my mind, when you open a
                      > public facility of ANY sort, you are then responsible for it on many levels,
                      > regardless of whether he is trying to maximize playerbase size. The fact
                      > that playerbse size WILl increase if the place is well-managed is
                      > coincidental: you manage it well because you owe it to the players to manage
                      > it well, because you have created a public space. If you want to make a
                      > private space, then don't tell anyone about it. If you opened a public space
                      > in order to get an ego-boo, get over yourself and realize what you've done.

                      Is a mud a "public facility?"  Not all places that allow the public in
                      are "public facilities" -- for example, most businesses allow the
                      public in, but are private, and have the full authority to throw
                      people out who are causing problems.

                      I think we're getting away from the original idea here -- that of
                      players who are insulting.  If you walk into a store and start
                      insulting managers and clerks, do you think they'll let you stay long?

                      (They might *if* you were also buying a lot of things... but in the
                      case of a free mud, the concept of "buying a lot of things" doesn't
                      apply.)

                      > Players are people. Just because they are people far away on the other side
                      > of a lot of wires and computers and routers does not mean they are any less
                      > of people. Treating people capriciously in the real world is wrong,
                      > especially when you have power over them. Treating them capriciously in the
                      > virtual world is also wrong. Admins have power over PEOPLE, not just
                      > characters. Those are real feelings over there.

                      > A mud admin who advertises his mud is asking real people to come into a
                      > virtual space he created. If he does it for the purpose of knowingly
                      > tormenting them, abusing them, or causing them pain, then that is
                      > reprehensible. If he torments them, abuses them, or otherwise puts them
                      > through emotional pain out of ignorance, it can be forgiven, but he had
                      > better realize quickly that they are PEOPLE.

                      I agree with all of this -- however, the people who are visiting the
                      mud should also realize that the admins are people too.  Just as a mud
                      admins should not abuse the players, the players should not abuse the
                      mud admins.  Players who do abuse the mud admins (or anyone else on
                      the mud, really) should expect to be quickly shown the exit.

                      > It is no longer your house, in the case of a mud. Rather, it's actually
                      > public parkland. You can choose to take it back, but it is still public
                      > parkland until such time as you do. And to my mind, that changes the nature
                      > of the equation.

                      I disagree; if I open a business, I may allow the public in, but that
                      does not make my business public parkland.

                      To give a closer analogy:

                      Let's say I open a gaming store, and, like many gaming stores, I
                      decide to have a room in the back with several tables that people can
                      use for games.  I even "host" a few regular games, with volunteer GMs
                      running them in return for some sort of privileges or discounts.

                      Now, if someone comes in and starts using one of my tables to run a
                      poker game, I have every right to throw him out.  If a group of people
                      come in and decide to just sit around one of those tables and chat, I
                      can throw them out.  *Those tables are there for a specific purpose;
                      they are not for the general public to use as they please.*

                      And, to get back to the original point, if someone comes in, sits down
                      at a table, and starts insulting one of my volunteer GMs, or one or
                      more players, I have every right to throw that person out.

                      In the same way, a mud exists for a specific purpose (or purposes).
                      The mud administrators, far from running a public park, are running a
                      set of gaming tables where they've provided GMs and adventures.
                      Anyone who acts in a way that is disruptive to that can be thrown out.

                      > Ugh. If a park administrator, restaurant owner, mayor, or president runs his
                      > restaurant, park, city, or country in a capricious, vindictive, arbitrary
                      > way because it makes him feel good, we usually call him a jerk. He may be
                      > the one who put in the effort, time, and possibly money, but I, for one, am
                      > still going to tell him he is being a jerk by playing with people that way.

                      I agree with this as well.  I don't agree with Matt that mud owners
                      can act however they want -- but neither do I agree with the idea that
                      a mud is a "public space."  It's a private space which the owner has
                      chosen to allow the public into, for certain purposes.

                      --
                             |\      _,,,---,,_        Travis S. Casey  <efindel@io.com>
                       ZZzz  /,`.-'`'    -.  ;-;;,_   No one agrees with me.  Not even me.
                            |,4-  ) )-,_..;\ (  `'-'
                           '---''(_/--'  `-'\_)





                      _______________________________________________
                      MUD-Dev maillist  -  MUD-Dev@kanga.nu
                      http://www.kanga.nu/lists/listinfo/mud-dev
                    header: !ruby/object:Headers
                      rmail: !ruby/object:RMail::Message
                        header: !ruby/object:RMail::Header
                          fields:
                          - !ruby/object:RMail::Header::Field
                            raw: 'From: Travis Casey <efindel@io.com>'
                            name: From
                            value: Travis Casey <efindel@io.com>
                          - !ruby/object:RMail::Header::Field
                            raw: 'Date: Wed, 19 Jan 2000 13:31:17 -0500'
                            name: Date
                            value: Wed, 19 Jan 2000 13:31:17 -0500
                          - !ruby/object:RMail::Header::Field
                            raw: 'Subject: Re[2]: [MUD-Dev] Community Relations'
                            name: Subject
                            value: 'Re[2]: [MUD-Dev] Community Relations'
                          mbox_from: 
                        body: |
                          On Wednesday, January 19, 2000, Koster, Raph wrote:

                          > Actually, I was speaking of the admin's responsibility towards his players.
                          > If he wants to run a psych experiment, a mud devoted towards driving players
                          > insane, a mud to experiment with poor management, etc, then he had better be
                          > warning players away with huge banners. If he's not explicitly trying to do
                          > that, then he had better cut out that behavior. To my mind, when you open a
                          > public facility of ANY sort, you are then responsible for it on many levels,
                          > regardless of whether he is trying to maximize playerbase size. The fact
                          > that playerbse size WILl increase if the place is well-managed is
                          > coincidental: you manage it well because you owe it to the players to manage
                          > it well, because you have created a public space. If you want to make a
                          > private space, then don't tell anyone about it. If you opened a public space
                          > in order to get an ego-boo, get over yourself and realize what you've done.

                          Is a mud a "public facility?"  Not all places that allow the public in
                          are "public facilities" -- for example, most businesses allow the
                          public in, but are private, and have the full authority to throw
                          people out who are causing problems.

                          I think we're getting away from the original idea here -- that of
                          players who are insulting.  If you walk into a store and start
                          insulting managers and clerks, do you think they'll let you stay long?

                          (They might *if* you were also buying a lot of things... but in the
                          case of a free mud, the concept of "buying a lot of things" doesn't
                          apply.)

                          > Players are people. Just because they are people far away on the other side
                          > of a lot of wires and computers and routers does not mean they are any less
                          > of people. Treating people capriciously in the real world is wrong,
                          > especially when you have power over them. Treating them capriciously in the
                          > virtual world is also wrong. Admins have power over PEOPLE, not just
                          > characters. Those are real feelings over there.

                          > A mud admin who advertises his mud is asking real people to come into a
                          > virtual space he created. If he does it for the purpose of knowingly
                          > tormenting them, abusing them, or causing them pain, then that is
                          > reprehensible. If he torments them, abuses them, or otherwise puts them
                          > through emotional pain out of ignorance, it can be forgiven, but he had
                          > better realize quickly that they are PEOPLE.

                          I agree with all of this -- however, the people who are visiting the
                          mud should also realize that the admins are people too.  Just as a mud
                          admins should not abuse the players, the players should not abuse the
                          mud admins.  Players who do abuse the mud admins (or anyone else on
                          the mud, really) should expect to be quickly shown the exit.

                          > It is no longer your house, in the case of a mud. Rather, it's actually
                          > public parkland. You can choose to take it back, but it is still public
                          > parkland until such time as you do. And to my mind, that changes the nature
                          > of the equation.

                          I disagree; if I open a business, I may allow the public in, but that
                          does not make my business public parkland.

                          To give a closer analogy:

                          Let's say I open a gaming store, and, like many gaming stores, I
                          decide to have a room in the back with several tables that people can
                          use for games.  I even "host" a few regular games, with volunteer GMs
                          running them in return for some sort of privileges or discounts.

                          Now, if someone comes in and starts using one of my tables to run a
                          poker game, I have every right to throw him out.  If a group of people
                          come in and decide to just sit around one of those tables and chat, I
                          can throw them out.  *Those tables are there for a specific purpose;
                          they are not for the general public to use as they please.*

                          And, to get back to the original point, if someone comes in, sits down
                          at a table, and starts insulting one of my volunteer GMs, or one or
                          more players, I have every right to throw that person out.

                          In the same way, a mud exists for a specific purpose (or purposes).
                          The mud administrators, far from running a public park, are running a
                          set of gaming tables where they've provided GMs and adventures.
                          Anyone who acts in a way that is disruptive to that can be thrown out.

                          > Ugh. If a park administrator, restaurant owner, mayor, or president runs his
                          > restaurant, park, city, or country in a capricious, vindictive, arbitrary
                          > way because it makes him feel good, we usually call him a jerk. He may be
                          > the one who put in the effort, time, and possibly money, but I, for one, am
                          > still going to tell him he is being a jerk by playing with people that way.

                          I agree with this as well.  I don't agree with Matt that mud owners
                          can act however they want -- but neither do I agree with the idea that
                          a mud is a "public space."  It's a private space which the owner has
                          chosen to allow the public into, for certain purposes.

                          --
                                 |\      _,,,---,,_        Travis S. Casey  <efindel@io.com>
                           ZZzz  /,`.-'`'    -.  ;-;;,_   No one agrees with me.  Not even me.
                                |,4-  ) )-,_..;\ (  `'-'
                               '---''(_/--'  `-'\_)





                          _______________________________________________
                          MUD-Dev maillist  -  MUD-Dev@kanga.nu
                          http://www.kanga.nu/lists/listinfo/mud-dev
                        epilogue: 
                        preamble: 
                    message_id: !ruby/object:MessageId
                      raw: "[invalid or missing message id]"
                    subject: !ruby/object:Subject
                      original: 'Re[2]: [MUD-Dev] Community Relations'
                    from: Travis Casey <efindel@io.com>
                    references: []
                    date: 2000-01-19 18:31:17.000000000 Z
                    no_archive: false
                  call_number: !ruby/object:CallNumber
                    str: Jysr6zdQ
                  source: archive
                  list: !ruby/object:List
                    slug: mud-dev
                    name: 
                    description: 
                    homepage: 
                    footer: 
                  message_id: *147
                parent: *148
                children:
                - &152 !ruby/object:MessageContainer
                  key: &149 !ruby/object:MessageId
                    raw: Jzn788Lg@generated-message-id.chibrary.org
                  value: !ruby/object:Message
                    email: !ruby/object:Email
                      raw: "From: Ola Fosheim Gr��stad <olag@ifi.uio.no>\nDate: Fri,
                        21 Jan 2000 00:16:09 +0100\nSubject: Re: [MUD-Dev] Community
                        Relations\n\nMatthew Mihaly wrote:\r\n>=20\r\n> On Thu, 20
                        Jan 2000, Ola Fosheim [iso-8859-1] Gr=F8stad wrote:\r\n> >
                        Another analogy would be the old fashioned school system.
                        \"Listen to\r\n> > what I teach you, do what I say, and don't
                        tell me I am wrong, becaus=\r\ne\r\n> > then I'll whip your
                        butts\". I guess there must be a reason for why\r\n> > that's
                        considered old fashioned?\r\n>=20\r\n> Yes, but I don't see
                        how it is relevant. The children were forced to go=\r\n to\r\n>
                        schol. No one is forcing you to play a mud. The issue of choice
                        is the\r\n> paramount issue to me.\r\n\r\nI think prisoners
                        are forced to stay in court too? So why are you\r\nobjecting
                        to my analogy if your own was basically screwed?\r\n\r\nSome
                        people are in essence trapped in MUDs and I am not entirely\r\nconvinced
                        that they are any more free to leave than those kids are.
                        \ If\r\nthat is an important issue to you.  (Are you trying
                        to tell me that kids\r\nand adults require different treatment
                        due to some kind of arbitrary\r\nbeliefsystem?)\r\n\r\n> >
                        I think perhaps the police is a better analogy, but the police
                        is\r\n> > supposed to be guided by strict rules. And in the
                        physical world you\r\n> > have much less control and risk
                        much more. So that kind of respect is\r\n> > not really required
                        in a MUD.\r\n>=20\r\n> Required for what? Again, you are implicitly
                        assuming that all mud admi=\r\nns\r\n> do and must have the
                        same goals.\r\n\r\nRequired in order to achieve the same effect
                        as in the physical domain.\r\nI don't think I assumed anything?
                        Except that the police would be a\r\nbetter analogy, if it
                        hadn't been for the fact that the environment is\r\nvery different
                        in nature?\r\n\r\n> Oh, i agree, definitely not required for
                        that, but I hardly see where\r\n> administering a mud efficiently
                        is the goal of the vast majority of mud\r\n> admins.\r\n\r\nReally?
                        Explain.\r\n\r\n> > Does the \"evil\" God reward you for insulting
                        the \"good\" God?\r\n>=20\r\n> Gasp, definitely not. Doing
                        so would weaken the respect that the\r\n> institution of Godhood
                        must hold for our system to be effective.\r\n\r\nSo the setting
                        is basically just a shallow surface for obtaining control\r\nand
                        not a goal in it's own right?\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                        maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                      header: !ruby/object:Headers
                        rmail: !ruby/object:RMail::Message
                          header: !ruby/object:RMail::Header
                            fields:
                            - !ruby/object:RMail::Header::Field
                              raw: 'From: Ola Fosheim Gr��stad <olag@ifi.uio.no>'
                              name: From
                              value: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                            - !ruby/object:RMail::Header::Field
                              raw: 'Date: Fri, 21 Jan 2000 00:16:09 +0100'
                              name: Date
                              value: Fri, 21 Jan 2000 00:16:09 +0100
                            - !ruby/object:RMail::Header::Field
                              raw: 'Subject: Re: [MUD-Dev] Community Relations'
                              name: Subject
                              value: 'Re: [MUD-Dev] Community Relations'
                            mbox_from: 
                          body: "Matthew Mihaly wrote:\r\n>=20\r\n> On Thu, 20 Jan
                            2000, Ola Fosheim [iso-8859-1] Gr=F8stad wrote:\r\n> >
                            Another analogy would be the old fashioned school system.
                            \"Listen to\r\n> > what I teach you, do what I say, and
                            don't tell me I am wrong, becaus=\r\ne\r\n> > then I'll
                            whip your butts\". I guess there must be a reason for
                            why\r\n> > that's considered old fashioned?\r\n>=20\r\n>
                            Yes, but I don't see how it is relevant. The children
                            were forced to go=\r\n to\r\n> schol. No one is forcing
                            you to play a mud. The issue of choice is the\r\n> paramount
                            issue to me.\r\n\r\nI think prisoners are forced to stay
                            in court too? So why are you\r\nobjecting to my analogy
                            if your own was basically screwed?\r\n\r\nSome people
                            are in essence trapped in MUDs and I am not entirely\r\nconvinced
                            that they are any more free to leave than those kids are.
                            \ If\r\nthat is an important issue to you.  (Are you trying
                            to tell me that kids\r\nand adults require different treatment
                            due to some kind of arbitrary\r\nbeliefsystem?)\r\n\r\n>
                            > I think perhaps the police is a better analogy, but
                            the police is\r\n> > supposed to be guided by strict rules.
                            And in the physical world you\r\n> > have much less control
                            and risk much more. So that kind of respect is\r\n> >
                            not really required in a MUD.\r\n>=20\r\n> Required for
                            what? Again, you are implicitly assuming that all mud
                            admi=\r\nns\r\n> do and must have the same goals.\r\n\r\nRequired
                            in order to achieve the same effect as in the physical
                            domain.\r\nI don't think I assumed anything? Except that
                            the police would be a\r\nbetter analogy, if it hadn't
                            been for the fact that the environment is\r\nvery different
                            in nature?\r\n\r\n> Oh, i agree, definitely not required
                            for that, but I hardly see where\r\n> administering a
                            mud efficiently is the goal of the vast majority of mud\r\n>
                            admins.\r\n\r\nReally? Explain.\r\n\r\n> > Does the \"evil\"
                            God reward you for insulting the \"good\" God?\r\n>=20\r\n>
                            Gasp, definitely not. Doing so would weaken the respect
                            that the\r\n> institution of Godhood must hold for our
                            system to be effective.\r\n\r\nSo the setting is basically
                            just a shallow surface for obtaining control\r\nand not
                            a goal in it's own right?\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                            maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                          epilogue: 
                          preamble: 
                      message_id: !ruby/object:MessageId
                        raw: "[invalid or missing message id]"
                      subject: !ruby/object:Subject
                        original: 'Re: [MUD-Dev] Community Relations'
                      from: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                      references: []
                      date: 2000-01-20 23:16:09.000000000 Z
                      no_archive: false
                    call_number: !ruby/object:CallNumber
                      str: Jzn788Lg
                    source: archive
                    list: !ruby/object:List
                      slug: mud-dev
                      name: 
                      description: 
                      homepage: 
                      footer: 
                    message_id: *149
                  parent: *150
                  children:
                  - &259 !ruby/object:MessageContainer
                    key: &151 !ruby/object:MessageId
                      raw: JzBSgnBo@generated-message-id.chibrary.org
                    value: !ruby/object:Message
                      email: !ruby/object:Email
                        raw: |
                          From: Matthew Mihaly <diablo@best.com>
                          Date: Thu, 20 Jan 2000 19:16:23 -0800 (PST)
                          Subject: Re: [MUD-Dev] Community Relations

                          On Fri, 21 Jan 2000, Ola Fosheim [iso-8859-1] Gr=F8stad wrote:

                          > Matthew Mihaly wrote:
                          > >=20
                          > > On Thu, 20 Jan 2000, Ola Fosheim [iso-8859-1] Gr=F8stad wrote:
                          > > > Another analogy would be the old fashioned school system. "Listen to
                          > > > what I teach you, do what I say, and don't tell me I am wrong, becaus=
                          e
                          > > > then I'll whip your butts". I guess there must be a reason for why
                          > > > that's considered old fashioned?
                          > >=20
                          > > Yes, but I don't see how it is relevant. The children were forced to go=
                           to
                          > > schol. No one is forcing you to play a mud. The issue of choice is the
                          > > paramount issue to me.
                          >=20
                          > I think prisoners are forced to stay in court too? So why are you
                          > objecting to my analogy if your own was basically screwed?

                          Perhaps I'm addled at the moment, but what analogy of mine are you
                          referring to? Also, an idea of mine being invalid shouldn't prevent me
                          from pointing out flaws in someone elses. I certainly have never claimed
                          to be perfect.

                          =20
                          > Some people are in essence trapped in MUDs and I am not entirely
                          > convinced that they are any more free to leave than those kids are.  If
                          > that is an important issue to you.  (Are you trying to tell me that kids
                          > and adults require different treatment due to some kind of arbitrary
                          > beliefsystem?)

                          Trapped in a mud, my ass. How many people do you know that can't just turn
                          the computer off? Even a heroin addict can stop. On the other hand, I've
                          had relatives tortured and imprisoned by the hated Soviet military, and I
                          can tell you that they were not _in essence_ trapped in their cells. They
                          were, quite actually, trapped.=20


                          > > Oh, i agree, definitely not required for that, but I hardly see where
                          > > administering a mud efficiently is the goal of the vast majority of mud
                          > > admins.
                          >=20
                          > Really? Explain.

                          It's been my experience that most mud admins (most mud admins being
                          hobbyists) are in it for the ego trip. Not all are of course, but I don't
                          think most mud admins actually do any real thinking at all about running
                          their mud beyond what feature to put in next, or whatnot.

                          =20
                          > > > Does the "evil" God reward you for insulting the "good" God?
                          > >=20
                          > > Gasp, definitely not. Doing so would weaken the respect that the
                          > > institution of Godhood must hold for our system to be effective.
                          >=20
                          > So the setting is basically just a shallow surface for obtaining control
                          > and not a goal in it's own right?

                          That's right. From my perspective, nothing in Achaea is a goal in it's own
                          right. It's all a method of getting them to give us money, like all
                          commercial muds that I've seen.
                          --matt




                          _______________________________________________
                          MUD-Dev maillist  -  MUD-Dev@kanga.nu
                          http://www.kanga.nu/lists/listinfo/mud-dev
                        header: !ruby/object:Headers
                          rmail: !ruby/object:RMail::Message
                            header: !ruby/object:RMail::Header
                              fields:
                              - !ruby/object:RMail::Header::Field
                                raw: 'From: Matthew Mihaly <diablo@best.com>'
                                name: From
                                value: Matthew Mihaly <diablo@best.com>
                              - !ruby/object:RMail::Header::Field
                                raw: 'Date: Thu, 20 Jan 2000 19:16:23 -0800 (PST)'
                                name: Date
                                value: Thu, 20 Jan 2000 19:16:23 -0800 (PST)
                              - !ruby/object:RMail::Header::Field
                                raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                name: Subject
                                value: 'Re: [MUD-Dev] Community Relations'
                              mbox_from: 
                            body: |
                              On Fri, 21 Jan 2000, Ola Fosheim [iso-8859-1] Gr=F8stad wrote:

                              > Matthew Mihaly wrote:
                              > >=20
                              > > On Thu, 20 Jan 2000, Ola Fosheim [iso-8859-1] Gr=F8stad wrote:
                              > > > Another analogy would be the old fashioned school system. "Listen to
                              > > > what I teach you, do what I say, and don't tell me I am wrong, becaus=
                              e
                              > > > then I'll whip your butts". I guess there must be a reason for why
                              > > > that's considered old fashioned?
                              > >=20
                              > > Yes, but I don't see how it is relevant. The children were forced to go=
                               to
                              > > schol. No one is forcing you to play a mud. The issue of choice is the
                              > > paramount issue to me.
                              >=20
                              > I think prisoners are forced to stay in court too? So why are you
                              > objecting to my analogy if your own was basically screwed?

                              Perhaps I'm addled at the moment, but what analogy of mine are you
                              referring to? Also, an idea of mine being invalid shouldn't prevent me
                              from pointing out flaws in someone elses. I certainly have never claimed
                              to be perfect.

                              =20
                              > Some people are in essence trapped in MUDs and I am not entirely
                              > convinced that they are any more free to leave than those kids are.  If
                              > that is an important issue to you.  (Are you trying to tell me that kids
                              > and adults require different treatment due to some kind of arbitrary
                              > beliefsystem?)

                              Trapped in a mud, my ass. How many people do you know that can't just turn
                              the computer off? Even a heroin addict can stop. On the other hand, I've
                              had relatives tortured and imprisoned by the hated Soviet military, and I
                              can tell you that they were not _in essence_ trapped in their cells. They
                              were, quite actually, trapped.=20


                              > > Oh, i agree, definitely not required for that, but I hardly see where
                              > > administering a mud efficiently is the goal of the vast majority of mud
                              > > admins.
                              >=20
                              > Really? Explain.

                              It's been my experience that most mud admins (most mud admins being
                              hobbyists) are in it for the ego trip. Not all are of course, but I don't
                              think most mud admins actually do any real thinking at all about running
                              their mud beyond what feature to put in next, or whatnot.

                              =20
                              > > > Does the "evil" God reward you for insulting the "good" God?
                              > >=20
                              > > Gasp, definitely not. Doing so would weaken the respect that the
                              > > institution of Godhood must hold for our system to be effective.
                              >=20
                              > So the setting is basically just a shallow surface for obtaining control
                              > and not a goal in it's own right?

                              That's right. From my perspective, nothing in Achaea is a goal in it's own
                              right. It's all a method of getting them to give us money, like all
                              commercial muds that I've seen.
                              --matt




                              _______________________________________________
                              MUD-Dev maillist  -  MUD-Dev@kanga.nu
                              http://www.kanga.nu/lists/listinfo/mud-dev
                            epilogue: 
                            preamble: 
                        message_id: !ruby/object:MessageId
                          raw: "[invalid or missing message id]"
                        subject: !ruby/object:Subject
                          original: 'Re: [MUD-Dev] Community Relations'
                        from: Matthew Mihaly <diablo@best.com>
                        references: []
                        date: 2000-01-21 03:16:23.000000000 Z
                        no_archive: false
                      call_number: !ruby/object:CallNumber
                        str: JzBSgnBo
                      source: archive
                      list: !ruby/object:List
                        slug: mud-dev
                        name: 
                        description: 
                        homepage: 
                        footer: 
                      message_id: *151
                    parent: *152
                    children: []
                - &155 !ruby/object:MessageContainer
                  key: &153 !ruby/object:MessageId
                    raw: JzBblxL6@generated-message-id.chibrary.org
                  value: !ruby/object:Message
                    email: !ruby/object:Email
                      raw: "From: Ola Fosheim Gr��stad <olag@ifi.uio.no>\nDate: Wed,
                        19 Jan 2000 22:44:22 +0100\nSubject: Re: [MUD-Dev] Community
                        Relations\n\nTravis Casey wrote:\r\n> Is a mud a \"public
                        facility?\"  Not all places that allow the public in\r\n>
                        are \"public facilities\" -- for example, most businesses
                        allow the\r\n> public in, but are private, and have the full
                        authority to throw\r\n> people out who are causing problems.\r\n\r\nThe
                        librarian can tell you to get out of the library if you refuse
                        to\r\nshut up, yes???\r\n\r\nBut you cant throw people out,
                        not here, and probably not over there\r\neither. You can tell
                        them to go, but only the police are allowed to use\r\nforce.
                        UNLESS using violence is less damaging than whatever they
                        are\r\ndoing. You are not allowed to deny people access because
                        of their skin\r\ncolour, sexual habits etc in places that
                        are open to the public, in a\r\nclosed private space you obviously
                        can! However the space being closed\r\nand private isn't enough.
                        If I have a well on my property, with a\r\nwarning sign and
                        a fence and somebody falls into it, I am still\r\nresponsible.
                        It was accessible. It should have been covered and locked.\r\nSimilarly,
                        I am not allowed to set up death traps in my house to catch\r\nthieves!\r\n\r\nIf
                        you run a mud and you should have known that people were using
                        it for\r\nexchanging child pornography and you did nothing
                        about it, you can in\r\nfact be held legally responsible.
                        The fact is, most of the virtual\r\npublic spaces are probably
                        under regulated because they are new. If\r\nenough members
                        of the MUD community screw up badly and it hits mass\r\nmedia,
                        then you can be sure that somebody will pass new laws that\r\nrestrict
                        that legal freedom in undesirable ways.\r\n\r\n> I think we're
                        getting away from the original idea here -- that of\r\n> players
                        who are insulting.  If you walk into a store and start\r\n>
                        insulting managers and clerks, do you think they'll let you
                        stay long?\r\n\r\nIf I was a regular customer and had reason
                        to complain and it didn't\r\ncreate trouble for all the other
                        customers... YES!  However, being\r\nthrown off a MUD is more
                        like being thrown out of social housing complex\r\nand the
                        country in which that complex is located. You interfere with
                        the\r\nperson's private life, his social sphere.\r\n\r\n>
                        (They might *if* you were also buying a lot of things... but
                        in the\r\n> case of a free mud, the concept of \"buying a
                        lot of things\" doesn't\r\n> apply.)\r\n\r\nSo, why do you
                        compare it to a business that sells lots of things if it\r\nis
                        a bad analogy??\r\n\r\nThe Palace was free last time I used
                        it. Does that mean that they are\r\nmorally free to treat
                        people like trash? What about MUDs that make money\r\nfrom
                        in-world advertisements? Are they free and beyond moral\r\nobligations?
                        Besides, I don't see why those lousy 10USD should make all\r\nthe
                        difference.\r\n\r\nBesides, using a MUD is not free. That
                        somebody loose money on it, does\r\nnot make it free. Players
                        do work, they do unpaid betatesting! I pay for\r\nphone lines,
                        and connectivity. I also loose time, and time is money.\r\nEtc...
                        \ A free pizza delivered on the door is free, takes no time,
                        not\r\nadditional costs etc. (Just trying to point out that
                        free and free and\r\nfree are different things)\r\n \r\n>
                        mud admins.  Players who do abuse the mud admins (or anyone
                        else on\r\n> the mud, really) should expect to be quickly
                        shown the exit.\r\n\r\nI don't really think it matters what
                        players _should_. That's rather\r\npointless. You should expect
                        whatever can be expected from a section of\r\nthe population.
                        If you open a free playground you are assuming a greater\r\nresponsibility
                        than those that happen to see it and make use of it. \r\nEven
                        in the legal sense.  That's the basic issue here.\r\n\r\n>
                        And, to get back to the original point, if someone comes in,
                        sits down\r\n> at a table, and starts insulting one of my
                        volunteer GMs, or one or\r\n> more players, I have every right
                        to throw that person out.\r\n\r\n\"right\"?  What kind of
                        right?  You don't need a reason legally to deny\r\npeople
                        access or to tell them to leave. You can deny people access\r\nbecause
                        of their shoes if you want to, but is it reasonable? You are\r\nfocusing
                        on the wrong issue, that is what controls legal businesses
                        in\r\ngeneral. Is it acceptable for a phone company to cut
                        off your phone\r\nlines, severely harming your business, just
                        because you yelled at their\r\noperator for screwing up badly?!\r\n\r\n>
                        In the same way, a mud exists for a specific purpose (or purposes).\r\n\r\nAnd
                        all purposes are acceptable?\r\n\r\n> Anyone who acts in a
                        way that is disruptive to that can be thrown out.\r\n\r\nThat
                        can happen in a public park too. Why this abuse of analogies?\r\n\r\n>
                        I agree with this as well.  I don't agree with Matt that mud
                        owners\r\n> can act however they want -- but neither do I
                        agree with the idea that\r\n> a mud is a \"public space.\"
                        \ It's a private space which the owner has\r\n> chosen to
                        allow the public into, for certain purposes.\r\n\r\nIt is
                        certainly private if it is by-invitation-only. However, most
                        MUDs\r\nare no more private than a web page. And, as I have
                        tried to point out,\r\nthere are significant limits even on
                        private spaces.\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                        maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                      header: !ruby/object:Headers
                        rmail: !ruby/object:RMail::Message
                          header: !ruby/object:RMail::Header
                            fields:
                            - !ruby/object:RMail::Header::Field
                              raw: 'From: Ola Fosheim Gr��stad <olag@ifi.uio.no>'
                              name: From
                              value: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                            - !ruby/object:RMail::Header::Field
                              raw: 'Date: Wed, 19 Jan 2000 22:44:22 +0100'
                              name: Date
                              value: Wed, 19 Jan 2000 22:44:22 +0100
                            - !ruby/object:RMail::Header::Field
                              raw: 'Subject: Re: [MUD-Dev] Community Relations'
                              name: Subject
                              value: 'Re: [MUD-Dev] Community Relations'
                            mbox_from: 
                          body: "Travis Casey wrote:\r\n> Is a mud a \"public facility?\"
                            \ Not all places that allow the public in\r\n> are \"public
                            facilities\" -- for example, most businesses allow the\r\n>
                            public in, but are private, and have the full authority
                            to throw\r\n> people out who are causing problems.\r\n\r\nThe
                            librarian can tell you to get out of the library if you
                            refuse to\r\nshut up, yes???\r\n\r\nBut you cant throw
                            people out, not here, and probably not over there\r\neither.
                            You can tell them to go, but only the police are allowed
                            to use\r\nforce. UNLESS using violence is less damaging
                            than whatever they are\r\ndoing. You are not allowed to
                            deny people access because of their skin\r\ncolour, sexual
                            habits etc in places that are open to the public, in a\r\nclosed
                            private space you obviously can! However the space being
                            closed\r\nand private isn't enough. If I have a well on
                            my property, with a\r\nwarning sign and a fence and somebody
                            falls into it, I am still\r\nresponsible. It was accessible.
                            It should have been covered and locked.\r\nSimilarly,
                            I am not allowed to set up death traps in my house to
                            catch\r\nthieves!\r\n\r\nIf you run a mud and you should
                            have known that people were using it for\r\nexchanging
                            child pornography and you did nothing about it, you can
                            in\r\nfact be held legally responsible. The fact is, most
                            of the virtual\r\npublic spaces are probably under regulated
                            because they are new. If\r\nenough members of the MUD
                            community screw up badly and it hits mass\r\nmedia, then
                            you can be sure that somebody will pass new laws that\r\nrestrict
                            that legal freedom in undesirable ways.\r\n\r\n> I think
                            we're getting away from the original idea here -- that
                            of\r\n> players who are insulting.  If you walk into a
                            store and start\r\n> insulting managers and clerks, do
                            you think they'll let you stay long?\r\n\r\nIf I was a
                            regular customer and had reason to complain and it didn't\r\ncreate
                            trouble for all the other customers... YES!  However,
                            being\r\nthrown off a MUD is more like being thrown out
                            of social housing complex\r\nand the country in which
                            that complex is located. You interfere with the\r\nperson's
                            private life, his social sphere.\r\n\r\n> (They might
                            *if* you were also buying a lot of things... but in the\r\n>
                            case of a free mud, the concept of \"buying a lot of things\"
                            doesn't\r\n> apply.)\r\n\r\nSo, why do you compare it
                            to a business that sells lots of things if it\r\nis a
                            bad analogy??\r\n\r\nThe Palace was free last time I used
                            it. Does that mean that they are\r\nmorally free to treat
                            people like trash? What about MUDs that make money\r\nfrom
                            in-world advertisements? Are they free and beyond moral\r\nobligations?
                            Besides, I don't see why those lousy 10USD should make
                            all\r\nthe difference.\r\n\r\nBesides, using a MUD is
                            not free. That somebody loose money on it, does\r\nnot
                            make it free. Players do work, they do unpaid betatesting!
                            I pay for\r\nphone lines, and connectivity. I also loose
                            time, and time is money.\r\nEtc...  A free pizza delivered
                            on the door is free, takes no time, not\r\nadditional
                            costs etc. (Just trying to point out that free and free
                            and\r\nfree are different things)\r\n \r\n> mud admins.
                            \ Players who do abuse the mud admins (or anyone else
                            on\r\n> the mud, really) should expect to be quickly shown
                            the exit.\r\n\r\nI don't really think it matters what
                            players _should_. That's rather\r\npointless. You should
                            expect whatever can be expected from a section of\r\nthe
                            population. If you open a free playground you are assuming
                            a greater\r\nresponsibility than those that happen to
                            see it and make use of it. \r\nEven in the legal sense.
                            \ That's the basic issue here.\r\n\r\n> And, to get back
                            to the original point, if someone comes in, sits down\r\n>
                            at a table, and starts insulting one of my volunteer GMs,
                            or one or\r\n> more players, I have every right to throw
                            that person out.\r\n\r\n\"right\"?  What kind of right?
                            \ You don't need a reason legally to deny\r\npeople access
                            or to tell them to leave. You can deny people access\r\nbecause
                            of their shoes if you want to, but is it reasonable? You
                            are\r\nfocusing on the wrong issue, that is what controls
                            legal businesses in\r\ngeneral. Is it acceptable for a
                            phone company to cut off your phone\r\nlines, severely
                            harming your business, just because you yelled at their\r\noperator
                            for screwing up badly?!\r\n\r\n> In the same way, a mud
                            exists for a specific purpose (or purposes).\r\n\r\nAnd
                            all purposes are acceptable?\r\n\r\n> Anyone who acts
                            in a way that is disruptive to that can be thrown out.\r\n\r\nThat
                            can happen in a public park too. Why this abuse of analogies?\r\n\r\n>
                            I agree with this as well.  I don't agree with Matt that
                            mud owners\r\n> can act however they want -- but neither
                            do I agree with the idea that\r\n> a mud is a \"public
                            space.\"  It's a private space which the owner has\r\n>
                            chosen to allow the public into, for certain purposes.\r\n\r\nIt
                            is certainly private if it is by-invitation-only. However,
                            most MUDs\r\nare no more private than a web page. And,
                            as I have tried to point out,\r\nthere are significant
                            limits even on private spaces.\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                            maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                          epilogue: 
                          preamble: 
                      message_id: !ruby/object:MessageId
                        raw: "[invalid or missing message id]"
                      subject: !ruby/object:Subject
                        original: 'Re: [MUD-Dev] Community Relations'
                      from: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                      references: []
                      date: 2000-01-19 21:44:22.000000000 Z
                      no_archive: false
                    call_number: !ruby/object:CallNumber
                      str: JzBblxL6
                    source: archive
                    list: !ruby/object:List
                      slug: mud-dev
                      name: 
                      description: 
                      homepage: 
                      footer: 
                    message_id: *153
                  parent: *150
                  children:
                  - &340 !ruby/object:MessageContainer
                    key: &154 !ruby/object:MessageId
                      raw: JzBblxLc@generated-message-id.chibrary.org
                    value: !ruby/object:Message
                      email: !ruby/object:Email
                        raw: "From: \"Geoffrey A. MacDougall\" <geoffrey@poptronik.com>\nDate:
                          Wed, 19 Jan 2000 23:43:03 -0500\nSubject: RE: [MUD-Dev]
                          Community Relations\n\nThis message is in MIME format. Since
                          your mail reader does not understand\nthis format, some
                          or all of this message may not be legible.\n\n------_=_NextPart_001_01BF6300.DA9DCB00\nContent-Type:
                          text/plain;\n\tcharset=\"iso-8859-1\"\n\nI'd like to preface
                          this posting with the qualifying statement that my\nbackground
                          is in political theory, and I am therefore want to find
                          this\nstuff overwhelmingly interesting.  :)\n\nOla wrote:\n>
                          That is one of the weaknesses of democracy. Rather stable,
                          \n> but incapable\n> of changing, and when something changes
                          it does so in a \n> rather slow and\n> inefficient manner.\n\nActually,
                          that is a strength of democracy, not a weakness.  In fact,
                          most\nwestern democracies are designed to render the process
                          of implementing\nfundamental change as slow and as cumbersome
                          as possible.  Reason being that\nit limits any one group's
                          ability to implement change before there has been\nadequate
                          time to scrutinize those changes from every possible perspective,\ni.e.,
                          the dialectical process.  The US is a prime example.  The
                          Canadian\nsystem, through the use of \"party whips\", is
                          more susceptible to the tyranny\nof the majority.  (I am
                          Canadian, btw.)\n\nAuthoritative systems are the most agile
                          - but not always the in the right\nways. \n\nHaving said
                          this, however, I think it is also important to acknowledge
                          that\nvalue judgements pertaining to strengths and weaknesses
                          are highly context\nspecific.  It all depends upon what
                          it is you are trying to achieve.\n\nI won't go into further
                          detail because these points have already been\ntouched upon
                          earlier in this thread...\n\n\nMatt wrote:\n>Further, beneficial
                          to WHICH players? I think you'd have\n>a hard time finding
                          ANY wide-spread program that is beneficial to all the\n>players
                          (or citizens in a democracy). And again, define beneficial.
                          Is\n>giving money to the poor beneficial to them? Not such
                          an easy question to\n>answer.\n\nThat's because it's not
                          up to the provider to answer the question.  It's up\nto
                          the receiver to decide for themselves, and a good system
                          design will\naccomodate both positive and negative responses.\n\n>If
                          you are truly concerned about the players, then shut down
                          your\n>mud and urge them to go do things that will more
                          efficiently improve their\n>lives. I, for one, am not convined
                          that the players spending thousands of\n>dollars to play
                          my game are truly benefiting. They are enjoying\n>themselves,
                          but frankly, I suspect that they would benefit more in the\n>long
                          run from doing other things with the money and time. \n\nI
                          believe social interaction to be a benefit in and of itself.
                          \ And in\naccordance with my previous point, if your players
                          believe themselves to be\nbetter off, then they are.  If
                          you don't agree with their decision, then any\nresponsibility
                          you have to them begins, but also ends, with informing them\nthat
                          there _are_ alternatives.  Any other course of action would
                          imply that\nyou do not believe your players to have the
                          same capacity for decision\nmaking as you do.\n\n>The search
                          for a single system of\n>beliefs that is best for everyone
                          is futile.\n\nI wholeheartedly agree.  But implicit in that
                          statement is a belief that\nleads to a specific and universally
                          applicable conclusion about a preferred\ncourse of action,
                          and is therefore subject to dismissal by its own logic.\n\n>Isaiah
                          Berlin wrote an\n>excellent essay on this called 'The Pursuit
                          of the Ideal' in which he\n>talks about how most ethical
                          thinkers throughout time have implicitly (and\n>without
                          good reason) assumed that if only certainy could be established
                          in\n>our knowledgeof the external world by rational methods,
                          then surely the\n>same methods would yield equal certainty
                          when we speak of human behavior\n>-- what we should be,
                          and how we should live.\n\nI like this point because it
                          reaffirms my own assertion that there is no\nsuch thing
                          (beyond basic animal instinct) as human nature - and therefore\nany
                          attempts to design systems around premises such as \"humans
                          are basically\ngreedy\" are doomed to failure.\n\n>I'm not
                          a Christian, and I don't believe in God. I think the entire\n>concept
                          of natural rights is a joke. So where do these rights derive\n>from?
                          Your arguments, it seems to me, presuppose that the Christian\n>ethical
                          structure is right, and that is entirely as arbitrary as
                          any other\n>system of ethics.\n\nI am also an atheist, but
                          I *do* believe in rights...\"rights\" (in accordance\nwith
                          Dworkin's position) as trump cards against the will of government.\nGovernment,
                          in this case, representing a group that is empowered by
                          its\ncitizens to act on their behalf.  Rights - and I mean
                          civil rights - stem\nnot from God, but from the Social Contract
                          that one accepts by the act of\naffirming citizenship to
                          any given country - or, for country, read MUD.  By\naccepting
                          the social contract, you do not gain the right to perform
                          certain\nactions, but the right to be protected from others
                          wishing to perform acts\nupon you.\n\nTherefore, to answer
                          the question \"So where do these rights derive from?\" -\nThey
                          derive from the body populace of any given society.  They
                          are\nself-imposed and self-affirmed.  There is no need for
                          an external power.\nPeople grant rights to themselves.\n\nThe
                          nature of rights, therefore, has a fundamental and implicit
                          contradition\nthat renders them difficult to understand.
                          \ A right is an inalienable power\nthat I grant to someone
                          else to stop me from doing something.  If I grant\nit, how
                          can it be inalienable?  And how does any of this relate
                          to the\ndiscussion? :)\n\nWell...  The point I'd like to
                          make is that rights are not set in stone.\nThey are a function
                          of the needs and beliefs of the society from which they\noriginate.
                          \ Therefore, if a MUD player base acknowledges a right,
                          then they\nhave a right.  End of story.  These rights, therefore,
                          can be different for\nevery MUD.  You don't need to get
                          into abstract discussions of rw vs vw\nlegal jurisdiction.
                          \ If the MUD community says it is, it is.  That's their\nsocial
                          contract.  If a player base says that people cannot be banned,
                          then\npeople have the right not to be banned.\n\nThis is
                          all assuming, of course, that the admins choose to honour
                          the wishes\nof their players - and that depends upon whether
                          or not admins consider\nthemselves to be a part of the community.
                          \ If they are, then they have to\nrespect the rights of
                          the players, if they aren't, then who cares...\n\nBasically,
                          if a player understands the conditions under which they
                          surrender\ntheir personal freedom to the government of a
                          MUD, then all's fair.\n\n>Unlike in real life, where escaping\n>oppression
                          is hard, it is easy to escape oppression in a mud. Just\n>leave.\n\nA
                          number of leading thinkers in this field have already addressed
                          this\npoint, so I'll simply paraphrase.  Leaving an oppressive
                          rw or vw scenario\nrequires an individual to sacrifice,
                          among other things, their social\nnetwork.  If more people
                          were willing to desert their families and friends,\nthere
                          would be less oppressive rw environments.  The value most
                          people place\nupon meaningful social interaction is what
                          causes them to remain.  And\nassuming rw and vw social interaction
                          are equally rewarding, you have your\nanswer as to why people
                          are not free to \"just leave\" a MUD.\n\n\n\nSome thoughts...\n\nCheers,\n\nGeoffrey\n\n\n------_=_NextPart_001_01BF6300.DA9DCB00\nContent-Type:
                          text/html;\n\tcharset=\"iso-8859-1\"\nContent-Transfer-Encoding:
                          quoted-printable\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD
                          HTML 3.2//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=3D\"Content-Type\"
                          CONTENT=3D\"text/html; =\ncharset=3Diso-8859-1\">\n<META
                          NAME=3D\"Generator\" CONTENT=3D\"MS Exchange Server version
                          =\n5.5.2650.12\">\n<TITLE>RE: [MUD-Dev] Community Relations</TITLE>\n</HEAD>\n<BODY>\n\n<P><FONT
                          SIZE=3D2>I'd like to preface this posting with the qualifying
                          =\nstatement that my background is in political theory,
                          and I am therefore =\nwant to find this stuff overwhelmingly
                          interesting.&nbsp; :)</FONT></P>\n\n<P><FONT SIZE=3D2>Ola
                          wrote:</FONT>\n<BR><FONT SIZE=3D2>&gt; That is one of the
                          weaknesses of democracy. =\nRather stable, </FONT>\n<BR><FONT
                          SIZE=3D2>&gt; but incapable</FONT>\n<BR><FONT SIZE=3D2>&gt;
                          of changing, and when something changes it does =\nso in
                          a </FONT>\n<BR><FONT SIZE=3D2>&gt; rather slow and</FONT>\n<BR><FONT
                          SIZE=3D2>&gt; inefficient manner.</FONT>\n</P>\n\n<P><FONT
                          SIZE=3D2>Actually, that is a strength of democracy, not
                          a =\nweakness.&nbsp; In fact, most western democracies are
                          designed to =\nrender the process of implementing fundamental
                          change as slow and as =\ncumbersome as possible.&nbsp; Reason
                          being that it limits any one =\ngroup's ability to implement
                          change before there has been adequate time =\nto scrutinize
                          those changes from every possible perspective, i.e., the
                          =\ndialectical process.&nbsp; The US is a prime example.&nbsp;
                          The =\nCanadian system, through the use of &quot;party whips&quot;,
                          is more =\nsusceptible to the tyranny of the majority.&nbsp;
                          (I am Canadian, =\nbtw.)</FONT></P>\n\n<P><FONT SIZE=3D2>Authoritative
                          systems are the most agile - but not =\nalways the in the
                          right ways. </FONT>\n</P>\n\n<P><FONT SIZE=3D2>Having said
                          this, however, I think it is also =\nimportant to acknowledge
                          that value judgements pertaining to strengths =\nand weaknesses
                          are highly context specific.&nbsp; It all depends upon =\nwhat
                          it is you are trying to achieve.</FONT></P>\n\n<P><FONT
                          SIZE=3D2>I won't go into further detail because these points
                          =\nhave already been touched upon earlier in this thread...</FONT>\n</P>\n<BR>\n\n<P><FONT
                          SIZE=3D2>Matt wrote:</FONT>\n<BR><FONT SIZE=3D2>&gt;Further,
                          beneficial to WHICH players? I think =\nyou'd have</FONT>\n<BR><FONT
                          SIZE=3D2>&gt;a hard time finding ANY wide-spread program
                          that =\nis beneficial to all the</FONT>\n<BR><FONT SIZE=3D2>&gt;players
                          (or citizens in a democracy). And again, =\ndefine beneficial.
                          Is</FONT>\n<BR><FONT SIZE=3D2>&gt;giving money to the poor
                          beneficial to them? Not =\nsuch an easy question to</FONT>\n<BR><FONT
                          SIZE=3D2>&gt;answer.</FONT>\n</P>\n\n<P><FONT SIZE=3D2>That's
                          because it's not up to the provider to answer =\nthe question.&nbsp;
                          It's up to the receiver to decide for themselves, =\nand
                          a good system design will accomodate both positive and negative
                          =\nresponses.</FONT></P>\n\n<P><FONT SIZE=3D2>&gt;If you
                          are truly concerned about the players, =\nthen shut down
                          your</FONT>\n<BR><FONT SIZE=3D2>&gt;mud and urge them to
                          go do things that will more =\nefficiently improve their</FONT>\n<BR><FONT
                          SIZE=3D2>&gt;lives. I, for one, am not convined that the
                          =\nplayers spending thousands of</FONT>\n<BR><FONT SIZE=3D2>&gt;dollars
                          to play my game are truly benefiting. =\nThey are enjoying</FONT>\n<BR><FONT
                          SIZE=3D2>&gt;themselves, but frankly, I suspect that they
                          =\nwould benefit more in the</FONT>\n<BR><FONT SIZE=3D2>&gt;long
                          run from doing other things with the money =\nand time.
                          </FONT>\n</P>\n\n<P><FONT SIZE=3D2>I believe social interaction
                          to be a benefit in and =\nof itself.&nbsp; And in accordance
                          with my previous point, if your =\nplayers believe themselves
                          to be better off, then they are.&nbsp; If =\nyou don't agree
                          with their decision, then any&nbsp; responsibility you =\nhave
                          to them begins, but also ends, with informing them that
                          there =\n_are_ alternatives.&nbsp; Any other course of action
                          would imply that =\nyou do not believe your players to have
                          the same capacity for decision =\nmaking as you do.</FONT></P>\n\n<P><FONT
                          SIZE=3D2>&gt;The search for a single system of</FONT>\n<BR><FONT
                          SIZE=3D2>&gt;beliefs that is best for everyone is =\nfutile.</FONT>\n</P>\n\n<P><FONT
                          SIZE=3D2>I wholeheartedly agree.&nbsp; But implicit in that
                          =\nstatement is a belief that leads to a specific and universally
                          =\napplicable conclusion about a preferred course of action,
                          and is =\ntherefore subject to dismissal by its own logic.</FONT></P>\n\n<P><FONT
                          SIZE=3D2>&gt;Isaiah Berlin wrote an</FONT>\n<BR><FONT SIZE=3D2>&gt;excellent
                          essay on this called 'The Pursuit of =\nthe Ideal' in which
                          he</FONT>\n<BR><FONT SIZE=3D2>&gt;talks about how most ethical
                          thinkers throughout =\ntime have implicitly (and</FONT>\n<BR><FONT
                          SIZE=3D2>&gt;without good reason) assumed that if only =\ncertainy
                          could be established in</FONT>\n<BR><FONT SIZE=3D2>&gt;our
                          knowledgeof the external world by rational =\nmethods, then
                          surely the</FONT>\n<BR><FONT SIZE=3D2>&gt;same methods would
                          yield equal certainty when we =\nspeak of human behavior</FONT>\n<BR><FONT
                          SIZE=3D2>&gt;-- what we should be, and how we should =\nlive.</FONT>\n</P>\n\n<P><FONT
                          SIZE=3D2>I like this point because it reaffirms my own =\nassertion
                          that there is no such thing (beyond basic animal instinct)
                          as =\nhuman nature - and therefore any attempts to design
                          systems around =\npremises such as &quot;humans are basically
                          greedy&quot; are doomed to =\nfailure.</FONT></P>\n\n<P><FONT
                          SIZE=3D2>&gt;I'm not a Christian, and I don't believe in
                          God. =\nI think the entire</FONT>\n<BR><FONT SIZE=3D2>&gt;concept
                          of natural rights is a joke. So where do =\nthese rights
                          derive</FONT>\n<BR><FONT SIZE=3D2>&gt;from? Your arguments,
                          it seems to me, presuppose =\nthat the Christian</FONT>\n<BR><FONT
                          SIZE=3D2>&gt;ethical structure is right, and that is entirely
                          =\nas arbitrary as any other</FONT>\n<BR><FONT SIZE=3D2>&gt;system
                          of ethics.</FONT>\n</P>\n\n<P><FONT SIZE=3D2>I am also an
                          atheist, but I *do* believe in =\nrights...&quot;rights&quot;
                          (in accordance with Dworkin's position) as =\ntrump cards
                          against the will of government.&nbsp; Government, in this
                          =\ncase, representing a group that is empowered by its citizens
                          to act on =\ntheir behalf.&nbsp; Rights - and I mean civil
                          rights - stem not from =\nGod, but from the Social Contract
                          that one accepts by the act of =\naffirming citizenship
                          to any given country - or, for country, read =\nMUD.&nbsp;
                          By accepting the social contract, you do not gain the right
                          =\nto perform certain actions, but the right to be protected
                          from others =\nwishing to perform acts upon you.</FONT></P>\n\n<P><FONT
                          SIZE=3D2>Therefore, to answer the question &quot;So where
                          do =\nthese rights derive from?&quot; - They derive from
                          the body populace of =\nany given society.&nbsp; They are
                          self-imposed and self-affirmed.&nbsp; =\nThere is no need
                          for an external power.&nbsp; People grant rights to =\nthemselves.</FONT></P>\n\n<P><FONT
                          SIZE=3D2>The nature of rights, therefore, has a fundamental
                          =\nand implicit contradition that renders them difficult
                          to =\nunderstand.&nbsp; A right is an inalienable power
                          that I grant to =\nsomeone else to stop me from doing something.&nbsp;
                          If I grant it, how =\ncan it be inalienable?&nbsp; And how
                          does any of this relate to the =\ndiscussion? :)</FONT></P>\n\n<P><FONT
                          SIZE=3D2>Well...&nbsp; The point I'd like to make is that
                          =\nrights are not set in stone.&nbsp; They are a function
                          of the needs and =\nbeliefs of the society from which they
                          originate.&nbsp; Therefore, if a =\nMUD player base acknowledges
                          a right, then they have a right.&nbsp; End =\nof story.&nbsp;
                          These rights, therefore, can be different for every =\nMUD.&nbsp;
                          You don't need to get into abstract discussions of rw vs
                          vw =\nlegal jurisdiction.&nbsp; If the MUD community says
                          it is, it is.&nbsp; =\nThat's their social contract.&nbsp;
                          If a player base says that people =\ncannot be banned, then
                          people have the right not to be =\nbanned.</FONT></P>\n\n<P><FONT
                          SIZE=3D2>This is all assuming, of course, that the admins
                          =\nchoose to honour the wishes of their players - and that
                          depends upon =\nwhether or not admins consider themselves
                          to be a part of the =\ncommunity.&nbsp; If they are, then
                          they have to respect the rights of =\nthe players, if they
                          aren't, then who cares...</FONT></P>\n\n<P><FONT SIZE=3D2>Basically,
                          if a player understands the conditions =\nunder which they
                          surrender their personal freedom to the government of =\na
                          MUD, then all's fair.</FONT></P>\n\n<P><FONT SIZE=3D2>&gt;Unlike
                          in real life, where escaping</FONT>\n<BR><FONT SIZE=3D2>&gt;oppression
                          is hard, it is easy to escape =\noppression in a mud. Just</FONT>\n<BR><FONT
                          SIZE=3D2>&gt;leave.</FONT>\n</P>\n\n<P><FONT SIZE=3D2>A
                          number of leading thinkers in this field have =\nalready
                          addressed this point, so I'll simply paraphrase.&nbsp; Leaving
                          =\nan oppressive rw or vw scenario requires an individual
                          to sacrifice, =\namong other things, their social network.&nbsp;
                          If more people were =\nwilling to desert their families
                          and friends, there would be less =\noppressive rw environments.&nbsp;
                          The value most people place upon =\nmeaningful social interaction
                          is what causes them to remain.&nbsp; And =\nassuming rw
                          and vw social interaction are equally rewarding, you have
                          =\nyour answer as to why people are not free to &quot;just
                          leave&quot; a =\nMUD.</FONT></P>\n<BR>\n<BR>\n\n<P><FONT
                          SIZE=3D2>Some thoughts...</FONT>\n</P>\n\n<P><FONT SIZE=3D2>Cheers,</FONT>\n</P>\n\n<P><FONT
                          SIZE=3D2>Geoffrey</FONT>\n</P>\n\n</BODY>\n</HTML>\n------_=_NextPart_001_01BF6300.DA9DCB00--\n\n\n\n_______________________________________________\nMUD-Dev
                          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                        header: !ruby/object:Headers
                          rmail: !ruby/object:RMail::Message
                            header: !ruby/object:RMail::Header
                              fields:
                              - !ruby/object:RMail::Header::Field
                                raw: 'From: "Geoffrey A. MacDougall" <geoffrey@poptronik.com>'
                                name: From
                                value: '"Geoffrey A. MacDougall" <geoffrey@poptronik.com>'
                              - !ruby/object:RMail::Header::Field
                                raw: 'Date: Wed, 19 Jan 2000 23:43:03 -0500'
                                name: Date
                                value: Wed, 19 Jan 2000 23:43:03 -0500
                              - !ruby/object:RMail::Header::Field
                                raw: 'Subject: RE: [MUD-Dev] Community Relations'
                                name: Subject
                                value: 'RE: [MUD-Dev] Community Relations'
                              mbox_from: 
                            body: "This message is in MIME format. Since your mail
                              reader does not understand\nthis format, some or all
                              of this message may not be legible.\n\n------_=_NextPart_001_01BF6300.DA9DCB00\nContent-Type:
                              text/plain;\n\tcharset=\"iso-8859-1\"\n\nI'd like to
                              preface this posting with the qualifying statement that
                              my\nbackground is in political theory, and I am therefore
                              want to find this\nstuff overwhelmingly interesting.
                              \ :)\n\nOla wrote:\n> That is one of the weaknesses
                              of democracy. Rather stable, \n> but incapable\n> of
                              changing, and when something changes it does so in a
                              \n> rather slow and\n> inefficient manner.\n\nActually,
                              that is a strength of democracy, not a weakness.  In
                              fact, most\nwestern democracies are designed to render
                              the process of implementing\nfundamental change as slow
                              and as cumbersome as possible.  Reason being that\nit
                              limits any one group's ability to implement change before
                              there has been\nadequate time to scrutinize those changes
                              from every possible perspective,\ni.e., the dialectical
                              process.  The US is a prime example.  The Canadian\nsystem,
                              through the use of \"party whips\", is more susceptible
                              to the tyranny\nof the majority.  (I am Canadian, btw.)\n\nAuthoritative
                              systems are the most agile - but not always the in the
                              right\nways. \n\nHaving said this, however, I think
                              it is also important to acknowledge that\nvalue judgements
                              pertaining to strengths and weaknesses are highly context\nspecific.
                              \ It all depends upon what it is you are trying to achieve.\n\nI
                              won't go into further detail because these points have
                              already been\ntouched upon earlier in this thread...\n\n\nMatt
                              wrote:\n>Further, beneficial to WHICH players? I think
                              you'd have\n>a hard time finding ANY wide-spread program
                              that is beneficial to all the\n>players (or citizens
                              in a democracy). And again, define beneficial. Is\n>giving
                              money to the poor beneficial to them? Not such an easy
                              question to\n>answer.\n\nThat's because it's not up
                              to the provider to answer the question.  It's up\nto
                              the receiver to decide for themselves, and a good system
                              design will\naccomodate both positive and negative responses.\n\n>If
                              you are truly concerned about the players, then shut
                              down your\n>mud and urge them to go do things that will
                              more efficiently improve their\n>lives. I, for one,
                              am not convined that the players spending thousands
                              of\n>dollars to play my game are truly benefiting. They
                              are enjoying\n>themselves, but frankly, I suspect that
                              they would benefit more in the\n>long run from doing
                              other things with the money and time. \n\nI believe
                              social interaction to be a benefit in and of itself.
                              \ And in\naccordance with my previous point, if your
                              players believe themselves to be\nbetter off, then they
                              are.  If you don't agree with their decision, then any\nresponsibility
                              you have to them begins, but also ends, with informing
                              them\nthat there _are_ alternatives.  Any other course
                              of action would imply that\nyou do not believe your
                              players to have the same capacity for decision\nmaking
                              as you do.\n\n>The search for a single system of\n>beliefs
                              that is best for everyone is futile.\n\nI wholeheartedly
                              agree.  But implicit in that statement is a belief that\nleads
                              to a specific and universally applicable conclusion
                              about a preferred\ncourse of action, and is therefore
                              subject to dismissal by its own logic.\n\n>Isaiah Berlin
                              wrote an\n>excellent essay on this called 'The Pursuit
                              of the Ideal' in which he\n>talks about how most ethical
                              thinkers throughout time have implicitly (and\n>without
                              good reason) assumed that if only certainy could be
                              established in\n>our knowledgeof the external world
                              by rational methods, then surely the\n>same methods
                              would yield equal certainty when we speak of human behavior\n>--
                              what we should be, and how we should live.\n\nI like
                              this point because it reaffirms my own assertion that
                              there is no\nsuch thing (beyond basic animal instinct)
                              as human nature - and therefore\nany attempts to design
                              systems around premises such as \"humans are basically\ngreedy\"
                              are doomed to failure.\n\n>I'm not a Christian, and
                              I don't believe in God. I think the entire\n>concept
                              of natural rights is a joke. So where do these rights
                              derive\n>from? Your arguments, it seems to me, presuppose
                              that the Christian\n>ethical structure is right, and
                              that is entirely as arbitrary as any other\n>system
                              of ethics.\n\nI am also an atheist, but I *do* believe
                              in rights...\"rights\" (in accordance\nwith Dworkin's
                              position) as trump cards against the will of government.\nGovernment,
                              in this case, representing a group that is empowered
                              by its\ncitizens to act on their behalf.  Rights - and
                              I mean civil rights - stem\nnot from God, but from the
                              Social Contract that one accepts by the act of\naffirming
                              citizenship to any given country - or, for country,
                              read MUD.  By\naccepting the social contract, you do
                              not gain the right to perform certain\nactions, but
                              the right to be protected from others wishing to perform
                              acts\nupon you.\n\nTherefore, to answer the question
                              \"So where do these rights derive from?\" -\nThey derive
                              from the body populace of any given society.  They are\nself-imposed
                              and self-affirmed.  There is no need for an external
                              power.\nPeople grant rights to themselves.\n\nThe nature
                              of rights, therefore, has a fundamental and implicit
                              contradition\nthat renders them difficult to understand.
                              \ A right is an inalienable power\nthat I grant to someone
                              else to stop me from doing something.  If I grant\nit,
                              how can it be inalienable?  And how does any of this
                              relate to the\ndiscussion? :)\n\nWell...  The point
                              I'd like to make is that rights are not set in stone.\nThey
                              are a function of the needs and beliefs of the society
                              from which they\noriginate.  Therefore, if a MUD player
                              base acknowledges a right, then they\nhave a right.
                              \ End of story.  These rights, therefore, can be different
                              for\nevery MUD.  You don't need to get into abstract
                              discussions of rw vs vw\nlegal jurisdiction.  If the
                              MUD community says it is, it is.  That's their\nsocial
                              contract.  If a player base says that people cannot
                              be banned, then\npeople have the right not to be banned.\n\nThis
                              is all assuming, of course, that the admins choose to
                              honour the wishes\nof their players - and that depends
                              upon whether or not admins consider\nthemselves to be
                              a part of the community.  If they are, then they have
                              to\nrespect the rights of the players, if they aren't,
                              then who cares...\n\nBasically, if a player understands
                              the conditions under which they surrender\ntheir personal
                              freedom to the government of a MUD, then all's fair.\n\n>Unlike
                              in real life, where escaping\n>oppression is hard, it
                              is easy to escape oppression in a mud. Just\n>leave.\n\nA
                              number of leading thinkers in this field have already
                              addressed this\npoint, so I'll simply paraphrase.  Leaving
                              an oppressive rw or vw scenario\nrequires an individual
                              to sacrifice, among other things, their social\nnetwork.
                              \ If more people were willing to desert their families
                              and friends,\nthere would be less oppressive rw environments.
                              \ The value most people place\nupon meaningful social
                              interaction is what causes them to remain.  And\nassuming
                              rw and vw social interaction are equally rewarding,
                              you have your\nanswer as to why people are not free
                              to \"just leave\" a MUD.\n\n\n\nSome thoughts...\n\nCheers,\n\nGeoffrey\n\n\n------_=_NextPart_001_01BF6300.DA9DCB00\nContent-Type:
                              text/html;\n\tcharset=\"iso-8859-1\"\nContent-Transfer-Encoding:
                              quoted-printable\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD
                              HTML 3.2//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=3D\"Content-Type\"
                              CONTENT=3D\"text/html; =\ncharset=3Diso-8859-1\">\n<META
                              NAME=3D\"Generator\" CONTENT=3D\"MS Exchange Server
                              version =\n5.5.2650.12\">\n<TITLE>RE: [MUD-Dev] Community
                              Relations</TITLE>\n</HEAD>\n<BODY>\n\n<P><FONT SIZE=3D2>I'd
                              like to preface this posting with the qualifying =\nstatement
                              that my background is in political theory, and I am
                              therefore =\nwant to find this stuff overwhelmingly
                              interesting.&nbsp; :)</FONT></P>\n\n<P><FONT SIZE=3D2>Ola
                              wrote:</FONT>\n<BR><FONT SIZE=3D2>&gt; That is one of
                              the weaknesses of democracy. =\nRather stable, </FONT>\n<BR><FONT
                              SIZE=3D2>&gt; but incapable</FONT>\n<BR><FONT SIZE=3D2>&gt;
                              of changing, and when something changes it does =\nso
                              in a </FONT>\n<BR><FONT SIZE=3D2>&gt; rather slow and</FONT>\n<BR><FONT
                              SIZE=3D2>&gt; inefficient manner.</FONT>\n</P>\n\n<P><FONT
                              SIZE=3D2>Actually, that is a strength of democracy,
                              not a =\nweakness.&nbsp; In fact, most western democracies
                              are designed to =\nrender the process of implementing
                              fundamental change as slow and as =\ncumbersome as possible.&nbsp;
                              Reason being that it limits any one =\ngroup's ability
                              to implement change before there has been adequate time
                              =\nto scrutinize those changes from every possible perspective,
                              i.e., the =\ndialectical process.&nbsp; The US is a
                              prime example.&nbsp; The =\nCanadian system, through
                              the use of &quot;party whips&quot;, is more =\nsusceptible
                              to the tyranny of the majority.&nbsp; (I am Canadian,
                              =\nbtw.)</FONT></P>\n\n<P><FONT SIZE=3D2>Authoritative
                              systems are the most agile - but not =\nalways the in
                              the right ways. </FONT>\n</P>\n\n<P><FONT SIZE=3D2>Having
                              said this, however, I think it is also =\nimportant
                              to acknowledge that value judgements pertaining to strengths
                              =\nand weaknesses are highly context specific.&nbsp;
                              It all depends upon =\nwhat it is you are trying to
                              achieve.</FONT></P>\n\n<P><FONT SIZE=3D2>I won't go
                              into further detail because these points =\nhave already
                              been touched upon earlier in this thread...</FONT>\n</P>\n<BR>\n\n<P><FONT
                              SIZE=3D2>Matt wrote:</FONT>\n<BR><FONT SIZE=3D2>&gt;Further,
                              beneficial to WHICH players? I think =\nyou'd have</FONT>\n<BR><FONT
                              SIZE=3D2>&gt;a hard time finding ANY wide-spread program
                              that =\nis beneficial to all the</FONT>\n<BR><FONT SIZE=3D2>&gt;players
                              (or citizens in a democracy). And again, =\ndefine beneficial.
                              Is</FONT>\n<BR><FONT SIZE=3D2>&gt;giving money to the
                              poor beneficial to them? Not =\nsuch an easy question
                              to</FONT>\n<BR><FONT SIZE=3D2>&gt;answer.</FONT>\n</P>\n\n<P><FONT
                              SIZE=3D2>That's because it's not up to the provider
                              to answer =\nthe question.&nbsp; It's up to the receiver
                              to decide for themselves, =\nand a good system design
                              will accomodate both positive and negative =\nresponses.</FONT></P>\n\n<P><FONT
                              SIZE=3D2>&gt;If you are truly concerned about the players,
                              =\nthen shut down your</FONT>\n<BR><FONT SIZE=3D2>&gt;mud
                              and urge them to go do things that will more =\nefficiently
                              improve their</FONT>\n<BR><FONT SIZE=3D2>&gt;lives.
                              I, for one, am not convined that the =\nplayers spending
                              thousands of</FONT>\n<BR><FONT SIZE=3D2>&gt;dollars
                              to play my game are truly benefiting. =\nThey are enjoying</FONT>\n<BR><FONT
                              SIZE=3D2>&gt;themselves, but frankly, I suspect that
                              they =\nwould benefit more in the</FONT>\n<BR><FONT
                              SIZE=3D2>&gt;long run from doing other things with the
                              money =\nand time. </FONT>\n</P>\n\n<P><FONT SIZE=3D2>I
                              believe social interaction to be a benefit in and =\nof
                              itself.&nbsp; And in accordance with my previous point,
                              if your =\nplayers believe themselves to be better off,
                              then they are.&nbsp; If =\nyou don't agree with their
                              decision, then any&nbsp; responsibility you =\nhave
                              to them begins, but also ends, with informing them that
                              there =\n_are_ alternatives.&nbsp; Any other course
                              of action would imply that =\nyou do not believe your
                              players to have the same capacity for decision =\nmaking
                              as you do.</FONT></P>\n\n<P><FONT SIZE=3D2>&gt;The search
                              for a single system of</FONT>\n<BR><FONT SIZE=3D2>&gt;beliefs
                              that is best for everyone is =\nfutile.</FONT>\n</P>\n\n<P><FONT
                              SIZE=3D2>I wholeheartedly agree.&nbsp; But implicit
                              in that =\nstatement is a belief that leads to a specific
                              and universally =\napplicable conclusion about a preferred
                              course of action, and is =\ntherefore subject to dismissal
                              by its own logic.</FONT></P>\n\n<P><FONT SIZE=3D2>&gt;Isaiah
                              Berlin wrote an</FONT>\n<BR><FONT SIZE=3D2>&gt;excellent
                              essay on this called 'The Pursuit of =\nthe Ideal' in
                              which he</FONT>\n<BR><FONT SIZE=3D2>&gt;talks about
                              how most ethical thinkers throughout =\ntime have implicitly
                              (and</FONT>\n<BR><FONT SIZE=3D2>&gt;without good reason)
                              assumed that if only =\ncertainy could be established
                              in</FONT>\n<BR><FONT SIZE=3D2>&gt;our knowledgeof the
                              external world by rational =\nmethods, then surely the</FONT>\n<BR><FONT
                              SIZE=3D2>&gt;same methods would yield equal certainty
                              when we =\nspeak of human behavior</FONT>\n<BR><FONT
                              SIZE=3D2>&gt;-- what we should be, and how we should
                              =\nlive.</FONT>\n</P>\n\n<P><FONT SIZE=3D2>I like this
                              point because it reaffirms my own =\nassertion that
                              there is no such thing (beyond basic animal instinct)
                              as =\nhuman nature - and therefore any attempts to design
                              systems around =\npremises such as &quot;humans are
                              basically greedy&quot; are doomed to =\nfailure.</FONT></P>\n\n<P><FONT
                              SIZE=3D2>&gt;I'm not a Christian, and I don't believe
                              in God. =\nI think the entire</FONT>\n<BR><FONT SIZE=3D2>&gt;concept
                              of natural rights is a joke. So where do =\nthese rights
                              derive</FONT>\n<BR><FONT SIZE=3D2>&gt;from? Your arguments,
                              it seems to me, presuppose =\nthat the Christian</FONT>\n<BR><FONT
                              SIZE=3D2>&gt;ethical structure is right, and that is
                              entirely =\nas arbitrary as any other</FONT>\n<BR><FONT
                              SIZE=3D2>&gt;system of ethics.</FONT>\n</P>\n\n<P><FONT
                              SIZE=3D2>I am also an atheist, but I *do* believe in
                              =\nrights...&quot;rights&quot; (in accordance with Dworkin's
                              position) as =\ntrump cards against the will of government.&nbsp;
                              Government, in this =\ncase, representing a group that
                              is empowered by its citizens to act on =\ntheir behalf.&nbsp;
                              Rights - and I mean civil rights - stem not from =\nGod,
                              but from the Social Contract that one accepts by the
                              act of =\naffirming citizenship to any given country
                              - or, for country, read =\nMUD.&nbsp; By accepting the
                              social contract, you do not gain the right =\nto perform
                              certain actions, but the right to be protected from
                              others =\nwishing to perform acts upon you.</FONT></P>\n\n<P><FONT
                              SIZE=3D2>Therefore, to answer the question &quot;So
                              where do =\nthese rights derive from?&quot; - They derive
                              from the body populace of =\nany given society.&nbsp;
                              They are self-imposed and self-affirmed.&nbsp; =\nThere
                              is no need for an external power.&nbsp; People grant
                              rights to =\nthemselves.</FONT></P>\n\n<P><FONT SIZE=3D2>The
                              nature of rights, therefore, has a fundamental =\nand
                              implicit contradition that renders them difficult to
                              =\nunderstand.&nbsp; A right is an inalienable power
                              that I grant to =\nsomeone else to stop me from doing
                              something.&nbsp; If I grant it, how =\ncan it be inalienable?&nbsp;
                              And how does any of this relate to the =\ndiscussion?
                              :)</FONT></P>\n\n<P><FONT SIZE=3D2>Well...&nbsp; The
                              point I'd like to make is that =\nrights are not set
                              in stone.&nbsp; They are a function of the needs and
                              =\nbeliefs of the society from which they originate.&nbsp;
                              Therefore, if a =\nMUD player base acknowledges a right,
                              then they have a right.&nbsp; End =\nof story.&nbsp;
                              These rights, therefore, can be different for every
                              =\nMUD.&nbsp; You don't need to get into abstract discussions
                              of rw vs vw =\nlegal jurisdiction.&nbsp; If the MUD
                              community says it is, it is.&nbsp; =\nThat's their social
                              contract.&nbsp; If a player base says that people =\ncannot
                              be banned, then people have the right not to be =\nbanned.</FONT></P>\n\n<P><FONT
                              SIZE=3D2>This is all assuming, of course, that the admins
                              =\nchoose to honour the wishes of their players - and
                              that depends upon =\nwhether or not admins consider
                              themselves to be a part of the =\ncommunity.&nbsp; If
                              they are, then they have to respect the rights of =\nthe
                              players, if they aren't, then who cares...</FONT></P>\n\n<P><FONT
                              SIZE=3D2>Basically, if a player understands the conditions
                              =\nunder which they surrender their personal freedom
                              to the government of =\na MUD, then all's fair.</FONT></P>\n\n<P><FONT
                              SIZE=3D2>&gt;Unlike in real life, where escaping</FONT>\n<BR><FONT
                              SIZE=3D2>&gt;oppression is hard, it is easy to escape
                              =\noppression in a mud. Just</FONT>\n<BR><FONT SIZE=3D2>&gt;leave.</FONT>\n</P>\n\n<P><FONT
                              SIZE=3D2>A number of leading thinkers in this field
                              have =\nalready addressed this point, so I'll simply
                              paraphrase.&nbsp; Leaving =\nan oppressive rw or vw
                              scenario requires an individual to sacrifice, =\namong
                              other things, their social network.&nbsp; If more people
                              were =\nwilling to desert their families and friends,
                              there would be less =\noppressive rw environments.&nbsp;
                              The value most people place upon =\nmeaningful social
                              interaction is what causes them to remain.&nbsp; And
                              =\nassuming rw and vw social interaction are equally
                              rewarding, you have =\nyour answer as to why people
                              are not free to &quot;just leave&quot; a =\nMUD.</FONT></P>\n<BR>\n<BR>\n\n<P><FONT
                              SIZE=3D2>Some thoughts...</FONT>\n</P>\n\n<P><FONT SIZE=3D2>Cheers,</FONT>\n</P>\n\n<P><FONT
                              SIZE=3D2>Geoffrey</FONT>\n</P>\n\n</BODY>\n</HTML>\n------_=_NextPart_001_01BF6300.DA9DCB00--\n\n\n\n_______________________________________________\nMUD-Dev
                              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                            epilogue: 
                            preamble: 
                        message_id: !ruby/object:MessageId
                          raw: "[invalid or missing message id]"
                        subject: !ruby/object:Subject
                          original: 'RE: [MUD-Dev] Community Relations'
                        from: Geoffrey A. MacDougall <geoffrey@poptronik.com>
                        references: []
                        date: 2000-01-20 04:43:03.000000000 Z
                        no_archive: false
                      call_number: !ruby/object:CallNumber
                        str: JzBblxLc
                      source: archive
                      list: !ruby/object:List
                        slug: mud-dev
                        name: 
                        description: 
                        homepage: 
                        footer: 
                      message_id: *154
                    parent: *155
                    children: []
                  - &435 !ruby/object:MessageContainer
                    key: &156 !ruby/object:MessageId
                      raw: Jysr9C08@generated-message-id.chibrary.org
                    value: !ruby/object:Message
                      email: !ruby/object:Email
                        raw: |
                          From: Matthew Mihaly <diablo@best.com>
                          Date: Thu, 20 Jan 2000 19:53:47 -0800 (PST)
                          Subject: Re: [MUD-Dev] Community Relations

                          On Fri, 21 Jan 2000, Ola Fosheim [iso-8859-1] Gr=F8stad wrote:

                          > Travis Casey wrote:
                          >=20
                          > > Also, this implies that a mud is a private space -- if it were a
                          > > public space, I would not be within my rights to monitor private
                          > > transactions between people in it.  Thus, you are, in fact, arguing
                          > > against yourself.
                          >=20
                          > > I don't agree.  There's an old maxim -- your rights end where mine
                          > > begin.  I have the right to control access to a space I own; the fact
                          > > that you happen to meet people there does not affect that.
                          >=20
                          > Says who?  What kind of "right"? Why doesn't your rights end where mine
                          > begin?

                          I THINK he's referring to the traditional distinction between positive and
                          negative rights, ie the right TO something (positive) as opposed to the
                          right to be FREE from something (negative). That maxim is describing a
                          negative-rights-only situation, ie you can do what you want, as long as
                          you don't infringe upon me. Positive rights, on the other hand, not only
                          allow, but essentially require that some people suffer so that others may
                          get what they believe they have a "right" to (food, medical care,
                          whatever...anything that potentially requires forcing someone else to
                          work for you directly or indirectly).

                          > > To put it another way -- if you're abusive to the staff of a
                          > > restaurant, and the manager chooses to bar you from entering on that
                          > > basis, does the fact that you meet friends there mean that he's
                          > > interfering with your social life and cannot do that?
                          >=20
                          > Most people know their friends telephone and don't spend their life in
                          > said restaurant so this is not a common situation, and common or very
                          > dangerous situations is what law deals with. So maybe the analogy is a
                          > bad one? I don't think law reflect some kind of higher ethics in this
                          > case. Sometimes it does, sometimes it does not.

                          Ah hah! And most people know their mud friend's ICQ/AIM number and e-mail
                          address, so why should you ever feel bad about kickimg someone off a mud
                          if your concern is truly depriving them of their social environment?=20



                          > > I have no idea what The Palace is, so I can't comment on that.  And,
                          > > at no point have I said that a mud's staff can treat people like trash
                          >=20
                          > No, Matt basically did, and I figured that was the basic issue.  What
                          > kind of restrictions are there morally, ethically and if you want,
                          > legally.

                          Right, I definitely said that, and I stick by it 100%. What kind of
                          restrictions there are morally and ethically are completely up to the
                          individual in my opinion. To me, morals are not subject to tyranny of the
                          majority. Legally of course, is a different matter, as that actually has
                          an effect (whereas, as I've said many times earlier, believe they are
                          wrong all you want. It's completely irrelvant to their ability to keep
                          treating the players like trash.)

                          =20
                          > Caricatures may make things more visible. Legally, yes, most likely, but
                          > you can get away with lots of nasty thing legally. In moral and ethical
                          > terms, no way. Not just because someone interpreted what a player said
                          > as abusive.  I find it 100% acceptable for a worked up player to yell
                          > and whine for a while if the admins screw up. If the admins then choose
                          > to ban that player then I think he is doing it not because of the
                          > yelling and whining, but because it makes the mistake very real and very
                          > visible. That is not high standards in my book. Someone that kicks other
                          > people for a couple of hard words is basically not fit for having the
                          > kind of power over other people that a MUD affords.

                          In YOUR moral and ethical terms. Norway has a different legal system from
                          America. Is one more right or more wrong? No, they are just
                          different. Likewise, my moral system is different from yours. There isn't
                          some vast, universal two-dimensional scale on which we plot morals, so as
                          to say that this version of morality is better than that one. You might
                          say one is more efficient at attaining a particular goal (such as
                          retaining your player base) but I really don't see how you can say one is
                          better than another (unless you are a complete consequentialist, in which
                          case efficiency is where its at generally, but if that were the case, you
                          wouldn't bother speaking of Right and Wrong, as they are irrelevant, even
                          if you grant their existence (which I don't)).

                          =20
                          > Then add the fact that many muds are dull for the first 30 hours, and
                          > intentionally so. You invest 30 hours with the expectations of being
                          > paid back with entertainment later. As you can tell I don't think
                          > "money" is the most important issue when it comes to adding up costs! (I
                          > wonder if Matt considers money to be real, or is it imaginary?)

                          Given that everyone on this list, bar a few comments here and there, seems
                          to be willing to treat "reality" in a materialistic way, why don't we just
                          agree to do that. If anyone has a problem with that, that's fine, but it's
                          going to make entertaining ourselves with discussions like this a lot
                          harder. Money isn't the most important issue when it comes to adding up
                          costs, in my opinion. I would generally say that time is (to me), but how
                          I could compare the value of time vs. money is well beyond this
                          discussion.

                          Whether it costs the user or not is not important to me though, as it has
                          no bearing on whether a mud admin can treat his users like crap.

                          <snipped someting from Travis about "nowhere have I said that players have
                          more responsibility than mud admins">

                          I'll say it! Players have more responsibilty to the admins than the other
                          way around, UNLESS the admins _choose_ to take on responsibility. The
                          admin has methods of enforcing that responsibility (act in the way I
                          define was responsible towards me, or I'm going to messs you up), whereas
                          the players have none, unless the admins choose to give players that power
                          by starting to care about their player base, or by actually giving the
                          players some sort of real power over the admins, etc.


                          > Phone lines were not a necessity for businesses until phones existed.
                          > The same argument can be made for MUDs and any other communication
                          > technology. You depend on what you get used to.  For some reason
                          > something as volatile as money is considered to be more
                          > substantial/important then personal relationships...
                          =20
                          Just because something is necessary to accomplish something else doesn't
                          mean it is necessary in some universal sense. People say things like "I
                          need a new tv" but that's crap. They need new tvs if they want to enjoy
                          those new high-definition broadcasts. People say "I need food.", but no
                          one NEEDS food. You only need food if you want to continue living. This
                          may seem pedantic to you, but it's not. No one NEEDS a mud. A mud (or
                          anything else) is only needed IN ORDER to accomplish something else, such
                          as accomplishing maintaining your social network (in the case of a mud for
                          instance) or accomplishing carrying on with life (in the case of food).=20

                          So given that, who judges what are worthy goals? You say you need to play
                          MuchFunMud. Ok. I say I need a Ferrari. You need to play MuchFunMud in
                          order not to lose your social circle (or whatever) and thus avoid
                          potential pain. I could make the same argument for needing a Ferrari. I
                          can hear your objections already, based on the idea of dependence, but
                          again, dependence assumes certain goals. I depend on this IN ORDER to
                          accomplish this. So, why is your goal any more worth than mine? If you
                          want to force a mud admin to allow Bob to play, based on Bob's claim that
                          he needs to play in order to be happy, then I'd expect that next time I'm
                          in Norway, you'll buy me that Ferrari I've had my eye on, or, at the very
                          least, help me beat up the dealer and take it, because, damn it, I NEED
                          that Ferrari.


                          > > Did I say that?  No.  My point was that if using the mud's resources
                          > > to do something else, the mud admins have every right to ask that
                          > > person to leave, and if he/she will not leave to "throw him out."
                          >=20
                          > I hope this relies upon some kind of notion of reasonable?=20

                          I am an individual. Why should I care what your notion of reasonable is
                          (assuming you were a complete stranger), providing you aren't holding the
                          proverbial gun to my head. Abortion/infanticide (same thing to me) is very
                          reasonable to me, but other people disagree so strongly that they have
                          been known to shoot doctors who perform the abortions. Who is Right? I am
                          right, but I certainly don't have the arrogance to believe I'm
                          Right. (clarification: I'm using lower-case to denote personal preference
                          and upper case to denote the idea of an ethic that is somehow built into
                          the very fabric of creation).


                          > Right/wrong is not so much in action as it is in consequences... *shrug*
                          >=20

                          Oh boy, don't even get me started here....I'll just say that I disagree in
                          the strongest possible termsm, and leave it at that.
                          --matt




                          _______________________________________________
                          MUD-Dev maillist  -  MUD-Dev@kanga.nu
                          http://www.kanga.nu/lists/listinfo/mud-dev
                        header: !ruby/object:Headers
                          rmail: !ruby/object:RMail::Message
                            header: !ruby/object:RMail::Header
                              fields:
                              - !ruby/object:RMail::Header::Field
                                raw: 'From: Matthew Mihaly <diablo@best.com>'
                                name: From
                                value: Matthew Mihaly <diablo@best.com>
                              - !ruby/object:RMail::Header::Field
                                raw: 'Date: Thu, 20 Jan 2000 19:53:47 -0800 (PST)'
                                name: Date
                                value: Thu, 20 Jan 2000 19:53:47 -0800 (PST)
                              - !ruby/object:RMail::Header::Field
                                raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                name: Subject
                                value: 'Re: [MUD-Dev] Community Relations'
                              mbox_from: 
                            body: |
                              On Fri, 21 Jan 2000, Ola Fosheim [iso-8859-1] Gr=F8stad wrote:

                              > Travis Casey wrote:
                              >=20
                              > > Also, this implies that a mud is a private space -- if it were a
                              > > public space, I would not be within my rights to monitor private
                              > > transactions between people in it.  Thus, you are, in fact, arguing
                              > > against yourself.
                              >=20
                              > > I don't agree.  There's an old maxim -- your rights end where mine
                              > > begin.  I have the right to control access to a space I own; the fact
                              > > that you happen to meet people there does not affect that.
                              >=20
                              > Says who?  What kind of "right"? Why doesn't your rights end where mine
                              > begin?

                              I THINK he's referring to the traditional distinction between positive and
                              negative rights, ie the right TO something (positive) as opposed to the
                              right to be FREE from something (negative). That maxim is describing a
                              negative-rights-only situation, ie you can do what you want, as long as
                              you don't infringe upon me. Positive rights, on the other hand, not only
                              allow, but essentially require that some people suffer so that others may
                              get what they believe they have a "right" to (food, medical care,
                              whatever...anything that potentially requires forcing someone else to
                              work for you directly or indirectly).

                              > > To put it another way -- if you're abusive to the staff of a
                              > > restaurant, and the manager chooses to bar you from entering on that
                              > > basis, does the fact that you meet friends there mean that he's
                              > > interfering with your social life and cannot do that?
                              >=20
                              > Most people know their friends telephone and don't spend their life in
                              > said restaurant so this is not a common situation, and common or very
                              > dangerous situations is what law deals with. So maybe the analogy is a
                              > bad one? I don't think law reflect some kind of higher ethics in this
                              > case. Sometimes it does, sometimes it does not.

                              Ah hah! And most people know their mud friend's ICQ/AIM number and e-mail
                              address, so why should you ever feel bad about kickimg someone off a mud
                              if your concern is truly depriving them of their social environment?=20



                              > > I have no idea what The Palace is, so I can't comment on that.  And,
                              > > at no point have I said that a mud's staff can treat people like trash
                              >=20
                              > No, Matt basically did, and I figured that was the basic issue.  What
                              > kind of restrictions are there morally, ethically and if you want,
                              > legally.

                              Right, I definitely said that, and I stick by it 100%. What kind of
                              restrictions there are morally and ethically are completely up to the
                              individual in my opinion. To me, morals are not subject to tyranny of the
                              majority. Legally of course, is a different matter, as that actually has
                              an effect (whereas, as I've said many times earlier, believe they are
                              wrong all you want. It's completely irrelvant to their ability to keep
                              treating the players like trash.)

                              =20
                              > Caricatures may make things more visible. Legally, yes, most likely, but
                              > you can get away with lots of nasty thing legally. In moral and ethical
                              > terms, no way. Not just because someone interpreted what a player said
                              > as abusive.  I find it 100% acceptable for a worked up player to yell
                              > and whine for a while if the admins screw up. If the admins then choose
                              > to ban that player then I think he is doing it not because of the
                              > yelling and whining, but because it makes the mistake very real and very
                              > visible. That is not high standards in my book. Someone that kicks other
                              > people for a couple of hard words is basically not fit for having the
                              > kind of power over other people that a MUD affords.

                              In YOUR moral and ethical terms. Norway has a different legal system from
                              America. Is one more right or more wrong? No, they are just
                              different. Likewise, my moral system is different from yours. There isn't
                              some vast, universal two-dimensional scale on which we plot morals, so as
                              to say that this version of morality is better than that one. You might
                              say one is more efficient at attaining a particular goal (such as
                              retaining your player base) but I really don't see how you can say one is
                              better than another (unless you are a complete consequentialist, in which
                              case efficiency is where its at generally, but if that were the case, you
                              wouldn't bother speaking of Right and Wrong, as they are irrelevant, even
                              if you grant their existence (which I don't)).

                              =20
                              > Then add the fact that many muds are dull for the first 30 hours, and
                              > intentionally so. You invest 30 hours with the expectations of being
                              > paid back with entertainment later. As you can tell I don't think
                              > "money" is the most important issue when it comes to adding up costs! (I
                              > wonder if Matt considers money to be real, or is it imaginary?)

                              Given that everyone on this list, bar a few comments here and there, seems
                              to be willing to treat "reality" in a materialistic way, why don't we just
                              agree to do that. If anyone has a problem with that, that's fine, but it's
                              going to make entertaining ourselves with discussions like this a lot
                              harder. Money isn't the most important issue when it comes to adding up
                              costs, in my opinion. I would generally say that time is (to me), but how
                              I could compare the value of time vs. money is well beyond this
                              discussion.

                              Whether it costs the user or not is not important to me though, as it has
                              no bearing on whether a mud admin can treat his users like crap.

                              <snipped someting from Travis about "nowhere have I said that players have
                              more responsibility than mud admins">

                              I'll say it! Players have more responsibilty to the admins than the other
                              way around, UNLESS the admins _choose_ to take on responsibility. The
                              admin has methods of enforcing that responsibility (act in the way I
                              define was responsible towards me, or I'm going to messs you up), whereas
                              the players have none, unless the admins choose to give players that power
                              by starting to care about their player base, or by actually giving the
                              players some sort of real power over the admins, etc.


                              > Phone lines were not a necessity for businesses until phones existed.
                              > The same argument can be made for MUDs and any other communication
                              > technology. You depend on what you get used to.  For some reason
                              > something as volatile as money is considered to be more
                              > substantial/important then personal relationships...
                              =20
                              Just because something is necessary to accomplish something else doesn't
                              mean it is necessary in some universal sense. People say things like "I
                              need a new tv" but that's crap. They need new tvs if they want to enjoy
                              those new high-definition broadcasts. People say "I need food.", but no
                              one NEEDS food. You only need food if you want to continue living. This
                              may seem pedantic to you, but it's not. No one NEEDS a mud. A mud (or
                              anything else) is only needed IN ORDER to accomplish something else, such
                              as accomplishing maintaining your social network (in the case of a mud for
                              instance) or accomplishing carrying on with life (in the case of food).=20

                              So given that, who judges what are worthy goals? You say you need to play
                              MuchFunMud. Ok. I say I need a Ferrari. You need to play MuchFunMud in
                              order not to lose your social circle (or whatever) and thus avoid
                              potential pain. I could make the same argument for needing a Ferrari. I
                              can hear your objections already, based on the idea of dependence, but
                              again, dependence assumes certain goals. I depend on this IN ORDER to
                              accomplish this. So, why is your goal any more worth than mine? If you
                              want to force a mud admin to allow Bob to play, based on Bob's claim that
                              he needs to play in order to be happy, then I'd expect that next time I'm
                              in Norway, you'll buy me that Ferrari I've had my eye on, or, at the very
                              least, help me beat up the dealer and take it, because, damn it, I NEED
                              that Ferrari.


                              > > Did I say that?  No.  My point was that if using the mud's resources
                              > > to do something else, the mud admins have every right to ask that
                              > > person to leave, and if he/she will not leave to "throw him out."
                              >=20
                              > I hope this relies upon some kind of notion of reasonable?=20

                              I am an individual. Why should I care what your notion of reasonable is
                              (assuming you were a complete stranger), providing you aren't holding the
                              proverbial gun to my head. Abortion/infanticide (same thing to me) is very
                              reasonable to me, but other people disagree so strongly that they have
                              been known to shoot doctors who perform the abortions. Who is Right? I am
                              right, but I certainly don't have the arrogance to believe I'm
                              Right. (clarification: I'm using lower-case to denote personal preference
                              and upper case to denote the idea of an ethic that is somehow built into
                              the very fabric of creation).


                              > Right/wrong is not so much in action as it is in consequences... *shrug*
                              >=20

                              Oh boy, don't even get me started here....I'll just say that I disagree in
                              the strongest possible termsm, and leave it at that.
                              --matt




                              _______________________________________________
                              MUD-Dev maillist  -  MUD-Dev@kanga.nu
                              http://www.kanga.nu/lists/listinfo/mud-dev
                            epilogue: 
                            preamble: 
                        message_id: !ruby/object:MessageId
                          raw: "[invalid or missing message id]"
                        subject: !ruby/object:Subject
                          original: 'Re: [MUD-Dev] Community Relations'
                        from: Matthew Mihaly <diablo@best.com>
                        references: []
                        date: 2000-01-21 03:53:47.000000000 Z
                        no_archive: false
                      call_number: !ruby/object:CallNumber
                        str: Jysr9C08
                      source: archive
                      list: !ruby/object:List
                        slug: mud-dev
                        name: 
                        description: 
                        homepage: 
                        footer: 
                      message_id: *156
                    parent: *155
                    children: []
                  - &159 !ruby/object:MessageContainer
                    key: &157 !ruby/object:MessageId
                      raw: 00uTkcjY@generated-message-id.chibrary.org
                    value: !ruby/object:Message
                      email: !ruby/object:Email
                        raw: "From: Travis Casey <efindel@io.com>\nDate: Wed, 19 Jan
                          2000 21:54:27 -0500\nSubject: Re[2]: [MUD-Dev] Community
                          Relations\n\nOn Wednesday, January 19, 2000, Ola Fosheim
                          Gr��stad wrote:\r\n> Travis Casey wrote:\r\n\r\n>> Is a
                          mud a \"public facility?\"  Not all places that allow the
                          public in\r\n>> are \"public facilities\" -- for example,
                          most businesses allow the\r\n>> public in, but are private,
                          and have the full authority to throw\r\n>> people out who
                          are causing problems.\r\n\r\n> The librarian can tell you
                          to get out of the library if you refuse to\r\n> shut up,
                          yes???\r\n\r\nYes, he/she can.  There are some limits on
                          public spaces -- but those\r\nlimits are in place to ensure
                          that everyone can enjoy the space.  An\r\nowner of a private
                          facility can have you removed for any reason, or\r\nfor
                          no reason.\r\n\r\nTo put it another way, \"causing problems\"
                          is more general for a\r\nprivate facility -- your simply
                          *being there* can be considered to be\r\ncausing a problem,
                          even though you're not preventing anyone else from\r\ndoing
                          anything.\r\n\r\n> But you cant throw people out, not here,
                          and probably not over there\r\n> either. You can tell them
                          to go, but only the police are allowed to use\r\n> force.\r\n\r\nPurely
                          a semantic distinction; in common parlance, if I call the\r\npolice
                          to remove someone from my establishment, I have thrown them
                          out\r\n-- it doesn't matter that I didn't physically do
                          any throwing.\r\n\r\n> UNLESS using violence is less damaging
                          than whatever they are\r\n> doing.\r\n\r\nGently removing
                          someone and violence are two distinct things -- or\r\nelse
                          bars would not be able to legally have bouncers remove rowdy\r\npeople.\r\n\r\n>
                          You are not allowed to deny people access because of their
                          skin\r\n> colour, sexual habits etc in places that are open
                          to the public, in a\r\n> closed private space you obviously
                          can! However the space being closed\r\n> and private isn't
                          enough. If I have a well on my property, with a\r\n> warning
                          sign and a fence and somebody falls into it, I am still\r\n>
                          responsible. It was accessible. It should have been covered
                          and locked.\r\n> Similarly, I am not allowed to set up death
                          traps in my house to catch\r\n> thieves!\r\n\r\nHave I said
                          you should be able to?  Please argue against my points,\r\nrather
                          than a caricature of them.\r\n\r\n> If you run a mud and
                          you should have known that people were using it for\r\n>
                          exchanging child pornography and you did nothing about it,
                          you can in\r\n> fact be held legally responsible.\r\n\r\nThat
                          depends on local laws.  I'll note as well that the first
                          part of\r\nyour sentence does not logically go with the
                          second part -- if you\r\n*should have known*, which implies
                          you didn't know, then you can't do\r\nanything about it.
                          \ Now, it could be argued that you have a\r\nresponsibility
                          to know, but that's different from knowing and not\r\ndoing
                          anything.\r\n\r\nAlso, this implies that a mud is a private
                          space -- if it were a\r\npublic space, I would not be within
                          my rights to monitor private\r\ntransactions between people
                          in it.  Thus, you are, in fact, arguing\r\nagainst yourself.\r\n\r\n>>
                          I think we're getting away from the original idea here --
                          that of\r\n>> players who are insulting.  If you walk into
                          a store and start\r\n>> insulting managers and clerks, do
                          you think they'll let you stay long?\r\n\r\n> If I was a
                          regular customer and had reason to complain and it didn't\r\n>
                          create trouble for all the other customers... YES!  However,
                          being\r\n> thrown off a MUD is more like being thrown out
                          of social housing complex\r\n> and the country in which
                          that complex is located. You interfere with the\r\n> person's
                          private life, his social sphere.\r\n\r\nI don't agree.  There's
                          an old maxim -- your rights end where mine\r\nbegin.  I
                          have the right to control access to a space I own; the fact\r\nthat
                          you happen to meet people there does not affect that.\r\n\r\nTo
                          put it another way -- if you're abusive to the staff of
                          a\r\nrestaurant, and the manager chooses to bar you from
                          entering on that\r\nbasis, does the fact that you meet friends
                          there mean that he's\r\ninterfering with your social life
                          and cannot do that?\r\n\r\n>> (They might *if* you were
                          also buying a lot of things... but in the\r\n>> case of
                          a free mud, the concept of \"buying a lot of things\" doesn't\r\n>>
                          apply.)\r\n\r\n> So, why do you compare it to a business
                          that sells lots of things if it\r\n> is a bad analogy??\r\n\r\nI
                          don't think it's a bad analogy; I'm merely pointing out
                          that it's\r\nnot a perfect analogy.  Imperfect != bad.\r\n\r\n>
                          The Palace was free last time I used it. Does that mean
                          that they are\r\n> morally free to treat people like trash?
                          What about MUDs that make money\r\n> from in-world advertisements?
                          Are they free and beyond moral\r\n> obligations? Besides,
                          I don't see why those lousy 10USD should make all\r\n> the
                          difference.\r\n\r\nI have no idea what The Palace is, so
                          I can't comment on that.  And,\r\nat no point have I said
                          that a mud's staff can treat people like trash\r\n-- only
                          that a mud is not a public place, and they do have the right\r\nto
                          expel people who are abusive towards the staff (or towards
                          anyone\r\nelse).  Again, please argue against my arguments,
                          not against your own\r\ncaricatures of them.\r\n\r\n> Besides,
                          using a MUD is not free. That somebody loose money on it,
                          does\r\n> not make it free. Players do work, they do unpaid
                          betatesting! I pay for\r\n> phone lines, and connectivity.
                          I also loose time, and time is money.\r\n> Etc...  A free
                          pizza delivered on the door is free, takes no time, not\r\n>
                          additional costs etc. (Just trying to point out that free
                          and free and\r\n> free are different things)\r\n\r\nUsing
                          a free mud is free of charge.  One can equally argue that
                          a\r\npark is not free because you have to pay to get there,
                          and that you're\r\nspending time there.  One could also
                          argue that a free pizza is not\r\nfree, even if it's delivered
                          -- you've argued that time taken to enjoy\r\nsomething is
                          money, and it takes time to eat a pizza.\r\n\r\n>> mud admins.
                          \ Players who do abuse the mud admins (or anyone else on\r\n>>
                          the mud, really) should expect to be quickly shown the exit.\r\n\r\n>
                          I don't really think it matters what players _should_. That's
                          rather\r\n> pointless. You should expect whatever can be
                          expected from a section of\r\n> the population. If you open
                          a free playground you are assuming a greater\r\n> responsibility
                          than those that happen to see it and make use of it. \r\n>
                          Even in the legal sense.  That's the basic issue here.\r\n\r\nThe
                          basic issue where?  It's not germane to my points -- that
                          a mud is\r\na private space, not a public space, and that
                          mud admins should be\r\nable to bar people who are abusing
                          them from their mud.  Nowhere have\r\nI said that mud admins
                          don't have a greater responsibility than their\r\nplayers.\r\n\r\n>>
                          And, to get back to the original point, if someone comes
                          in, sits down\r\n>> at a table, and starts insulting one
                          of my volunteer GMs, or one or\r\n>> more players, I have
                          every right to throw that person out.\r\n\r\n> \"right\"?
                          \ What kind of right?  You don't need a reason legally to
                          deny\r\n> people access or to tell them to leave.\r\n\r\nExactly.
                          \ I don't need a reason, because it is my right.\r\n\r\n>
                          You can deny people access\r\n> because of their shoes if
                          you want to, but is it reasonable?\r\n\r\nNo.  Again, however,
                          I have not said that mud admins should throw\r\npeople out
                          on a whim.  Please argue against my arguments, not against\r\nyour
                          caricatures of them.\r\n\r\n> You are\r\n> focusing on the
                          wrong issue, that is what controls legal businesses in\r\n>
                          general. Is it acceptable for a phone company to cut off
                          your phone\r\n> lines, severely harming your business, just
                          because you yelled at their\r\n> operator for screwing up
                          badly?!\r\n\r\nThis is an extremely poor analogy.  Phone
                          companies (in the US in general,\r\nat least) are monopolies,
                          and therefore have greater restrictions put on\r\nthem.
                          \ Further, while phone lines are a necessity for a business,
                          I\r\nfind it hard to believe that anyone could seriously
                          consider access to\r\na particular mud to be a necessity
                          for a person.\r\n\r\n>> In the same way, a mud exists for
                          a specific purpose (or purposes).\r\n\r\n> And all purposes
                          are acceptable?\r\n\r\nDid I say that?  No.  My point was
                          that if using the mud's resources\r\nto do something else,
                          the mud admins have every right to ask that\r\nperson to
                          leave, and if he/she will not leave to \"throw him out.\"\r\n\r\n>>
                          Anyone who acts in a way that is disruptive to that can
                          be thrown out.\r\n\r\n> That can happen in a public park
                          too. Why this abuse of analogies?\r\n\r\nWhat analogy am
                          I abusing?  I specified the analogy that I did because\r\na
                          wider range of behaviors can be considered \"disruptive\"
                          in this\r\nsituation -- e.g., you can't throw people out
                          of a park for sitting\r\ndown and quietly talking to each
                          other.  You can throw people out of a\r\nbusiness for doing
                          that.  (Granted, it's not likely that a business\r\nowner
                          will do that in most circumstances -- but he/she can.)\r\n\r\n>>
                          I agree with this as well.  I don't agree with Matt that
                          mud owners\r\n>> can act however they want -- but neither
                          do I agree with the idea that\r\n>> a mud is a \"public
                          space.\"  It's a private space which the owner has\r\n>>
                          chosen to allow the public into, for certain purposes.\r\n\r\n>
                          It is certainly private if it is by-invitation-only. However,
                          most MUDs\r\n> are no more private than a web page. And,
                          as I have tried to point out,\r\n> there are significant
                          limits even on private spaces.\r\n\r\nWould you argue that
                          a business is not private because it allows\r\npeople to
                          walk in without an invitation?  Would you argue that my\r\nhouse
                          ceases to be a private space if I decide to hold an \"open
                          house\"\r\nwhile I'm trying to sell it?  A public space
                          is *not* simply a space\r\nthat the public is allowed access
                          to.\r\n\r\nUsing your analogy with a web page -- if a web
                          page is public, is it\r\nwrong to put up a CGI that denies
                          access to it to certain people,\r\nbecause those people
                          have abused that page in the past?\r\n\r\nAnd, again, I
                          have not said there should be no limits on how mud\r\nadmins
                          may behave.\r\n\r\n--\r\n       |\\      _,,,---,,_        Travis
                          S. Casey  <efindel@io.com>\r\n ZZzz  /,`.-'`'    -.  ;-;;,_
                          \  No one agrees with me.  Not even me.\r\n      |,4-  )
                          )-,_..;\\ (  `'-'\r\n     '---''(_/--'  `-'\\_)\r\n\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                          maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                        header: !ruby/object:Headers
                          rmail: !ruby/object:RMail::Message
                            header: !ruby/object:RMail::Header
                              fields:
                              - !ruby/object:RMail::Header::Field
                                raw: 'From: Travis Casey <efindel@io.com>'
                                name: From
                                value: Travis Casey <efindel@io.com>
                              - !ruby/object:RMail::Header::Field
                                raw: 'Date: Wed, 19 Jan 2000 21:54:27 -0500'
                                name: Date
                                value: Wed, 19 Jan 2000 21:54:27 -0500
                              - !ruby/object:RMail::Header::Field
                                raw: 'Subject: Re[2]: [MUD-Dev] Community Relations'
                                name: Subject
                                value: 'Re[2]: [MUD-Dev] Community Relations'
                              mbox_from: 
                            body: "On Wednesday, January 19, 2000, Ola Fosheim Gr��stad
                              wrote:\r\n> Travis Casey wrote:\r\n\r\n>> Is a mud a
                              \"public facility?\"  Not all places that allow the
                              public in\r\n>> are \"public facilities\" -- for example,
                              most businesses allow the\r\n>> public in, but are private,
                              and have the full authority to throw\r\n>> people out
                              who are causing problems.\r\n\r\n> The librarian can
                              tell you to get out of the library if you refuse to\r\n>
                              shut up, yes???\r\n\r\nYes, he/she can.  There are some
                              limits on public spaces -- but those\r\nlimits are in
                              place to ensure that everyone can enjoy the space.  An\r\nowner
                              of a private facility can have you removed for any reason,
                              or\r\nfor no reason.\r\n\r\nTo put it another way, \"causing
                              problems\" is more general for a\r\nprivate facility
                              -- your simply *being there* can be considered to be\r\ncausing
                              a problem, even though you're not preventing anyone
                              else from\r\ndoing anything.\r\n\r\n> But you cant throw
                              people out, not here, and probably not over there\r\n>
                              either. You can tell them to go, but only the police
                              are allowed to use\r\n> force.\r\n\r\nPurely a semantic
                              distinction; in common parlance, if I call the\r\npolice
                              to remove someone from my establishment, I have thrown
                              them out\r\n-- it doesn't matter that I didn't physically
                              do any throwing.\r\n\r\n> UNLESS using violence is less
                              damaging than whatever they are\r\n> doing.\r\n\r\nGently
                              removing someone and violence are two distinct things
                              -- or\r\nelse bars would not be able to legally have
                              bouncers remove rowdy\r\npeople.\r\n\r\n> You are not
                              allowed to deny people access because of their skin\r\n>
                              colour, sexual habits etc in places that are open to
                              the public, in a\r\n> closed private space you obviously
                              can! However the space being closed\r\n> and private
                              isn't enough. If I have a well on my property, with
                              a\r\n> warning sign and a fence and somebody falls into
                              it, I am still\r\n> responsible. It was accessible.
                              It should have been covered and locked.\r\n> Similarly,
                              I am not allowed to set up death traps in my house to
                              catch\r\n> thieves!\r\n\r\nHave I said you should be
                              able to?  Please argue against my points,\r\nrather
                              than a caricature of them.\r\n\r\n> If you run a mud
                              and you should have known that people were using it
                              for\r\n> exchanging child pornography and you did nothing
                              about it, you can in\r\n> fact be held legally responsible.\r\n\r\nThat
                              depends on local laws.  I'll note as well that the first
                              part of\r\nyour sentence does not logically go with
                              the second part -- if you\r\n*should have known*, which
                              implies you didn't know, then you can't do\r\nanything
                              about it.  Now, it could be argued that you have a\r\nresponsibility
                              to know, but that's different from knowing and not\r\ndoing
                              anything.\r\n\r\nAlso, this implies that a mud is a
                              private space -- if it were a\r\npublic space, I would
                              not be within my rights to monitor private\r\ntransactions
                              between people in it.  Thus, you are, in fact, arguing\r\nagainst
                              yourself.\r\n\r\n>> I think we're getting away from
                              the original idea here -- that of\r\n>> players who
                              are insulting.  If you walk into a store and start\r\n>>
                              insulting managers and clerks, do you think they'll
                              let you stay long?\r\n\r\n> If I was a regular customer
                              and had reason to complain and it didn't\r\n> create
                              trouble for all the other customers... YES!  However,
                              being\r\n> thrown off a MUD is more like being thrown
                              out of social housing complex\r\n> and the country in
                              which that complex is located. You interfere with the\r\n>
                              person's private life, his social sphere.\r\n\r\nI don't
                              agree.  There's an old maxim -- your rights end where
                              mine\r\nbegin.  I have the right to control access to
                              a space I own; the fact\r\nthat you happen to meet people
                              there does not affect that.\r\n\r\nTo put it another
                              way -- if you're abusive to the staff of a\r\nrestaurant,
                              and the manager chooses to bar you from entering on
                              that\r\nbasis, does the fact that you meet friends there
                              mean that he's\r\ninterfering with your social life
                              and cannot do that?\r\n\r\n>> (They might *if* you were
                              also buying a lot of things... but in the\r\n>> case
                              of a free mud, the concept of \"buying a lot of things\"
                              doesn't\r\n>> apply.)\r\n\r\n> So, why do you compare
                              it to a business that sells lots of things if it\r\n>
                              is a bad analogy??\r\n\r\nI don't think it's a bad analogy;
                              I'm merely pointing out that it's\r\nnot a perfect analogy.
                              \ Imperfect != bad.\r\n\r\n> The Palace was free last
                              time I used it. Does that mean that they are\r\n> morally
                              free to treat people like trash? What about MUDs that
                              make money\r\n> from in-world advertisements? Are they
                              free and beyond moral\r\n> obligations? Besides, I don't
                              see why those lousy 10USD should make all\r\n> the difference.\r\n\r\nI
                              have no idea what The Palace is, so I can't comment
                              on that.  And,\r\nat no point have I said that a mud's
                              staff can treat people like trash\r\n-- only that a
                              mud is not a public place, and they do have the right\r\nto
                              expel people who are abusive towards the staff (or towards
                              anyone\r\nelse).  Again, please argue against my arguments,
                              not against your own\r\ncaricatures of them.\r\n\r\n>
                              Besides, using a MUD is not free. That somebody loose
                              money on it, does\r\n> not make it free. Players do
                              work, they do unpaid betatesting! I pay for\r\n> phone
                              lines, and connectivity. I also loose time, and time
                              is money.\r\n> Etc...  A free pizza delivered on the
                              door is free, takes no time, not\r\n> additional costs
                              etc. (Just trying to point out that free and free and\r\n>
                              free are different things)\r\n\r\nUsing a free mud is
                              free of charge.  One can equally argue that a\r\npark
                              is not free because you have to pay to get there, and
                              that you're\r\nspending time there.  One could also
                              argue that a free pizza is not\r\nfree, even if it's
                              delivered -- you've argued that time taken to enjoy\r\nsomething
                              is money, and it takes time to eat a pizza.\r\n\r\n>>
                              mud admins.  Players who do abuse the mud admins (or
                              anyone else on\r\n>> the mud, really) should expect
                              to be quickly shown the exit.\r\n\r\n> I don't really
                              think it matters what players _should_. That's rather\r\n>
                              pointless. You should expect whatever can be expected
                              from a section of\r\n> the population. If you open a
                              free playground you are assuming a greater\r\n> responsibility
                              than those that happen to see it and make use of it.
                              \r\n> Even in the legal sense.  That's the basic issue
                              here.\r\n\r\nThe basic issue where?  It's not germane
                              to my points -- that a mud is\r\na private space, not
                              a public space, and that mud admins should be\r\nable
                              to bar people who are abusing them from their mud.  Nowhere
                              have\r\nI said that mud admins don't have a greater
                              responsibility than their\r\nplayers.\r\n\r\n>> And,
                              to get back to the original point, if someone comes
                              in, sits down\r\n>> at a table, and starts insulting
                              one of my volunteer GMs, or one or\r\n>> more players,
                              I have every right to throw that person out.\r\n\r\n>
                              \"right\"?  What kind of right?  You don't need a reason
                              legally to deny\r\n> people access or to tell them to
                              leave.\r\n\r\nExactly.  I don't need a reason, because
                              it is my right.\r\n\r\n> You can deny people access\r\n>
                              because of their shoes if you want to, but is it reasonable?\r\n\r\nNo.
                              \ Again, however, I have not said that mud admins should
                              throw\r\npeople out on a whim.  Please argue against
                              my arguments, not against\r\nyour caricatures of them.\r\n\r\n>
                              You are\r\n> focusing on the wrong issue, that is what
                              controls legal businesses in\r\n> general. Is it acceptable
                              for a phone company to cut off your phone\r\n> lines,
                              severely harming your business, just because you yelled
                              at their\r\n> operator for screwing up badly?!\r\n\r\nThis
                              is an extremely poor analogy.  Phone companies (in the
                              US in general,\r\nat least) are monopolies, and therefore
                              have greater restrictions put on\r\nthem.  Further,
                              while phone lines are a necessity for a business, I\r\nfind
                              it hard to believe that anyone could seriously consider
                              access to\r\na particular mud to be a necessity for
                              a person.\r\n\r\n>> In the same way, a mud exists for
                              a specific purpose (or purposes).\r\n\r\n> And all purposes
                              are acceptable?\r\n\r\nDid I say that?  No.  My point
                              was that if using the mud's resources\r\nto do something
                              else, the mud admins have every right to ask that\r\nperson
                              to leave, and if he/she will not leave to \"throw him
                              out.\"\r\n\r\n>> Anyone who acts in a way that is disruptive
                              to that can be thrown out.\r\n\r\n> That can happen
                              in a public park too. Why this abuse of analogies?\r\n\r\nWhat
                              analogy am I abusing?  I specified the analogy that
                              I did because\r\na wider range of behaviors can be considered
                              \"disruptive\" in this\r\nsituation -- e.g., you can't
                              throw people out of a park for sitting\r\ndown and quietly
                              talking to each other.  You can throw people out of
                              a\r\nbusiness for doing that.  (Granted, it's not likely
                              that a business\r\nowner will do that in most circumstances
                              -- but he/she can.)\r\n\r\n>> I agree with this as well.
                              \ I don't agree with Matt that mud owners\r\n>> can
                              act however they want -- but neither do I agree with
                              the idea that\r\n>> a mud is a \"public space.\"  It's
                              a private space which the owner has\r\n>> chosen to
                              allow the public into, for certain purposes.\r\n\r\n>
                              It is certainly private if it is by-invitation-only.
                              However, most MUDs\r\n> are no more private than a web
                              page. And, as I have tried to point out,\r\n> there
                              are significant limits even on private spaces.\r\n\r\nWould
                              you argue that a business is not private because it
                              allows\r\npeople to walk in without an invitation?  Would
                              you argue that my\r\nhouse ceases to be a private space
                              if I decide to hold an \"open house\"\r\nwhile I'm trying
                              to sell it?  A public space is *not* simply a space\r\nthat
                              the public is allowed access to.\r\n\r\nUsing your analogy
                              with a web page -- if a web page is public, is it\r\nwrong
                              to put up a CGI that denies access to it to certain
                              people,\r\nbecause those people have abused that page
                              in the past?\r\n\r\nAnd, again, I have not said there
                              should be no limits on how mud\r\nadmins may behave.\r\n\r\n--\r\n
                              \      |\\      _,,,---,,_        Travis S. Casey  <efindel@io.com>\r\n
                              ZZzz  /,`.-'`'    -.  ;-;;,_   No one agrees with me.
                              \ Not even me.\r\n      |,4-  ) )-,_..;\\ (  `'-'\r\n
                              \    '---''(_/--'  `-'\\_)\r\n\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                              maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                            epilogue: 
                            preamble: 
                        message_id: !ruby/object:MessageId
                          raw: "[invalid or missing message id]"
                        subject: !ruby/object:Subject
                          original: 'Re[2]: [MUD-Dev] Community Relations'
                        from: Travis Casey <efindel@io.com>
                        references: []
                        date: 2000-01-20 02:54:27.000000000 Z
                        no_archive: false
                      call_number: !ruby/object:CallNumber
                        str: 00uTkcjY
                      source: archive
                      list: !ruby/object:List
                        slug: mud-dev
                        name: 
                        description: 
                        homepage: 
                        footer: 
                      message_id: *157
                    parent: *155
                    children:
                    - &161 !ruby/object:MessageContainer
                      key: &158 !ruby/object:MessageId
                        raw: 00IySrb6@generated-message-id.chibrary.org
                      value: !ruby/object:Message
                        email: !ruby/object:Email
                          raw: "From: Rahul Sinha <rsinha@glue.umd.edu>\nDate: Thu,
                            20 Jan 2000 18:40:24 -0500 (EST)\nSubject: Re: Re[2]:
                            [MUD-Dev] Community Relations\n\nOn Wed, 19 Jan 2000,
                            Travis Casey wrote:\n\n> Is a mud a \"public facility?\"
                            \ Not all places that allow the public in\n> are \"public
                            facilities\" -- for example, most businesses allow the\n>
                            public in, but are private, and have the full authority
                            to throw\n> people out who are causing problems.\n\nTake
                            a mall, that is owned by a company Foo Inc.  Foo Inc's
                            office\nbuilding is not locked up during business hours,
                            so people can come in,\nbut the rules governing it are
                            very different than the rules governing the\nmall it owns.\n\nThe
                            legal dividing line (IANAL) is the intent.  While Foo
                            Inc assumes that\npeople with appointments with poeple
                            working there will enter its office\nbuilding, it assumes
                            that anyone will feel free to enter the mall.\n\nBut I
                            believe it is important to note that this is not the issue.
                            \ In\neither location, throwing them out because they
                            are Iranian (or Dutch) is\nillegal.  If I can prove that
                            I was thrown out because of my\nrace/religion/national
                            origin/etc. then they have violated the law and Bad\nThings
                            happen to them...\n\nWith a special exception for private
                            residences, you _have_ an obligation\nto not act on that
                            list of \"non-discriminables\".\n\nHow does this relate
                            to a mud?  Well so far a mud has not been ruled\n(legally)
                            as \"space\", but it is a service, and so is bound by
                            those rules.\nIt is important to note that those rules
                            apply to free organizations as\nwell as those that charge
                            for money.\n\nOn the other hand, so far we are not discussing
                            systematic discrimation\non the basis of the legally protected
                            attributes.  So we are not\ndiscussing the law.  Now we
                            get into morality (yay).\n\nIs it _right_ to be capricious?
                            \ Note that the question is _not_ whether\nyou have this
                            right or not.  You do.  (unless you are banning all the\nBahiains
                            (a religion) from your mud, in which case you need help)
                            The\nquestion is, do Good Mud Admins do this sort of thing.
                            (as any true BOFH\ncould care less about morality, and
                            to some extent, legality)\n\nSince legal proof is not
                            involved, you (no one in particular, the\ngeneralized
                            happy MUD-DEV-reading admin) have nothing to prove, public\nrelations
                            being totally beyond they scope of my post.  From my point
                            of\nview, if you intended the mud to be used by the public,
                            you should only\nban if they violate the user agreement,
                            or so endanger the mud community\n(not in terms of life
                            and limb, though those are included by all means,\nbut
                            the community in abstract) that you feel it is justified.\n\nBut
                            that last clause says it all.  This is wholly up to you.
                            \ Ideally\nyou post all the offenses that you feel are
                            important enough to warrant\naction (in the name of fairness)
                            and try to avoid punishing folk for\nunlisted items (if
                            they err, add it and the second strike earns them the\npenalty)
                            but that is up to you.\n\nIf it seems that I am saying
                            that any and all conduct is up to the admin,\nthat is
                            because it is.  We have rules about police conduct because
                            they\nhave power over us, without our individual consent.
                            \ Inherently the\nplayers are consenting to your administrating
                            their characters, or else\nthey would not have arrived.
                            \ This is a situation where every person who\nchooses
                            to be a player enters individually into a Lockean social
                            contract\n(one you can cancel at any time) and so the
                            \"form of government\" has more\nlegitimacy, regardless
                            of its features, than any that has every existed\nIRL
                            anywhere...\n\nOne caveat: user agreements are sometimes
                            refered to as contracts.  Be\nwise, protect your right
                            to be a BOFH and then you are safe from the law.\nAnd
                            ye shall earn what ye reap; if you abuse your players
                            they will leave.\n\n\t-RS\n\noh yeah, and these are all
                            my unfounded opinions, feel free to flame, just\nsend
                            them directly to me...\n\n\tRahul Sinha\nComputer Science/
                            Government,\nUniversity Of Maryland College Park\nAIM:
                            qui dire\tICQ: 9738191\t(301)935-5542\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                          header: !ruby/object:Headers
                            rmail: !ruby/object:RMail::Message
                              header: !ruby/object:RMail::Header
                                fields:
                                - !ruby/object:RMail::Header::Field
                                  raw: 'From: Rahul Sinha <rsinha@glue.umd.edu>'
                                  name: From
                                  value: Rahul Sinha <rsinha@glue.umd.edu>
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Date: Thu, 20 Jan 2000 18:40:24 -0500 (EST)'
                                  name: Date
                                  value: Thu, 20 Jan 2000 18:40:24 -0500 (EST)
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Subject: Re: Re[2]: [MUD-Dev] Community Relations'
                                  name: Subject
                                  value: 'Re: Re[2]: [MUD-Dev] Community Relations'
                                mbox_from: 
                              body: "On Wed, 19 Jan 2000, Travis Casey wrote:\n\n>
                                Is a mud a \"public facility?\"  Not all places that
                                allow the public in\n> are \"public facilities\" --
                                for example, most businesses allow the\n> public in,
                                but are private, and have the full authority to throw\n>
                                people out who are causing problems.\n\nTake a mall,
                                that is owned by a company Foo Inc.  Foo Inc's office\nbuilding
                                is not locked up during business hours, so people
                                can come in,\nbut the rules governing it are very
                                different than the rules governing the\nmall it owns.\n\nThe
                                legal dividing line (IANAL) is the intent.  While
                                Foo Inc assumes that\npeople with appointments with
                                poeple working there will enter its office\nbuilding,
                                it assumes that anyone will feel free to enter the
                                mall.\n\nBut I believe it is important to note that
                                this is not the issue.  In\neither location, throwing
                                them out because they are Iranian (or Dutch) is\nillegal.
                                \ If I can prove that I was thrown out because of
                                my\nrace/religion/national origin/etc. then they have
                                violated the law and Bad\nThings happen to them...\n\nWith
                                a special exception for private residences, you _have_
                                an obligation\nto not act on that list of \"non-discriminables\".\n\nHow
                                does this relate to a mud?  Well so far a mud has
                                not been ruled\n(legally) as \"space\", but it is
                                a service, and so is bound by those rules.\nIt is
                                important to note that those rules apply to free organizations
                                as\nwell as those that charge for money.\n\nOn the
                                other hand, so far we are not discussing systematic
                                discrimation\non the basis of the legally protected
                                attributes.  So we are not\ndiscussing the law.  Now
                                we get into morality (yay).\n\nIs it _right_ to be
                                capricious?  Note that the question is _not_ whether\nyou
                                have this right or not.  You do.  (unless you are
                                banning all the\nBahiains (a religion) from your mud,
                                in which case you need help) The\nquestion is, do
                                Good Mud Admins do this sort of thing. (as any true
                                BOFH\ncould care less about morality, and to some
                                extent, legality)\n\nSince legal proof is not involved,
                                you (no one in particular, the\ngeneralized happy
                                MUD-DEV-reading admin) have nothing to prove, public\nrelations
                                being totally beyond they scope of my post.  From
                                my point of\nview, if you intended the mud to be used
                                by the public, you should only\nban if they violate
                                the user agreement, or so endanger the mud community\n(not
                                in terms of life and limb, though those are included
                                by all means,\nbut the community in abstract) that
                                you feel it is justified.\n\nBut that last clause
                                says it all.  This is wholly up to you.  Ideally\nyou
                                post all the offenses that you feel are important
                                enough to warrant\naction (in the name of fairness)
                                and try to avoid punishing folk for\nunlisted items
                                (if they err, add it and the second strike earns them
                                the\npenalty) but that is up to you.\n\nIf it seems
                                that I am saying that any and all conduct is up to
                                the admin,\nthat is because it is.  We have rules
                                about police conduct because they\nhave power over
                                us, without our individual consent.  Inherently the\nplayers
                                are consenting to your administrating their characters,
                                or else\nthey would not have arrived.  This is a situation
                                where every person who\nchooses to be a player enters
                                individually into a Lockean social contract\n(one
                                you can cancel at any time) and so the \"form of government\"
                                has more\nlegitimacy, regardless of its features,
                                than any that has every existed\nIRL anywhere...\n\nOne
                                caveat: user agreements are sometimes refered to as
                                contracts.  Be\nwise, protect your right to be a BOFH
                                and then you are safe from the law.\nAnd ye shall
                                earn what ye reap; if you abuse your players they
                                will leave.\n\n\t-RS\n\noh yeah, and these are all
                                my unfounded opinions, feel free to flame, just\nsend
                                them directly to me...\n\n\tRahul Sinha\nComputer
                                Science/ Government,\nUniversity Of Maryland College
                                Park\nAIM: qui dire\tICQ: 9738191\t(301)935-5542\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                              epilogue: 
                              preamble: 
                          message_id: !ruby/object:MessageId
                            raw: "[invalid or missing message id]"
                          subject: !ruby/object:Subject
                            original: 'Re: Re[2]: [MUD-Dev] Community Relations'
                          from: Rahul Sinha <rsinha@glue.umd.edu>
                          references: []
                          date: 2000-01-20 23:40:24.000000000 Z
                          no_archive: false
                        call_number: !ruby/object:CallNumber
                          str: 00IySrb6
                        source: archive
                        list: !ruby/object:List
                          slug: mud-dev
                          name: 
                          description: 
                          homepage: 
                          footer: 
                        message_id: *158
                      parent: *159
                      children:
                      - &395 !ruby/object:MessageContainer
                        key: &160 !ruby/object:MessageId
                          raw: JzBSizZY@generated-message-id.chibrary.org
                        value: !ruby/object:Message
                          email: !ruby/object:Email
                            raw: "From: Matthew Mihaly <diablo@best.com>\nDate: Thu,
                              20 Jan 2000 16:00:08 -0800 (PST)\nSubject: Re: Re[2]:
                              [MUD-Dev] Community Relations\n\nOn Thu, 20 Jan 2000,
                              Rahul Sinha wrote:\n\n> But I believe it is important
                              to note that this is not the issue.  In\n> either location,
                              throwing them out because they are Iranian (or Dutch)
                              is\n> illegal.  If I can prove that I was thrown out
                              because of my\n> race/religion/national origin/etc.
                              then they have violated the law and Bad\n> Things happen
                              to them...\n\nYou mean it is illegal in some countries,
                              certainly not all.\n\n> Is it _right_ to be capricious?
                              \ Note that the question is _not_ whether\n> you have
                              this right or not.  You do.  (unless you are banning
                              all the\n> Bahiains (a religion) from your mud, in which
                              case you need help) The\n> question is, do Good Mud
                              Admins do this sort of thing. (as any true BOFH\n> could
                              care less about morality, and to some extent, legality)\n\nSee
                              my earlier responses to Raph and Ola demanding to know
                              if this\n\"rightness\" you speak of derives from anything
                              but arbitrary belief on\nyour part. Asking \"Is it _right_
                              to be capricious.\" is completely\nmeaningless unless
                              we all agree to work from the standpoint of the same\nmorality.
                              Clearly that's not the case. \n\n \n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                            header: !ruby/object:Headers
                              rmail: !ruby/object:RMail::Message
                                header: !ruby/object:RMail::Header
                                  fields:
                                  - !ruby/object:RMail::Header::Field
                                    raw: 'From: Matthew Mihaly <diablo@best.com>'
                                    name: From
                                    value: Matthew Mihaly <diablo@best.com>
                                  - !ruby/object:RMail::Header::Field
                                    raw: 'Date: Thu, 20 Jan 2000 16:00:08 -0800 (PST)'
                                    name: Date
                                    value: Thu, 20 Jan 2000 16:00:08 -0800 (PST)
                                  - !ruby/object:RMail::Header::Field
                                    raw: 'Subject: Re: Re[2]: [MUD-Dev] Community
                                      Relations'
                                    name: Subject
                                    value: 'Re: Re[2]: [MUD-Dev] Community Relations'
                                  mbox_from: 
                                body: "On Thu, 20 Jan 2000, Rahul Sinha wrote:\n\n>
                                  But I believe it is important to note that this
                                  is not the issue.  In\n> either location, throwing
                                  them out because they are Iranian (or Dutch) is\n>
                                  illegal.  If I can prove that I was thrown out because
                                  of my\n> race/religion/national origin/etc. then
                                  they have violated the law and Bad\n> Things happen
                                  to them...\n\nYou mean it is illegal in some countries,
                                  certainly not all.\n\n> Is it _right_ to be capricious?
                                  \ Note that the question is _not_ whether\n> you
                                  have this right or not.  You do.  (unless you are
                                  banning all the\n> Bahiains (a religion) from your
                                  mud, in which case you need help) The\n> question
                                  is, do Good Mud Admins do this sort of thing. (as
                                  any true BOFH\n> could care less about morality,
                                  and to some extent, legality)\n\nSee my earlier
                                  responses to Raph and Ola demanding to know if this\n\"rightness\"
                                  you speak of derives from anything but arbitrary
                                  belief on\nyour part. Asking \"Is it _right_ to
                                  be capricious.\" is completely\nmeaningless unless
                                  we all agree to work from the standpoint of the
                                  same\nmorality. Clearly that's not the case. \n\n
                                  \n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                                epilogue: 
                                preamble: 
                            message_id: !ruby/object:MessageId
                              raw: "[invalid or missing message id]"
                            subject: !ruby/object:Subject
                              original: 'Re: Re[2]: [MUD-Dev] Community Relations'
                            from: Matthew Mihaly <diablo@best.com>
                            references: []
                            date: 2000-01-21 00:00:08.000000000 Z
                            no_archive: false
                          call_number: !ruby/object:CallNumber
                            str: JzBSizZY
                          source: archive
                          list: !ruby/object:List
                            slug: mud-dev
                            name: 
                            description: 
                            homepage: 
                            footer: 
                          message_id: *160
                        parent: *161
                        children: []
            - &361 !ruby/object:MessageContainer
              key: &162 !ruby/object:MessageId
                raw: 00IySrZo@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: "From: \"Geoffrey A. MacDougall\" <geoffrey@poptronik.com>\nDate:
                    Sun, 23 Jan 2000 21:46:58 -0500\nSubject: RE: [MUD-Dev] Community
                    Relations\n\nThis message is in MIME format. Since your mail reader
                    does not understand\nthis format, some or all of this message
                    may not be legible.\n\n------_=_NextPart_001_01BF6615.4B8D52D0\nContent-Type:
                    text/plain;\n\tcharset=\"iso-8859-1\"\n\nmatt wrote:\n\n> I'm
                    curious, how do you (or do you propose) choose the \n> players?
                    It sounds\n> to me like you are talking about some sort of populist
                    democratic\n> system? (correct me if I'm wrong please.) What happens
                    when \n> they elect the\n> mud equivalent of hitler, and he decides
                    that all Dwarves \n> should be kicked\n> off. Or, worse yet, what
                    happens if the player who is at the \n> top of the\n> hierarchy
                    decides hr is going to quit, and is going to go out \n> with a
                    bang? \n\nChecks and balances.  Limitations on power.  Certain
                    acts require the\nconsent of multiple administrators...\n\n> I
                    suppose though that it's not completely a matter of \n> gettting
                    the best\n> administrators, but also of giving the playerbase
                    a feeling of\n> empowerment.\n\nInteresting phrasing - because
                    a _feeling_ of empowererment is, by\ndefinition, not necessarily
                    the same thing as empowerment.  Is it possible\nto grant a user
                    base the feeling of empowerment without actually\nsurrendering
                    control?\n\nHas this strategy ever been successfully applied?\n\n>
                    It's not\n> so easy as just letting them vote straight out though,
                    and \n> then vesting\n> all legislative/executive/judiciary power
                    in one hierarchy, \n> because you\n> will end up with tyranny
                    of the majority.\n\nAn effective charter of rights (as defined
                    in my previous posting) goes a\nlong way in avoiding these problems...\n\n>
                    That method is also \n> poor (and I\n> think this is a major failing
                    of American-style democracy) \n> because it does\n> not allow
                    people to indicate HOW strongly they feel about \n> something.
                    What\n> if 40% of your players are rabidly pro-player-killing,
                    \ 15% \n> are rabidly\n> anti-player-killing, 5% who don't really
                    care but if pressed will be\n> pro-player-killing because they
                    are speciest and want to kill all\n> Dwarves, and 40% don't really
                    care, but if pressed, will say\n> they are anti-player-killing,
                    because their aunt got killed once (by a\n> Dwarf, no doubt) when
                    she logged into a mud? (I'm not saying this is a\n> realistic
                    breakdown of this particular issue)\n> \n> So, let's define people
                    who are rabidly either way as being people who\n> care enough
                    to quit your mud if things go against them, while the ones\n>
                    more towards the middle might get a bit disgruntled, but \n> don't
                    care enough\n> to stop playing.\n> \n> Then, in this case, even
                    though, when it came to a straight vote, the\n> anti-player-killers
                    would win (assuming everyone votes, which \n> may be close\n>
                    or far from what actually happens, depending on how important
                    the\n> electorate takes politics), the anti-player-killers would
                    \n> win, with 55% of\n> the vote. However, this does not accurately
                    represent the way this\n> community thinks about things. In this
                    case, the majority \n> vote would cost\n> you 40% of your player-base,
                    while had it swung the other \n> day, only 15%\n> would have quit.
                    This is an extreme situation of course, but \n> the principle\n>
                    is applicable. How to resolve this issue is not simple. Books
                    \n> have been\n> written on how to avoid Madison's probolem of
                    majority tyranny.\n\nTwo points - \n\n1.  The problem you've just
                    outlined only arises if every member of the\ncommmunity is forced
                    to vote.  Voting, for the most part, is optional IRL.\nThe same
                    must be even more true in MUDs, because forcing a vote will\nalienate
                    the large majority of your players who are there to hack 'n slash\nor
                    chat, and who don't really care about the way the MUD is governed.
                    \ So,\nif, by your example, only 55% of your population holds
                    a strong opinion on\nthe matter, chances are that your voter turnout
                    will not be much more than\nthat.  (Assuming mildly-opinionated
                    voters will be balanced by\nstrongly-opinionated non-voters.)
                    \ So... To determined the interests of the\npopulation, hold a
                    vote.  To determine how strongly that opinion is held,\nmake voting
                    optional, or go one step further and make it a slight hassle to\nplace
                    your vote.  Only dedicated lobbyists will go to out-of game web-pages,\nand
                    jump though additional hoops to make their opinions known.\n\nThe
                    solution I've just proposed is not a particularly unique or original\none,
                    as the two variables I describe - the results of the vote, and
                    the\nnumber of voters - are already used by pundits in this very
                    manner.  In\nCanada, at least, voter turnout is relatively high
                    in federal elections,\nwhile very few people vote in municipal
                    elections.  This leads to the\nconclusion that international trade
                    policy is generally held to be more\nimportant, and elicit stronger
                    opinions then what day my garbage is\ncollected.  (No offense
                    to any would-be municipal politicians in this group.\n:p )\n\nHolding
                    separate ballots on different occassions for each issue is also
                    a\nway to ensure that people don't voice an opinion about issues
                    that they\ndon't really care about.\n\n> As\n> politically correct
                    as it is to hate special interest groups \n> in American\n> politics
                    (sorry to be nation-specific, but it's what I'm most familiar\n>
                    with), they do help to more accurately represent the true majority\n>
                    _preference_ of the community. They essentially magnify the \n>
                    influence of\n> their members by organizing and collection donations,
                    which \n> are then used\n> to affect the electoral process. They
                    effectively magnify the voice of\n> those who care enough to donate/participate
                    in the special interest\n> groups, thus reflecting that those
                    people care extra about \n> those issues.\n\nAnd 2.  Is there
                    a way to build this extra influence into the system?\n\nEx - Some
                    race car games artificially enhance the capabilities of vehicles\nbeing
                    driven by players who are falling off the pace.  The idea is to
                    level\nthe playing field, so that the players battle it out on
                    the turns throughout\nthe course of the entire race, instead of
                    having the race won off the\nstarting line - the assumption being
                    that the former scenario is more fun.\n\nIs this kind of idea
                    applicable in a MUD?  Avoid the tyranny of the majority\nby playing
                    with the odds to grant the minority an advantage?  This tactic
                    is\nalready applied on a micro scale - ex. NPCs don't help Necromancers
                    so make\ntheir spells more powerful - but can it be applied to
                    the community at\nlarge?\n\nCheers,\n\nGeoffrey\n\n------_=_NextPart_001_01BF6615.4B8D52D0\nContent-Type:
                    text/html;\n\tcharset=\"iso-8859-1\"\nContent-Transfer-Encoding:
                    quoted-printable\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<HTML>\n<HEAD>\n<META
                    HTTP-EQUIV=3D\"Content-Type\" CONTENT=3D\"text/html; =\ncharset=3Diso-8859-1\">\n<META
                    NAME=3D\"Generator\" CONTENT=3D\"MS Exchange Server version =\n5.5.2650.12\">\n<TITLE>RE:
                    [MUD-Dev] Community Relations</TITLE>\n</HEAD>\n<BODY>\n\n<P><FONT
                    SIZE=3D2>matt wrote:</FONT>\n</P>\n\n<P><FONT SIZE=3D2>&gt; I'm
                    curious, how do you (or do you propose) =\nchoose the </FONT>\n<BR><FONT
                    SIZE=3D2>&gt; players? It sounds</FONT>\n<BR><FONT SIZE=3D2>&gt;
                    to me like you are talking about some sort of =\npopulist democratic</FONT>\n<BR><FONT
                    SIZE=3D2>&gt; system? (correct me if I'm wrong please.) What =\nhappens
                    when </FONT>\n<BR><FONT SIZE=3D2>&gt; they elect the</FONT>\n<BR><FONT
                    SIZE=3D2>&gt; mud equivalent of hitler, and he decides that =\nall
                    Dwarves </FONT>\n<BR><FONT SIZE=3D2>&gt; should be kicked</FONT>\n<BR><FONT
                    SIZE=3D2>&gt; off. Or, worse yet, what happens if the player =\nwho
                    is at the </FONT>\n<BR><FONT SIZE=3D2>&gt; top of the</FONT>\n<BR><FONT
                    SIZE=3D2>&gt; hierarchy decides hr is going to quit, and is =\ngoing
                    to go out </FONT>\n<BR><FONT SIZE=3D2>&gt; with a bang? </FONT>\n</P>\n\n<P><FONT
                    SIZE=3D2>Checks and balances.&nbsp; Limitations on =\npower.&nbsp;
                    Certain acts require the consent of multiple =\nadministrators...</FONT>\n</P>\n\n<P><FONT
                    SIZE=3D2>&gt; I suppose though that it's not completely a =\nmatter
                    of </FONT>\n<BR><FONT SIZE=3D2>&gt; gettting the best</FONT>\n<BR><FONT
                    SIZE=3D2>&gt; administrators, but also of giving the =\nplayerbase
                    a feeling of</FONT>\n<BR><FONT SIZE=3D2>&gt; empowerment.</FONT>\n</P>\n\n<P><FONT
                    SIZE=3D2>Interesting phrasing - because a _feeling_ of =\nempowererment
                    is, by definition, not necessarily the same thing as =\nempowerment.&nbsp;
                    Is it possible to grant a user base the feeling of =\nempowerment
                    without actually surrendering control?</FONT></P>\n\n<P><FONT
                    SIZE=3D2>Has this strategy ever been successfully =\napplied?</FONT>\n</P>\n\n<P><FONT
                    SIZE=3D2>&gt; It's not</FONT>\n<BR><FONT SIZE=3D2>&gt; so easy
                    as just letting them vote straight out =\nthough, and </FONT>\n<BR><FONT
                    SIZE=3D2>&gt; then vesting</FONT>\n<BR><FONT SIZE=3D2>&gt; all
                    legislative/executive/judiciary power in =\none hierarchy, </FONT>\n<BR><FONT
                    SIZE=3D2>&gt; because you</FONT>\n<BR><FONT SIZE=3D2>&gt; will
                    end up with tyranny of the =\nmajority.</FONT>\n</P>\n\n<P><FONT
                    SIZE=3D2>An effective charter of rights (as defined in my =\nprevious
                    posting) goes a long way in avoiding these problems...</FONT>\n</P>\n\n<P><FONT
                    SIZE=3D2>&gt; That method is also </FONT>\n<BR><FONT SIZE=3D2>&gt;
                    poor (and I</FONT>\n<BR><FONT SIZE=3D2>&gt; think this is a major
                    failing of American-style =\ndemocracy) </FONT>\n<BR><FONT SIZE=3D2>&gt;
                    because it does</FONT>\n<BR><FONT SIZE=3D2>&gt; not allow people
                    to indicate HOW strongly they =\nfeel about </FONT>\n<BR><FONT
                    SIZE=3D2>&gt; something. What</FONT>\n<BR><FONT SIZE=3D2>&gt;
                    if 40% of your players are rabidly =\npro-player-killing,&nbsp;
                    15% </FONT>\n<BR><FONT SIZE=3D2>&gt; are rabidly</FONT>\n<BR><FONT
                    SIZE=3D2>&gt; anti-player-killing, 5% who don't really care =\nbut
                    if pressed will be</FONT>\n<BR><FONT SIZE=3D2>&gt; pro-player-killing
                    because they are speciest =\nand want to kill all</FONT>\n<BR><FONT
                    SIZE=3D2>&gt; Dwarves, and 40% don't really care, but if =\npressed,
                    will say</FONT>\n<BR><FONT SIZE=3D2>&gt; they are anti-player-killing,
                    because their =\naunt got killed once (by a</FONT>\n<BR><FONT
                    SIZE=3D2>&gt; Dwarf, no doubt) when she logged into a mud? =\n(I'm
                    not saying this is a</FONT>\n<BR><FONT SIZE=3D2>&gt; realistic
                    breakdown of this particular =\nissue)</FONT>\n<BR><FONT SIZE=3D2>&gt;
                    </FONT>\n<BR><FONT SIZE=3D2>&gt; So, let's define people who are
                    rabidly either =\nway as being people who</FONT>\n<BR><FONT SIZE=3D2>&gt;
                    care enough to quit your mud if things go =\nagainst them, while
                    the ones</FONT>\n<BR><FONT SIZE=3D2>&gt; more towards the middle
                    might get a bit =\ndisgruntled, but </FONT>\n<BR><FONT SIZE=3D2>&gt;
                    don't care enough</FONT>\n<BR><FONT SIZE=3D2>&gt; to stop playing.</FONT>\n<BR><FONT
                    SIZE=3D2>&gt; </FONT>\n<BR><FONT SIZE=3D2>&gt; Then, in this case,
                    even though, when it came =\nto a straight vote, the</FONT>\n<BR><FONT
                    SIZE=3D2>&gt; anti-player-killers would win (assuming =\neveryone
                    votes, which </FONT>\n<BR><FONT SIZE=3D2>&gt; may be close</FONT>\n<BR><FONT
                    SIZE=3D2>&gt; or far from what actually happens, depending on
                    =\nhow important the</FONT>\n<BR><FONT SIZE=3D2>&gt; electorate
                    takes politics), the =\nanti-player-killers would </FONT>\n<BR><FONT
                    SIZE=3D2>&gt; win, with 55% of</FONT>\n<BR><FONT SIZE=3D2>&gt;
                    the vote. However, this does not accurately =\nrepresent the way
                    this</FONT>\n<BR><FONT SIZE=3D2>&gt; community thinks about things.
                    In this case, =\nthe majority </FONT>\n<BR><FONT SIZE=3D2>&gt;
                    vote would cost</FONT>\n<BR><FONT SIZE=3D2>&gt; you 40% of your
                    player-base, while had it swung =\nthe other </FONT>\n<BR><FONT
                    SIZE=3D2>&gt; day, only 15%</FONT>\n<BR><FONT SIZE=3D2>&gt; would
                    have quit. This is an extreme situation =\nof course, but </FONT>\n<BR><FONT
                    SIZE=3D2>&gt; the principle</FONT>\n<BR><FONT SIZE=3D2>&gt; is
                    applicable. How to resolve this issue is not =\nsimple. Books
                    </FONT>\n<BR><FONT SIZE=3D2>&gt; have been</FONT>\n<BR><FONT SIZE=3D2>&gt;
                    written on how to avoid Madison's probolem of =\nmajority tyranny.</FONT>\n</P>\n\n<P><FONT
                    SIZE=3D2>Two points - </FONT>\n</P>\n\n<P><FONT SIZE=3D2>1.&nbsp;
                    The problem you've just outlined only arises =\nif every member
                    of the commmunity is forced to vote.&nbsp; Voting, for =\nthe
                    most part, is optional IRL.&nbsp; The same must be even more true
                    =\nin MUDs, because forcing a vote will alienate the large majority
                    of =\nyour players who are there to hack 'n slash or chat, and
                    who don't =\nreally care about the way the MUD is governed.&nbsp;
                    So, if, by your =\nexample, only 55% of your population holds
                    a strong opinion on the =\nmatter, chances are that your voter
                    turnout will not be much more than =\nthat.&nbsp; (Assuming mildly-opinionated
                    voters will be balanced by =\nstrongly-opinionated non-voters.)&nbsp;
                    So... To determined the =\ninterests of the population, hold a
                    vote.&nbsp; To determine how =\nstrongly that opinion is held,
                    make voting optional, or go one step =\nfurther and make it a
                    slight hassle to place your vote.&nbsp; Only =\ndedicated lobbyists
                    will go to out-of game web-pages, and jump though =\nadditional
                    hoops to make their opinions known.</FONT></P>\n\n<P><FONT SIZE=3D2>The
                    solution I've just proposed is not a particularly =\nunique or
                    original one, as the two variables I describe - the results =\nof
                    the vote, and the number of voters - are already used by pundits
                    in =\nthis very manner.&nbsp; In Canada, at least, voter turnout
                    is =\nrelatively high in federal elections, while very few people
                    vote in =\nmunicipal elections.&nbsp; This leads to the conclusion
                    that =\ninternational trade policy is generally held to be more
                    important, and =\nelicit stronger opinions then what day my garbage
                    is collected.&nbsp; =\n(No offense to any would-be municipal politicians
                    in this group. :p =\n)</FONT></P>\n\n<P><FONT SIZE=3D2>Holding
                    separate ballots on different occassions for =\neach issue is
                    also a way to ensure that people don't voice an opinion =\nabout
                    issues that they don't really care about.</FONT></P>\n\n<P><FONT
                    SIZE=3D2>&gt; As</FONT>\n<BR><FONT SIZE=3D2>&gt; politically correct
                    as it is to hate special =\ninterest groups </FONT>\n<BR><FONT
                    SIZE=3D2>&gt; in American</FONT>\n<BR><FONT SIZE=3D2>&gt; politics
                    (sorry to be nation-specific, but it's =\nwhat I'm most familiar</FONT>\n<BR><FONT
                    SIZE=3D2>&gt; with), they do help to more accurately =\nrepresent
                    the true majority</FONT>\n<BR><FONT SIZE=3D2>&gt; _preference_
                    of the community. They essentially =\nmagnify the </FONT>\n<BR><FONT
                    SIZE=3D2>&gt; influence of</FONT>\n<BR><FONT SIZE=3D2>&gt; their
                    members by organizing and collection =\ndonations, which </FONT>\n<BR><FONT
                    SIZE=3D2>&gt; are then used</FONT>\n<BR><FONT SIZE=3D2>&gt; to
                    affect the electoral process. They =\neffectively magnify the
                    voice of</FONT>\n<BR><FONT SIZE=3D2>&gt; those who care enough
                    to donate/participate in =\nthe special interest</FONT>\n<BR><FONT
                    SIZE=3D2>&gt; groups, thus reflecting that those people care =\nextra
                    about </FONT>\n<BR><FONT SIZE=3D2>&gt; those issues.</FONT>\n</P>\n\n<P><FONT
                    SIZE=3D2>And 2.&nbsp; Is there a way to build this extra =\ninfluence
                    into the system?</FONT>\n</P>\n\n<P><FONT SIZE=3D2>Ex - Some race
                    car games artificially enhance the =\ncapabilities of vehicles
                    being driven by players who are falling off =\nthe pace.&nbsp;
                    The idea is to level the playing field, so that the =\nplayers
                    battle it out on the turns throughout the course of the entire
                    =\nrace, instead of having the race won off the starting line
                    - the =\nassumption being that the former scenario is more fun.</FONT></P>\n\n<P><FONT
                    SIZE=3D2>Is this kind of idea applicable in a MUD?&nbsp; Avoid
                    =\nthe tyranny of the majority by playing with the odds to grant
                    the =\nminority an advantage?&nbsp; This tactic is already applied
                    on a micro =\nscale - ex. NPCs don't help Necromancers so make
                    their spells more =\npowerful - but can it be applied to the community
                    at large?</FONT></P>\n\n<P><FONT SIZE=3D2>Cheers,</FONT>\n</P>\n\n<P><FONT
                    SIZE=3D2>Geoffrey</FONT>\n</P>\n\n</BODY>\n</HTML>\n------_=_NextPart_001_01BF6615.4B8D52D0--\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: "Geoffrey A. MacDougall" <geoffrey@poptronik.com>'
                          name: From
                          value: '"Geoffrey A. MacDougall" <geoffrey@poptronik.com>'
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Sun, 23 Jan 2000 21:46:58 -0500'
                          name: Date
                          value: Sun, 23 Jan 2000 21:46:58 -0500
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: RE: [MUD-Dev] Community Relations'
                          name: Subject
                          value: 'RE: [MUD-Dev] Community Relations'
                        mbox_from: 
                      body: "This message is in MIME format. Since your mail reader
                        does not understand\nthis format, some or all of this message
                        may not be legible.\n\n------_=_NextPart_001_01BF6615.4B8D52D0\nContent-Type:
                        text/plain;\n\tcharset=\"iso-8859-1\"\n\nmatt wrote:\n\n>
                        I'm curious, how do you (or do you propose) choose the \n>
                        players? It sounds\n> to me like you are talking about some
                        sort of populist democratic\n> system? (correct me if I'm
                        wrong please.) What happens when \n> they elect the\n> mud
                        equivalent of hitler, and he decides that all Dwarves \n>
                        should be kicked\n> off. Or, worse yet, what happens if the
                        player who is at the \n> top of the\n> hierarchy decides hr
                        is going to quit, and is going to go out \n> with a bang?
                        \n\nChecks and balances.  Limitations on power.  Certain acts
                        require the\nconsent of multiple administrators...\n\n> I
                        suppose though that it's not completely a matter of \n> gettting
                        the best\n> administrators, but also of giving the playerbase
                        a feeling of\n> empowerment.\n\nInteresting phrasing - because
                        a _feeling_ of empowererment is, by\ndefinition, not necessarily
                        the same thing as empowerment.  Is it possible\nto grant a
                        user base the feeling of empowerment without actually\nsurrendering
                        control?\n\nHas this strategy ever been successfully applied?\n\n>
                        It's not\n> so easy as just letting them vote straight out
                        though, and \n> then vesting\n> all legislative/executive/judiciary
                        power in one hierarchy, \n> because you\n> will end up with
                        tyranny of the majority.\n\nAn effective charter of rights
                        (as defined in my previous posting) goes a\nlong way in avoiding
                        these problems...\n\n> That method is also \n> poor (and I\n>
                        think this is a major failing of American-style democracy)
                        \n> because it does\n> not allow people to indicate HOW strongly
                        they feel about \n> something. What\n> if 40% of your players
                        are rabidly pro-player-killing,  15% \n> are rabidly\n> anti-player-killing,
                        5% who don't really care but if pressed will be\n> pro-player-killing
                        because they are speciest and want to kill all\n> Dwarves,
                        and 40% don't really care, but if pressed, will say\n> they
                        are anti-player-killing, because their aunt got killed once
                        (by a\n> Dwarf, no doubt) when she logged into a mud? (I'm
                        not saying this is a\n> realistic breakdown of this particular
                        issue)\n> \n> So, let's define people who are rabidly either
                        way as being people who\n> care enough to quit your mud if
                        things go against them, while the ones\n> more towards the
                        middle might get a bit disgruntled, but \n> don't care enough\n>
                        to stop playing.\n> \n> Then, in this case, even though, when
                        it came to a straight vote, the\n> anti-player-killers would
                        win (assuming everyone votes, which \n> may be close\n> or
                        far from what actually happens, depending on how important
                        the\n> electorate takes politics), the anti-player-killers
                        would \n> win, with 55% of\n> the vote. However, this does
                        not accurately represent the way this\n> community thinks
                        about things. In this case, the majority \n> vote would cost\n>
                        you 40% of your player-base, while had it swung the other
                        \n> day, only 15%\n> would have quit. This is an extreme situation
                        of course, but \n> the principle\n> is applicable. How to
                        resolve this issue is not simple. Books \n> have been\n> written
                        on how to avoid Madison's probolem of majority tyranny.\n\nTwo
                        points - \n\n1.  The problem you've just outlined only arises
                        if every member of the\ncommmunity is forced to vote.  Voting,
                        for the most part, is optional IRL.\nThe same must be even
                        more true in MUDs, because forcing a vote will\nalienate the
                        large majority of your players who are there to hack 'n slash\nor
                        chat, and who don't really care about the way the MUD is governed.
                        \ So,\nif, by your example, only 55% of your population holds
                        a strong opinion on\nthe matter, chances are that your voter
                        turnout will not be much more than\nthat.  (Assuming mildly-opinionated
                        voters will be balanced by\nstrongly-opinionated non-voters.)
                        \ So... To determined the interests of the\npopulation, hold
                        a vote.  To determine how strongly that opinion is held,\nmake
                        voting optional, or go one step further and make it a slight
                        hassle to\nplace your vote.  Only dedicated lobbyists will
                        go to out-of game web-pages,\nand jump though additional hoops
                        to make their opinions known.\n\nThe solution I've just proposed
                        is not a particularly unique or original\none, as the two
                        variables I describe - the results of the vote, and the\nnumber
                        of voters - are already used by pundits in this very manner.
                        \ In\nCanada, at least, voter turnout is relatively high in
                        federal elections,\nwhile very few people vote in municipal
                        elections.  This leads to the\nconclusion that international
                        trade policy is generally held to be more\nimportant, and
                        elicit stronger opinions then what day my garbage is\ncollected.
                        \ (No offense to any would-be municipal politicians in this
                        group.\n:p )\n\nHolding separate ballots on different occassions
                        for each issue is also a\nway to ensure that people don't
                        voice an opinion about issues that they\ndon't really care
                        about.\n\n> As\n> politically correct as it is to hate special
                        interest groups \n> in American\n> politics (sorry to be nation-specific,
                        but it's what I'm most familiar\n> with), they do help to
                        more accurately represent the true majority\n> _preference_
                        of the community. They essentially magnify the \n> influence
                        of\n> their members by organizing and collection donations,
                        which \n> are then used\n> to affect the electoral process.
                        They effectively magnify the voice of\n> those who care enough
                        to donate/participate in the special interest\n> groups, thus
                        reflecting that those people care extra about \n> those issues.\n\nAnd
                        2.  Is there a way to build this extra influence into the
                        system?\n\nEx - Some race car games artificially enhance the
                        capabilities of vehicles\nbeing driven by players who are
                        falling off the pace.  The idea is to level\nthe playing field,
                        so that the players battle it out on the turns throughout\nthe
                        course of the entire race, instead of having the race won
                        off the\nstarting line - the assumption being that the former
                        scenario is more fun.\n\nIs this kind of idea applicable in
                        a MUD?  Avoid the tyranny of the majority\nby playing with
                        the odds to grant the minority an advantage?  This tactic
                        is\nalready applied on a micro scale - ex. NPCs don't help
                        Necromancers so make\ntheir spells more powerful - but can
                        it be applied to the community at\nlarge?\n\nCheers,\n\nGeoffrey\n\n------_=_NextPart_001_01BF6615.4B8D52D0\nContent-Type:
                        text/html;\n\tcharset=\"iso-8859-1\"\nContent-Transfer-Encoding:
                        quoted-printable\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML
                        3.2//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=3D\"Content-Type\"
                        CONTENT=3D\"text/html; =\ncharset=3Diso-8859-1\">\n<META NAME=3D\"Generator\"
                        CONTENT=3D\"MS Exchange Server version =\n5.5.2650.12\">\n<TITLE>RE:
                        [MUD-Dev] Community Relations</TITLE>\n</HEAD>\n<BODY>\n\n<P><FONT
                        SIZE=3D2>matt wrote:</FONT>\n</P>\n\n<P><FONT SIZE=3D2>&gt;
                        I'm curious, how do you (or do you propose) =\nchoose the
                        </FONT>\n<BR><FONT SIZE=3D2>&gt; players? It sounds</FONT>\n<BR><FONT
                        SIZE=3D2>&gt; to me like you are talking about some sort of
                        =\npopulist democratic</FONT>\n<BR><FONT SIZE=3D2>&gt; system?
                        (correct me if I'm wrong please.) What =\nhappens when </FONT>\n<BR><FONT
                        SIZE=3D2>&gt; they elect the</FONT>\n<BR><FONT SIZE=3D2>&gt;
                        mud equivalent of hitler, and he decides that =\nall Dwarves
                        </FONT>\n<BR><FONT SIZE=3D2>&gt; should be kicked</FONT>\n<BR><FONT
                        SIZE=3D2>&gt; off. Or, worse yet, what happens if the player
                        =\nwho is at the </FONT>\n<BR><FONT SIZE=3D2>&gt; top of the</FONT>\n<BR><FONT
                        SIZE=3D2>&gt; hierarchy decides hr is going to quit, and is
                        =\ngoing to go out </FONT>\n<BR><FONT SIZE=3D2>&gt; with a
                        bang? </FONT>\n</P>\n\n<P><FONT SIZE=3D2>Checks and balances.&nbsp;
                        Limitations on =\npower.&nbsp; Certain acts require the consent
                        of multiple =\nadministrators...</FONT>\n</P>\n\n<P><FONT
                        SIZE=3D2>&gt; I suppose though that it's not completely a
                        =\nmatter of </FONT>\n<BR><FONT SIZE=3D2>&gt; gettting the
                        best</FONT>\n<BR><FONT SIZE=3D2>&gt; administrators, but also
                        of giving the =\nplayerbase a feeling of</FONT>\n<BR><FONT
                        SIZE=3D2>&gt; empowerment.</FONT>\n</P>\n\n<P><FONT SIZE=3D2>Interesting
                        phrasing - because a _feeling_ of =\nempowererment is, by
                        definition, not necessarily the same thing as =\nempowerment.&nbsp;
                        Is it possible to grant a user base the feeling of =\nempowerment
                        without actually surrendering control?</FONT></P>\n\n<P><FONT
                        SIZE=3D2>Has this strategy ever been successfully =\napplied?</FONT>\n</P>\n\n<P><FONT
                        SIZE=3D2>&gt; It's not</FONT>\n<BR><FONT SIZE=3D2>&gt; so
                        easy as just letting them vote straight out =\nthough, and
                        </FONT>\n<BR><FONT SIZE=3D2>&gt; then vesting</FONT>\n<BR><FONT
                        SIZE=3D2>&gt; all legislative/executive/judiciary power in
                        =\none hierarchy, </FONT>\n<BR><FONT SIZE=3D2>&gt; because
                        you</FONT>\n<BR><FONT SIZE=3D2>&gt; will end up with tyranny
                        of the =\nmajority.</FONT>\n</P>\n\n<P><FONT SIZE=3D2>An effective
                        charter of rights (as defined in my =\nprevious posting) goes
                        a long way in avoiding these problems...</FONT>\n</P>\n\n<P><FONT
                        SIZE=3D2>&gt; That method is also </FONT>\n<BR><FONT SIZE=3D2>&gt;
                        poor (and I</FONT>\n<BR><FONT SIZE=3D2>&gt; think this is
                        a major failing of American-style =\ndemocracy) </FONT>\n<BR><FONT
                        SIZE=3D2>&gt; because it does</FONT>\n<BR><FONT SIZE=3D2>&gt;
                        not allow people to indicate HOW strongly they =\nfeel about
                        </FONT>\n<BR><FONT SIZE=3D2>&gt; something. What</FONT>\n<BR><FONT
                        SIZE=3D2>&gt; if 40% of your players are rabidly =\npro-player-killing,&nbsp;
                        15% </FONT>\n<BR><FONT SIZE=3D2>&gt; are rabidly</FONT>\n<BR><FONT
                        SIZE=3D2>&gt; anti-player-killing, 5% who don't really care
                        =\nbut if pressed will be</FONT>\n<BR><FONT SIZE=3D2>&gt;
                        pro-player-killing because they are speciest =\nand want to
                        kill all</FONT>\n<BR><FONT SIZE=3D2>&gt; Dwarves, and 40%
                        don't really care, but if =\npressed, will say</FONT>\n<BR><FONT
                        SIZE=3D2>&gt; they are anti-player-killing, because their
                        =\naunt got killed once (by a</FONT>\n<BR><FONT SIZE=3D2>&gt;
                        Dwarf, no doubt) when she logged into a mud? =\n(I'm not saying
                        this is a</FONT>\n<BR><FONT SIZE=3D2>&gt; realistic breakdown
                        of this particular =\nissue)</FONT>\n<BR><FONT SIZE=3D2>&gt;
                        </FONT>\n<BR><FONT SIZE=3D2>&gt; So, let's define people who
                        are rabidly either =\nway as being people who</FONT>\n<BR><FONT
                        SIZE=3D2>&gt; care enough to quit your mud if things go =\nagainst
                        them, while the ones</FONT>\n<BR><FONT SIZE=3D2>&gt; more
                        towards the middle might get a bit =\ndisgruntled, but </FONT>\n<BR><FONT
                        SIZE=3D2>&gt; don't care enough</FONT>\n<BR><FONT SIZE=3D2>&gt;
                        to stop playing.</FONT>\n<BR><FONT SIZE=3D2>&gt; </FONT>\n<BR><FONT
                        SIZE=3D2>&gt; Then, in this case, even though, when it came
                        =\nto a straight vote, the</FONT>\n<BR><FONT SIZE=3D2>&gt;
                        anti-player-killers would win (assuming =\neveryone votes,
                        which </FONT>\n<BR><FONT SIZE=3D2>&gt; may be close</FONT>\n<BR><FONT
                        SIZE=3D2>&gt; or far from what actually happens, depending
                        on =\nhow important the</FONT>\n<BR><FONT SIZE=3D2>&gt; electorate
                        takes politics), the =\nanti-player-killers would </FONT>\n<BR><FONT
                        SIZE=3D2>&gt; win, with 55% of</FONT>\n<BR><FONT SIZE=3D2>&gt;
                        the vote. However, this does not accurately =\nrepresent the
                        way this</FONT>\n<BR><FONT SIZE=3D2>&gt; community thinks
                        about things. In this case, =\nthe majority </FONT>\n<BR><FONT
                        SIZE=3D2>&gt; vote would cost</FONT>\n<BR><FONT SIZE=3D2>&gt;
                        you 40% of your player-base, while had it swung =\nthe other
                        </FONT>\n<BR><FONT SIZE=3D2>&gt; day, only 15%</FONT>\n<BR><FONT
                        SIZE=3D2>&gt; would have quit. This is an extreme situation
                        =\nof course, but </FONT>\n<BR><FONT SIZE=3D2>&gt; the principle</FONT>\n<BR><FONT
                        SIZE=3D2>&gt; is applicable. How to resolve this issue is
                        not =\nsimple. Books </FONT>\n<BR><FONT SIZE=3D2>&gt; have
                        been</FONT>\n<BR><FONT SIZE=3D2>&gt; written on how to avoid
                        Madison's probolem of =\nmajority tyranny.</FONT>\n</P>\n\n<P><FONT
                        SIZE=3D2>Two points - </FONT>\n</P>\n\n<P><FONT SIZE=3D2>1.&nbsp;
                        The problem you've just outlined only arises =\nif every member
                        of the commmunity is forced to vote.&nbsp; Voting, for =\nthe
                        most part, is optional IRL.&nbsp; The same must be even more
                        true =\nin MUDs, because forcing a vote will alienate the
                        large majority of =\nyour players who are there to hack 'n
                        slash or chat, and who don't =\nreally care about the way
                        the MUD is governed.&nbsp; So, if, by your =\nexample, only
                        55% of your population holds a strong opinion on the =\nmatter,
                        chances are that your voter turnout will not be much more
                        than =\nthat.&nbsp; (Assuming mildly-opinionated voters will
                        be balanced by =\nstrongly-opinionated non-voters.)&nbsp;
                        So... To determined the =\ninterests of the population, hold
                        a vote.&nbsp; To determine how =\nstrongly that opinion is
                        held, make voting optional, or go one step =\nfurther and
                        make it a slight hassle to place your vote.&nbsp; Only =\ndedicated
                        lobbyists will go to out-of game web-pages, and jump though
                        =\nadditional hoops to make their opinions known.</FONT></P>\n\n<P><FONT
                        SIZE=3D2>The solution I've just proposed is not a particularly
                        =\nunique or original one, as the two variables I describe
                        - the results =\nof the vote, and the number of voters - are
                        already used by pundits in =\nthis very manner.&nbsp; In Canada,
                        at least, voter turnout is =\nrelatively high in federal elections,
                        while very few people vote in =\nmunicipal elections.&nbsp;
                        This leads to the conclusion that =\ninternational trade policy
                        is generally held to be more important, and =\nelicit stronger
                        opinions then what day my garbage is collected.&nbsp; =\n(No
                        offense to any would-be municipal politicians in this group.
                        :p =\n)</FONT></P>\n\n<P><FONT SIZE=3D2>Holding separate ballots
                        on different occassions for =\neach issue is also a way to
                        ensure that people don't voice an opinion =\nabout issues
                        that they don't really care about.</FONT></P>\n\n<P><FONT
                        SIZE=3D2>&gt; As</FONT>\n<BR><FONT SIZE=3D2>&gt; politically
                        correct as it is to hate special =\ninterest groups </FONT>\n<BR><FONT
                        SIZE=3D2>&gt; in American</FONT>\n<BR><FONT SIZE=3D2>&gt;
                        politics (sorry to be nation-specific, but it's =\nwhat I'm
                        most familiar</FONT>\n<BR><FONT SIZE=3D2>&gt; with), they
                        do help to more accurately =\nrepresent the true majority</FONT>\n<BR><FONT
                        SIZE=3D2>&gt; _preference_ of the community. They essentially
                        =\nmagnify the </FONT>\n<BR><FONT SIZE=3D2>&gt; influence
                        of</FONT>\n<BR><FONT SIZE=3D2>&gt; their members by organizing
                        and collection =\ndonations, which </FONT>\n<BR><FONT SIZE=3D2>&gt;
                        are then used</FONT>\n<BR><FONT SIZE=3D2>&gt; to affect the
                        electoral process. They =\neffectively magnify the voice of</FONT>\n<BR><FONT
                        SIZE=3D2>&gt; those who care enough to donate/participate
                        in =\nthe special interest</FONT>\n<BR><FONT SIZE=3D2>&gt;
                        groups, thus reflecting that those people care =\nextra about
                        </FONT>\n<BR><FONT SIZE=3D2>&gt; those issues.</FONT>\n</P>\n\n<P><FONT
                        SIZE=3D2>And 2.&nbsp; Is there a way to build this extra =\ninfluence
                        into the system?</FONT>\n</P>\n\n<P><FONT SIZE=3D2>Ex - Some
                        race car games artificially enhance the =\ncapabilities of
                        vehicles being driven by players who are falling off =\nthe
                        pace.&nbsp; The idea is to level the playing field, so that
                        the =\nplayers battle it out on the turns throughout the course
                        of the entire =\nrace, instead of having the race won off
                        the starting line - the =\nassumption being that the former
                        scenario is more fun.</FONT></P>\n\n<P><FONT SIZE=3D2>Is this
                        kind of idea applicable in a MUD?&nbsp; Avoid =\nthe tyranny
                        of the majority by playing with the odds to grant the =\nminority
                        an advantage?&nbsp; This tactic is already applied on a micro
                        =\nscale - ex. NPCs don't help Necromancers so make their
                        spells more =\npowerful - but can it be applied to the community
                        at large?</FONT></P>\n\n<P><FONT SIZE=3D2>Cheers,</FONT>\n</P>\n\n<P><FONT
                        SIZE=3D2>Geoffrey</FONT>\n</P>\n\n</BODY>\n</HTML>\n------_=_NextPart_001_01BF6615.4B8D52D0--\n\n\n\n_______________________________________________\nMUD-Dev
                        maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'RE: [MUD-Dev] Community Relations'
                  from: Geoffrey A. MacDougall <geoffrey@poptronik.com>
                  references: []
                  date: 2000-01-24 02:46:58.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: 00IySrZo
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *162
              parent: *144
              children: []
            - &165 !ruby/object:MessageContainer
              key: &163 !ruby/object:MessageId
                raw: 00bj5dyK@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: "From: Matthew Mihaly <diablo@best.com>\nDate: Tue, 18 Jan
                    2000 22:24:19 -0800 (PST)\nSubject: Re: [MUD-Dev] Community Relations\n\nOn
                    Tue, 18 Jan 2000, Raph & Kristen Koster wrote:\n\n> \n> -----
                    Original Message -----\n> From: Matthew Mihaly <diablo@best.com>\n>
                    To: <mud-dev@kanga.nu>\n> Sent: Tuesday, January 18, 2000 3:22
                    PM\n> Subject: Re: [MUD-Dev] Community Relations\n> \n> \n> The
                    fundamental mistake is that the players ARE explicitly providing
                    the\n> environment. The server and data you supply are basically
                    incidental. They\n> are there to amuse the players when the other
                    players aren't doing so. The\n> gameplay on most muds does NOT
                    compare to a standalone game experience in\n> any way. The combat
                    is simpler, the environments are less compelling, the\n> puzzles
                    simplistic... what a mud generally supplies is a context for social\n>
                    interaction that is more compelling than the blankness of an IRC
                    chat room.\n> \n> Now, I know there are exceptions (before you
                    jump up to defend Achaea's\n> combat system, Matt ;). But by and
                    large, a simple examination of the\n> playing patterns of mudders,
                    and of the typical retention and migration\n> patterns, shows
                    that people are mostly there for the other people. And they\n>
                    leave when the other people leave.\n\nOh, no, clearly you are
                    correct as far as that goes. I've stated exactly\nthat before
                    in posts here. And, our combat system is only good for player\nvs.
                    player. It's fairly boring for player vs. mobile.\n\n> \n> > Remember
                    though that many of us are involved in commercial endeavours,
                    and\n> > that attitude is not appropriate for most commercial
                    endeavours.\n> \n> It is misguided regardless of whether the venture
                    is a for-profit mud or\n> not.\n\nI disagree, and I don't think
                    you thought about this statement before you\nmade it. \"Misguided\"
                    mean not guided towards something, presumably your\ngoal. It is
                    a mistake, I think, to implicitly assume that the goal of a\nmud
                    is maximize the size of the player base. It's a bias that I see
                    on\nthis list all the time, and it's a completely unwarranted
                    one. To a large\nextent of course, that is the goal (or at least
                    the means of achieving the\ngoal of profit) of commercial muds,
                    but 99% of all muds are not commercial\n(although given that commerical
                    muds have MUCH larger populations on\naverage, I'd be curious
                    to see an accurate breakdown of the player\npopulation of commercial
                    muds vs. free muds).\n\nI don't think any of us has either the
                    right or the means to enforce\nuniform goals among muds. Some
                    exist to make money. Some exist for\nresearch. Some (perhaps most
                    of the free ones) exist to glorify the egos\nof the creator. Some
                    exist simply because the creators like creating\nthings for the
                    sake of creating them.  Whatever the reason, all are goals,\nand
                    it's not for us to say whether the goals are valid or not. In
                    fact,\nthat's a meaningless statement. If someone has a goal,
                    that goal is valid,\nfor if it were invalid, it couldn't exist
                    as a goal, and it does.\n\nIn summary then, if some mud admins
                    choose to run their muds capriciously,\nI don't see where anyone
                    gets off criticizing them on more than a\n\"personal preferences\"
                    level. In other words, perhaps you find that sort\nof style distasteful,
                    but that doesn't mean it's Wrong or Misguided in\nsome universal
                    sense.\n\n \n> > Personally, even though Achaea is commercial,
                    I am sometimes\n> > willing to lose customers who irritate me,
                    simply because I don't answer\n> > to any corporate management
                    above myself.\n> \n> And if they irritate large groups of players,
                    it is smart business to get\n> rid of them.\n\nYes, but the important
                    distinction I was making is that it's perfectly ok,\nin my opinion,
                    to have goals other than mere profit-maximization. The goal\nof
                    this list is the advancement of muds, not the advancement of the
                    bottom\nline for the companies that own muds. I'm sorry if I sound
                    harsh Raph, but\nthe point of view I'm railing against is one
                    that I hear most of the\ncommercial people on here (myself included)
                    implicitly espousing a lot,\nand upon reflection, I don't think
                    it's justified. The advancement of muds\ndoes not implicitly require
                    commercial-style management. Only muds which\nare concerned with
                    either profit maximization or as large a player-base as\npossible
                    do.\n\n> > No one starts a volunteer project with\n> > the goal
                    of getting spit on.\n> \n> People caring for the homeless or the
                    mentally deficient? Civil rights\n> volunteers in a segregated
                    society? Sure they do. It's just a difference of\n> knowing in
                    advance that's what they were doing. Most mud admins don't seem\n>
                    to realize what it is that they are actually making. A game is
                    the least of\n> it.\n\nPoorly phrased by me. My point is that
                    regardless of where the content is\ncoming from (players or creator),
                    the fact is, the world is _owned_ by the\ncreator (or his assignee).
                    He does not have any real responsibilities to\nhis players unless
                    he chooses to accept them. I agree that few admins\nactually have
                    any clue what it is they are creating, but I don't think\nthat's
                    relevant. They own the world, end of story. If I want invite you
                    to\nmy house for a party, and I decide to arbitrarily insult you
                    and throw you\nout, that's my right, and thank god for it. I'm
                    not saying I run Achaea\nthat way, but I AM saying that if I chose
                    to run Achaea that way, such\nwould be my right, for it is _my_
                    (well, my company, in which I am the\nmajority shareholder) world.
                    \n\nIn the end, people volunteer because they get something out
                    of it,\ngenerally either status in the community or a good feeling
                    inside. If a\nmud creator/admin runs his mud in a capricious,
                    vindictive, arbitrary way,\nand it makes him feel good, bully
                    for him I say. He's the one that put in\nthe effort, time, and
                    possibly money, and I, for one, am not going to tell\nhim that
                    he must treat the beneficiaries of his time, effort, and money
                    in\nany particular way.\n\n--matt\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: Matthew Mihaly <diablo@best.com>'
                          name: From
                          value: Matthew Mihaly <diablo@best.com>
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Tue, 18 Jan 2000 22:24:19 -0800 (PST)'
                          name: Date
                          value: Tue, 18 Jan 2000 22:24:19 -0800 (PST)
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: Re: [MUD-Dev] Community Relations'
                          name: Subject
                          value: 'Re: [MUD-Dev] Community Relations'
                        mbox_from: 
                      body: "On Tue, 18 Jan 2000, Raph & Kristen Koster wrote:\n\n>
                        \n> ----- Original Message -----\n> From: Matthew Mihaly <diablo@best.com>\n>
                        To: <mud-dev@kanga.nu>\n> Sent: Tuesday, January 18, 2000
                        3:22 PM\n> Subject: Re: [MUD-Dev] Community Relations\n> \n>
                        \n> The fundamental mistake is that the players ARE explicitly
                        providing the\n> environment. The server and data you supply
                        are basically incidental. They\n> are there to amuse the players
                        when the other players aren't doing so. The\n> gameplay on
                        most muds does NOT compare to a standalone game experience
                        in\n> any way. The combat is simpler, the environments are
                        less compelling, the\n> puzzles simplistic... what a mud generally
                        supplies is a context for social\n> interaction that is more
                        compelling than the blankness of an IRC chat room.\n> \n>
                        Now, I know there are exceptions (before you jump up to defend
                        Achaea's\n> combat system, Matt ;). But by and large, a simple
                        examination of the\n> playing patterns of mudders, and of
                        the typical retention and migration\n> patterns, shows that
                        people are mostly there for the other people. And they\n>
                        leave when the other people leave.\n\nOh, no, clearly you
                        are correct as far as that goes. I've stated exactly\nthat
                        before in posts here. And, our combat system is only good
                        for player\nvs. player. It's fairly boring for player vs.
                        mobile.\n\n> \n> > Remember though that many of us are involved
                        in commercial endeavours, and\n> > that attitude is not appropriate
                        for most commercial endeavours.\n> \n> It is misguided regardless
                        of whether the venture is a for-profit mud or\n> not.\n\nI
                        disagree, and I don't think you thought about this statement
                        before you\nmade it. \"Misguided\" mean not guided towards
                        something, presumably your\ngoal. It is a mistake, I think,
                        to implicitly assume that the goal of a\nmud is maximize the
                        size of the player base. It's a bias that I see on\nthis list
                        all the time, and it's a completely unwarranted one. To a
                        large\nextent of course, that is the goal (or at least the
                        means of achieving the\ngoal of profit) of commercial muds,
                        but 99% of all muds are not commercial\n(although given that
                        commerical muds have MUCH larger populations on\naverage,
                        I'd be curious to see an accurate breakdown of the player\npopulation
                        of commercial muds vs. free muds).\n\nI don't think any of
                        us has either the right or the means to enforce\nuniform goals
                        among muds. Some exist to make money. Some exist for\nresearch.
                        Some (perhaps most of the free ones) exist to glorify the
                        egos\nof the creator. Some exist simply because the creators
                        like creating\nthings for the sake of creating them.  Whatever
                        the reason, all are goals,\nand it's not for us to say whether
                        the goals are valid or not. In fact,\nthat's a meaningless
                        statement. If someone has a goal, that goal is valid,\nfor
                        if it were invalid, it couldn't exist as a goal, and it does.\n\nIn
                        summary then, if some mud admins choose to run their muds
                        capriciously,\nI don't see where anyone gets off criticizing
                        them on more than a\n\"personal preferences\" level. In other
                        words, perhaps you find that sort\nof style distasteful, but
                        that doesn't mean it's Wrong or Misguided in\nsome universal
                        sense.\n\n \n> > Personally, even though Achaea is commercial,
                        I am sometimes\n> > willing to lose customers who irritate
                        me, simply because I don't answer\n> > to any corporate management
                        above myself.\n> \n> And if they irritate large groups of
                        players, it is smart business to get\n> rid of them.\n\nYes,
                        but the important distinction I was making is that it's perfectly
                        ok,\nin my opinion, to have goals other than mere profit-maximization.
                        The goal\nof this list is the advancement of muds, not the
                        advancement of the bottom\nline for the companies that own
                        muds. I'm sorry if I sound harsh Raph, but\nthe point of view
                        I'm railing against is one that I hear most of the\ncommercial
                        people on here (myself included) implicitly espousing a lot,\nand
                        upon reflection, I don't think it's justified. The advancement
                        of muds\ndoes not implicitly require commercial-style management.
                        Only muds which\nare concerned with either profit maximization
                        or as large a player-base as\npossible do.\n\n> > No one starts
                        a volunteer project with\n> > the goal of getting spit on.\n>
                        \n> People caring for the homeless or the mentally deficient?
                        Civil rights\n> volunteers in a segregated society? Sure they
                        do. It's just a difference of\n> knowing in advance that's
                        what they were doing. Most mud admins don't seem\n> to realize
                        what it is that they are actually making. A game is the least
                        of\n> it.\n\nPoorly phrased by me. My point is that regardless
                        of where the content is\ncoming from (players or creator),
                        the fact is, the world is _owned_ by the\ncreator (or his
                        assignee). He does not have any real responsibilities to\nhis
                        players unless he chooses to accept them. I agree that few
                        admins\nactually have any clue what it is they are creating,
                        but I don't think\nthat's relevant. They own the world, end
                        of story. If I want invite you to\nmy house for a party, and
                        I decide to arbitrarily insult you and throw you\nout, that's
                        my right, and thank god for it. I'm not saying I run Achaea\nthat
                        way, but I AM saying that if I chose to run Achaea that way,
                        such\nwould be my right, for it is _my_ (well, my company,
                        in which I am the\nmajority shareholder) world. \n\nIn the
                        end, people volunteer because they get something out of it,\ngenerally
                        either status in the community or a good feeling inside. If
                        a\nmud creator/admin runs his mud in a capricious, vindictive,
                        arbitrary way,\nand it makes him feel good, bully for him
                        I say. He's the one that put in\nthe effort, time, and possibly
                        money, and I, for one, am not going to tell\nhim that he must
                        treat the beneficiaries of his time, effort, and money in\nany
                        particular way.\n\n--matt\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                        maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'Re: [MUD-Dev] Community Relations'
                  from: Matthew Mihaly <diablo@best.com>
                  references: []
                  date: 2000-01-19 06:24:19.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: 00bj5dyK
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *163
              parent: *144
              children:
              - &167 !ruby/object:MessageContainer
                key: &164 !ruby/object:MessageId
                  raw: Jzn75utc@generated-message-id.chibrary.org
                value: !ruby/object:Message
                  email: !ruby/object:Email
                    raw: "From: Ola Fosheim Gr��stad <olag@ifi.uio.no>\nDate: Wed,
                      19 Jan 2000 15:07:09 +0100\nSubject: Re: [MUD-Dev] Community
                      Relations\n\nMatthew Mihaly wrote:\r\n\r\n> things for the sake
                      of creating them.  Whatever the reason, all are goals,\r\n>
                      and it's not for us to say whether the goals are valid or not.
                      In fact,\r\n> that's a meaningless statement. If someone has
                      a goal, that goal is valid,\r\n> for if it were invalid, it
                      couldn't exist as a goal, and it does.\r\n\r\nLet's be really
                      pedantic. It is clearly possible to have invalid goals.\r\nYou
                      will never reach it, but you can still act and believe that
                      what you\r\ndo will get you there (\"there\" is ill-defined).
                      That said, it isn't\r\nobvious that people act in order to satisfy
                      explicit goals.\r\n\r\nIt is rather obvious that for ethical
                      reasons, the MUD should somehow be\r\nbeneficial to the players
                      and at least not damaging to them.  This is\r\nthe criterion
                      which the validity of most systems are judged by in a\r\ndemocracy,
                      and I see no reason for why MUDs should be different.  If you\r\ncreate
                      a social interaction system then it is rather irresponsible
                      to\r\nclaim that you are irresponsible! If enough stupid people
                      act\r\ncluelessly, perhaps with suicides as the outcome, then
                      a law is passed\r\nand a bad practice has became illegal.  Do
                      you need laws to be passed\r\nin order to act responsible??\r\n\r\nYou
                      may of course claim the anarchist religion as your belief system,\r\nbut
                      that doesn't really fit with the way you seem to run your mud
                      ;).\r\n\r\n> Poorly phrased by me. My point is that regardless
                      of where the content is\r\n> coming from (players or creator),
                      the fact is, the world is _owned_ by the\r\n> creator (or his
                      assignee). He does not have any real responsibilities to\r\n>
                      his players unless he chooses to accept them.\r\n\r\nI hope
                      you realize that the idea of \"ownership\" is as culturally\r\ndependent
                      as that of \"moral\". So basically you cannot dismiss\r\nresponsibilities
                      assumed by a culture without also dismissing the\r\nvalidity
                      (or connotations) of \"ownership\".  So the basic issue is which\r\n\"system
                      of beliefs\" is most sound and rigorously thought out? I'll
                      claim\r\nthat you probably will have to look at philosophy and\r\ncross-cultural/cross-religious
                      invariance to find a decent answer.\r\n\r\nIs is rather obvious
                      from a psychological perspective that some admins\r\nchoose
                      their belief system based on what is convenient in that\r\nparticular
                      situation. They would probably choose a different set of\r\nbeliefs
                      in a different situation. This is generally not viewed as having\r\nhigh
                      moral standards?\r\n\r\nYou are indeed responsible the moment
                      you open your system to the\r\ngeneral public, even in the legal
                      sense of the word (depending on how\r\n\"public\" is defined).
                      \ Perhaps you even explicitly invite people, making\r\npromises?
                      How can you then deny responsibility? You assume more\r\nresponsibility
                      when you are public than when you run a private closed\r\nMUD
                      where the players can be assumed to understand the premises.
                      \ Do you\r\nrefute this?  A MUD is not a party in your private
                      house, and you are\r\nin fact not allowed to abuse visitors
                      to your private home either.\r\nA club is perhaps more fitting
                      for analogies.\r\n\r\n\r\nI'm starting to believe that when
                      you say \"right\" you actually mean: it\r\nis \"legally possible\".
                      A lot of bad stuff is possible and legal,\r\ndepending on which
                      country you live in. So that is really not\r\nappropriate base
                      for discussing ethical issues.  Or maybe what you are\r\nsaying
                      is \"I am making a lot of bad decisions that make other people\r\nmiserable,
                      but I want to deny this feeling of guilt, therefore I assume\r\nthe
                      position that all goals and practices are acceptable\"?\r\n\r\n\r\nI
                      hope we can avoid recreating this old thread in it's entirety.\r\n\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                    header: !ruby/object:Headers
                      rmail: !ruby/object:RMail::Message
                        header: !ruby/object:RMail::Header
                          fields:
                          - !ruby/object:RMail::Header::Field
                            raw: 'From: Ola Fosheim Gr��stad <olag@ifi.uio.no>'
                            name: From
                            value: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                          - !ruby/object:RMail::Header::Field
                            raw: 'Date: Wed, 19 Jan 2000 15:07:09 +0100'
                            name: Date
                            value: Wed, 19 Jan 2000 15:07:09 +0100
                          - !ruby/object:RMail::Header::Field
                            raw: 'Subject: Re: [MUD-Dev] Community Relations'
                            name: Subject
                            value: 'Re: [MUD-Dev] Community Relations'
                          mbox_from: 
                        body: "Matthew Mihaly wrote:\r\n\r\n> things for the sake
                          of creating them.  Whatever the reason, all are goals,\r\n>
                          and it's not for us to say whether the goals are valid or
                          not. In fact,\r\n> that's a meaningless statement. If someone
                          has a goal, that goal is valid,\r\n> for if it were invalid,
                          it couldn't exist as a goal, and it does.\r\n\r\nLet's be
                          really pedantic. It is clearly possible to have invalid
                          goals.\r\nYou will never reach it, but you can still act
                          and believe that what you\r\ndo will get you there (\"there\"
                          is ill-defined). That said, it isn't\r\nobvious that people
                          act in order to satisfy explicit goals.\r\n\r\nIt is rather
                          obvious that for ethical reasons, the MUD should somehow
                          be\r\nbeneficial to the players and at least not damaging
                          to them.  This is\r\nthe criterion which the validity of
                          most systems are judged by in a\r\ndemocracy, and I see
                          no reason for why MUDs should be different.  If you\r\ncreate
                          a social interaction system then it is rather irresponsible
                          to\r\nclaim that you are irresponsible! If enough stupid
                          people act\r\ncluelessly, perhaps with suicides as the outcome,
                          then a law is passed\r\nand a bad practice has became illegal.
                          \ Do you need laws to be passed\r\nin order to act responsible??\r\n\r\nYou
                          may of course claim the anarchist religion as your belief
                          system,\r\nbut that doesn't really fit with the way you
                          seem to run your mud ;).\r\n\r\n> Poorly phrased by me.
                          My point is that regardless of where the content is\r\n>
                          coming from (players or creator), the fact is, the world
                          is _owned_ by the\r\n> creator (or his assignee). He does
                          not have any real responsibilities to\r\n> his players unless
                          he chooses to accept them.\r\n\r\nI hope you realize that
                          the idea of \"ownership\" is as culturally\r\ndependent
                          as that of \"moral\". So basically you cannot dismiss\r\nresponsibilities
                          assumed by a culture without also dismissing the\r\nvalidity
                          (or connotations) of \"ownership\".  So the basic issue
                          is which\r\n\"system of beliefs\" is most sound and rigorously
                          thought out? I'll claim\r\nthat you probably will have to
                          look at philosophy and\r\ncross-cultural/cross-religious
                          invariance to find a decent answer.\r\n\r\nIs is rather
                          obvious from a psychological perspective that some admins\r\nchoose
                          their belief system based on what is convenient in that\r\nparticular
                          situation. They would probably choose a different set of\r\nbeliefs
                          in a different situation. This is generally not viewed as
                          having\r\nhigh moral standards?\r\n\r\nYou are indeed responsible
                          the moment you open your system to the\r\ngeneral public,
                          even in the legal sense of the word (depending on how\r\n\"public\"
                          is defined).  Perhaps you even explicitly invite people,
                          making\r\npromises? How can you then deny responsibility?
                          You assume more\r\nresponsibility when you are public than
                          when you run a private closed\r\nMUD where the players can
                          be assumed to understand the premises.  Do you\r\nrefute
                          this?  A MUD is not a party in your private house, and you
                          are\r\nin fact not allowed to abuse visitors to your private
                          home either.\r\nA club is perhaps more fitting for analogies.\r\n\r\n\r\nI'm
                          starting to believe that when you say \"right\" you actually
                          mean: it\r\nis \"legally possible\". A lot of bad stuff
                          is possible and legal,\r\ndepending on which country you
                          live in. So that is really not\r\nappropriate base for discussing
                          ethical issues.  Or maybe what you are\r\nsaying is \"I
                          am making a lot of bad decisions that make other people\r\nmiserable,
                          but I want to deny this feeling of guilt, therefore I assume\r\nthe
                          position that all goals and practices are acceptable\"?\r\n\r\n\r\nI
                          hope we can avoid recreating this old thread in it's entirety.\r\n\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                          maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                        epilogue: 
                        preamble: 
                    message_id: !ruby/object:MessageId
                      raw: "[invalid or missing message id]"
                    subject: !ruby/object:Subject
                      original: 'Re: [MUD-Dev] Community Relations'
                    from: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                    references: []
                    date: 2000-01-19 14:07:09.000000000 Z
                    no_archive: false
                  call_number: !ruby/object:CallNumber
                    str: Jzn75utc
                  source: archive
                  list: !ruby/object:List
                    slug: mud-dev
                    name: 
                    description: 
                    homepage: 
                    footer: 
                  message_id: *164
                parent: *165
                children:
                - &393 !ruby/object:MessageContainer
                  key: &166 !ruby/object:MessageId
                    raw: 000DlgQa@generated-message-id.chibrary.org
                  value: !ruby/object:Message
                    email: !ruby/object:Email
                      raw: |
                        From: "Koster, Raph" <rkoster@origin.ea.com>
                        Date: Wed, 19 Jan 2000 09:54:05 -0600
                        Subject: RE: [MUD-Dev] Community Relations

                        First, let me say "bravo!" to Ola. :)



                        Ola wrote:

                        > I hope we can avoid recreating this old thread in it's entirety.



                        Actually, it seems to me that we have quite a lot to discuss in this area.
                        Possible spin-off topics include:



                        - is there, and should there be, an implicit responsibility on the part of a
                        mud admin upon opening his doors to the public?



                        - if not, what are the differences between the real world and virtual that
                        make this responsibility go away? This is useful to the field because it
                        clarifies gray areas about the relationship between the real and the
                        virtual.



                        - if it is agreed that the responsibility exists, is it possible to codify
                        said responsibility? That may indeed be useful to the field.



                        - if the responsibility is difficult to manage, are there tools or training
                        or assistance that can be provided to admins who could use the help?
                        Advances the field by prompting new tool development.



                        - is it desirable (for ethical OR commercial reasons) to move towards a less
                        paternalistic community management system? If so, what tools can be provide
                        the players?



                        These are hardly exhausted questions, to my mind, and they have a lot of
                        potential for making muds better.



                        BTW, let me say that by and large, I believe that a mud admin must
                        manipulate the hell out of the playerbase. I am not as thoroughly idealistic
                        as my reply to Matt may have made me seem. ;)



                        -Raph



                        _______________________________________________
                        MUD-Dev maillist  -  MUD-Dev@kanga.nu
                        http://www.kanga.nu/lists/listinfo/mud-dev
                      header: !ruby/object:Headers
                        rmail: !ruby/object:RMail::Message
                          header: !ruby/object:RMail::Header
                            fields:
                            - !ruby/object:RMail::Header::Field
                              raw: 'From: "Koster, Raph" <rkoster@origin.ea.com>'
                              name: From
                              value: '"Koster, Raph" <rkoster@origin.ea.com>'
                            - !ruby/object:RMail::Header::Field
                              raw: 'Date: Wed, 19 Jan 2000 09:54:05 -0600'
                              name: Date
                              value: Wed, 19 Jan 2000 09:54:05 -0600
                            - !ruby/object:RMail::Header::Field
                              raw: 'Subject: RE: [MUD-Dev] Community Relations'
                              name: Subject
                              value: 'RE: [MUD-Dev] Community Relations'
                            mbox_from: 
                          body: |
                            First, let me say "bravo!" to Ola. :)



                            Ola wrote:

                            > I hope we can avoid recreating this old thread in it's entirety.



                            Actually, it seems to me that we have quite a lot to discuss in this area.
                            Possible spin-off topics include:



                            - is there, and should there be, an implicit responsibility on the part of a
                            mud admin upon opening his doors to the public?



                            - if not, what are the differences between the real world and virtual that
                            make this responsibility go away? This is useful to the field because it
                            clarifies gray areas about the relationship between the real and the
                            virtual.



                            - if it is agreed that the responsibility exists, is it possible to codify
                            said responsibility? That may indeed be useful to the field.



                            - if the responsibility is difficult to manage, are there tools or training
                            or assistance that can be provided to admins who could use the help?
                            Advances the field by prompting new tool development.



                            - is it desirable (for ethical OR commercial reasons) to move towards a less
                            paternalistic community management system? If so, what tools can be provide
                            the players?



                            These are hardly exhausted questions, to my mind, and they have a lot of
                            potential for making muds better.



                            BTW, let me say that by and large, I believe that a mud admin must
                            manipulate the hell out of the playerbase. I am not as thoroughly idealistic
                            as my reply to Matt may have made me seem. ;)



                            -Raph



                            _______________________________________________
                            MUD-Dev maillist  -  MUD-Dev@kanga.nu
                            http://www.kanga.nu/lists/listinfo/mud-dev
                          epilogue: 
                          preamble: 
                      message_id: !ruby/object:MessageId
                        raw: "[invalid or missing message id]"
                      subject: !ruby/object:Subject
                        original: 'RE: [MUD-Dev] Community Relations'
                      from: Koster, Raph <rkoster@origin.ea.com>
                      references: []
                      date: 2000-01-19 15:54:05.000000000 Z
                      no_archive: false
                    call_number: !ruby/object:CallNumber
                      str: 000DlgQa
                    source: archive
                    list: !ruby/object:List
                      slug: mud-dev
                      name: 
                      description: 
                      homepage: 
                      footer: 
                    message_id: *166
                  parent: *167
                  children: []
            - &170 !ruby/object:MessageContainer
              key: &168 !ruby/object:MessageId
                raw: 00bj5dxI@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: |
                    From: "Lovecraft" <dave@darkages.com>
                    Date: Thu, 27 Jan 2000 16:31:49 -0800
                    Subject: Re: [MUD-Dev] Community Relations

                    > Geoffrey A. MacDougall wrote:
                    > > Has this strategy ever been successfully applied?
                    [empowering players with political power]
                    Matthew Mihaly wrote:
                    > I've never heard of it being applied, but I'd really like to see someone
                    > do it

                    *waves his hand* Hi.  So have I.

                    I had naive love and luck to do it.

                    Dark Ages gives players limited administrative power in in-game context.
                    Some players enter a hierarchy of political positions.  There are no other
                    direct administrators; although there is a method of owner control, which
                    I'll state last.
                    http://www.darkages.com/play/s_politics.html

                    Dark Ages mechanics of politics are a game within the game.  Players "vote"
                    every day to support or to attack someone attempting political power.  Each
                    vote adds political power points, called "Clout."  Enough clout allows one
                    to attain office for a term.  (details are well summarized by a player in
                    the Dark Ages Library: http://www.darkages.com/atavism/lore/ -> Click
                    "Politica Dominca").

                    This displays a previous issue far back in this thread: partial voting.  One
                    can vote every day.  Technically, every twelve hours.  A citizen can vote
                    for multiple persons, or for the same person several times.  A citizen can
                    also use the mechanics to vote more than once, by spending Clout.

                    For administrative changes, for example, to how politics itself works, I do
                    what's best for the community.  If I am undecided, I hold direct citizen
                    votes.
                    Example: http://www.darkages.com/news/991212.html



                    > Geoffrey A. MacDougall wrote:
                    > > Checks and balances.  Limitations on power.  Certain acts require the
                    > > consent of multiple administrators...

                    I recently had to do change political mechanics to require assistance from
                    another player for some acts, such as Exile or Remove Official.  Checks and
                    balances have been the goal.  My understanding of political science
                    continually needs upgrading.
                    http://www.darkages.com/news/000113_2.html



                    > > Matthew Mihaly wrote:
                    > > > It's not
                    > > > so easy as just letting them vote straight out though, and
                    > > > then vesting
                    > > > all legislative/executive/judiciary power in one hierarchy,
                    > > > because you
                    > > > will end up with tyranny of the majority.
                    > >


                    What is an example system that is less corrupt than the tyranny of the
                    majority?

                    I agree with Matthew's statement about the advantage of competing
                    hierarchies.  Dark Ages has two hierarchies.  There are two villages.
                    Village officials only have jurisdiction over the village.  The greatest
                    threat is exile, which means the criminal cannot enter the village's
                    territory.  As the community grows, the other villages will be given to
                    player control.



                    > Geoffrey A. MacDougall wrote:
                    > > An effective charter of rights (as defined in my previous posting) goes
                    a
                    > > long way in avoiding these problems...

                    > Who enumerates what rights the players have? I must have missed this in
                    > your post. The way I recall the system being described was that the users
                    > themselves would decide on such things. Also, such a charter requires
                    > human interpretation, presumably by the players, in such a system.


                    Dark Ages gives direct legislative power to players (above and beyond the
                    Terms of Service agreement).  I was immediately impressed by talented
                    legislation while playing Dark Ages; I walked out of Mileth Village to read
                    the Mileth Law Board where Mileth Demagogues posted their laws.

                    Corruption, like a weed, lives.  Since I am a developer and the only level
                    editor/writer/operator/scripter, I don't directly administer.  When I
                    receive a report of a crime, I refer it to a player Guard or Demagogue
                    (legislator).  When I receive a report of Guard or Demagogue corruption or
                    neglect, I investigate.  When necessary I remove the corrupt official.
                    In-game the mundanes (NPCs) have just removed the corrupt official.  One
                    example exists on Mileth Political Discussion Board in Dark Ages.

                    Similar to Dr. Cat (far back in the thread), I walk in the world as a normal
                    player.  I keep my real-life identity unknown on the characters that I play
                    for fun with.


                    Dave Kennerly
                    Dark Ages Director
                    www.darkages.com




                    _______________________________________________
                    MUD-Dev maillist  -  MUD-Dev@kanga.nu
                    http://www.kanga.nu/lists/listinfo/mud-dev
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: "Lovecraft" <dave@darkages.com>'
                          name: From
                          value: '"Lovecraft" <dave@darkages.com>'
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Thu, 27 Jan 2000 16:31:49 -0800'
                          name: Date
                          value: Thu, 27 Jan 2000 16:31:49 -0800
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: Re: [MUD-Dev] Community Relations'
                          name: Subject
                          value: 'Re: [MUD-Dev] Community Relations'
                        mbox_from: 
                      body: |
                        > Geoffrey A. MacDougall wrote:
                        > > Has this strategy ever been successfully applied?
                        [empowering players with political power]
                        Matthew Mihaly wrote:
                        > I've never heard of it being applied, but I'd really like to see someone
                        > do it

                        *waves his hand* Hi.  So have I.

                        I had naive love and luck to do it.

                        Dark Ages gives players limited administrative power in in-game context.
                        Some players enter a hierarchy of political positions.  There are no other
                        direct administrators; although there is a method of owner control, which
                        I'll state last.
                        http://www.darkages.com/play/s_politics.html

                        Dark Ages mechanics of politics are a game within the game.  Players "vote"
                        every day to support or to attack someone attempting political power.  Each
                        vote adds political power points, called "Clout."  Enough clout allows one
                        to attain office for a term.  (details are well summarized by a player in
                        the Dark Ages Library: http://www.darkages.com/atavism/lore/ -> Click
                        "Politica Dominca").

                        This displays a previous issue far back in this thread: partial voting.  One
                        can vote every day.  Technically, every twelve hours.  A citizen can vote
                        for multiple persons, or for the same person several times.  A citizen can
                        also use the mechanics to vote more than once, by spending Clout.

                        For administrative changes, for example, to how politics itself works, I do
                        what's best for the community.  If I am undecided, I hold direct citizen
                        votes.
                        Example: http://www.darkages.com/news/991212.html



                        > Geoffrey A. MacDougall wrote:
                        > > Checks and balances.  Limitations on power.  Certain acts require the
                        > > consent of multiple administrators...

                        I recently had to do change political mechanics to require assistance from
                        another player for some acts, such as Exile or Remove Official.  Checks and
                        balances have been the goal.  My understanding of political science
                        continually needs upgrading.
                        http://www.darkages.com/news/000113_2.html



                        > > Matthew Mihaly wrote:
                        > > > It's not
                        > > > so easy as just letting them vote straight out though, and
                        > > > then vesting
                        > > > all legislative/executive/judiciary power in one hierarchy,
                        > > > because you
                        > > > will end up with tyranny of the majority.
                        > >


                        What is an example system that is less corrupt than the tyranny of the
                        majority?

                        I agree with Matthew's statement about the advantage of competing
                        hierarchies.  Dark Ages has two hierarchies.  There are two villages.
                        Village officials only have jurisdiction over the village.  The greatest
                        threat is exile, which means the criminal cannot enter the village's
                        territory.  As the community grows, the other villages will be given to
                        player control.



                        > Geoffrey A. MacDougall wrote:
                        > > An effective charter of rights (as defined in my previous posting) goes
                        a
                        > > long way in avoiding these problems...

                        > Who enumerates what rights the players have? I must have missed this in
                        > your post. The way I recall the system being described was that the users
                        > themselves would decide on such things. Also, such a charter requires
                        > human interpretation, presumably by the players, in such a system.


                        Dark Ages gives direct legislative power to players (above and beyond the
                        Terms of Service agreement).  I was immediately impressed by talented
                        legislation while playing Dark Ages; I walked out of Mileth Village to read
                        the Mileth Law Board where Mileth Demagogues posted their laws.

                        Corruption, like a weed, lives.  Since I am a developer and the only level
                        editor/writer/operator/scripter, I don't directly administer.  When I
                        receive a report of a crime, I refer it to a player Guard or Demagogue
                        (legislator).  When I receive a report of Guard or Demagogue corruption or
                        neglect, I investigate.  When necessary I remove the corrupt official.
                        In-game the mundanes (NPCs) have just removed the corrupt official.  One
                        example exists on Mileth Political Discussion Board in Dark Ages.

                        Similar to Dr. Cat (far back in the thread), I walk in the world as a normal
                        player.  I keep my real-life identity unknown on the characters that I play
                        for fun with.


                        Dave Kennerly
                        Dark Ages Director
                        www.darkages.com




                        _______________________________________________
                        MUD-Dev maillist  -  MUD-Dev@kanga.nu
                        http://www.kanga.nu/lists/listinfo/mud-dev
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'Re: [MUD-Dev] Community Relations'
                  from: Lovecraft <dave@darkages.com>
                  references: []
                  date: 2000-01-28 00:31:49.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: 00bj5dxI
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *168
              parent: *144
              children:
              - &342 !ruby/object:MessageContainer
                key: &169 !ruby/object:MessageId
                  raw: Jysr6yZM@generated-message-id.chibrary.org
                value: !ruby/object:Message
                  email: !ruby/object:Email
                    raw: "From: Matthew Mihaly <diablo@best.com>\nDate: Sun, 23 Jan
                      2000 19:15:40 -0800 (PST)\nSubject: RE: [MUD-Dev] Community
                      Relations\n\nOn Sun, 23 Jan 2000, Geoffrey A. MacDougall wrote:\n\n>
                      matt wrote:\n> \n> > I'm curious, how do you (or do you propose)
                      choose the \n> > players? It sounds\n> > to me like you are
                      talking about some sort of populist democratic\n> > system?
                      (correct me if I'm wrong please.) What happens when \n> > they
                      elect the\n> > mud equivalent of hitler, and he decides that
                      all Dwarves \n> > should be kicked\n> > off. Or, worse yet,
                      what happens if the player who is at the \n> > top of the\n>
                      > hierarchy decides hr is going to quit, and is going to go
                      out \n> > with a bang? \n> \n> Checks and balances.  Limitations
                      on power.  Certain acts require the\n> consent of multiple administrators...\n\nWell,
                      the way the person described it, he mentioned a hierarchy with
                      one\nsingle person at the top.\n\n> \n> > I suppose though that
                      it's not completely a matter of \n> > gettting the best\n> >
                      administrators, but also of giving the playerbase a feeling
                      of\n> > empowerment.\n> \n> Interesting phrasing - because a
                      _feeling_ of empowererment is, by\n> definition, not necessarily
                      the same thing as empowerment.  Is it possible\n> to grant a
                      user base the feeling of empowerment without actually\n> surrendering
                      control?\n\nYou never surrendur more than temporary control,
                      because the users have\nthe power only by your leave. All non-consensual
                      (and by that I mean 100%\nconsensual) government relies on power
                      and in the end, the control truly\ndoes lie with the owners
                      recognized by the law, for those who worship the\nlaw are inevitably
                      going to be more powerful than your users.\n\n \n> Has this
                      strategy ever been successfully applied?\n\nI've never heard
                      of it being applied, but I'd really like to see someone\ndo
                      it (perhaps this is a case where a non-commercial mud would
                      be best\nsuited as a testing ground?)\n\n \n> > It's not\n>
                      > so easy as just letting them vote straight out though, and
                      \n> > then vesting\n> > all legislative/executive/judiciary
                      power in one hierarchy, \n> > because you\n> > will end up with
                      tyranny of the majority.\n> \n> An effective charter of rights
                      (as defined in my previous posting) goes a\n> long way in avoiding
                      these problems...\n\nWho enumerates what rights the players
                      have? I must have missed this in\nyour post. The way I recall
                      the system being described was that the users\nthemselves would
                      decide on such things. Also, such a charter requires\nhuman
                      interpretation, presumably by the players, in such a system.\n\n\n<stuff
                      snipped about how simple voting by the entire populace, done
                      in a\nway that requires someone to either vote entirely yes
                      or entirely no on an\nissue or candidate will not reflect the
                      community preference>\n\n> Two points - \n> \n> 1.  The problem
                      you've just outlined only arises if every member of the\n> commmunity
                      is forced to vote.  Voting, for the most part, is optional IRL.\n>
                      The same must be even more true in MUDs, because forcing a vote
                      will\n> alienate the large majority of your players who are
                      there to hack 'n slash\n> or chat, and who don't really care
                      about the way the MUD is governed.  So,\n> if, by your example,
                      only 55% of your population holds a strong opinion on\n> the
                      matter, chances are that your voter turnout will not be much
                      more than\n> that.  (Assuming mildly-opinionated voters will
                      be balanced by\n> strongly-opinionated non-voters.)  So... To
                      determined the interests of the\n> population, hold a vote.
                      \ To determine how strongly that opinion is held,\n> make voting
                      optional, or go one step further and make it a slight hassle
                      to\n> place your vote.  Only dedicated lobbyists will go to
                      out-of game web-pages,\n> and jump though additional hoops to
                      make their opinions known.\n\nGood call on making them jump
                      through hoops to vote. I've never understood\nwhy Americans
                      get so emphatic that it should be easy to vote, except\ninsofar
                      as making it easy to vote helps certain political factions.
                      It\ncertainly does nothing for finding out what the preference
                      of the\ncommunity (if an abstract notion can be said to have
                      a preference at all).\n\n \n> The solution I've just proposed
                      is not a particularly unique or original\n> one, as the two
                      variables I describe - the results of the vote, and the\n> number
                      of voters - are already used by pundits in this very manner.
                      \ In\n> Canada, at least, voter turnout is relatively high in
                      federal elections,\n> while very few people vote in municipal
                      elections.  This leads to the\n> conclusion that international
                      trade policy is generally held to be more\n> important, and
                      elicit stronger opinions then what day my garbage is\n> collected.
                      \ (No offense to any would-be municipal politicians in this
                      group.\n> :p )\n\nChuckle, good point. \n\n \n> Holding separate
                      ballots on different occassions for each issue is also a\n>
                      way to ensure that people don't voice an opinion about issues
                      that they\n> don't really care about.\n\nAnother good call.\n\n
                      \n<stuff snipped about the useful function that special interest
                      lobby\ngroups have by allowing people who care more about an
                      issue to have a\ngreater effect on it>\n\n> \n> And 2.  Is there
                      a way to build this extra influence into the system?\n> \n>
                      Ex - Some race car games artificially enhance the capabilities
                      of vehicles\n> being driven by players who are falling off the
                      pace.  The idea is to level\n> the playing field, so that the
                      players battle it out on the turns throughout\n> the course
                      of the entire race, instead of having the race won off the\n>
                      starting line - the assumption being that the former scenario
                      is more fun.\n> \n> Is this kind of idea applicable in a MUD?
                      \ Avoid the tyranny of the majority\n> by playing with the odds
                      to grant the minority an advantage?  This tactic is\n> already
                      applied on a micro scale - ex. NPCs don't help Necromancers
                      so make\n> their spells more powerful - but can it be applied
                      to the community at\n> large?\n\nHmm, I'm not sure that is applicable.
                      The reasoning behind it in terms of\ngameplay is to make it
                      more fun, but I'd think the reasoning behind voting\nmechanisms
                      for players is to accurately reflect community preference\n(though
                      I'll grant that some players find elections fun by nature).
                      \n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    header: !ruby/object:Headers
                      rmail: !ruby/object:RMail::Message
                        header: !ruby/object:RMail::Header
                          fields:
                          - !ruby/object:RMail::Header::Field
                            raw: 'From: Matthew Mihaly <diablo@best.com>'
                            name: From
                            value: Matthew Mihaly <diablo@best.com>
                          - !ruby/object:RMail::Header::Field
                            raw: 'Date: Sun, 23 Jan 2000 19:15:40 -0800 (PST)'
                            name: Date
                            value: Sun, 23 Jan 2000 19:15:40 -0800 (PST)
                          - !ruby/object:RMail::Header::Field
                            raw: 'Subject: RE: [MUD-Dev] Community Relations'
                            name: Subject
                            value: 'RE: [MUD-Dev] Community Relations'
                          mbox_from: 
                        body: "On Sun, 23 Jan 2000, Geoffrey A. MacDougall wrote:\n\n>
                          matt wrote:\n> \n> > I'm curious, how do you (or do you
                          propose) choose the \n> > players? It sounds\n> > to me
                          like you are talking about some sort of populist democratic\n>
                          > system? (correct me if I'm wrong please.) What happens
                          when \n> > they elect the\n> > mud equivalent of hitler,
                          and he decides that all Dwarves \n> > should be kicked\n>
                          > off. Or, worse yet, what happens if the player who is
                          at the \n> > top of the\n> > hierarchy decides hr is going
                          to quit, and is going to go out \n> > with a bang? \n> \n>
                          Checks and balances.  Limitations on power.  Certain acts
                          require the\n> consent of multiple administrators...\n\nWell,
                          the way the person described it, he mentioned a hierarchy
                          with one\nsingle person at the top.\n\n> \n> > I suppose
                          though that it's not completely a matter of \n> > gettting
                          the best\n> > administrators, but also of giving the playerbase
                          a feeling of\n> > empowerment.\n> \n> Interesting phrasing
                          - because a _feeling_ of empowererment is, by\n> definition,
                          not necessarily the same thing as empowerment.  Is it possible\n>
                          to grant a user base the feeling of empowerment without
                          actually\n> surrendering control?\n\nYou never surrendur
                          more than temporary control, because the users have\nthe
                          power only by your leave. All non-consensual (and by that
                          I mean 100%\nconsensual) government relies on power and
                          in the end, the control truly\ndoes lie with the owners
                          recognized by the law, for those who worship the\nlaw are
                          inevitably going to be more powerful than your users.\n\n
                          \n> Has this strategy ever been successfully applied?\n\nI've
                          never heard of it being applied, but I'd really like to
                          see someone\ndo it (perhaps this is a case where a non-commercial
                          mud would be best\nsuited as a testing ground?)\n\n \n>
                          > It's not\n> > so easy as just letting them vote straight
                          out though, and \n> > then vesting\n> > all legislative/executive/judiciary
                          power in one hierarchy, \n> > because you\n> > will end
                          up with tyranny of the majority.\n> \n> An effective charter
                          of rights (as defined in my previous posting) goes a\n>
                          long way in avoiding these problems...\n\nWho enumerates
                          what rights the players have? I must have missed this in\nyour
                          post. The way I recall the system being described was that
                          the users\nthemselves would decide on such things. Also,
                          such a charter requires\nhuman interpretation, presumably
                          by the players, in such a system.\n\n\n<stuff snipped about
                          how simple voting by the entire populace, done in a\nway
                          that requires someone to either vote entirely yes or entirely
                          no on an\nissue or candidate will not reflect the community
                          preference>\n\n> Two points - \n> \n> 1.  The problem you've
                          just outlined only arises if every member of the\n> commmunity
                          is forced to vote.  Voting, for the most part, is optional
                          IRL.\n> The same must be even more true in MUDs, because
                          forcing a vote will\n> alienate the large majority of your
                          players who are there to hack 'n slash\n> or chat, and who
                          don't really care about the way the MUD is governed.  So,\n>
                          if, by your example, only 55% of your population holds a
                          strong opinion on\n> the matter, chances are that your voter
                          turnout will not be much more than\n> that.  (Assuming mildly-opinionated
                          voters will be balanced by\n> strongly-opinionated non-voters.)
                          \ So... To determined the interests of the\n> population,
                          hold a vote.  To determine how strongly that opinion is
                          held,\n> make voting optional, or go one step further and
                          make it a slight hassle to\n> place your vote.  Only dedicated
                          lobbyists will go to out-of game web-pages,\n> and jump
                          though additional hoops to make their opinions known.\n\nGood
                          call on making them jump through hoops to vote. I've never
                          understood\nwhy Americans get so emphatic that it should
                          be easy to vote, except\ninsofar as making it easy to vote
                          helps certain political factions. It\ncertainly does nothing
                          for finding out what the preference of the\ncommunity (if
                          an abstract notion can be said to have a preference at all).\n\n
                          \n> The solution I've just proposed is not a particularly
                          unique or original\n> one, as the two variables I describe
                          - the results of the vote, and the\n> number of voters -
                          are already used by pundits in this very manner.  In\n>
                          Canada, at least, voter turnout is relatively high in federal
                          elections,\n> while very few people vote in municipal elections.
                          \ This leads to the\n> conclusion that international trade
                          policy is generally held to be more\n> important, and elicit
                          stronger opinions then what day my garbage is\n> collected.
                          \ (No offense to any would-be municipal politicians in this
                          group.\n> :p )\n\nChuckle, good point. \n\n \n> Holding
                          separate ballots on different occassions for each issue
                          is also a\n> way to ensure that people don't voice an opinion
                          about issues that they\n> don't really care about.\n\nAnother
                          good call.\n\n \n<stuff snipped about the useful function
                          that special interest lobby\ngroups have by allowing people
                          who care more about an issue to have a\ngreater effect on
                          it>\n\n> \n> And 2.  Is there a way to build this extra
                          influence into the system?\n> \n> Ex - Some race car games
                          artificially enhance the capabilities of vehicles\n> being
                          driven by players who are falling off the pace.  The idea
                          is to level\n> the playing field, so that the players battle
                          it out on the turns throughout\n> the course of the entire
                          race, instead of having the race won off the\n> starting
                          line - the assumption being that the former scenario is
                          more fun.\n> \n> Is this kind of idea applicable in a MUD?
                          \ Avoid the tyranny of the majority\n> by playing with the
                          odds to grant the minority an advantage?  This tactic is\n>
                          already applied on a micro scale - ex. NPCs don't help Necromancers
                          so make\n> their spells more powerful - but can it be applied
                          to the community at\n> large?\n\nHmm, I'm not sure that
                          is applicable. The reasoning behind it in terms of\ngameplay
                          is to make it more fun, but I'd think the reasoning behind
                          voting\nmechanisms for players is to accurately reflect
                          community preference\n(though I'll grant that some players
                          find elections fun by nature). \n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                        epilogue: 
                        preamble: 
                    message_id: !ruby/object:MessageId
                      raw: "[invalid or missing message id]"
                    subject: !ruby/object:Subject
                      original: 'RE: [MUD-Dev] Community Relations'
                    from: Matthew Mihaly <diablo@best.com>
                    references: []
                    date: 2000-01-24 03:15:40.000000000 Z
                    no_archive: false
                  call_number: !ruby/object:CallNumber
                    str: Jysr6yZM
                  source: archive
                  list: !ruby/object:List
                    slug: mud-dev
                    name: 
                    description: 
                    homepage: 
                    footer: 
                  message_id: *169
                parent: *170
                children: []
              - &173 !ruby/object:MessageContainer
                key: &171 !ruby/object:MessageId
                  raw: 00bj7qMa@generated-message-id.chibrary.org
                value: !ruby/object:Message
                  email: !ruby/object:Email
                    raw: |
                      From: "Sellers, Michael" <MSellers@maxis.com>
                      Date: Fri, 28 Jan 2000 14:23:28 -0800
                      Subject: RE: [MUD-Dev] Community Relations

                      Lovecraft wrote:
                      > ...
                      > Corruption, like a weed, lives.  Since I am a developer and the only level
                      > editor/writer/operator/scripter, I don't directly administer.  When I
                      > receive a report of a crime, I refer it to a player Guard or Demagogue
                      > (legislator).  When I receive a report of Guard or Demagogue corruption or
                      > neglect, I investigate.  When necessary I remove the corrupt official.
                      > In-game the mundanes (NPCs) have just removed the corrupt official.  One
                      > example exists on Mileth Political Discussion Board in Dark Ages.

                      Just curious, but why don't you give the players the ability to remove a
                      corrupt official (possibly by withdrawing 'Clout')?  I suppose you'd want to
                      keep some final authority, but given the rest of what you described, this
                      part seems like a natural.

                      Mike Sellers



                      _______________________________________________
                      MUD-Dev maillist  -  MUD-Dev@kanga.nu
                      http://www.kanga.nu/lists/listinfo/mud-dev
                    header: !ruby/object:Headers
                      rmail: !ruby/object:RMail::Message
                        header: !ruby/object:RMail::Header
                          fields:
                          - !ruby/object:RMail::Header::Field
                            raw: 'From: "Sellers, Michael" <MSellers@maxis.com>'
                            name: From
                            value: '"Sellers, Michael" <MSellers@maxis.com>'
                          - !ruby/object:RMail::Header::Field
                            raw: 'Date: Fri, 28 Jan 2000 14:23:28 -0800'
                            name: Date
                            value: Fri, 28 Jan 2000 14:23:28 -0800
                          - !ruby/object:RMail::Header::Field
                            raw: 'Subject: RE: [MUD-Dev] Community Relations'
                            name: Subject
                            value: 'RE: [MUD-Dev] Community Relations'
                          mbox_from: 
                        body: |
                          Lovecraft wrote:
                          > ...
                          > Corruption, like a weed, lives.  Since I am a developer and the only level
                          > editor/writer/operator/scripter, I don't directly administer.  When I
                          > receive a report of a crime, I refer it to a player Guard or Demagogue
                          > (legislator).  When I receive a report of Guard or Demagogue corruption or
                          > neglect, I investigate.  When necessary I remove the corrupt official.
                          > In-game the mundanes (NPCs) have just removed the corrupt official.  One
                          > example exists on Mileth Political Discussion Board in Dark Ages.

                          Just curious, but why don't you give the players the ability to remove a
                          corrupt official (possibly by withdrawing 'Clout')?  I suppose you'd want to
                          keep some final authority, but given the rest of what you described, this
                          part seems like a natural.

                          Mike Sellers



                          _______________________________________________
                          MUD-Dev maillist  -  MUD-Dev@kanga.nu
                          http://www.kanga.nu/lists/listinfo/mud-dev
                        epilogue: 
                        preamble: 
                    message_id: !ruby/object:MessageId
                      raw: "[invalid or missing message id]"
                    subject: !ruby/object:Subject
                      original: 'RE: [MUD-Dev] Community Relations'
                    from: Sellers, Michael <MSellers@maxis.com>
                    references: []
                    date: 2000-01-28 22:23:28.000000000 Z
                    no_archive: false
                  call_number: !ruby/object:CallNumber
                    str: 00bj7qMa
                  source: archive
                  list: !ruby/object:List
                    slug: mud-dev
                    name: 
                    description: 
                    homepage: 
                    footer: 
                  message_id: *171
                parent: *170
                children:
                - &457 !ruby/object:MessageContainer
                  key: &172 !ruby/object:MessageId
                    raw: 00bj5dy4@generated-message-id.chibrary.org
                  value: !ruby/object:Message
                    email: !ruby/object:Email
                      raw: |
                        From: "Lovecraft" <dave@darkages.com>
                        Date: Fri, 28 Jan 2000 22:19:24 -0800
                        Subject: Re: [MUD-Dev] Community Relations

                        Mike Sellers wrote:

                        > Lovecraft wrote:
                        > ...
                        > > Corruption, like a weed, lives.  Since I am a developer and the only
                        level
                        > > editor/writer/operator/scripter, I don't directly administer.  When I
                        > > receive a report of a crime, I refer it to a player Guard or Demagogue
                        > > (legislator).  When I receive a report of Guard or Demagogue corruption
                        or
                        > > neglect, I investigate.  When necessary I remove the corrupt official.
                        > > In-game the mundanes (NPCs) have just removed the corrupt official.  One
                        > > example exists on Mileth Political Discussion Board in Dark Ages.

                        > Just curious, but why don't you give the players the ability to remove a
                        > corrupt official (possibly by withdrawing 'Clout')?  I suppose you'd want
                        to
                        > keep some final authority, but given the rest of what you described, this
                        > part seems like a natural.


                        Please pardon my confusing statement.

                        Citizens, not only politicians, have the power to Widdle (deduct Clout
                        anonymously but inefficiently), Attack (deduct clout publicly and
                        efficiently), and Remove (remove once Clout is 0).  [1]  The mechanics are
                        gamey. [2]

                        The problem appears when someone slips through the cracks.  Most common
                        cracks are:

                            1. Apathy [3].  If it's not ultimately rewarding, a player doesn't do
                        it. [4]
                            2. Misunderstanding/miscommunication between officials.
                            3. Game limits.  No one can attack you when you are offline.

                        Fortunately, seeped corruption only happens occasionally; my social
                        supervision cost is less than the administration cost I had experienced in
                        managing appointed player admins.

                        Dave Kennerly
                        Game Director
                        www.darkages.com

                        Notes:
                        [1] One player's political overview, including mechanics:
                        http://www.darkages.com/atavism/lore -> Click "Politica Dominica"

                        [2] Clout table:
                        http://www.darkages.com/atavism/lore/Paladine_Politica/1-3.html

                        Actual Clout numbers revised; after player reports that anonymous attacking
                        and single-citizen attacking were too convenient:
                        http://www.darkages.com/news/000113_2.html

                        [3] I have removed apathetic officials on a couple of occasions.  Since
                        there are multiple officials and I have very limited tools, an official's
                        sphere of responsibility can be grayed.  For example, the can-be-true
                        excuse: "I was off-duty."

                        [4] Ultimately fun, even if immediately boring.  For examples: leveling for
                        a better item, doing a boring cheat for great advantages, the social
                        prestige of office, or the fun expected from real-world social skills
                        learned while playing politician.




                        _______________________________________________
                        MUD-Dev maillist  -  MUD-Dev@kanga.nu
                        http://www.kanga.nu/lists/listinfo/mud-dev
                      header: !ruby/object:Headers
                        rmail: !ruby/object:RMail::Message
                          header: !ruby/object:RMail::Header
                            fields:
                            - !ruby/object:RMail::Header::Field
                              raw: 'From: "Lovecraft" <dave@darkages.com>'
                              name: From
                              value: '"Lovecraft" <dave@darkages.com>'
                            - !ruby/object:RMail::Header::Field
                              raw: 'Date: Fri, 28 Jan 2000 22:19:24 -0800'
                              name: Date
                              value: Fri, 28 Jan 2000 22:19:24 -0800
                            - !ruby/object:RMail::Header::Field
                              raw: 'Subject: Re: [MUD-Dev] Community Relations'
                              name: Subject
                              value: 'Re: [MUD-Dev] Community Relations'
                            mbox_from: 
                          body: |
                            Mike Sellers wrote:

                            > Lovecraft wrote:
                            > ...
                            > > Corruption, like a weed, lives.  Since I am a developer and the only
                            level
                            > > editor/writer/operator/scripter, I don't directly administer.  When I
                            > > receive a report of a crime, I refer it to a player Guard or Demagogue
                            > > (legislator).  When I receive a report of Guard or Demagogue corruption
                            or
                            > > neglect, I investigate.  When necessary I remove the corrupt official.
                            > > In-game the mundanes (NPCs) have just removed the corrupt official.  One
                            > > example exists on Mileth Political Discussion Board in Dark Ages.

                            > Just curious, but why don't you give the players the ability to remove a
                            > corrupt official (possibly by withdrawing 'Clout')?  I suppose you'd want
                            to
                            > keep some final authority, but given the rest of what you described, this
                            > part seems like a natural.


                            Please pardon my confusing statement.

                            Citizens, not only politicians, have the power to Widdle (deduct Clout
                            anonymously but inefficiently), Attack (deduct clout publicly and
                            efficiently), and Remove (remove once Clout is 0).  [1]  The mechanics are
                            gamey. [2]

                            The problem appears when someone slips through the cracks.  Most common
                            cracks are:

                                1. Apathy [3].  If it's not ultimately rewarding, a player doesn't do
                            it. [4]
                                2. Misunderstanding/miscommunication between officials.
                                3. Game limits.  No one can attack you when you are offline.

                            Fortunately, seeped corruption only happens occasionally; my social
                            supervision cost is less than the administration cost I had experienced in
                            managing appointed player admins.

                            Dave Kennerly
                            Game Director
                            www.darkages.com

                            Notes:
                            [1] One player's political overview, including mechanics:
                            http://www.darkages.com/atavism/lore -> Click "Politica Dominica"

                            [2] Clout table:
                            http://www.darkages.com/atavism/lore/Paladine_Politica/1-3.html

                            Actual Clout numbers revised; after player reports that anonymous attacking
                            and single-citizen attacking were too convenient:
                            http://www.darkages.com/news/000113_2.html

                            [3] I have removed apathetic officials on a couple of occasions.  Since
                            there are multiple officials and I have very limited tools, an official's
                            sphere of responsibility can be grayed.  For example, the can-be-true
                            excuse: "I was off-duty."

                            [4] Ultimately fun, even if immediately boring.  For examples: leveling for
                            a better item, doing a boring cheat for great advantages, the social
                            prestige of office, or the fun expected from real-world social skills
                            learned while playing politician.




                            _______________________________________________
                            MUD-Dev maillist  -  MUD-Dev@kanga.nu
                            http://www.kanga.nu/lists/listinfo/mud-dev
                          epilogue: 
                          preamble: 
                      message_id: !ruby/object:MessageId
                        raw: "[invalid or missing message id]"
                      subject: !ruby/object:Subject
                        original: 'Re: [MUD-Dev] Community Relations'
                      from: Lovecraft <dave@darkages.com>
                      references: []
                      date: 2000-01-29 06:19:24.000000000 Z
                      no_archive: false
                    call_number: !ruby/object:CallNumber
                      str: 00bj5dy4
                    source: archive
                    list: !ruby/object:List
                      slug: mud-dev
                      name: 
                      description: 
                      homepage: 
                      footer: 
                    message_id: *172
                  parent: *173
                  children: []
              - &176 !ruby/object:MessageContainer
                key: &174 !ruby/object:MessageId
                  raw: JzUMQw7c@generated-message-id.chibrary.org
                value: !ruby/object:Message
                  email: !ruby/object:Email
                    raw: "From: \"Geoffrey A. MacDougall\" <geoffrey@poptronik.com>\nDate:
                      Thu, 27 Jan 2000 23:17:08 -0500\nSubject: RE: [MUD-Dev] Community
                      Relations\n\nThis message is in MIME format. Since your mail
                      reader does not understand\nthis format, some or all of this
                      message may not be legible.\n\n------_=_NextPart_001_01BF6946.8B142610\nContent-Type:
                      text/plain;\n\tcharset=\"iso-8859-1\"\n\nRe: Lovecraft's last
                      posting:\n\nHi, read your links, have some questions...\n\nFirst,
                      however, IMHO, well done.  Remarkable insight for someone who
                      claims\nthat their \"understanding of political science continually
                      needs upgrading.\"\n:)\n\nA few of your statements concerning
                      how to/how not to politic were obviously\nborn of some trying
                      experiences.  One that particularly drew my attention\nwas \"It
                      is very uncouth to yell out 'Has everyone given support?'\"
                      \ This\nleads me to believe that you've had some problems with
                      players who didn't\nreally care about representing the interests
                      of their fellow Aislings, but\nwere simply concerned with obtaining
                      extra powers - i.e., another form of\nlevelling.  And, based
                      upon the assumption that people wouldn't repeatedly\nsend out
                      such inquiries unless they were, to a certain degree, successful
                      -\nthat some players throw away their \"votes\" without the
                      due care and\nattention you're system tries to foster.  I realize
                      there is always going to\nbe the bad with the good, et al. that...
                      but I was wondering if reducing the\nfrequency of voting, thereby
                      increasing the value of each decision, would\nlead people to
                      treat the process with greater respect?\n\nLovecraft wrote:
                      \n> What is an example system that is less corrupt than the
                      tyranny of the\n> majority?\n\nAn incorruptable and authoritarian
                      AI hooked up to an everlasting power\nsupply that is programmed
                      to listen to and evaluate every possible point of\nview on every
                      possible issue, and make decisions that maximize the\nwell-being
                      of every person alive by ensuring that equal distibution of
                      both\ngoods and security is balanced with unheralded levels
                      of social and\nscientific progress, all the while maintaining
                      the prime directive that all\nforms of life are to be protected
                      and cherished at both the individual and\ncollective levels.
                      :) \n\n> I agree with Matthew's statement about the advantage
                      of competing\n> hierarchies.  Dark Ages has two hierarchies.
                      \ There are two villages.\n> Village officials only have jurisdiction
                      over the village.  \n> The greatest\n> threat is exile, which
                      means the criminal cannot enter the village's\n> territory.
                      \ As the community grows, the other villages will \n> be given
                      to\n> player control.\n\nDo you provide each village with an
                      initial slant, i.e., \"you guys are the\nevil ones\", or is
                      every village free to start from scratch?  If the latter,\ndo
                      the villages eventually pursue vastly distinctive political
                      philosophies,\nor do they all start to resemble one another?\n
                      \n\n> Corruption, like a weed, lives.  Since I am a developer
                      and \n> the only level\n> editor/writer/operator/scripter, I
                      don't directly administer.  When I\n> receive a report of a
                      crime, I refer it to a player Guard or Demagogue\n> (legislator).
                      \ When I receive a report of Guard or Demagogue \n> corruption
                      or\n> neglect, I investigate.  When necessary I remove the corrupt
                      official.\n\nDo, and if so, how do people rebel against these
                      \"dictatorial\" acts?  Also,\nhave you ever gone back on a decision
                      when faced with a huge outcry?  Do you\never put your opinion
                      as to what \"should\" happen above that of the players?\n\nForgive
                      me if these issues were addressed prior to my joning the list...\n\n\nCheers,\n\nG.
                      \n\n------_=_NextPart_001_01BF6946.8B142610\nContent-Type: text/html;\n\tcharset=\"iso-8859-1\"\nContent-Transfer-Encoding:
                      quoted-printable\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML
                      3.2//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=3D\"Content-Type\"
                      CONTENT=3D\"text/html; =\ncharset=3Diso-8859-1\">\n<META NAME=3D\"Generator\"
                      CONTENT=3D\"MS Exchange Server version =\n5.5.2650.12\">\n<TITLE>RE:
                      [MUD-Dev] Community Relations</TITLE>\n</HEAD>\n<BODY>\n\n<P><FONT
                      SIZE=3D2>Re: Lovecraft's last posting:</FONT>\n</P>\n\n<P><FONT
                      SIZE=3D2>Hi, read your links, have some questions...</FONT>\n</P>\n\n<P><FONT
                      SIZE=3D2>First, however, IMHO, well done.&nbsp; Remarkable =\ninsight
                      for someone who claims that their &quot;understanding of =\npolitical
                      science continually needs upgrading.&quot;&nbsp; =\n:)</FONT></P>\n\n<P><FONT
                      SIZE=3D2>A few of your statements concerning how to/how not
                      to =\npolitic were obviously born of some trying experiences.&nbsp;
                      One that =\nparticularly drew my attention was &quot;It is very
                      uncouth to yell out =\n'Has everyone given support?'&quot;&nbsp;
                      This leads me to believe that =\nyou've had some problems with
                      players who didn't really care about =\nrepresenting the interests
                      of their fellow Aislings, but were simply =\nconcerned with
                      obtaining extra powers - i.e., another form of =\nlevelling.&nbsp;
                      And, based upon the assumption that people wouldn't =\nrepeatedly
                      send out such inquiries unless they were, to a certain =\ndegree,
                      successful - that some players throw away their =\n&quot;votes&quot;
                      without the due care and attention you're system =\ntries to
                      foster.&nbsp; I realize there is always going to be the bad
                      =\nwith the good, et al. that... but I was wondering if reducing
                      the =\nfrequency of voting, thereby increasing the value of
                      each decision, =\nwould lead people to treat the process with
                      greater respect?</FONT></P>\n\n<P><FONT SIZE=3D2>Lovecraft wrote:
                      </FONT>\n<BR><FONT SIZE=3D2>&gt; What is an example system that
                      is less corrupt =\nthan the tyranny of the</FONT>\n<BR><FONT
                      SIZE=3D2>&gt; majority?</FONT>\n</P>\n\n<P><FONT SIZE=3D2>An
                      incorruptable and authoritarian AI hooked up to an =\neverlasting
                      power supply that is programmed to listen to and evaluate =\nevery
                      possible point of view on every possible issue, and make =\ndecisions
                      that maximize the well-being of every person alive by =\nensuring
                      that equal distibution of both goods and security is balanced
                      =\nwith unheralded levels of social and scientific progress,
                      all the while =\nmaintaining the prime directive that all forms
                      of life are to be =\nprotected and cherished at both the individual
                      and collective levels. =\n:) </FONT></P>\n\n<P><FONT SIZE=3D2>&gt;
                      I agree with Matthew's statement about the =\nadvantage of competing</FONT>\n<BR><FONT
                      SIZE=3D2>&gt; hierarchies.&nbsp; Dark Ages has two =\nhierarchies.&nbsp;
                      There are two villages.</FONT>\n<BR><FONT SIZE=3D2>&gt; Village
                      officials only have jurisdiction over =\nthe village.&nbsp;
                      </FONT>\n<BR><FONT SIZE=3D2>&gt; The greatest</FONT>\n<BR><FONT
                      SIZE=3D2>&gt; threat is exile, which means the criminal =\ncannot
                      enter the village's</FONT>\n<BR><FONT SIZE=3D2>&gt; territory.&nbsp;
                      As the community grows, the =\nother villages will </FONT>\n<BR><FONT
                      SIZE=3D2>&gt; be given to</FONT>\n<BR><FONT SIZE=3D2>&gt; player
                      control.</FONT>\n</P>\n\n<P><FONT SIZE=3D2>Do you provide each
                      village with an initial slant, =\ni.e., &quot;you guys are the
                      evil ones&quot;, or is every village free =\nto start from scratch?&nbsp;
                      If the latter, do the villages eventually =\npursue vastly distinctive
                      political philosophies, or do they all start =\nto resemble
                      one another?</FONT></P>\n\n<P><FONT SIZE=3D2>&nbsp;</FONT>\n</P>\n\n<P><FONT
                      SIZE=3D2>&gt; Corruption, like a weed, lives.&nbsp; Since I
                      am =\na developer and </FONT>\n<BR><FONT SIZE=3D2>&gt; the only
                      level</FONT>\n<BR><FONT SIZE=3D2>&gt; editor/writer/operator/scripter,
                      I don't =\ndirectly administer.&nbsp; When I</FONT>\n<BR><FONT
                      SIZE=3D2>&gt; receive a report of a crime, I refer it to a =\nplayer
                      Guard or Demagogue</FONT>\n<BR><FONT SIZE=3D2>&gt; (legislator).&nbsp;
                      When I receive a report of =\nGuard or Demagogue </FONT>\n<BR><FONT
                      SIZE=3D2>&gt; corruption or</FONT>\n<BR><FONT SIZE=3D2>&gt;
                      neglect, I investigate.&nbsp; When necessary I =\nremove the
                      corrupt official.</FONT>\n</P>\n\n<P><FONT SIZE=3D2>Do, and
                      if so, how do people rebel against these =\n&quot;dictatorial&quot;
                      acts?&nbsp; Also, have you ever gone back on a =\ndecision when
                      faced with a huge outcry?&nbsp; Do you ever put your =\nopinion
                      as to what &quot;should&quot; happen above that of the =\nplayers?</FONT></P>\n\n<P><FONT
                      SIZE=3D2>Forgive me if these issues were addressed prior to
                      my =\njoning the list...</FONT>\n</P>\n<BR>\n\n<P><FONT SIZE=3D2>Cheers,</FONT>\n</P>\n\n<P><FONT
                      SIZE=3D2>G. </FONT>\n</P>\n\n</BODY>\n</HTML>\n------_=_NextPart_001_01BF6946.8B142610--\n\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    header: !ruby/object:Headers
                      rmail: !ruby/object:RMail::Message
                        header: !ruby/object:RMail::Header
                          fields:
                          - !ruby/object:RMail::Header::Field
                            raw: 'From: "Geoffrey A. MacDougall" <geoffrey@poptronik.com>'
                            name: From
                            value: '"Geoffrey A. MacDougall" <geoffrey@poptronik.com>'
                          - !ruby/object:RMail::Header::Field
                            raw: 'Date: Thu, 27 Jan 2000 23:17:08 -0500'
                            name: Date
                            value: Thu, 27 Jan 2000 23:17:08 -0500
                          - !ruby/object:RMail::Header::Field
                            raw: 'Subject: RE: [MUD-Dev] Community Relations'
                            name: Subject
                            value: 'RE: [MUD-Dev] Community Relations'
                          mbox_from: 
                        body: "This message is in MIME format. Since your mail reader
                          does not understand\nthis format, some or all of this message
                          may not be legible.\n\n------_=_NextPart_001_01BF6946.8B142610\nContent-Type:
                          text/plain;\n\tcharset=\"iso-8859-1\"\n\nRe: Lovecraft's
                          last posting:\n\nHi, read your links, have some questions...\n\nFirst,
                          however, IMHO, well done.  Remarkable insight for someone
                          who claims\nthat their \"understanding of political science
                          continually needs upgrading.\"\n:)\n\nA few of your statements
                          concerning how to/how not to politic were obviously\nborn
                          of some trying experiences.  One that particularly drew
                          my attention\nwas \"It is very uncouth to yell out 'Has
                          everyone given support?'\"  This\nleads me to believe that
                          you've had some problems with players who didn't\nreally
                          care about representing the interests of their fellow Aislings,
                          but\nwere simply concerned with obtaining extra powers -
                          i.e., another form of\nlevelling.  And, based upon the assumption
                          that people wouldn't repeatedly\nsend out such inquiries
                          unless they were, to a certain degree, successful -\nthat
                          some players throw away their \"votes\" without the due
                          care and\nattention you're system tries to foster.  I realize
                          there is always going to\nbe the bad with the good, et al.
                          that... but I was wondering if reducing the\nfrequency of
                          voting, thereby increasing the value of each decision, would\nlead
                          people to treat the process with greater respect?\n\nLovecraft
                          wrote: \n> What is an example system that is less corrupt
                          than the tyranny of the\n> majority?\n\nAn incorruptable
                          and authoritarian AI hooked up to an everlasting power\nsupply
                          that is programmed to listen to and evaluate every possible
                          point of\nview on every possible issue, and make decisions
                          that maximize the\nwell-being of every person alive by ensuring
                          that equal distibution of both\ngoods and security is balanced
                          with unheralded levels of social and\nscientific progress,
                          all the while maintaining the prime directive that all\nforms
                          of life are to be protected and cherished at both the individual
                          and\ncollective levels. :) \n\n> I agree with Matthew's
                          statement about the advantage of competing\n> hierarchies.
                          \ Dark Ages has two hierarchies.  There are two villages.\n>
                          Village officials only have jurisdiction over the village.
                          \ \n> The greatest\n> threat is exile, which means the criminal
                          cannot enter the village's\n> territory.  As the community
                          grows, the other villages will \n> be given to\n> player
                          control.\n\nDo you provide each village with an initial
                          slant, i.e., \"you guys are the\nevil ones\", or is every
                          village free to start from scratch?  If the latter,\ndo
                          the villages eventually pursue vastly distinctive political
                          philosophies,\nor do they all start to resemble one another?\n
                          \n\n> Corruption, like a weed, lives.  Since I am a developer
                          and \n> the only level\n> editor/writer/operator/scripter,
                          I don't directly administer.  When I\n> receive a report
                          of a crime, I refer it to a player Guard or Demagogue\n>
                          (legislator).  When I receive a report of Guard or Demagogue
                          \n> corruption or\n> neglect, I investigate.  When necessary
                          I remove the corrupt official.\n\nDo, and if so, how do
                          people rebel against these \"dictatorial\" acts?  Also,\nhave
                          you ever gone back on a decision when faced with a huge
                          outcry?  Do you\never put your opinion as to what \"should\"
                          happen above that of the players?\n\nForgive me if these
                          issues were addressed prior to my joning the list...\n\n\nCheers,\n\nG.
                          \n\n------_=_NextPart_001_01BF6946.8B142610\nContent-Type:
                          text/html;\n\tcharset=\"iso-8859-1\"\nContent-Transfer-Encoding:
                          quoted-printable\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD
                          HTML 3.2//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=3D\"Content-Type\"
                          CONTENT=3D\"text/html; =\ncharset=3Diso-8859-1\">\n<META
                          NAME=3D\"Generator\" CONTENT=3D\"MS Exchange Server version
                          =\n5.5.2650.12\">\n<TITLE>RE: [MUD-Dev] Community Relations</TITLE>\n</HEAD>\n<BODY>\n\n<P><FONT
                          SIZE=3D2>Re: Lovecraft's last posting:</FONT>\n</P>\n\n<P><FONT
                          SIZE=3D2>Hi, read your links, have some questions...</FONT>\n</P>\n\n<P><FONT
                          SIZE=3D2>First, however, IMHO, well done.&nbsp; Remarkable
                          =\ninsight for someone who claims that their &quot;understanding
                          of =\npolitical science continually needs upgrading.&quot;&nbsp;
                          =\n:)</FONT></P>\n\n<P><FONT SIZE=3D2>A few of your statements
                          concerning how to/how not to =\npolitic were obviously born
                          of some trying experiences.&nbsp; One that =\nparticularly
                          drew my attention was &quot;It is very uncouth to yell out
                          =\n'Has everyone given support?'&quot;&nbsp; This leads
                          me to believe that =\nyou've had some problems with players
                          who didn't really care about =\nrepresenting the interests
                          of their fellow Aislings, but were simply =\nconcerned with
                          obtaining extra powers - i.e., another form of =\nlevelling.&nbsp;
                          And, based upon the assumption that people wouldn't =\nrepeatedly
                          send out such inquiries unless they were, to a certain =\ndegree,
                          successful - that some players throw away their =\n&quot;votes&quot;
                          without the due care and attention you're system =\ntries
                          to foster.&nbsp; I realize there is always going to be the
                          bad =\nwith the good, et al. that... but I was wondering
                          if reducing the =\nfrequency of voting, thereby increasing
                          the value of each decision, =\nwould lead people to treat
                          the process with greater respect?</FONT></P>\n\n<P><FONT
                          SIZE=3D2>Lovecraft wrote: </FONT>\n<BR><FONT SIZE=3D2>&gt;
                          What is an example system that is less corrupt =\nthan the
                          tyranny of the</FONT>\n<BR><FONT SIZE=3D2>&gt; majority?</FONT>\n</P>\n\n<P><FONT
                          SIZE=3D2>An incorruptable and authoritarian AI hooked up
                          to an =\neverlasting power supply that is programmed to
                          listen to and evaluate =\nevery possible point of view on
                          every possible issue, and make =\ndecisions that maximize
                          the well-being of every person alive by =\nensuring that
                          equal distibution of both goods and security is balanced
                          =\nwith unheralded levels of social and scientific progress,
                          all the while =\nmaintaining the prime directive that all
                          forms of life are to be =\nprotected and cherished at both
                          the individual and collective levels. =\n:) </FONT></P>\n\n<P><FONT
                          SIZE=3D2>&gt; I agree with Matthew's statement about the
                          =\nadvantage of competing</FONT>\n<BR><FONT SIZE=3D2>&gt;
                          hierarchies.&nbsp; Dark Ages has two =\nhierarchies.&nbsp;
                          There are two villages.</FONT>\n<BR><FONT SIZE=3D2>&gt;
                          Village officials only have jurisdiction over =\nthe village.&nbsp;
                          </FONT>\n<BR><FONT SIZE=3D2>&gt; The greatest</FONT>\n<BR><FONT
                          SIZE=3D2>&gt; threat is exile, which means the criminal
                          =\ncannot enter the village's</FONT>\n<BR><FONT SIZE=3D2>&gt;
                          territory.&nbsp; As the community grows, the =\nother villages
                          will </FONT>\n<BR><FONT SIZE=3D2>&gt; be given to</FONT>\n<BR><FONT
                          SIZE=3D2>&gt; player control.</FONT>\n</P>\n\n<P><FONT SIZE=3D2>Do
                          you provide each village with an initial slant, =\ni.e.,
                          &quot;you guys are the evil ones&quot;, or is every village
                          free =\nto start from scratch?&nbsp; If the latter, do the
                          villages eventually =\npursue vastly distinctive political
                          philosophies, or do they all start =\nto resemble one another?</FONT></P>\n\n<P><FONT
                          SIZE=3D2>&nbsp;</FONT>\n</P>\n\n<P><FONT SIZE=3D2>&gt; Corruption,
                          like a weed, lives.&nbsp; Since I am =\na developer and
                          </FONT>\n<BR><FONT SIZE=3D2>&gt; the only level</FONT>\n<BR><FONT
                          SIZE=3D2>&gt; editor/writer/operator/scripter, I don't =\ndirectly
                          administer.&nbsp; When I</FONT>\n<BR><FONT SIZE=3D2>&gt;
                          receive a report of a crime, I refer it to a =\nplayer Guard
                          or Demagogue</FONT>\n<BR><FONT SIZE=3D2>&gt; (legislator).&nbsp;
                          When I receive a report of =\nGuard or Demagogue </FONT>\n<BR><FONT
                          SIZE=3D2>&gt; corruption or</FONT>\n<BR><FONT SIZE=3D2>&gt;
                          neglect, I investigate.&nbsp; When necessary I =\nremove
                          the corrupt official.</FONT>\n</P>\n\n<P><FONT SIZE=3D2>Do,
                          and if so, how do people rebel against these =\n&quot;dictatorial&quot;
                          acts?&nbsp; Also, have you ever gone back on a =\ndecision
                          when faced with a huge outcry?&nbsp; Do you ever put your
                          =\nopinion as to what &quot;should&quot; happen above that
                          of the =\nplayers?</FONT></P>\n\n<P><FONT SIZE=3D2>Forgive
                          me if these issues were addressed prior to my =\njoning
                          the list...</FONT>\n</P>\n<BR>\n\n<P><FONT SIZE=3D2>Cheers,</FONT>\n</P>\n\n<P><FONT
                          SIZE=3D2>G. </FONT>\n</P>\n\n</BODY>\n</HTML>\n------_=_NextPart_001_01BF6946.8B142610--\n\n\n\n_______________________________________________\nMUD-Dev
                          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                        epilogue: 
                        preamble: 
                    message_id: !ruby/object:MessageId
                      raw: "[invalid or missing message id]"
                    subject: !ruby/object:Subject
                      original: 'RE: [MUD-Dev] Community Relations'
                    from: Geoffrey A. MacDougall <geoffrey@poptronik.com>
                    references: []
                    date: 2000-01-28 04:17:08.000000000 Z
                    no_archive: false
                  call_number: !ruby/object:CallNumber
                    str: JzUMQw7c
                  source: archive
                  list: !ruby/object:List
                    slug: mud-dev
                    name: 
                    description: 
                    homepage: 
                    footer: 
                  message_id: *174
                parent: *170
                children:
                - &178 !ruby/object:MessageContainer
                  key: &175 !ruby/object:MessageId
                    raw: 00bj5dxY@generated-message-id.chibrary.org
                  value: !ruby/object:Message
                    email: !ruby/object:Email
                      raw: "From: Marian Griffith <gryphon@iaehv.nl>\nDate: Sat, 29
                        Jan 2000 09:42:22 +0000 (GMT)\nSubject: RE: [MUD-Dev] Community
                        Relations\n\nIn <URL:news:local.muddev> on Fri 28 Jan, Geoffrey
                        A. MacDougall wrote:\n> Re: Lovecraft's last posting:\n\n>
                        Lovecraft wrote: \n> > What is an example system that is less
                        corrupt than the tyranny of the\n> > majority?\n\n> An incorruptable
                        and authoritarian AI hooked up to an everlasting power\n>
                        supply that is programmed to listen to and evaluate every
                        possible point of\n> view on every possible issue, and make
                        decisions that maximize the\n> well-being of every person
                        alive by ensuring that equal distibution of both\n> goods
                        and security is balanced with unheralded levels of social
                        and\n> scientific progress, all the while maintaining the
                        prime directive that all\n> forms of life are to be protected
                        and cherished at both the individual and\n> collective levels.
                        :) \n\nI think that creating such a computer should not be
                        trusted to humans...\nA far simpler, and fairer, system is
                        one where the majority rules but is\nobliged to compensate
                        the minority whenever a vote goes in a way that is\nharming
                        them.\nThe problem is  that it is impossible to make a decision
                        on an important\nsubject that does not 'hurt' somebody in
                        some way.  E.g. when planning a\nnew highway it must run through
                        some people's backyard. Even if you plan\nit so that it inconveniences
                        the least people,  there will be people who\nhave that highway
                        in their backyard.  Regardless how you arrive at  that\ndecision.
                        \ So, I would suggest to make the people who 'win' the vote,
                        or\ndecision, or whatever,  compensate those who 'lose' it.
                        \ Maybe that will\ngive them an incentive to  both minimise
                        the damage,  and reconsider any\naction that will cost them
                        more than in it gains them (e.g. is that high\nway really
                        necessary?).\n\nOf course, this is hard to achieve in mud
                        terms where there is neither a\ntrue form of power, nor a
                        true form of cost.\n\n\nMarian\n--\nYes - at last - You. I
                        Choose you. Out of all the world,\nout of all the seeking,
                        I have found you, young sister of\nmy heart! You are mine
                        and I am yours - and never again\nwill there be loneliness
                        ...\n\nRolan Choosing Talia,\nArrows of the Queen, by Mercedes
                        Lackey\n\n\n\n\n_______________________________________________\nMUD-Dev
                        maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                      header: !ruby/object:Headers
                        rmail: !ruby/object:RMail::Message
                          header: !ruby/object:RMail::Header
                            fields:
                            - !ruby/object:RMail::Header::Field
                              raw: 'From: Marian Griffith <gryphon@iaehv.nl>'
                              name: From
                              value: Marian Griffith <gryphon@iaehv.nl>
                            - !ruby/object:RMail::Header::Field
                              raw: 'Date: Sat, 29 Jan 2000 09:42:22 +0000 (GMT)'
                              name: Date
                              value: Sat, 29 Jan 2000 09:42:22 +0000 (GMT)
                            - !ruby/object:RMail::Header::Field
                              raw: 'Subject: RE: [MUD-Dev] Community Relations'
                              name: Subject
                              value: 'RE: [MUD-Dev] Community Relations'
                            mbox_from: 
                          body: "In <URL:news:local.muddev> on Fri 28 Jan, Geoffrey
                            A. MacDougall wrote:\n> Re: Lovecraft's last posting:\n\n>
                            Lovecraft wrote: \n> > What is an example system that
                            is less corrupt than the tyranny of the\n> > majority?\n\n>
                            An incorruptable and authoritarian AI hooked up to an
                            everlasting power\n> supply that is programmed to listen
                            to and evaluate every possible point of\n> view on every
                            possible issue, and make decisions that maximize the\n>
                            well-being of every person alive by ensuring that equal
                            distibution of both\n> goods and security is balanced
                            with unheralded levels of social and\n> scientific progress,
                            all the while maintaining the prime directive that all\n>
                            forms of life are to be protected and cherished at both
                            the individual and\n> collective levels. :) \n\nI think
                            that creating such a computer should not be trusted to
                            humans...\nA far simpler, and fairer, system is one where
                            the majority rules but is\nobliged to compensate the minority
                            whenever a vote goes in a way that is\nharming them.\nThe
                            problem is  that it is impossible to make a decision on
                            an important\nsubject that does not 'hurt' somebody in
                            some way.  E.g. when planning a\nnew highway it must run
                            through some people's backyard. Even if you plan\nit so
                            that it inconveniences the least people,  there will be
                            people who\nhave that highway in their backyard.  Regardless
                            how you arrive at  that\ndecision.  So, I would suggest
                            to make the people who 'win' the vote, or\ndecision, or
                            whatever,  compensate those who 'lose' it.  Maybe that
                            will\ngive them an incentive to  both minimise the damage,
                            \ and reconsider any\naction that will cost them more
                            than in it gains them (e.g. is that high\nway really necessary?).\n\nOf
                            course, this is hard to achieve in mud terms where there
                            is neither a\ntrue form of power, nor a true form of cost.\n\n\nMarian\n--\nYes
                            - at last - You. I Choose you. Out of all the world,\nout
                            of all the seeking, I have found you, young sister of\nmy
                            heart! You are mine and I am yours - and never again\nwill
                            there be loneliness ...\n\nRolan Choosing Talia,\nArrows
                            of the Queen, by Mercedes Lackey\n\n\n\n\n_______________________________________________\nMUD-Dev
                            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                          epilogue: 
                          preamble: 
                      message_id: !ruby/object:MessageId
                        raw: "[invalid or missing message id]"
                      subject: !ruby/object:Subject
                        original: 'RE: [MUD-Dev] Community Relations'
                      from: Marian Griffith <gryphon@iaehv.nl>
                      references: []
                      date: 2000-01-29 09:42:22.000000000 Z
                      no_archive: false
                    call_number: !ruby/object:CallNumber
                      str: 00bj5dxY
                    source: archive
                    list: !ruby/object:List
                      slug: mud-dev
                      name: 
                      description: 
                      homepage: 
                      footer: 
                    message_id: *175
                  parent: *176
                  children:
                  - &180 !ruby/object:MessageContainer
                    key: &177 !ruby/object:MessageId
                      raw: 000Dntr6@generated-message-id.chibrary.org
                    value: !ruby/object:Message
                      email: !ruby/object:Email
                        raw: "From: Matthew Mihaly <diablo@best.com>\nDate: Sun, 30
                          Jan 2000 13:32:48 -0800 (PST)\nSubject: RE: [MUD-Dev] Community
                          Relations\n\nOn Sat, 29 Jan 2000, Marian Griffith wrote:\n\n>
                          In <URL:news:local.muddev> on Fri 28 Jan, Geoffrey A. MacDougall
                          wrote:\n> \n> > Lovecraft wrote: \n> > > What is an example
                          system that is less corrupt than the tyranny of the\n> >
                          > majority?\n\n\nThat largely depends on your definition
                          of corruption. If you believe that\ngovernment exists to
                          serve the present whims of the masses,then tyranny of\nthe
                          majority is the way to go. I believe that government exists
                          to serve\nnot just the present day population, but the future
                          population too, and in\nthis, the masses are horrible. Witness
                          the lack of popular interest in\nperhaps the most important
                          long-term issue currently facing the human\nrace: diversifying
                          our 'portfolio' of habitable environments. Inevitably,\nwhether
                          through our own efforts or a cosmic disaster, earth will
                          become\nuninhabitable. The masses do not care, however,
                          as they don't see it as\nbeing likely in their lifetime
                          (or, particularly in the nearly inevitable\ncase of nuclear
                          war, just don't want to think about it).\n\nFurther, while
                          I do not wish to get into this argument here, I think you'd\nfind
                          very serious and very valid arguments from various anarchist-oriented\npolitical
                          groups that their proposed systems are less open to the
                          sort of\ncorruption I think you are talking about (See David
                          Friedman's The\nMachinery of Freedom, for instance).\n\n\n\n>
                          A far simpler, and fairer, system is one where the majority
                          rules but is\n> obliged to compensate the minority whenever
                          a vote goes in a way that is\n> harming them.\n> The problem
                          is  that it is impossible to make a decision on an important\n>
                          subject that does not 'hurt' somebody in some way.  E.g.
                          when planning a\n> new highway it must run through some
                          people's backyard. Even if you plan\n> it so that it inconveniences
                          the least people,  there will be people who\n> have that
                          highway in their backyard.  Regardless how you arrive at
                          \ that\n> decision.  So, I would suggest to make the people
                          who 'win' the vote, or\n> decision, or whatever,  compensate
                          those who 'lose' it.  Maybe that will\n> give them an incentive
                          to  both minimise the damage,  and reconsider any\n> action
                          that will cost them more than in it gains them (e.g. is
                          that high\n> way really necessary?).\n\nThat's a bit simplistic.
                          Who decides what adequate compensation is? The\nsystem you
                          describe in terms of highways already exists. It's called\neminent
                          domain, and it allows (in the US at least) the government
                          to seize\nyour land, and then pay you what it feels your
                          land is worth. Of course,\nthe system is uses for determining
                          the worth of your land is ludicrous,\nand does nothing to
                          compensate someone who is emotionally attached to his\nland,
                          above and beyond the \"fair-market value\". \n\nOr, what
                          about if the majority votes that said minority will be going
                          to\nwar to defend the majority. There is no possible compensation
                          you could\ngive me to make up for having my legs shot off
                          that I would view as\ncompensating me in any significant
                          way.\n\nAs Isaiah Berlin pointed out in his essay (which
                          I previously referred to\nin this thread, I believe), \"The
                          Pursuit of the Ideal\", there is no reason\nat all to believe
                          that a system such as you describe, that aims to satisfy\nall
                          parties involved in a large population, exists even in\ntheory.
                          People's fundamental goals and ideals differ, and some of
                          them are\ncompletely incompatible, so that achieving one
                          necessarily means\ndisappointing another, and adequate (defined
                          by whom? the person being\ncompensated I assume) compensation
                          is not always possible.\n\n\n> Of course, this is hard to
                          achieve in mud terms where there is neither a\n> true form
                          of power, nor a true form of cost.\n\nI would disagree with
                          this. Power resides in the ability to enforce your\nwill
                          upon others, and I am certainly capable of doing that in
                          a mud that I\nrun. It's an extremely trivial form of power
                          compared to an emperor or\nwhat not of course, but I do
                          believe it's power nonetheless. I think there\nis a true
                          form of cost too. Power over others is really in the mind
                          of the\nbeholder. If you believe someone has power over
                          you, that person does, and\nif you believe there is a cost
                          to you to from some action, then there\nis. If there is
                          no true form of cost, I'm not sure how some players ever\nget
                          reduced to tears by actions performed on them by others
                          in a mud.\n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                        header: !ruby/object:Headers
                          rmail: !ruby/object:RMail::Message
                            header: !ruby/object:RMail::Header
                              fields:
                              - !ruby/object:RMail::Header::Field
                                raw: 'From: Matthew Mihaly <diablo@best.com>'
                                name: From
                                value: Matthew Mihaly <diablo@best.com>
                              - !ruby/object:RMail::Header::Field
                                raw: 'Date: Sun, 30 Jan 2000 13:32:48 -0800 (PST)'
                                name: Date
                                value: Sun, 30 Jan 2000 13:32:48 -0800 (PST)
                              - !ruby/object:RMail::Header::Field
                                raw: 'Subject: RE: [MUD-Dev] Community Relations'
                                name: Subject
                                value: 'RE: [MUD-Dev] Community Relations'
                              mbox_from: 
                            body: "On Sat, 29 Jan 2000, Marian Griffith wrote:\n\n>
                              In <URL:news:local.muddev> on Fri 28 Jan, Geoffrey A.
                              MacDougall wrote:\n> \n> > Lovecraft wrote: \n> > >
                              What is an example system that is less corrupt than
                              the tyranny of the\n> > > majority?\n\n\nThat largely
                              depends on your definition of corruption. If you believe
                              that\ngovernment exists to serve the present whims of
                              the masses,then tyranny of\nthe majority is the way
                              to go. I believe that government exists to serve\nnot
                              just the present day population, but the future population
                              too, and in\nthis, the masses are horrible. Witness
                              the lack of popular interest in\nperhaps the most important
                              long-term issue currently facing the human\nrace: diversifying
                              our 'portfolio' of habitable environments. Inevitably,\nwhether
                              through our own efforts or a cosmic disaster, earth
                              will become\nuninhabitable. The masses do not care,
                              however, as they don't see it as\nbeing likely in their
                              lifetime (or, particularly in the nearly inevitable\ncase
                              of nuclear war, just don't want to think about it).\n\nFurther,
                              while I do not wish to get into this argument here,
                              I think you'd\nfind very serious and very valid arguments
                              from various anarchist-oriented\npolitical groups that
                              their proposed systems are less open to the sort of\ncorruption
                              I think you are talking about (See David Friedman's
                              The\nMachinery of Freedom, for instance).\n\n\n\n> A
                              far simpler, and fairer, system is one where the majority
                              rules but is\n> obliged to compensate the minority whenever
                              a vote goes in a way that is\n> harming them.\n> The
                              problem is  that it is impossible to make a decision
                              on an important\n> subject that does not 'hurt' somebody
                              in some way.  E.g. when planning a\n> new highway it
                              must run through some people's backyard. Even if you
                              plan\n> it so that it inconveniences the least people,
                              \ there will be people who\n> have that highway in their
                              backyard.  Regardless how you arrive at  that\n> decision.
                              \ So, I would suggest to make the people who 'win' the
                              vote, or\n> decision, or whatever,  compensate those
                              who 'lose' it.  Maybe that will\n> give them an incentive
                              to  both minimise the damage,  and reconsider any\n>
                              action that will cost them more than in it gains them
                              (e.g. is that high\n> way really necessary?).\n\nThat's
                              a bit simplistic. Who decides what adequate compensation
                              is? The\nsystem you describe in terms of highways already
                              exists. It's called\neminent domain, and it allows (in
                              the US at least) the government to seize\nyour land,
                              and then pay you what it feels your land is worth. Of
                              course,\nthe system is uses for determining the worth
                              of your land is ludicrous,\nand does nothing to compensate
                              someone who is emotionally attached to his\nland, above
                              and beyond the \"fair-market value\". \n\nOr, what about
                              if the majority votes that said minority will be going
                              to\nwar to defend the majority. There is no possible
                              compensation you could\ngive me to make up for having
                              my legs shot off that I would view as\ncompensating
                              me in any significant way.\n\nAs Isaiah Berlin pointed
                              out in his essay (which I previously referred to\nin
                              this thread, I believe), \"The Pursuit of the Ideal\",
                              there is no reason\nat all to believe that a system
                              such as you describe, that aims to satisfy\nall parties
                              involved in a large population, exists even in\ntheory.
                              People's fundamental goals and ideals differ, and some
                              of them are\ncompletely incompatible, so that achieving
                              one necessarily means\ndisappointing another, and adequate
                              (defined by whom? the person being\ncompensated I assume)
                              compensation is not always possible.\n\n\n> Of course,
                              this is hard to achieve in mud terms where there is
                              neither a\n> true form of power, nor a true form of
                              cost.\n\nI would disagree with this. Power resides in
                              the ability to enforce your\nwill upon others, and I
                              am certainly capable of doing that in a mud that I\nrun.
                              It's an extremely trivial form of power compared to
                              an emperor or\nwhat not of course, but I do believe
                              it's power nonetheless. I think there\nis a true form
                              of cost too. Power over others is really in the mind
                              of the\nbeholder. If you believe someone has power over
                              you, that person does, and\nif you believe there is
                              a cost to you to from some action, then there\nis. If
                              there is no true form of cost, I'm not sure how some
                              players ever\nget reduced to tears by actions performed
                              on them by others in a mud.\n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                            epilogue: 
                            preamble: 
                        message_id: !ruby/object:MessageId
                          raw: "[invalid or missing message id]"
                        subject: !ruby/object:Subject
                          original: 'RE: [MUD-Dev] Community Relations'
                        from: Matthew Mihaly <diablo@best.com>
                        references: []
                        date: 2000-01-30 21:32:48.000000000 Z
                        no_archive: false
                      call_number: !ruby/object:CallNumber
                        str: 000Dntr6
                      source: archive
                      list: !ruby/object:List
                        slug: mud-dev
                        name: 
                        description: 
                        homepage: 
                        footer: 
                      message_id: *177
                    parent: *178
                    children:
                    - &357 !ruby/object:MessageContainer
                      key: &179 !ruby/object:MessageId
                        raw: JzBSgoFM@generated-message-id.chibrary.org
                      value: !ruby/object:Message
                        email: !ruby/object:Email
                          raw: |
                            From: "Lovecraft" <dave@darkages.com>
                            Date: Fri, 28 Jan 2000 13:14:39 -0800
                            Subject: Re: [MUD-Dev] Community Relations

                            Geoffrey A. MacDougall wrote:
                            > Re: Lovecraft's last posting:
                            > One that particularly drew my attention was "It is very uncouth to yell
                            out 'Has > everyone given support?'"  This leads me to believe that you've
                            had some
                            > problems with players who didn't really care about representing the
                            interests
                            > of their fellow Aislings, but were simply concerned with obtaining extra
                            > powers - i.e., another form of levelling.

                            Yes.  Demagogues (entry level player politicians) made it illegal to
                            campaign to the point of harassment (see law boards in Mileth or Rucesion).
                            Some players campaign on the village road by the political hall, which is
                            acceptable.  There is a specified political discussion board.  Political
                            campaign posts on other boards, if deemed too much, are deleted by the
                            demagogues.

                            First I chose volunteer admins, but I found it corrupt and trying.  When I
                            chose volunteer admins (Nexus The Kingdom of the Winds: www.nexustk.com),
                            they had the same interests.  Interestingly enough, these "candidates" that
                            sought my appointment treated the process as a game, too.  In Dark Ages, I
                            gave it formal game mechanics.   Again, my goal has been to require the
                            politician to continue to work to retain power.  Commonly, a volunteer admin
                            gets power and keeps it forever unless removed.


                            > And, based upon the assumption that people wouldn't repeatedly send out
                            > such inquiries unless they were, to a certain degree, successful - that
                            some
                            > players throw away their "votes" without the due care and attention you're
                            > system tries to foster.  I realize there is always going to be the bad
                            with the
                            > good, et al. that... but I was wondering if reducing the frequency of
                            voting,
                            > thereby increasing the value of each decision, would lead people to treat
                            the
                            > process with greater respect?

                            It would, but it's a matter of degree.  It makes each vote more valuable,
                            but it doesn't change the voter's decision.  A voter swayed by a bribe or
                            other unsavory qualities is still swayed.  Voting every day happens to be
                            convenient to remember, rewards those that care the most, because they are
                            present everyday, and allows for partial voting.  Partial voting, I believe,
                            is important.  We are not 1s and 0s.  Our opinions are not, either.


                            > Lovecraft wrote:
                            > > What is an example system that is less corrupt than the tyranny of the
                            > > majority?

                            > An incorruptable and authoritarian AI hooked up to an everlasting power
                            > supply that is programmed to listen to and evaluate every possible point
                            of
                            > view on every possible issue, and make decisions that maximize the well-
                            > being of every person alive by ensuring that equal distibution of both
                            goods
                            > and security is balanced with unheralded levels of social and scientific
                            > progress, all the while maintaining the prime directive that all forms of
                            life
                            > are to be protected and cherished at both the individual and collective
                            > levels. :)

                            *laughs* Though absurd, it's very helpful.  It's something one can attempt
                            to measure, just as one can attempt to measure economic utility.  I disagree
                            with the adjective "authoritarian".  I believe you'd agree that if such a
                            dream machine were made that met all these requirements except wasn't
                            authoritarian, it'd be no less perfect.

                            A healthy economic system approaches this.  I.e., goods supplied tending to
                            meet demands.  Politics are held to the same standard as other goods and
                            services; except by authoritarian politicians.

                            I'm not a programmer; I wrote politics in a very limited custom script
                            language (i.e. less powerful than BASIC), so I haven't been able to realize
                            any economics beyond the distribution of politicians, which roughly matches
                            the population's need for politicians (see Political Discussion boards
                            outside each village's Hall).  The proportion of officials to citizens is
                            equilibrium.



                            > Do you provide each village with an initial slant, i.e., "you guys are the
                            evil
                            > ones", or is every village free to start from scratch?  If the latter, do
                            the
                            > villages eventually pursue vastly distinctive political philosophies, or
                            do they
                            > all start to resemble one another?

                            Subtly.  Each village looks and feels different.  Mileth is rustic; Rucesion
                            is urban.  The background music, NPCs, and goods are unique.

                            Players, though, defined it when Rucesion was first offered for settlement
                             http://www.darkages.com/news/990826.html ).  Most Rucesion settlers didn't
                            like the bustle of Mileth.  They wanted more role-playing and more
                            seclusion.  In-game and out-of-game some settlers coordinated.  They settled
                            Rucesion and wrote the laws around their goals.


                            > Do, and if so, how do people rebel against these "dictatorial" acts?
                            Also,
                            > have you ever gone back on a decision when faced with a huge outcry?  Do
                            > you ever put your opinion as to what "should" happen above that of the
                            > players?

                            No.  I use them rarely and only when necessary for the community's benefit.
                            I've done it about three times in a year.

                            I always go back on a decision when faced with a huge outcry.  Fortunately,
                            I've improved my prediction of outcries.  In fact, I usually don't act
                            unless I can feel a consensus.  I fee

                            In beta testing I put my players' opinion as to what "should" happen above
                            the market of potential players.  I had the luxury and job to choose my
                            testers, so I chose real role-players.  I severely regret it.  In testing I
                            unwittingly encouraged elitism and snobbery, which is finally dissolving,
                            several months later.  While I love real role-playing, I saw something akin
                            to genocide begin to develop when encouraging its enforcement.  Most real
                            role-players role-played.  Some elitists (not better or worse at
                            role-playing) grabbed power and declared those that didn't grovel
                            non-roleplayers.  As mentioned in the last post, my hard-line on all
                            political corruption alleviates this form of corruption.



                            Dave Kennerly
                            Dark Ages Director
                            www.darkages.com




                            _______________________________________________
                            MUD-Dev maillist  -  MUD-Dev@kanga.nu
                            http://www.kanga.nu/lists/listinfo/mud-dev
                          header: !ruby/object:Headers
                            rmail: !ruby/object:RMail::Message
                              header: !ruby/object:RMail::Header
                                fields:
                                - !ruby/object:RMail::Header::Field
                                  raw: 'From: "Lovecraft" <dave@darkages.com>'
                                  name: From
                                  value: '"Lovecraft" <dave@darkages.com>'
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Date: Fri, 28 Jan 2000 13:14:39 -0800'
                                  name: Date
                                  value: Fri, 28 Jan 2000 13:14:39 -0800
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                  name: Subject
                                  value: 'Re: [MUD-Dev] Community Relations'
                                mbox_from: 
                              body: |
                                Geoffrey A. MacDougall wrote:
                                > Re: Lovecraft's last posting:
                                > One that particularly drew my attention was "It is very uncouth to yell
                                out 'Has > everyone given support?'"  This leads me to believe that you've
                                had some
                                > problems with players who didn't really care about representing the
                                interests
                                > of their fellow Aislings, but were simply concerned with obtaining extra
                                > powers - i.e., another form of levelling.

                                Yes.  Demagogues (entry level player politicians) made it illegal to
                                campaign to the point of harassment (see law boards in Mileth or Rucesion).
                                Some players campaign on the village road by the political hall, which is
                                acceptable.  There is a specified political discussion board.  Political
                                campaign posts on other boards, if deemed too much, are deleted by the
                                demagogues.

                                First I chose volunteer admins, but I found it corrupt and trying.  When I
                                chose volunteer admins (Nexus The Kingdom of the Winds: www.nexustk.com),
                                they had the same interests.  Interestingly enough, these "candidates" that
                                sought my appointment treated the process as a game, too.  In Dark Ages, I
                                gave it formal game mechanics.   Again, my goal has been to require the
                                politician to continue to work to retain power.  Commonly, a volunteer admin
                                gets power and keeps it forever unless removed.


                                > And, based upon the assumption that people wouldn't repeatedly send out
                                > such inquiries unless they were, to a certain degree, successful - that
                                some
                                > players throw away their "votes" without the due care and attention you're
                                > system tries to foster.  I realize there is always going to be the bad
                                with the
                                > good, et al. that... but I was wondering if reducing the frequency of
                                voting,
                                > thereby increasing the value of each decision, would lead people to treat
                                the
                                > process with greater respect?

                                It would, but it's a matter of degree.  It makes each vote more valuable,
                                but it doesn't change the voter's decision.  A voter swayed by a bribe or
                                other unsavory qualities is still swayed.  Voting every day happens to be
                                convenient to remember, rewards those that care the most, because they are
                                present everyday, and allows for partial voting.  Partial voting, I believe,
                                is important.  We are not 1s and 0s.  Our opinions are not, either.


                                > Lovecraft wrote:
                                > > What is an example system that is less corrupt than the tyranny of the
                                > > majority?

                                > An incorruptable and authoritarian AI hooked up to an everlasting power
                                > supply that is programmed to listen to and evaluate every possible point
                                of
                                > view on every possible issue, and make decisions that maximize the well-
                                > being of every person alive by ensuring that equal distibution of both
                                goods
                                > and security is balanced with unheralded levels of social and scientific
                                > progress, all the while maintaining the prime directive that all forms of
                                life
                                > are to be protected and cherished at both the individual and collective
                                > levels. :)

                                *laughs* Though absurd, it's very helpful.  It's something one can attempt
                                to measure, just as one can attempt to measure economic utility.  I disagree
                                with the adjective "authoritarian".  I believe you'd agree that if such a
                                dream machine were made that met all these requirements except wasn't
                                authoritarian, it'd be no less perfect.

                                A healthy economic system approaches this.  I.e., goods supplied tending to
                                meet demands.  Politics are held to the same standard as other goods and
                                services; except by authoritarian politicians.

                                I'm not a programmer; I wrote politics in a very limited custom script
                                language (i.e. less powerful than BASIC), so I haven't been able to realize
                                any economics beyond the distribution of politicians, which roughly matches
                                the population's need for politicians (see Political Discussion boards
                                outside each village's Hall).  The proportion of officials to citizens is
                                equilibrium.



                                > Do you provide each village with an initial slant, i.e., "you guys are the
                                evil
                                > ones", or is every village free to start from scratch?  If the latter, do
                                the
                                > villages eventually pursue vastly distinctive political philosophies, or
                                do they
                                > all start to resemble one another?

                                Subtly.  Each village looks and feels different.  Mileth is rustic; Rucesion
                                is urban.  The background music, NPCs, and goods are unique.

                                Players, though, defined it when Rucesion was first offered for settlement
                                 http://www.darkages.com/news/990826.html ).  Most Rucesion settlers didn't
                                like the bustle of Mileth.  They wanted more role-playing and more
                                seclusion.  In-game and out-of-game some settlers coordinated.  They settled
                                Rucesion and wrote the laws around their goals.


                                > Do, and if so, how do people rebel against these "dictatorial" acts?
                                Also,
                                > have you ever gone back on a decision when faced with a huge outcry?  Do
                                > you ever put your opinion as to what "should" happen above that of the
                                > players?

                                No.  I use them rarely and only when necessary for the community's benefit.
                                I've done it about three times in a year.

                                I always go back on a decision when faced with a huge outcry.  Fortunately,
                                I've improved my prediction of outcries.  In fact, I usually don't act
                                unless I can feel a consensus.  I fee

                                In beta testing I put my players' opinion as to what "should" happen above
                                the market of potential players.  I had the luxury and job to choose my
                                testers, so I chose real role-players.  I severely regret it.  In testing I
                                unwittingly encouraged elitism and snobbery, which is finally dissolving,
                                several months later.  While I love real role-playing, I saw something akin
                                to genocide begin to develop when encouraging its enforcement.  Most real
                                role-players role-played.  Some elitists (not better or worse at
                                role-playing) grabbed power and declared those that didn't grovel
                                non-roleplayers.  As mentioned in the last post, my hard-line on all
                                political corruption alleviates this form of corruption.



                                Dave Kennerly
                                Dark Ages Director
                                www.darkages.com




                                _______________________________________________
                                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                                http://www.kanga.nu/lists/listinfo/mud-dev
                              epilogue: 
                              preamble: 
                          message_id: !ruby/object:MessageId
                            raw: "[invalid or missing message id]"
                          subject: !ruby/object:Subject
                            original: 'Re: [MUD-Dev] Community Relations'
                          from: Lovecraft <dave@darkages.com>
                          references: []
                          date: 2000-01-28 21:14:39.000000000 Z
                          no_archive: false
                        call_number: !ruby/object:CallNumber
                          str: JzBSgoFM
                        source: archive
                        list: !ruby/object:List
                          slug: mud-dev
                          name: 
                          description: 
                          homepage: 
                          footer: 
                        message_id: *179
                      parent: *180
                      children: []
                    - &183 !ruby/object:MessageContainer
                      key: &181 !ruby/object:MessageId
                        raw: 00bj5dz6@generated-message-id.chibrary.org
                      value: !ruby/object:Message
                        email: !ruby/object:Email
                          raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Sat, 29
                            Jan 2000 23:30:38 -0800\nSubject: Re: [MUD-Dev] Community
                            Relations\n\nOn Thu, 27 Jan 2000 16:31:49 -0800 \nLovecraft
                            \ <dave@darkages.com> wrote:\n\n[empowering players with
                            political power] \n\n> Dark Ages gives players limited
                            administrative power in in-game\n> context.  Some players
                            enter a hierarchy of political positions.\n> There are
                            no other direct administrators; although there is a\n>
                            method of owner control, which I'll state last.\n> http://www.darkages.com/play/s_politics.html\n\nI've
                            not done it, but I proposed a system I called \"Rank Points\"\nhere
                            on the list a while back.  Its somewhat similar to your\napproach
                            <puff chest>:\n\n--<cut>--\nA simple model:\n\n  Player
                            characters can award each other \"rank points\" (RP).\n\n
                            \ Each player character is given (free) 1RP per day.\n\n
                            \ A player character with sufficient RPs can be automagically
                            \n  promoted to a high status position.\n\n  Maintaining
                            a high status position costs a player character \n  XXX
                            RPs per day (automatic debit).\n\n  A player caharacter
                            can promote other player characters to other\n  (lower)
                            status positions.  \n\n  Such a promotion costs the appointing
                            player a one time cost of \n  YYY RPs.\n\n  The promoted
                            player has his own daily RP cost for his position.\n\n
                            \ Should the high ranking player lose his position thru
                            lack of \n  RP's, all appointees will also lose their
                            position as it they \n  had failed to acquire enough RPs
                            to maintain their own position.\n\n  A junior ranked player
                            can still appoint sub-juniours with the \n  same mapping
                            as above.\n\nErgo: To survive a high ranking player must
                            persaude many many other\nplayers to give him their daily
                            RPs so he can keep his position.  A\nhigh ranking player
                            may appoint juniours who are then also in the same\nposition,
                            but can be required to funnel some portion of their\ncollections
                            to their appointer.  \n--<cut>--\n\nThis idea has been
                            raised here on list at various times, with one\nthread
                            around:\n\n  http://www.kanga.nu/archives/MUD-Dev-L/1997Q2/msg01504.html\n\n>
                            Dark Ages mechanics of politics are a game within the
                            game.\n> Players \"vote\" every day to support or to attack
                            someone\n> attempting political power.  Each vote adds
                            political power\n> points, called \"Clout.\"  Enough clout
                            allows one to attain office\n> for a term.  (details are
                            well summarized by a player in the Dark\n> Ages Library:
                            http://www.darkages.com/atavism/lore/ -> Click\n> \"Politica
                            Dominca\").\n\nOooo, player involvement and churn prevention.
                            \ \n\nHave you had any voter disaffection, or voter apathy
                            to a\nsignificant/noticable extent?  Is the voting game
                            effectively played\nby only a small (and mostly constant)
                            minority of the players vieing\namong themselves, or do
                            most players partake fairly regularly\nproving a more
                            general game of politiking?\n\n> This displays a previous
                            issue far back in this thread: partial\n> voting.  One
                            can vote every day.  Technically, every twelve hours.\n>
                            A citizen can vote for multiple persons, or for the same
                            person\n> several times.  A citizen can also use the mechanics
                            to vote more\n> than once, by spending Clout.\n\nObNote:
                            I rather like Australian voting system, where one my cast\nseveral
                            simultaneous votes for candidates.  It makes for a somehwat\nflatter
                            playing field which is less prone to fracturing.\n\nFrom:
                            \n\n  http://plato.itsc.adfa.edu.au/apr/ARTICLES/hrepvote.html\n\nWhich
                            is under The Australian Politics Resource at:\n\n  http://plato.itsc.adfa.edu.au/apr/\n\n--<cut>--\nA
                            preferential voting system is used in Australian Federal
                            and State\nelections. Under this system each voter not
                            only indicates his or\nher candidate of first preference,
                            but goes on to indicate who is\ntheir second choice and
                            so on until all their preferences have been\nindicated.\n\nIn
                            a House of Representatives election, only one representative
                            is\nelected in each electoral division. In order to be
                            elected a\ncandidate must recieve an absolute majority
                            of the formal votes cast\nin the electoral division. This
                            means the successful candidate must\nrecieve at least
                            50% + 1 of the formal votes.\n\nWhen counting commences
                            all the first preference votes are counted\nfor each candidate.
                            If any candidate recieves more than 50% of the\nfirst
                            preference votes then that candidate is duly elected.\n\nIf
                            no candidate has more than half the first preference votes,
                            then\nthe candidate with the fewest votes is excluded.
                            This candidate's\nvotes are transferred to the remaining
                            candidates on the basis of\nthe second preference shown
                            on these ballot papers.\n\nIf still no candidate has more
                            than 50% of the votes the candidate\nwho now has the fewest
                            votes is excluded and these votes are\ntransferred to
                            the the other candidates according to the next\npreference
                            indicated on the ballot papers.\n\nThis process continues
                            until one candidate has more than half of the\nformal
                            votes cast in the and is duly elected.\n\nBallots are
                            exhausted only when there are no further preferences\nindicated,
                            at which point they are set aside from the count.\n\nA
                            full distribution of preferences takes place in every
                            division,\neven those in which a candidate has an absolute
                            majority of first\npreference votes. The result of this
                            full distribution is used to\ncalculate the two party
                            preferred statistics.\n--<cut>--\n\n> What is an example
                            system that is less corrupt than the tyranny of\n> the
                            majority?\n\nAt various times I've toyed with the idea
                            of doing a voting system\nwhere the value of a vote was
                            not constant, and in fact was\ninversely proportional
                            to the size of the population one\nrepresented.  I've
                            not managed to work out a system that I felt was\nnot
                            too obviously abusable however.  The intent was promote
                            a fine\ngrained fracturing of the political system.\n\nI
                            continue to feel the idea is achievable, just that my
                            base\nassumptions in approaching the problem are very
                            wrong.\n\n--\nJ C Lawrence                                 Home:
                            claw@kanga.nu\n----------(*)                              Other:
                            coder@kanga.nu\n--=| A man is as sane as he is dangerous
                            to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                          header: !ruby/object:Headers
                            rmail: !ruby/object:RMail::Message
                              header: !ruby/object:RMail::Header
                                fields:
                                - !ruby/object:RMail::Header::Field
                                  raw: 'From: J C Lawrence <claw@kanga.nu>'
                                  name: From
                                  value: J C Lawrence <claw@kanga.nu>
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Date: Sat, 29 Jan 2000 23:30:38 -0800'
                                  name: Date
                                  value: Sat, 29 Jan 2000 23:30:38 -0800
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                  name: Subject
                                  value: 'Re: [MUD-Dev] Community Relations'
                                mbox_from: 
                              body: "On Thu, 27 Jan 2000 16:31:49 -0800 \nLovecraft
                                \ <dave@darkages.com> wrote:\n\n[empowering players
                                with political power] \n\n> Dark Ages gives players
                                limited administrative power in in-game\n> context.
                                \ Some players enter a hierarchy of political positions.\n>
                                There are no other direct administrators; although
                                there is a\n> method of owner control, which I'll
                                state last.\n> http://www.darkages.com/play/s_politics.html\n\nI've
                                not done it, but I proposed a system I called \"Rank
                                Points\"\nhere on the list a while back.  Its somewhat
                                similar to your\napproach <puff chest>:\n\n--<cut>--\nA
                                simple model:\n\n  Player characters can award each
                                other \"rank points\" (RP).\n\n  Each player character
                                is given (free) 1RP per day.\n\n  A player character
                                with sufficient RPs can be automagically \n  promoted
                                to a high status position.\n\n  Maintaining a high
                                status position costs a player character \n  XXX RPs
                                per day (automatic debit).\n\n  A player caharacter
                                can promote other player characters to other\n  (lower)
                                status positions.  \n\n  Such a promotion costs the
                                appointing player a one time cost of \n  YYY RPs.\n\n
                                \ The promoted player has his own daily RP cost for
                                his position.\n\n  Should the high ranking player
                                lose his position thru lack of \n  RP's, all appointees
                                will also lose their position as it they \n  had failed
                                to acquire enough RPs to maintain their own position.\n\n
                                \ A junior ranked player can still appoint sub-juniours
                                with the \n  same mapping as above.\n\nErgo: To survive
                                a high ranking player must persaude many many other\nplayers
                                to give him their daily RPs so he can keep his position.
                                \ A\nhigh ranking player may appoint juniours who
                                are then also in the same\nposition, but can be required
                                to funnel some portion of their\ncollections to their
                                appointer.  \n--<cut>--\n\nThis idea has been raised
                                here on list at various times, with one\nthread around:\n\n
                                \ http://www.kanga.nu/archives/MUD-Dev-L/1997Q2/msg01504.html\n\n>
                                Dark Ages mechanics of politics are a game within
                                the game.\n> Players \"vote\" every day to support
                                or to attack someone\n> attempting political power.
                                \ Each vote adds political power\n> points, called
                                \"Clout.\"  Enough clout allows one to attain office\n>
                                for a term.  (details are well summarized by a player
                                in the Dark\n> Ages Library: http://www.darkages.com/atavism/lore/
                                -> Click\n> \"Politica Dominca\").\n\nOooo, player
                                involvement and churn prevention.  \n\nHave you had
                                any voter disaffection, or voter apathy to a\nsignificant/noticable
                                extent?  Is the voting game effectively played\nby
                                only a small (and mostly constant) minority of the
                                players vieing\namong themselves, or do most players
                                partake fairly regularly\nproving a more general game
                                of politiking?\n\n> This displays a previous issue
                                far back in this thread: partial\n> voting.  One can
                                vote every day.  Technically, every twelve hours.\n>
                                A citizen can vote for multiple persons, or for the
                                same person\n> several times.  A citizen can also
                                use the mechanics to vote more\n> than once, by spending
                                Clout.\n\nObNote: I rather like Australian voting
                                system, where one my cast\nseveral simultaneous votes
                                for candidates.  It makes for a somehwat\nflatter
                                playing field which is less prone to fracturing.\n\nFrom:
                                \n\n  http://plato.itsc.adfa.edu.au/apr/ARTICLES/hrepvote.html\n\nWhich
                                is under The Australian Politics Resource at:\n\n
                                \ http://plato.itsc.adfa.edu.au/apr/\n\n--<cut>--\nA
                                preferential voting system is used in Australian Federal
                                and State\nelections. Under this system each voter
                                not only indicates his or\nher candidate of first
                                preference, but goes on to indicate who is\ntheir
                                second choice and so on until all their preferences
                                have been\nindicated.\n\nIn a House of Representatives
                                election, only one representative is\nelected in each
                                electoral division. In order to be elected a\ncandidate
                                must recieve an absolute majority of the formal votes
                                cast\nin the electoral division. This means the successful
                                candidate must\nrecieve at least 50% + 1 of the formal
                                votes.\n\nWhen counting commences all the first preference
                                votes are counted\nfor each candidate. If any candidate
                                recieves more than 50% of the\nfirst preference votes
                                then that candidate is duly elected.\n\nIf no candidate
                                has more than half the first preference votes, then\nthe
                                candidate with the fewest votes is excluded. This
                                candidate's\nvotes are transferred to the remaining
                                candidates on the basis of\nthe second preference
                                shown on these ballot papers.\n\nIf still no candidate
                                has more than 50% of the votes the candidate\nwho
                                now has the fewest votes is excluded and these votes
                                are\ntransferred to the the other candidates according
                                to the next\npreference indicated on the ballot papers.\n\nThis
                                process continues until one candidate has more than
                                half of the\nformal votes cast in the and is duly
                                elected.\n\nBallots are exhausted only when there
                                are no further preferences\nindicated, at which point
                                they are set aside from the count.\n\nA full distribution
                                of preferences takes place in every division,\neven
                                those in which a candidate has an absolute majority
                                of first\npreference votes. The result of this full
                                distribution is used to\ncalculate the two party preferred
                                statistics.\n--<cut>--\n\n> What is an example system
                                that is less corrupt than the tyranny of\n> the majority?\n\nAt
                                various times I've toyed with the idea of doing a
                                voting system\nwhere the value of a vote was not constant,
                                and in fact was\ninversely proportional to the size
                                of the population one\nrepresented.  I've not managed
                                to work out a system that I felt was\nnot too obviously
                                abusable however.  The intent was promote a fine\ngrained
                                fracturing of the political system.\n\nI continue
                                to feel the idea is achievable, just that my base\nassumptions
                                in approaching the problem are very wrong.\n\n--\nJ
                                C Lawrence                                 Home: claw@kanga.nu\n----------(*)
                                \                             Other: coder@kanga.nu\n--=|
                                A man is as sane as he is dangerous to his environment
                                |=--\n\n\n_______________________________________________\nMUD-Dev
                                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                              epilogue: 
                              preamble: 
                          message_id: !ruby/object:MessageId
                            raw: "[invalid or missing message id]"
                          subject: !ruby/object:Subject
                            original: 'Re: [MUD-Dev] Community Relations'
                          from: J C Lawrence <claw@kanga.nu>
                          references: []
                          date: 2000-01-30 07:30:38.000000000 Z
                          no_archive: false
                        call_number: !ruby/object:CallNumber
                          str: 00bj5dz6
                        source: archive
                        list: !ruby/object:List
                          slug: mud-dev
                          name: 
                          description: 
                          homepage: 
                          footer: 
                        message_id: *181
                      parent: *180
                      children:
                      - &464 !ruby/object:MessageContainer
                        key: &182 !ruby/object:MessageId
                          raw: 000Dnsoq@generated-message-id.chibrary.org
                        value: !ruby/object:Message
                          email: !ruby/object:Email
                            raw: |
                              From: "Lovecraft" <dave@darkages.com>
                              Date: Mon, 31 Jan 2000 00:53:05 -0800
                              Subject: Re: [MUD-Dev] Community Relations

                              J C Lawrence wrote:
                              > A simple model:


                              * Non-Political *
                              The model doesn't state what status gives.  If it only gives unique
                              identification, such as luxurious clothing or wealth or other non-coercive
                              power points, then it sounds fun, but not political.  Asheron's Call's
                              allegiance system is similar to this, which is a good system.

                              * Political *
                              If it is a political model, and if there is implied responsibility with
                              greater rank, then historic (as opposed to romantic) feudalism or bureacracy
                              may develop.

                              Historic feudalism is better than barbarism and it is like an innoculation
                              to barbarism.  If you have your lord's protection, barbarians (as meaning:
                              any hostile outsiders) will not loot you.  However, the same locked loyalty
                              can overwhelm sense of justice, which many users demand.  The lord will
                              retain power with the aid of the vassal (appointee).  The appointee needs
                              the lord to retain power to retain his own power.  Just vassals will not
                              become unjust, but they will lose their positions more often than an unjust,
                              but highly loyal and highly effective, vassal.  This is not to say the
                              simple model is bad, but that it needs a few buttresses to counter act
                              cronyism.

                              Another variant of the historic feudalism is organized criminal law.  It's
                              the same function: replace "lord" with "leader" and vassal with "follower".
                              Replace "tribute" with "favors".

                              Hierarchic bureacracy may be the next--slightly more just--stable state of
                              the simple model.  If users cannot or otherwise choose not to use barbarism
                              (looting, I conquer you, you conquer me), the next stable state is an
                              inefficient body politic.  The underlings support their boss who keeps his
                              position in the hierarchy.  The boss has to continue to acrue rank points,
                              yet a wise boss has the aid of efficient underlings, who are paid through
                              their continued high-status existence.  Example:
                              User_A becomes Rank 5.
                              User_A appoints allied User_B, User_C, and User_D to Rank 2.
                              User_B, User_C, and User_D help keep User_A at Rank 5.  Their reward?
                              User_B, User_C, and User_D retain Rank 2.
                              This is fine for just users, but most any system is fine for just users.
                              For the unjust user, public manipulation becomes a good tool.  For example:
                              User_B, User_C, and User_D arrange heroic acts for User_A to appear to
                              achieve.  User_B arranges for User_A to occasionally oust an anonymous
                              heckler, that is or is employed by one of the gang.

                              Again, this is not to say the model is bad, but that this director believes
                              it could, as is, evolve into one of the two above stable states.  Each is
                              stable because each has "locks".  Feudalism locks support in this model; and
                              bureacracy locks support in this model.  A more justice-conscious system
                              will be unstable, because feudalism or bureacracy will be more effective at
                              retaining power.

                              The part about, "Should the high ranking player lose his position thru lack
                              of
                                RP's, all appointees will also lose their position as it they
                                had failed to acquire enough RPs to maintain their own position." if
                              changed will create more just stable states.  First, and most boring, is to
                              eliminate this part and make the model even simpler.  Doing so eliminates
                              some cooperation.

                              A couple variants may be worth testing:
                                  1. "For an initial amount of time ... Should the high ranking ..."
                                  2. "For an initial amount of time Should the high ranking ..."  And when
                              this time period expires the high ranking player may negotiate with the
                              appointee to buy him again.  This causes the high-ranking player to renew
                              his benefit.  Indentured servant becomes employee.  Bureacratic underling
                              becomes contracted service.

                              The political system Dark Ages uses is like the model mentioned without the
                              "should the high ranking ..." part, and with details about rank-point
                              interaction between players, including maintenance cost (as you wrote
                              "automatic debit").  Even without the loyalty-incentive part, cronyism has
                              rears it's head.  To date, anti-cronyism keeps it in check.  This is done by
                              other players.  Some of the other players do it out of self-interest.  An
                              official that does not take action against a corrupt official is a
                              co-conspirator in the eyes of this external operator.  I began politics
                              feature believing I could reduce my time spent in politics and justice to
                              where I would never even intervene.  It would be the perfect machine someone
                              offered as example.  That was naive of me, but I personally find out what
                              goes on, so find out and intervene as needed.



                              J C Lawrence wrote:
                              > Have you had any voter disaffection, or voter apathy to a

                              > significant/noticable extent?  Is the voting game effectively played

                              > by only a small (and mostly constant) minority of the players vieing

                              > among themselves, or do most players partake fairly regularly

                              > proving a more general game of politiking?

                              Yes.  Several voters do not consider their vote seriously[1].  It's tossed
                              for poor political criteria[2].

                              No.  Several citizens vote.

                              No.  Several citizens take office themselves.  Several dedicated players
                              with few enemies gain office quickly.  The roster of player officials on
                              Mileth Politics constantly displays new names.


                              Dave Kennerly
                              Game Director
                              www.darkages.com



                              [1] That's what voting does.  There is little real cost to a vote.  When
                              votes cost, decision making improves.  If a player pays a dollar to cast a
                              vote, that vote will be considered more seriously.  Paying money for a vote
                              is not acceptable to players, including game-money.  Some players will decry
                              for free (no-cost to vote) democracy.  So no-cost to vote is a stable state,
                              but the consequence is voter apathy.

                              [2] However, statistically, the end mix of officials contains enough good
                              people.  As one advances to the higher ranks, the poor quality officials
                              become more and more rare, because one needs more and more support from a
                              (in the short term) fixed supply of citizens.  Higher ranks have
                              prerequisites in the lower ranks.  No one gains sudden power.






                              _______________________________________________
                              MUD-Dev maillist  -  MUD-Dev@kanga.nu
                              http://www.kanga.nu/lists/listinfo/mud-dev
                            header: !ruby/object:Headers
                              rmail: !ruby/object:RMail::Message
                                header: !ruby/object:RMail::Header
                                  fields:
                                  - !ruby/object:RMail::Header::Field
                                    raw: 'From: "Lovecraft" <dave@darkages.com>'
                                    name: From
                                    value: '"Lovecraft" <dave@darkages.com>'
                                  - !ruby/object:RMail::Header::Field
                                    raw: 'Date: Mon, 31 Jan 2000 00:53:05 -0800'
                                    name: Date
                                    value: Mon, 31 Jan 2000 00:53:05 -0800
                                  - !ruby/object:RMail::Header::Field
                                    raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                    name: Subject
                                    value: 'Re: [MUD-Dev] Community Relations'
                                  mbox_from: 
                                body: |
                                  J C Lawrence wrote:
                                  > A simple model:


                                  * Non-Political *
                                  The model doesn't state what status gives.  If it only gives unique
                                  identification, such as luxurious clothing or wealth or other non-coercive
                                  power points, then it sounds fun, but not political.  Asheron's Call's
                                  allegiance system is similar to this, which is a good system.

                                  * Political *
                                  If it is a political model, and if there is implied responsibility with
                                  greater rank, then historic (as opposed to romantic) feudalism or bureacracy
                                  may develop.

                                  Historic feudalism is better than barbarism and it is like an innoculation
                                  to barbarism.  If you have your lord's protection, barbarians (as meaning:
                                  any hostile outsiders) will not loot you.  However, the same locked loyalty
                                  can overwhelm sense of justice, which many users demand.  The lord will
                                  retain power with the aid of the vassal (appointee).  The appointee needs
                                  the lord to retain power to retain his own power.  Just vassals will not
                                  become unjust, but they will lose their positions more often than an unjust,
                                  but highly loyal and highly effective, vassal.  This is not to say the
                                  simple model is bad, but that it needs a few buttresses to counter act
                                  cronyism.

                                  Another variant of the historic feudalism is organized criminal law.  It's
                                  the same function: replace "lord" with "leader" and vassal with "follower".
                                  Replace "tribute" with "favors".

                                  Hierarchic bureacracy may be the next--slightly more just--stable state of
                                  the simple model.  If users cannot or otherwise choose not to use barbarism
                                  (looting, I conquer you, you conquer me), the next stable state is an
                                  inefficient body politic.  The underlings support their boss who keeps his
                                  position in the hierarchy.  The boss has to continue to acrue rank points,
                                  yet a wise boss has the aid of efficient underlings, who are paid through
                                  their continued high-status existence.  Example:
                                  User_A becomes Rank 5.
                                  User_A appoints allied User_B, User_C, and User_D to Rank 2.
                                  User_B, User_C, and User_D help keep User_A at Rank 5.  Their reward?
                                  User_B, User_C, and User_D retain Rank 2.
                                  This is fine for just users, but most any system is fine for just users.
                                  For the unjust user, public manipulation becomes a good tool.  For example:
                                  User_B, User_C, and User_D arrange heroic acts for User_A to appear to
                                  achieve.  User_B arranges for User_A to occasionally oust an anonymous
                                  heckler, that is or is employed by one of the gang.

                                  Again, this is not to say the model is bad, but that this director believes
                                  it could, as is, evolve into one of the two above stable states.  Each is
                                  stable because each has "locks".  Feudalism locks support in this model; and
                                  bureacracy locks support in this model.  A more justice-conscious system
                                  will be unstable, because feudalism or bureacracy will be more effective at
                                  retaining power.

                                  The part about, "Should the high ranking player lose his position thru lack
                                  of
                                    RP's, all appointees will also lose their position as it they
                                    had failed to acquire enough RPs to maintain their own position." if
                                  changed will create more just stable states.  First, and most boring, is to
                                  eliminate this part and make the model even simpler.  Doing so eliminates
                                  some cooperation.

                                  A couple variants may be worth testing:
                                      1. "For an initial amount of time ... Should the high ranking ..."
                                      2. "For an initial amount of time Should the high ranking ..."  And when
                                  this time period expires the high ranking player may negotiate with the
                                  appointee to buy him again.  This causes the high-ranking player to renew
                                  his benefit.  Indentured servant becomes employee.  Bureacratic underling
                                  becomes contracted service.

                                  The political system Dark Ages uses is like the model mentioned without the
                                  "should the high ranking ..." part, and with details about rank-point
                                  interaction between players, including maintenance cost (as you wrote
                                  "automatic debit").  Even without the loyalty-incentive part, cronyism has
                                  rears it's head.  To date, anti-cronyism keeps it in check.  This is done by
                                  other players.  Some of the other players do it out of self-interest.  An
                                  official that does not take action against a corrupt official is a
                                  co-conspirator in the eyes of this external operator.  I began politics
                                  feature believing I could reduce my time spent in politics and justice to
                                  where I would never even intervene.  It would be the perfect machine someone
                                  offered as example.  That was naive of me, but I personally find out what
                                  goes on, so find out and intervene as needed.



                                  J C Lawrence wrote:
                                  > Have you had any voter disaffection, or voter apathy to a

                                  > significant/noticable extent?  Is the voting game effectively played

                                  > by only a small (and mostly constant) minority of the players vieing

                                  > among themselves, or do most players partake fairly regularly

                                  > proving a more general game of politiking?

                                  Yes.  Several voters do not consider their vote seriously[1].  It's tossed
                                  for poor political criteria[2].

                                  No.  Several citizens vote.

                                  No.  Several citizens take office themselves.  Several dedicated players
                                  with few enemies gain office quickly.  The roster of player officials on
                                  Mileth Politics constantly displays new names.


                                  Dave Kennerly
                                  Game Director
                                  www.darkages.com



                                  [1] That's what voting does.  There is little real cost to a vote.  When
                                  votes cost, decision making improves.  If a player pays a dollar to cast a
                                  vote, that vote will be considered more seriously.  Paying money for a vote
                                  is not acceptable to players, including game-money.  Some players will decry
                                  for free (no-cost to vote) democracy.  So no-cost to vote is a stable state,
                                  but the consequence is voter apathy.

                                  [2] However, statistically, the end mix of officials contains enough good
                                  people.  As one advances to the higher ranks, the poor quality officials
                                  become more and more rare, because one needs more and more support from a
                                  (in the short term) fixed supply of citizens.  Higher ranks have
                                  prerequisites in the lower ranks.  No one gains sudden power.






                                  _______________________________________________
                                  MUD-Dev maillist  -  MUD-Dev@kanga.nu
                                  http://www.kanga.nu/lists/listinfo/mud-dev
                                epilogue: 
                                preamble: 
                            message_id: !ruby/object:MessageId
                              raw: "[invalid or missing message id]"
                            subject: !ruby/object:Subject
                              original: 'Re: [MUD-Dev] Community Relations'
                            from: Lovecraft <dave@darkages.com>
                            references: []
                            date: 2000-01-31 08:53:05.000000000 Z
                            no_archive: false
                          call_number: !ruby/object:CallNumber
                            str: 000Dnsoq
                          source: archive
                          list: !ruby/object:List
                            slug: mud-dev
                            name: 
                            description: 
                            homepage: 
                            footer: 
                          message_id: *182
                        parent: *183
                        children: []
                    - &429 !ruby/object:MessageContainer
                      key: &184 !ruby/object:MessageId
                        raw: 000DnsoK@generated-message-id.chibrary.org
                      value: !ruby/object:Message
                        email: !ruby/object:Email
                          raw: "From: Ola Fosheim Gr��stad <olag@ifi.uio.no>\nDate:
                            Fri, 21 Jan 2000 00:01:50 +0100\nSubject: Re: [MUD-Dev]
                            Community Relations\n\nMatthew Mihaly wrote:\r\n> On Wed,
                            19 Jan 2000, Ola Fosheim [iso-8859-1] Gr=F8stad wrote:\r\n>
                            > You will never reach it, but you can still act and believe
                            that what =\r\nyou\r\n> > do will get you there (\"there\"
                            is ill-defined). That said, it isn't\r\n> Just because
                            you will never reach it doesn't make it an invalid goal.
                            I=\r\nt\r\n> makes it an impossible goal (for you at least).\r\n\r\nIf
                            it is ill-defined then it is invalid I think? You may
                            still pursuit\r\nit, but you will never find it, because
                            \"it\" is meaningless,\r\nill-defined. In semi abstract
                            terms: you put yourself somewhere in a\r\nstate space
                            and then you walk and walk and walk based upon some\r\n\"randomly
                            chosen\" heuristics. Or maybe you do an exhaustive search.
                            (The\r\nbasic thing is, if you didn't believe you had
                            a goal you wouldn't start,\r\nbut as your goal is ill-defined,
                            your computation is ill-defined and\r\nthus you either
                            go on for infinity or you will return with \"failure\"\r\n(bottom,
                            does not compute). If the goal didn't exist then maybe
                            you\r\nwould return with \"false\" (goal not found). ;-).
                            This is a _very_\r\npedantic discussion.\r\n\r\n> That\r\n>
                            would be true if we all started with the same basic assumptions,
                            upon\r\n> which we then built our systems.\r\n\r\nThere
                            are cross cultural consistencies, so basically yes there
                            are some\r\nbasic assumptions that are very common. If
                            you think otherwise, then it\r\nis mostly a matter of
                            convenience?  You are (hopefully) a human, so when\r\nyou
                            try to refer to yourself as if you were not a human referring
                            to\r\nyourself I think you make a basic mistake. Even
                            that interpretation is\r\nbounded by some very human definitions
                            (you call them assumptions). It's\r\nkinda like a microprocessor
                            that tries to deny the mechanics it uses to\r\ncompute
                            with.\r\n\r\n(When I wrote \"sound\" in my previous message
                            I didn't mean sound and\r\ncomplete in the mathematical
                            sense, I think that ought to be obvious.\r\nBasically,
                            I suspect you are giving the applicability of strict logic\r\nmore
                            credit than it deserves?  Most discussions between humans
                            *must* be\r\nbased on a common reference which is not
                            entirely well-defined, but it\r\nworks because humans
                            have many similar experiences.)\r\n\r\n> generally viewed
                            isn't important, at least to me. My ethical beliefs, a=\r\nt\r\n>
                            least, are not based on popular consensus. (sorry if that
                            sounds holier\r\n> than though. It's not meant to.)\r\n\r\nAnd
                            you basically ignore the global situation that would arise
                            if\r\neverybody ignored all cultural and=20\r\nreligious
                            mores and acted in a local opportunistic fashion at every\r\ncorner.
                            So, what IS your life about?\r\n\r\nPopular consensus
                            matters, even if it is completely screwed. That is the\r\nbasic
                            reference. In a MUD that means \"expectations\" regarding\r\nconsequences.\r\n\r\n>
                            Because responsibility is a fiction, that's why. It doesn't
                            exist excep=\r\nt\r\n> in your mind.\r\n\r\nAll that exist
                            is my mind, as far as I am concerned, so what you say
                            is\r\nthat nothing exists (as far as I am concerned).
                            \ Whatever is \"in my\r\nmind\" is the most real thing
                            there is.   Is it not?\r\n\r\n> I have no problem at all
                            with\r\n> infanticide, or just leaving a baby outside
                            to die of the elements, for\r\n> instance, providing it
                            is your baby.\r\n\r\nSo basically, you have managed to
                            defeat your instincts on that issue.=20\r\nWhat do you
                            mean by \"your baby\"? What would make it \"your baby\"?
                            Why do\r\nyou have problem with say, the greater community
                            killing the baby. I\r\nthink that is what happens in cultures
                            where this was a survival\r\nstrategy?\r\n\r\n(I define
                            a human as human the moment it has a sufficient amount
                            of\r\npersonal experiences to form concepts and a unique
                            world of it's own, so\r\nI can agree with you on the infanticide
                            issue on a very abstract plane,\r\nbut birth is a convenient
                            transition and it convenient for me to ignore\r\nthat
                            position in this discussion ;)\r\n\r\n> Yes, by right
                            I mean what is legally possible.\r\n\r\nSo why don't you
                            just define it as \"what you can get away with which\r\nyield
                            higher profit than costs\"? Why bother with the legal
                            bit? With\r\nyour attitude I would've become a mass murderer.
                            It is \"easy\" to get\r\naway with it if you know what
                            you are doing.\r\n\r\nOf course, your position makes any
                            discussion mostly useless. You\r\nwould've become as happy
                            in a lawless society as in a society with laws?\r\n\r\n>
                            I don't believe in\r\n> \"rights\" because they don't
                            exist. From where do rights derive? A right=\r\n,\r\n>
                            like a responsibility, is a fiction.\r\n\r\nDefine fiction.\r\nDefine
                            real.\r\nDefine exists.\r\nDefine believe.\r\nDefine true.\r\nDefine
                            false.\r\nDefine ill-defined.\r\nDefine invalid.\r\netc..\r\n\r\nWhat
                            do YOU suggest as a common reference? We don't live in
                            a deducted\r\nworld of concepts. Concepts are constructed
                            by common human experience\r\n(which puts limits on what
                            can be effectively communicated).\r\n\r\n> If someone
                            who can make you do\r\n> something, or stop others from
                            doing things to you, claims you have a\r\n> responsibility
                            or a right, and is willing to use force to back that up,\r\n>
                            then those words have some semblance of reality.=20\r\n\r\nDefine
                            reality.\r\n\r\n> Otherwise, they are just words.=20\r\n\r\nWell,
                            if concepts are the most real thing there is then you
                            can erase\r\nthe \"just\" part.\r\n\r\n> I'm not a Christian,
                            and I don't believe in God.\r\n\r\nI think you do.\r\n\r\nDefine
                            God.\r\n\r\nI don't know what a Christian is, a short
                            explanation would be nice.\r\nCurrently I view your sentence
                            as inherently ill-defined even if I\r\nassume the most
                            liberal interpretation of \"defined\".\r\n\r\nMaybe I
                            am a Christian, maybe not. I believe in God, which I define
                            as\r\nanything that may have use of whatever information
                            being aggregated in\r\nthis universe. I basically believe
                            in God for utilitarian reasons. I\r\nthink your entire
                            belief system very quickly will become ill-defined if\r\nyou
                            try not to. The concept of God is handy because it is
                            beyond reach\r\nand thus is a solid irrefutable definition.
                            I arrived at this after some\r\nbasic risk assessment.
                            \ I prefer to have a stable reference over\r\nfloating
                            around in a shallow and populist ocean (and I suspect
                            that you\r\nare in it). I also want a reference that assigns
                            value to whatever\r\nhappens to go on in the universe
                            in terms of information (which involves\r\nconcepts).
                            \ So rather than defining what has value, I define that\r\nsomething
                            has value, and lock that up in the concept of God. From
                            this\r\nbasis you can derive a lot. And basically, anyone
                            that actually discuss\r\nthese issues at all are either
                            inherently religious or brain damaged. I\r\nalso happen
                            to think that Jesus was a great philosopher. And of course\r\nthere
                            is a lot more to my religion, but I try to make it consistent
                            with\r\nthe basis. So you tell me, am I a Christian?  I
                            think I am?  Maybe?\r\n\r\nIf you are going to assume
                            anything, then you may as well assume God. If\r\nyou try
                            to not assume anything then you may of course just commit\r\nsuicide,
                            and that could be a decision, so maybe you have to assume\r\nsomething
                            to commit suicide. If you assume something, how can you
                            then\r\nbe sure that that isn't basically what God in
                            the most abstract sense\r\ncovers? So how can you really
                            know whether you believe in God or not?\r\n\r\n> I think
                            the entire concept of natural rights is a joke.\r\n\r\nThey
                            have indeed evolved. I most likely do not share your sense
                            of\r\nhumour, so they are probably not a joke.\r\n\r\nDefine
                            joke.\r\n\r\nMaybe you just should state that the concept
                            of concepts is a joke? I\r\ncould agree on that. But then
                            I would say that the concept of real,\r\nphysical etc
                            is a joke as well. When everything has become funny then\r\nthere
                            isn't much to laugh at.\r\n\r\n> So where do these rights
                            derive from?\r\n\r\nWhatever the origin of the universe
                            is, the physical universe, human\r\ngenes, the environment,
                            the nature of human reasoning, centuries of\r\nstruggling
                            with the concepts of \"life\", ethical dilemmas, my mind,
                            and\r\nof course culture, which is as valid and important
                            as anything physical,\r\netc etc.\r\n\r\nOn of the most
                            beautiful aspects of the human mind is it's ability to\r\nmake
                            abstractions, without that we would not be able to reason
                            about\r\nethical issues at all, so you may say that it
                            comes from that.\r\n\r\nOf course, I don't think a concept
                            has to be derived from axioms in\r\norder to be meaningful
                            and useful. I believe most of said rights can be\r\n\"derived\"
                            if you assume principles about generality (rules and\r\nguidelines
                            should apply to most instances) abstractions and such
                            (\"given\r\nan unidentified human...\") and the assumption
                            that life has value.\r\n\r\n> Your arguments, it seems
                            to me, presuppose that the Christian\r\n> ethical structure
                            is right, and that is entirely as arbitrary as any ot=\r\nher\r\n>
                            system of ethic=1A\r\n\r\nI disagree that it is arbitrary.
                            Evolution isn't (necessarily)\r\narbitrary, certainly
                            not if it actually moves in a particular direction.\r\nIf
                            it was, then it wouldn't be used for optimization in computer\r\nscience.
                            It might not be deterministic (as far as we can tell,
                            maybe if\r\nyou had a perfect model), but that is a different
                            issue. Even a system\r\nwith a major random component
                            can converge.\r\n\r\nWhile I am often surprised by the
                            great variety in human beliefs, I am\r\nalso equally surprised
                            by what is common.\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                            maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                          header: !ruby/object:Headers
                            rmail: !ruby/object:RMail::Message
                              header: !ruby/object:RMail::Header
                                fields:
                                - !ruby/object:RMail::Header::Field
                                  raw: 'From: Ola Fosheim Gr��stad <olag@ifi.uio.no>'
                                  name: From
                                  value: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Date: Fri, 21 Jan 2000 00:01:50 +0100'
                                  name: Date
                                  value: Fri, 21 Jan 2000 00:01:50 +0100
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                  name: Subject
                                  value: 'Re: [MUD-Dev] Community Relations'
                                mbox_from: 
                              body: "Matthew Mihaly wrote:\r\n> On Wed, 19 Jan 2000,
                                Ola Fosheim [iso-8859-1] Gr=F8stad wrote:\r\n> > You
                                will never reach it, but you can still act and believe
                                that what =\r\nyou\r\n> > do will get you there (\"there\"
                                is ill-defined). That said, it isn't\r\n> Just because
                                you will never reach it doesn't make it an invalid
                                goal. I=\r\nt\r\n> makes it an impossible goal (for
                                you at least).\r\n\r\nIf it is ill-defined then it
                                is invalid I think? You may still pursuit\r\nit, but
                                you will never find it, because \"it\" is meaningless,\r\nill-defined.
                                In semi abstract terms: you put yourself somewhere
                                in a\r\nstate space and then you walk and walk and
                                walk based upon some\r\n\"randomly chosen\" heuristics.
                                Or maybe you do an exhaustive search. (The\r\nbasic
                                thing is, if you didn't believe you had a goal you
                                wouldn't start,\r\nbut as your goal is ill-defined,
                                your computation is ill-defined and\r\nthus you either
                                go on for infinity or you will return with \"failure\"\r\n(bottom,
                                does not compute). If the goal didn't exist then maybe
                                you\r\nwould return with \"false\" (goal not found).
                                ;-). This is a _very_\r\npedantic discussion.\r\n\r\n>
                                That\r\n> would be true if we all started with the
                                same basic assumptions, upon\r\n> which we then built
                                our systems.\r\n\r\nThere are cross cultural consistencies,
                                so basically yes there are some\r\nbasic assumptions
                                that are very common. If you think otherwise, then
                                it\r\nis mostly a matter of convenience?  You are
                                (hopefully) a human, so when\r\nyou try to refer to
                                yourself as if you were not a human referring to\r\nyourself
                                I think you make a basic mistake. Even that interpretation
                                is\r\nbounded by some very human definitions (you
                                call them assumptions). It's\r\nkinda like a microprocessor
                                that tries to deny the mechanics it uses to\r\ncompute
                                with.\r\n\r\n(When I wrote \"sound\" in my previous
                                message I didn't mean sound and\r\ncomplete in the
                                mathematical sense, I think that ought to be obvious.\r\nBasically,
                                I suspect you are giving the applicability of strict
                                logic\r\nmore credit than it deserves?  Most discussions
                                between humans *must* be\r\nbased on a common reference
                                which is not entirely well-defined, but it\r\nworks
                                because humans have many similar experiences.)\r\n\r\n>
                                generally viewed isn't important, at least to me.
                                My ethical beliefs, a=\r\nt\r\n> least, are not based
                                on popular consensus. (sorry if that sounds holier\r\n>
                                than though. It's not meant to.)\r\n\r\nAnd you basically
                                ignore the global situation that would arise if\r\neverybody
                                ignored all cultural and=20\r\nreligious mores and
                                acted in a local opportunistic fashion at every\r\ncorner.
                                So, what IS your life about?\r\n\r\nPopular consensus
                                matters, even if it is completely screwed. That is
                                the\r\nbasic reference. In a MUD that means \"expectations\"
                                regarding\r\nconsequences.\r\n\r\n> Because responsibility
                                is a fiction, that's why. It doesn't exist excep=\r\nt\r\n>
                                in your mind.\r\n\r\nAll that exist is my mind, as
                                far as I am concerned, so what you say is\r\nthat
                                nothing exists (as far as I am concerned).  Whatever
                                is \"in my\r\nmind\" is the most real thing there
                                is.   Is it not?\r\n\r\n> I have no problem at all
                                with\r\n> infanticide, or just leaving a baby outside
                                to die of the elements, for\r\n> instance, providing
                                it is your baby.\r\n\r\nSo basically, you have managed
                                to defeat your instincts on that issue.=20\r\nWhat
                                do you mean by \"your baby\"? What would make it \"your
                                baby\"? Why do\r\nyou have problem with say, the greater
                                community killing the baby. I\r\nthink that is what
                                happens in cultures where this was a survival\r\nstrategy?\r\n\r\n(I
                                define a human as human the moment it has a sufficient
                                amount of\r\npersonal experiences to form concepts
                                and a unique world of it's own, so\r\nI can agree
                                with you on the infanticide issue on a very abstract
                                plane,\r\nbut birth is a convenient transition and
                                it convenient for me to ignore\r\nthat position in
                                this discussion ;)\r\n\r\n> Yes, by right I mean what
                                is legally possible.\r\n\r\nSo why don't you just
                                define it as \"what you can get away with which\r\nyield
                                higher profit than costs\"? Why bother with the legal
                                bit? With\r\nyour attitude I would've become a mass
                                murderer. It is \"easy\" to get\r\naway with it if
                                you know what you are doing.\r\n\r\nOf course, your
                                position makes any discussion mostly useless. You\r\nwould've
                                become as happy in a lawless society as in a society
                                with laws?\r\n\r\n> I don't believe in\r\n> \"rights\"
                                because they don't exist. From where do rights derive?
                                A right=\r\n,\r\n> like a responsibility, is a fiction.\r\n\r\nDefine
                                fiction.\r\nDefine real.\r\nDefine exists.\r\nDefine
                                believe.\r\nDefine true.\r\nDefine false.\r\nDefine
                                ill-defined.\r\nDefine invalid.\r\netc..\r\n\r\nWhat
                                do YOU suggest as a common reference? We don't live
                                in a deducted\r\nworld of concepts. Concepts are constructed
                                by common human experience\r\n(which puts limits on
                                what can be effectively communicated).\r\n\r\n> If
                                someone who can make you do\r\n> something, or stop
                                others from doing things to you, claims you have a\r\n>
                                responsibility or a right, and is willing to use force
                                to back that up,\r\n> then those words have some semblance
                                of reality.=20\r\n\r\nDefine reality.\r\n\r\n> Otherwise,
                                they are just words.=20\r\n\r\nWell, if concepts are
                                the most real thing there is then you can erase\r\nthe
                                \"just\" part.\r\n\r\n> I'm not a Christian, and I
                                don't believe in God.\r\n\r\nI think you do.\r\n\r\nDefine
                                God.\r\n\r\nI don't know what a Christian is, a short
                                explanation would be nice.\r\nCurrently I view your
                                sentence as inherently ill-defined even if I\r\nassume
                                the most liberal interpretation of \"defined\".\r\n\r\nMaybe
                                I am a Christian, maybe not. I believe in God, which
                                I define as\r\nanything that may have use of whatever
                                information being aggregated in\r\nthis universe.
                                I basically believe in God for utilitarian reasons.
                                I\r\nthink your entire belief system very quickly
                                will become ill-defined if\r\nyou try not to. The
                                concept of God is handy because it is beyond reach\r\nand
                                thus is a solid irrefutable definition. I arrived
                                at this after some\r\nbasic risk assessment.  I prefer
                                to have a stable reference over\r\nfloating around
                                in a shallow and populist ocean (and I suspect that
                                you\r\nare in it). I also want a reference that assigns
                                value to whatever\r\nhappens to go on in the universe
                                in terms of information (which involves\r\nconcepts).
                                \ So rather than defining what has value, I define
                                that\r\nsomething has value, and lock that up in the
                                concept of God. From this\r\nbasis you can derive
                                a lot. And basically, anyone that actually discuss\r\nthese
                                issues at all are either inherently religious or brain
                                damaged. I\r\nalso happen to think that Jesus was
                                a great philosopher. And of course\r\nthere is a lot
                                more to my religion, but I try to make it consistent
                                with\r\nthe basis. So you tell me, am I a Christian?
                                \ I think I am?  Maybe?\r\n\r\nIf you are going to
                                assume anything, then you may as well assume God.
                                If\r\nyou try to not assume anything then you may
                                of course just commit\r\nsuicide, and that could be
                                a decision, so maybe you have to assume\r\nsomething
                                to commit suicide. If you assume something, how can
                                you then\r\nbe sure that that isn't basically what
                                God in the most abstract sense\r\ncovers? So how can
                                you really know whether you believe in God or not?\r\n\r\n>
                                I think the entire concept of natural rights is a
                                joke.\r\n\r\nThey have indeed evolved. I most likely
                                do not share your sense of\r\nhumour, so they are
                                probably not a joke.\r\n\r\nDefine joke.\r\n\r\nMaybe
                                you just should state that the concept of concepts
                                is a joke? I\r\ncould agree on that. But then I would
                                say that the concept of real,\r\nphysical etc is a
                                joke as well. When everything has become funny then\r\nthere
                                isn't much to laugh at.\r\n\r\n> So where do these
                                rights derive from?\r\n\r\nWhatever the origin of
                                the universe is, the physical universe, human\r\ngenes,
                                the environment, the nature of human reasoning, centuries
                                of\r\nstruggling with the concepts of \"life\", ethical
                                dilemmas, my mind, and\r\nof course culture, which
                                is as valid and important as anything physical,\r\netc
                                etc.\r\n\r\nOn of the most beautiful aspects of the
                                human mind is it's ability to\r\nmake abstractions,
                                without that we would not be able to reason about\r\nethical
                                issues at all, so you may say that it comes from that.\r\n\r\nOf
                                course, I don't think a concept has to be derived
                                from axioms in\r\norder to be meaningful and useful.
                                I believe most of said rights can be\r\n\"derived\"
                                if you assume principles about generality (rules and\r\nguidelines
                                should apply to most instances) abstractions and such
                                (\"given\r\nan unidentified human...\") and the assumption
                                that life has value.\r\n\r\n> Your arguments, it seems
                                to me, presuppose that the Christian\r\n> ethical
                                structure is right, and that is entirely as arbitrary
                                as any ot=\r\nher\r\n> system of ethic=1A\r\n\r\nI
                                disagree that it is arbitrary. Evolution isn't (necessarily)\r\narbitrary,
                                certainly not if it actually moves in a particular
                                direction.\r\nIf it was, then it wouldn't be used
                                for optimization in computer\r\nscience. It might
                                not be deterministic (as far as we can tell, maybe
                                if\r\nyou had a perfect model), but that is a different
                                issue. Even a system\r\nwith a major random component
                                can converge.\r\n\r\nWhile I am often surprised by
                                the great variety in human beliefs, I am\r\nalso equally
                                surprised by what is common.\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                                maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                              epilogue: 
                              preamble: 
                          message_id: !ruby/object:MessageId
                            raw: "[invalid or missing message id]"
                          subject: !ruby/object:Subject
                            original: 'Re: [MUD-Dev] Community Relations'
                          from: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                          references: []
                          date: 2000-01-20 23:01:50.000000000 Z
                          no_archive: false
                        call_number: !ruby/object:CallNumber
                          str: 000DnsoK
                        source: archive
                        list: !ruby/object:List
                          slug: mud-dev
                          name: 
                          description: 
                          homepage: 
                          footer: 
                        message_id: *184
                      parent: *180
                      children: []
                    - &436 !ruby/object:MessageContainer
                      key: &185 !ruby/object:MessageId
                        raw: Jysr9Aw4@generated-message-id.chibrary.org
                      value: !ruby/object:Message
                        email: !ruby/object:Email
                          raw: "From: Ola Fosheim Gr��stad <olag@ifi.uio.no>\nDate:
                            Fri, 21 Jan 2000 02:19:28 +0100\nSubject: Re: [MUD-Dev]
                            Community Relations\n\nTravis Casey wrote:\r\n> To put
                            it another way, \"causing problems\" is more general for
                            a\r\n> private facility -- your simply *being there* can
                            be considered to be\r\n> causing a problem, even though
                            you're not preventing anyone else from\r\n> doing anything.\r\n\r\nI
                            am not convinced that the distinction is that large. You
                            have a right\r\nto stay in my forest, and I cannot deny
                            you that, unless you disturb my\r\nwork. You similarly
                            have the right to use my beach, I cannot deny you\r\nthat.
                            You probably have the right to pull your boat up on my
                            land for a\r\nshorter period of time. Etc. Some of this
                            does not hold in the US, but\r\nit certainly holds here.
                            (Especially if traditions kick in.)\r\n\r\n> Purely a
                            semantic distinction; in common parlance, if I call the\r\n>
                            police to remove someone from my establishment, I have
                            thrown them out\r\n> -- it doesn't matter that I didn't
                            physically do any throwing.\r\n\r\nOh, it does matter,
                            because your private space is regulated by law. Our\r\nliberties
                            are more limited than we usually like to believe in our\r\neveryday
                            lives. A private space isn't a free state within the state
                            as\r\nsome MUD admins like to claim. That's what I tried
                            to address, maybe too\r\nvigorously?\r\n\r\n> > UNLESS
                            using violence is less damaging than whatever they are\r\n>
                            > doing.\r\n> \r\n> Gently removing someone and violence
                            are two distinct things -- or\r\n> else bars would not
                            be able to legally have bouncers remove rowdy\r\n> people.\r\n\r\nWell,
                            I have been shoved into the ground and then kicked between
                            my\r\nlegs, does that qualify as gently? :( The thing
                            is, the police has\r\nenough to deal with, so you have
                            to sue. Most people accept it as you\r\nget more hassle
                            than money from suing, but they cannot do anything\r\nlegally
                            no. Only to protect property, themselves or other people,
                            AFAIK.\r\nI doubt that a person that refuse to leave a
                            place can be removed\r\ngently!\r\n\r\nI am not allowed
                            to hit a burglar over his head with a heavy object\r\neither.
                            I honestly think that would be reasonable, but... no luck.\r\n\r\n[examples
                            that you are responsible for what happens even if you\r\nexplicitly
                            forbid access to private spaces]\r\n\r\n> Have I said
                            you should be able to?  Please argue against my points,\r\n>
                            rather than a caricature of them.\r\n\r\nNo, they were
                            examples of how we are limited even if we take measures
                            to\r\nreduce accessibility.\r\n\r\n> > If you run a mud
                            and you should have known that people were using it for\r\n>
                            > exchanging child pornography and you did nothing about
                            it, you can in\r\n> > fact be held legally responsible.\r\n>
                            \r\n> That depends on local laws.\r\n\r\nThat's a given.
                            \ I am after all living in a different country!  I have\r\nlittle
                            interest in US laws, so you may assume that I refer to
                            what I\r\n(think I) know about norwegian law.\r\n\r\n>
                            I'll note as well that the first part of\r\n> your sentence
                            does not logically go with the second part -- if you\r\n>
                            *should have known*, which implies you didn't know, then
                            you can't do\r\n> anything about it.  Now, it could be
                            argued that you have a\r\n> responsibility to know, but
                            that's different from knowing and not\r\n> doing anything.\r\n\r\nIt
                            is a legal term; \"knew or should have known\", would
                            \"ought to know\"\r\nbe better?  If you claim that you
                            didn't know, then the court may decide\r\nthat you are
                            so utterly clueless and irresponsible that they have to\r\nsend
                            you to prison in order to save the rest of the community
                            from more\r\ngrief. ;)\r\n\r\n> Also, this implies that
                            a mud is a private space -- if it were a\r\n> public space,
                            I would not be within my rights to monitor private\r\n>
                            transactions between people in it.  Thus, you are, in
                            fact, arguing\r\n> against yourself.\r\n\r\nErr? Pardon
                            me?! I have a right to observe other people in public\r\nspaces.
                            What do you think journalists do? And there are many publicly\r\naccessible
                            spaces in which the owner can be held responsible for
                            what\r\nhappens in them? Hidden organized monitoring and
                            especially recording is\r\nrestricted yes, even in private
                            spaces?\r\n\r\nBasically, you are more likely to be held
                            responsible in a MUD because\r\nyou assume the role of
                            an editor... If child pornography is stored in\r\nyour
                            system somewhere... :( At least, I assume that as a possibility,\r\nand
                            I won't know until the supreme court has settled the issue,
                            which I\r\nhope never happens.\r\n\r\n> I don't agree.
                            \ There's an old maxim -- your rights end where mine\r\n>
                            begin.  I have the right to control access to a space
                            I own; the fact\r\n> that you happen to meet people there
                            does not affect that.\r\n\r\nSays who?  What kind of \"right\"?
                            Why doesn't your rights end where mine\r\nbegin?\r\n\r\n>
                            To put it another way -- if you're abusive to the staff
                            of a\r\n> restaurant, and the manager chooses to bar you
                            from entering on that\r\n> basis, does the fact that you
                            meet friends there mean that he's\r\n> interfering with
                            your social life and cannot do that?\r\n\r\nMost people
                            know their friends telephone and don't spend their life
                            in\r\nsaid restaurant so this is not a common situation,
                            and common or very\r\ndangerous situations is what law
                            deals with. So maybe the analogy is a\r\nbad one? I don't
                            think law reflect some kind of higher ethics in this\r\ncase.
                            Sometimes it does, sometimes it does not.\r\n\r\n> I don't
                            think it's a bad analogy; I'm merely pointing out that
                            it's\r\n> not a perfect analogy.  Imperfect != bad.\r\n\r\nWell,
                            maybe you should stick to metaphors... :P\r\n\r\n> I have
                            no idea what The Palace is, so I can't comment on that.
                            \ And,\r\n> at no point have I said that a mud's staff
                            can treat people like trash\r\n\r\nNo, Matt basically
                            did, and I figured that was the basic issue.  What\r\nkind
                            of restrictions are there morally, ethically and if you
                            want,\r\nlegally.\r\n\r\n> -- only that a mud is not a
                            public place, and they do have the right\r\n> to expel
                            people who are abusive towards the staff (or towards anyone\r\n>
                            else).  Again, please argue against my arguments, not
                            against your own\r\n> caricatures of them.\r\n\r\nCaricatures
                            may make things more visible. Legally, yes, most likely,
                            but\r\nyou can get away with lots of nasty thing legally.
                            In moral and ethical\r\nterms, no way. Not just because
                            someone interpreted what a player said\r\nas abusive.
                            \ I find it 100% acceptable for a worked up player to
                            yell\r\nand whine for a while if the admins screw up.
                            If the admins then choose\r\nto ban that player then I
                            think he is doing it not because of the\r\nyelling and
                            whining, but because it makes the mistake very real and
                            very\r\nvisible. That is not high standards in my book.
                            Someone that kicks other\r\npeople for a couple of hard
                            words is basically not fit for having the\r\nkind of power
                            over other people that a MUD affords.\r\n\r\n> Using a
                            free mud is free of charge.  \r\n\r\nLet me put it this
                            way. If a telecom company sets up a free mud, but\r\ncharge
                            for connect time is it then free? I don't think so? Does
                            it\r\nmatter if some other company (possibly owned by
                            said telecom) sets up a\r\nfree mud. It costs money, and
                            the mud owners get nothing, so even if\r\nthey think it
                            is free because they loose money on their investment that\r\ndoesn't
                            make it free to me. As a player that is what matters.\r\n\r\nThen
                            add the fact that many muds are dull for the first 30
                            hours, and\r\nintentionally so. You invest 30 hours with
                            the expectations of being\r\npaid back with entertainment
                            later. As you can tell I don't think\r\n\"money\" is the
                            most important issue when it comes to adding up costs!
                            (I\r\nwonder if Matt considers money to be real, or is
                            it imaginary?)\r\n\r\n> One can equally argue that a\r\n>
                            park is not free because you have to pay to get there,
                            and that you're\r\n> spending time there.  \r\n\r\nYes,
                            indeed, if the government owns the railway.  That's a
                            good reason\r\nfor quarrelling over subway fees. \r\n\r\n>
                            One could also argue that a free pizza is not\r\n> free,
                            even if it's delivered -- you've argued that time taken
                            to enjoy\r\n> something is money, and it takes time to
                            eat a pizza.\r\n\r\nYou have to eat. You don't have to
                            do dishes, your most likely saved\r\nmoney, time, energy
                            when adding up all costs.\r\n\r\n> > pointless. You should
                            expect whatever can be expected from a section of\r\n>
                            > the population. If you open a free playground you are
                            assuming a greater\r\n> > responsibility than those that
                            happen to see it and make use of it.\r\n> > Even in the
                            legal sense.  That's the basic issue here.\r\n> The basic
                            issue where?  It's not germane to my points -- that a
                            mud is\r\n> a private space, not a public space, and that
                            mud admins should be\r\n> able to bar people who are abusing
                            them from their mud.\r\n\r\nThe implication of private
                            was that you had less responsibility, yes?\r\nThe implication
                            of public is that you have more responsibility, yes?\r\n\r\n>
                            Nowhere have\r\n> I said that mud admins don't have a
                            greater responsibility than their\r\n> players.\r\n\r\nSo
                            basically, bad treatment of a player is worse than bad
                            treatment of\r\nan admin?\r\n\r\n> > You are\r\n> > focusing
                            on the wrong issue, that is what controls legal businesses
                            in\r\n> > general. Is it acceptable for a phone company
                            to cut off your phone\r\n> > lines, severely harming your
                            business, just because you yelled at their\r\n> > operator
                            for screwing up badly?!\r\n> \r\n> This is an extremely
                            poor analogy.  Phone companies (in the US in general,\r\n>
                            at least) are monopolies, and therefore have greater restrictions
                            put on\r\n> them.\r\n\r\nWell, in Norway they are not.\r\n\r\n>
                            Further, while phone lines are a necessity for a business,
                            I\r\n> find it hard to believe that anyone could seriously
                            consider access to\r\n> a particular mud to be a necessity
                            for a person.\r\n\r\nPhone lines were not a necessity
                            for businesses until phones existed.\r\nThe same argument
                            can be made for MUDs and any other communication\r\ntechnology.
                            You depend on what you get used to.  For some reason\r\nsomething
                            as volatile as money is considered to be more\r\nsubstantial/important
                            then personal relationships...\r\n\r\n> >> In the same
                            way, a mud exists for a specific purpose (or purposes).\r\n>
                            \r\n> > And all purposes are acceptable?\r\n> \r\n> Did
                            I say that?  No.  My point was that if using the mud's
                            resources\r\n> to do something else, the mud admins have
                            every right to ask that\r\n> person to leave, and if he/she
                            will not leave to \"throw him out.\"\r\n\r\nI hope this
                            relies upon some kind of notion of reasonable? \r\n\r\n>
                            >> Anyone who acts in a way that is disruptive to that
                            can be thrown out.\r\n> \r\n> > That can happen in a public
                            park too. Why this abuse of analogies?\r\n> \r\n> What
                            analogy am I abusing?  I specified the analogy that I
                            did because\r\n> a wider range of behaviors can be considered
                            \"disruptive\" in this\r\n> situation -- e.g., you can't
                            throw people out of a park for sitting\r\n> down and quietly
                            talking to each other.\r\n\r\nYes, certain rights are
                            established as common practice and get covered\r\nin laws
                            etc. Parks and other open public spaces are used for lots
                            of\r\nthings. Several aspects of business are also regulated
                            by common\r\npractice. (In Norway anyway). This also applies
                            to private property. If\r\nsomeone has always (past 30
                            years) walked over my property and it is\r\ninconvenient
                            for them to change their behaviour, then it has become
                            a\r\nright.\r\n\r\n> Would you argue that a business is
                            not private because it allows\r\n> people to walk in without
                            an invitation?\r\n\r\nIt is privately held, but that is
                            basically not different from being\r\nowned by the local
                            district? Is it?\r\n\r\n> Would you argue that my\r\n>
                            house ceases to be a private space if I decide to hold
                            an \"open house\"\r\n> while I'm trying to sell it?  A
                            public space is *not* simply a space\r\n> that the public
                            is allowed access to.\r\n\r\n*grin* Well, maybe most of
                            this disagreement is over definitions. \r\nPublic accessible
                            is what matters for me. If you mean \"established as\r\ncommon
                            grounds\" such as the mountains, well ok, that is a different\r\nissue
                            and lots of long (hundreds if not thousands of years)
                            traditions\r\nkick in. Besides I am not particularly interested
                            in the legal\r\ntechnicalities, but the basic ethical
                            issues. Let me toss out some\r\nexamples:\r\n\r\nExample:
                            In terms of copyright, which there is some international
                            law\r\non, there is indeed a difference between \"invitation
                            only\" and \"open\r\nhouse\". Invitation only is private,
                            open house is public. You can get\r\naway with watching
                            a rented movie with your friends, but not with a set\r\nof
                            random people.\r\n\r\nAnother example: In terms of censorship
                            on movies, single bought ticket\r\nis \"public\" thus
                            censored. A film club with membership is \"private\" and\r\nyou
                            can show what you want because such clubs are typically
                            focused on\r\nmovies as art, the public can handle the
                            sex and the violence, it is not\r\nconsidered to be regular
                            entertainment.\r\n\r\nPublic/private, it all depends on
                            which area of law you are dealing\r\nwith?\r\n\r\n> Using
                            your analogy with a web page -- if a web page is public,
                            is it\r\n> wrong to put up a CGI that denies access to
                            it to certain people,\r\n> because those people have abused
                            that page in the past?\r\n\r\nNo, but it would be wrong
                            if they had written the content of said page.\r\nOr if
                            you had made them invest a lot of effort in reviewing
                            it, giving\r\nyou advice, with some expected future benefits,
                            such as fun. Or indeed\r\nif prevented a person from communicating
                            with his most recent love!\r\n\r\nRight/wrong is not so
                            much in action as it is in consequences... *shrug*\r\n\r\n>
                            And, again, I have not said there should be no limits
                            on how mud\r\n> admins may behave.\r\n\r\nGood!! :-)\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                            maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                          header: !ruby/object:Headers
                            rmail: !ruby/object:RMail::Message
                              header: !ruby/object:RMail::Header
                                fields:
                                - !ruby/object:RMail::Header::Field
                                  raw: 'From: Ola Fosheim Gr��stad <olag@ifi.uio.no>'
                                  name: From
                                  value: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Date: Fri, 21 Jan 2000 02:19:28 +0100'
                                  name: Date
                                  value: Fri, 21 Jan 2000 02:19:28 +0100
                                - !ruby/object:RMail::Header::Field
                                  raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                  name: Subject
                                  value: 'Re: [MUD-Dev] Community Relations'
                                mbox_from: 
                              body: "Travis Casey wrote:\r\n> To put it another way,
                                \"causing problems\" is more general for a\r\n> private
                                facility -- your simply *being there* can be considered
                                to be\r\n> causing a problem, even though you're not
                                preventing anyone else from\r\n> doing anything.\r\n\r\nI
                                am not convinced that the distinction is that large.
                                You have a right\r\nto stay in my forest, and I cannot
                                deny you that, unless you disturb my\r\nwork. You
                                similarly have the right to use my beach, I cannot
                                deny you\r\nthat. You probably have the right to pull
                                your boat up on my land for a\r\nshorter period of
                                time. Etc. Some of this does not hold in the US, but\r\nit
                                certainly holds here. (Especially if traditions kick
                                in.)\r\n\r\n> Purely a semantic distinction; in common
                                parlance, if I call the\r\n> police to remove someone
                                from my establishment, I have thrown them out\r\n>
                                -- it doesn't matter that I didn't physically do any
                                throwing.\r\n\r\nOh, it does matter, because your
                                private space is regulated by law. Our\r\nliberties
                                are more limited than we usually like to believe in
                                our\r\neveryday lives. A private space isn't a free
                                state within the state as\r\nsome MUD admins like
                                to claim. That's what I tried to address, maybe too\r\nvigorously?\r\n\r\n>
                                > UNLESS using violence is less damaging than whatever
                                they are\r\n> > doing.\r\n> \r\n> Gently removing
                                someone and violence are two distinct things -- or\r\n>
                                else bars would not be able to legally have bouncers
                                remove rowdy\r\n> people.\r\n\r\nWell, I have been
                                shoved into the ground and then kicked between my\r\nlegs,
                                does that qualify as gently? :( The thing is, the
                                police has\r\nenough to deal with, so you have to
                                sue. Most people accept it as you\r\nget more hassle
                                than money from suing, but they cannot do anything\r\nlegally
                                no. Only to protect property, themselves or other
                                people, AFAIK.\r\nI doubt that a person that refuse
                                to leave a place can be removed\r\ngently!\r\n\r\nI
                                am not allowed to hit a burglar over his head with
                                a heavy object\r\neither. I honestly think that would
                                be reasonable, but... no luck.\r\n\r\n[examples that
                                you are responsible for what happens even if you\r\nexplicitly
                                forbid access to private spaces]\r\n\r\n> Have I said
                                you should be able to?  Please argue against my points,\r\n>
                                rather than a caricature of them.\r\n\r\nNo, they
                                were examples of how we are limited even if we take
                                measures to\r\nreduce accessibility.\r\n\r\n> > If
                                you run a mud and you should have known that people
                                were using it for\r\n> > exchanging child pornography
                                and you did nothing about it, you can in\r\n> > fact
                                be held legally responsible.\r\n> \r\n> That depends
                                on local laws.\r\n\r\nThat's a given.  I am after
                                all living in a different country!  I have\r\nlittle
                                interest in US laws, so you may assume that I refer
                                to what I\r\n(think I) know about norwegian law.\r\n\r\n>
                                I'll note as well that the first part of\r\n> your
                                sentence does not logically go with the second part
                                -- if you\r\n> *should have known*, which implies
                                you didn't know, then you can't do\r\n> anything about
                                it.  Now, it could be argued that you have a\r\n>
                                responsibility to know, but that's different from
                                knowing and not\r\n> doing anything.\r\n\r\nIt is
                                a legal term; \"knew or should have known\", would
                                \"ought to know\"\r\nbe better?  If you claim that
                                you didn't know, then the court may decide\r\nthat
                                you are so utterly clueless and irresponsible that
                                they have to\r\nsend you to prison in order to save
                                the rest of the community from more\r\ngrief. ;)\r\n\r\n>
                                Also, this implies that a mud is a private space --
                                if it were a\r\n> public space, I would not be within
                                my rights to monitor private\r\n> transactions between
                                people in it.  Thus, you are, in fact, arguing\r\n>
                                against yourself.\r\n\r\nErr? Pardon me?! I have a
                                right to observe other people in public\r\nspaces.
                                What do you think journalists do? And there are many
                                publicly\r\naccessible spaces in which the owner can
                                be held responsible for what\r\nhappens in them? Hidden
                                organized monitoring and especially recording is\r\nrestricted
                                yes, even in private spaces?\r\n\r\nBasically, you
                                are more likely to be held responsible in a MUD because\r\nyou
                                assume the role of an editor... If child pornography
                                is stored in\r\nyour system somewhere... :( At least,
                                I assume that as a possibility,\r\nand I won't know
                                until the supreme court has settled the issue, which
                                I\r\nhope never happens.\r\n\r\n> I don't agree.  There's
                                an old maxim -- your rights end where mine\r\n> begin.
                                \ I have the right to control access to a space I
                                own; the fact\r\n> that you happen to meet people
                                there does not affect that.\r\n\r\nSays who?  What
                                kind of \"right\"? Why doesn't your rights end where
                                mine\r\nbegin?\r\n\r\n> To put it another way -- if
                                you're abusive to the staff of a\r\n> restaurant,
                                and the manager chooses to bar you from entering on
                                that\r\n> basis, does the fact that you meet friends
                                there mean that he's\r\n> interfering with your social
                                life and cannot do that?\r\n\r\nMost people know their
                                friends telephone and don't spend their life in\r\nsaid
                                restaurant so this is not a common situation, and
                                common or very\r\ndangerous situations is what law
                                deals with. So maybe the analogy is a\r\nbad one?
                                I don't think law reflect some kind of higher ethics
                                in this\r\ncase. Sometimes it does, sometimes it does
                                not.\r\n\r\n> I don't think it's a bad analogy; I'm
                                merely pointing out that it's\r\n> not a perfect analogy.
                                \ Imperfect != bad.\r\n\r\nWell, maybe you should
                                stick to metaphors... :P\r\n\r\n> I have no idea what
                                The Palace is, so I can't comment on that.  And,\r\n>
                                at no point have I said that a mud's staff can treat
                                people like trash\r\n\r\nNo, Matt basically did, and
                                I figured that was the basic issue.  What\r\nkind
                                of restrictions are there morally, ethically and if
                                you want,\r\nlegally.\r\n\r\n> -- only that a mud
                                is not a public place, and they do have the right\r\n>
                                to expel people who are abusive towards the staff
                                (or towards anyone\r\n> else).  Again, please argue
                                against my arguments, not against your own\r\n> caricatures
                                of them.\r\n\r\nCaricatures may make things more visible.
                                Legally, yes, most likely, but\r\nyou can get away
                                with lots of nasty thing legally. In moral and ethical\r\nterms,
                                no way. Not just because someone interpreted what
                                a player said\r\nas abusive.  I find it 100% acceptable
                                for a worked up player to yell\r\nand whine for a
                                while if the admins screw up. If the admins then choose\r\nto
                                ban that player then I think he is doing it not because
                                of the\r\nyelling and whining, but because it makes
                                the mistake very real and very\r\nvisible. That is
                                not high standards in my book. Someone that kicks
                                other\r\npeople for a couple of hard words is basically
                                not fit for having the\r\nkind of power over other
                                people that a MUD affords.\r\n\r\n> Using a free mud
                                is free of charge.  \r\n\r\nLet me put it this way.
                                If a telecom company sets up a free mud, but\r\ncharge
                                for connect time is it then free? I don't think so?
                                Does it\r\nmatter if some other company (possibly
                                owned by said telecom) sets up a\r\nfree mud. It costs
                                money, and the mud owners get nothing, so even if\r\nthey
                                think it is free because they loose money on their
                                investment that\r\ndoesn't make it free to me. As
                                a player that is what matters.\r\n\r\nThen add the
                                fact that many muds are dull for the first 30 hours,
                                and\r\nintentionally so. You invest 30 hours with
                                the expectations of being\r\npaid back with entertainment
                                later. As you can tell I don't think\r\n\"money\"
                                is the most important issue when it comes to adding
                                up costs! (I\r\nwonder if Matt considers money to
                                be real, or is it imaginary?)\r\n\r\n> One can equally
                                argue that a\r\n> park is not free because you have
                                to pay to get there, and that you're\r\n> spending
                                time there.  \r\n\r\nYes, indeed, if the government
                                owns the railway.  That's a good reason\r\nfor quarrelling
                                over subway fees. \r\n\r\n> One could also argue that
                                a free pizza is not\r\n> free, even if it's delivered
                                -- you've argued that time taken to enjoy\r\n> something
                                is money, and it takes time to eat a pizza.\r\n\r\nYou
                                have to eat. You don't have to do dishes, your most
                                likely saved\r\nmoney, time, energy when adding up
                                all costs.\r\n\r\n> > pointless. You should expect
                                whatever can be expected from a section of\r\n> >
                                the population. If you open a free playground you
                                are assuming a greater\r\n> > responsibility than
                                those that happen to see it and make use of it.\r\n>
                                > Even in the legal sense.  That's the basic issue
                                here.\r\n> The basic issue where?  It's not germane
                                to my points -- that a mud is\r\n> a private space,
                                not a public space, and that mud admins should be\r\n>
                                able to bar people who are abusing them from their
                                mud.\r\n\r\nThe implication of private was that you
                                had less responsibility, yes?\r\nThe implication of
                                public is that you have more responsibility, yes?\r\n\r\n>
                                Nowhere have\r\n> I said that mud admins don't have
                                a greater responsibility than their\r\n> players.\r\n\r\nSo
                                basically, bad treatment of a player is worse than
                                bad treatment of\r\nan admin?\r\n\r\n> > You are\r\n>
                                > focusing on the wrong issue, that is what controls
                                legal businesses in\r\n> > general. Is it acceptable
                                for a phone company to cut off your phone\r\n> > lines,
                                severely harming your business, just because you yelled
                                at their\r\n> > operator for screwing up badly?!\r\n>
                                \r\n> This is an extremely poor analogy.  Phone companies
                                (in the US in general,\r\n> at least) are monopolies,
                                and therefore have greater restrictions put on\r\n>
                                them.\r\n\r\nWell, in Norway they are not.\r\n\r\n>
                                Further, while phone lines are a necessity for a business,
                                I\r\n> find it hard to believe that anyone could seriously
                                consider access to\r\n> a particular mud to be a necessity
                                for a person.\r\n\r\nPhone lines were not a necessity
                                for businesses until phones existed.\r\nThe same argument
                                can be made for MUDs and any other communication\r\ntechnology.
                                You depend on what you get used to.  For some reason\r\nsomething
                                as volatile as money is considered to be more\r\nsubstantial/important
                                then personal relationships...\r\n\r\n> >> In the
                                same way, a mud exists for a specific purpose (or
                                purposes).\r\n> \r\n> > And all purposes are acceptable?\r\n>
                                \r\n> Did I say that?  No.  My point was that if using
                                the mud's resources\r\n> to do something else, the
                                mud admins have every right to ask that\r\n> person
                                to leave, and if he/she will not leave to \"throw
                                him out.\"\r\n\r\nI hope this relies upon some kind
                                of notion of reasonable? \r\n\r\n> >> Anyone who acts
                                in a way that is disruptive to that can be thrown
                                out.\r\n> \r\n> > That can happen in a public park
                                too. Why this abuse of analogies?\r\n> \r\n> What
                                analogy am I abusing?  I specified the analogy that
                                I did because\r\n> a wider range of behaviors can
                                be considered \"disruptive\" in this\r\n> situation
                                -- e.g., you can't throw people out of a park for
                                sitting\r\n> down and quietly talking to each other.\r\n\r\nYes,
                                certain rights are established as common practice
                                and get covered\r\nin laws etc. Parks and other open
                                public spaces are used for lots of\r\nthings. Several
                                aspects of business are also regulated by common\r\npractice.
                                (In Norway anyway). This also applies to private property.
                                If\r\nsomeone has always (past 30 years) walked over
                                my property and it is\r\ninconvenient for them to
                                change their behaviour, then it has become a\r\nright.\r\n\r\n>
                                Would you argue that a business is not private because
                                it allows\r\n> people to walk in without an invitation?\r\n\r\nIt
                                is privately held, but that is basically not different
                                from being\r\nowned by the local district? Is it?\r\n\r\n>
                                Would you argue that my\r\n> house ceases to be a
                                private space if I decide to hold an \"open house\"\r\n>
                                while I'm trying to sell it?  A public space is *not*
                                simply a space\r\n> that the public is allowed access
                                to.\r\n\r\n*grin* Well, maybe most of this disagreement
                                is over definitions. \r\nPublic accessible is what
                                matters for me. If you mean \"established as\r\ncommon
                                grounds\" such as the mountains, well ok, that is
                                a different\r\nissue and lots of long (hundreds if
                                not thousands of years) traditions\r\nkick in. Besides
                                I am not particularly interested in the legal\r\ntechnicalities,
                                but the basic ethical issues. Let me toss out some\r\nexamples:\r\n\r\nExample:
                                In terms of copyright, which there is some international
                                law\r\non, there is indeed a difference between \"invitation
                                only\" and \"open\r\nhouse\". Invitation only is private,
                                open house is public. You can get\r\naway with watching
                                a rented movie with your friends, but not with a set\r\nof
                                random people.\r\n\r\nAnother example: In terms of
                                censorship on movies, single bought ticket\r\nis \"public\"
                                thus censored. A film club with membership is \"private\"
                                and\r\nyou can show what you want because such clubs
                                are typically focused on\r\nmovies as art, the public
                                can handle the sex and the violence, it is not\r\nconsidered
                                to be regular entertainment.\r\n\r\nPublic/private,
                                it all depends on which area of law you are dealing\r\nwith?\r\n\r\n>
                                Using your analogy with a web page -- if a web page
                                is public, is it\r\n> wrong to put up a CGI that denies
                                access to it to certain people,\r\n> because those
                                people have abused that page in the past?\r\n\r\nNo,
                                but it would be wrong if they had written the content
                                of said page.\r\nOr if you had made them invest a
                                lot of effort in reviewing it, giving\r\nyou advice,
                                with some expected future benefits, such as fun. Or
                                indeed\r\nif prevented a person from communicating
                                with his most recent love!\r\n\r\nRight/wrong is not
                                so much in action as it is in consequences... *shrug*\r\n\r\n>
                                And, again, I have not said there should be no limits
                                on how mud\r\n> admins may behave.\r\n\r\nGood!! :-)\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                                maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                              epilogue: 
                              preamble: 
                          message_id: !ruby/object:MessageId
                            raw: "[invalid or missing message id]"
                          subject: !ruby/object:Subject
                            original: 'Re: [MUD-Dev] Community Relations'
                          from: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                          references: []
                          date: 2000-01-21 01:19:28.000000000 Z
                          no_archive: false
                        call_number: !ruby/object:CallNumber
                          str: Jysr9Aw4
                        source: archive
                        list: !ruby/object:List
                          slug: mud-dev
                          name: 
                          description: 
                          homepage: 
                          footer: 
                        message_id: *185
                      parent: *180
                      children: []
            - &431 !ruby/object:MessageContainer
              key: &186 !ruby/object:MessageId
                raw: 000DlhU8@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: "From: Matthew Mihaly <diablo@best.com>\nDate: Fri, 21 Jan
                    2000 22:36:03 -0800 (PST)\nSubject: Re: [MUD-Dev] Community Relations\n\nOn
                    Fri, 21 Jan 2000, Jon A. Lambert wrote:\n\n> Matthew Mihaly wrote:\n>
                    >\n> >I'm currently writing an article for Gamasutra on this topic,
                    more or\n> >less. It's what I call \"dynamic politics\" (ie where
                    players have real,\n> >though not total, power over other players,
                    and it is difficult for other\n> >players to completely opt out
                    of the system, or at least they lose\n> >advantages they might
                    otherwise have had by opting out). I don't advocate\n> >having
                    a single hierarchy though. I advocate multiple, competing\n> >hierachies
                    (basically like nations in the real world), because it's more\n>
                    >interesting and slightly less prone to the occassional abusive
                    player\n> >government.\n> >\n> \n> I've thought along those lines,
                    but it doesn't resolve one of the common\n> problems of administrating
                    a space.  In particular, the multiple heirarchies\n> approach
                    doesn't address the problem of the complete expulsion of a \n>
                    particular annoying user from that mud space.  The toading or
                    banning \n> of a player completely from the mud.  I assume you
                    reserve that power.\n> I'm talking about giving that power over
                    to the general user administrators\n> as well.  \n\nAhh yes, I
                    see what you mean. You're right. About the most extreme would\nbe
                    effectively banning a player from the area under your jurisdiction\n(say,
                    a city, or, if you are on the Council of Oakstone, all the forests\non
                    the continent) by causing the player to take regular, and significant\ndamage,
                    whenever in that area (for instance, wolves and thorned vines
                    will\nattack you in the forest). \n\nI'm curious, how do you (or
                    do you propose) choose the players? It sounds\nto me like you
                    are talking about some sort of populist democratic\nsystem? (correct
                    me if I'm wrong please.) What happens when they elect the\nmud
                    equivalent of hitler, and he decides that all Dwarves should be
                    kicked\noff. Or, worse yet, what happens if the player who is
                    at the top of the\nhierarchy decides hr is going to quit, and
                    is going to go out with a bang? \n\nI think this really boils
                    down to the old argument about democracy\nvs. autocracy. Democracy,
                    historically, produces less great leaders but\nless really tyrannical
                    leaders. On the strength of this, I decided that I\ntrust my judgement
                    more than my players as a collective. Some of them may\nhave better
                    judgement, but I firmly believe that as a whole, I am better\nable
                    to pick good administrators.\n\nI suppose though that it's not
                    completely a matter of gettting the best\nadministrators, but
                    also of giving the playerbase a feeling of\nempowerment. Hmm,
                    very interesting idea I have to say. I'm not sure I'd be\nwilling
                    to try it, but I'd love to see it done, particularly totally in\nthe
                    absence of owner interference with the decisions of the\nplayerbase-chosen
                    administration.\n\n\n> >And thank god it doesn't eliminate those
                    things! They are what make\n> >politics in muds EXCITING. Heck,
                    one thing we are always trying to do\n> >(subtly of course) in
                    Achaea is ensure that peace between the various\n> >\"nations\"
                    never breaks out for long, so we always sabotage any treaties\n>
                    >they make by suggesting things that we know at least one party
                    to the\n> >treaty will eventually find completely intolerable,
                    and thus break the\n> >treaty, leading to exciting conflict.\n>
                    \n> \n> Sure the many nations may address user enjoyment along
                    the lines of high \n> drama and political intrigue, etc, etc.
                    \  I think competing administrative\n> hierarchies will likely
                    fall into the hands of those directly at odds with each\n> other
                    along the lines of good play, good behavior.  I'm thinking more
                    along \n> the lines of a mud space as local club and the notions
                    that they will come \n> to a common (fairly stable) code of conduct
                    in whatever game they happen\n> t be playing.  Obviously high
                    political intrigue and exciting conflict do exist \n> \"in game\"
                    within the framework of many owner-administrated mu*s.   \n> Often
                    the owner defines certain actions that will not be tolerated at
                    all within \n> the space as detrimental to playerbase in general.
                    \  They could be along the \n> lines of profanity, harassment,
                    cheating, killing, etc.   \n> That's what I mean by user ownership.
                    \ They decide how they want to play, \n> and the penalties for
                    not playing their way.  It's their collective ball and they \n>
                    decide who can play and who can't.\n\nAhh, now this really gets
                    into some interesting territory I think, but it\nwould have to
                    be a little more complex than that. You are essentially\nmodeling
                    a national democratic system, but with a citizenry far more at\nodds
                    with each other (probably) than in the western democracies. It's
                    not\nso easy as just letting them vote straight out though, and
                    then vesting\nall legislative/executive/judiciary power in one
                    hierarchy, because you\nwill end up with tyranny of the majority.
                    That method is also poor (and I\nthink this is a major failing
                    of American-style democracy) because it does\nnot allow people
                    to indicate HOW strongly they feel about something. What\nif 40%
                    of your players are rabidly pro-player-killing,  15% are rabidly\nanti-player-killing,
                    5% who don't really care but if pressed will be\npro-player-killing
                    because they are speciest and want to kill all\nDwarves, and 40%
                    don't really care, but if pressed, will say\nthey are anti-player-killing,
                    because their aunt got killed once (by a\nDwarf, no doubt) when
                    she logged into a mud? (I'm not saying this is a\nrealistic breakdown
                    of this particular issue)\n\nSo, let's define people who are rabidly
                    either way as being people who\ncare enough to quit your mud if
                    things go against them, while the ones\nmore towards the middle
                    might get a bit disgruntled, but don't care enough\nto stop playing.\n\nThen,
                    in this case, even though, when it came to a straight vote, the\nanti-player-killers
                    would win (assuming everyone votes, which may be close\nor far
                    from what actually happens, depending on how important the\nelectorate
                    takes politics), the anti-player-killers would win, with 55% of\nthe
                    vote. However, this does not accurately represent the way this\ncommunity
                    thinks about things. In this case, the majority vote would cost\nyou
                    40% of your player-base, while had it swung the other day, only
                    15%\nwould have quit. This is an extreme situation of course,
                    but the principle\nis applicable. How to resolve this issue is
                    not simple. Books have been\nwritten on how to avoid Madison's
                    probolem of majority tyranny. As\npolitically correct as it is
                    to hate special interest groups in American\npolitics (sorry to
                    be nation-specific, but it's what I'm most familiar\nwith), they
                    do help to more accurately represent the true majority\n_preference_
                    of the community. They essentially magnify the influence of\ntheir
                    members by organizing and collection donations, which are then
                    used\nto affect the electoral process. They effectively magnify
                    the voice of\nthose who care enough to donate/participate in the
                    special interest\ngroups, thus reflecting that those people care
                    extra about those issues.\n\nIf you could set up some sort of
                    system that could more accurately reflect\ntrue majority sentiment,
                    I think you'd be on your way, as far as the\nplayerbase passing
                    such sweeping laws on itself, through elected\nrepresentatives.
                    I don't have a solution, but I do think it'd be neat.\n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: Matthew Mihaly <diablo@best.com>'
                          name: From
                          value: Matthew Mihaly <diablo@best.com>
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Fri, 21 Jan 2000 22:36:03 -0800 (PST)'
                          name: Date
                          value: Fri, 21 Jan 2000 22:36:03 -0800 (PST)
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: Re: [MUD-Dev] Community Relations'
                          name: Subject
                          value: 'Re: [MUD-Dev] Community Relations'
                        mbox_from: 
                      body: "On Fri, 21 Jan 2000, Jon A. Lambert wrote:\n\n> Matthew
                        Mihaly wrote:\n> >\n> >I'm currently writing an article for
                        Gamasutra on this topic, more or\n> >less. It's what I call
                        \"dynamic politics\" (ie where players have real,\n> >though
                        not total, power over other players, and it is difficult for
                        other\n> >players to completely opt out of the system, or
                        at least they lose\n> >advantages they might otherwise have
                        had by opting out). I don't advocate\n> >having a single hierarchy
                        though. I advocate multiple, competing\n> >hierachies (basically
                        like nations in the real world), because it's more\n> >interesting
                        and slightly less prone to the occassional abusive player\n>
                        >government.\n> >\n> \n> I've thought along those lines, but
                        it doesn't resolve one of the common\n> problems of administrating
                        a space.  In particular, the multiple heirarchies\n> approach
                        doesn't address the problem of the complete expulsion of a
                        \n> particular annoying user from that mud space.  The toading
                        or banning \n> of a player completely from the mud.  I assume
                        you reserve that power.\n> I'm talking about giving that power
                        over to the general user administrators\n> as well.  \n\nAhh
                        yes, I see what you mean. You're right. About the most extreme
                        would\nbe effectively banning a player from the area under
                        your jurisdiction\n(say, a city, or, if you are on the Council
                        of Oakstone, all the forests\non the continent) by causing
                        the player to take regular, and significant\ndamage, whenever
                        in that area (for instance, wolves and thorned vines will\nattack
                        you in the forest). \n\nI'm curious, how do you (or do you
                        propose) choose the players? It sounds\nto me like you are
                        talking about some sort of populist democratic\nsystem? (correct
                        me if I'm wrong please.) What happens when they elect the\nmud
                        equivalent of hitler, and he decides that all Dwarves should
                        be kicked\noff. Or, worse yet, what happens if the player
                        who is at the top of the\nhierarchy decides hr is going to
                        quit, and is going to go out with a bang? \n\nI think this
                        really boils down to the old argument about democracy\nvs.
                        autocracy. Democracy, historically, produces less great leaders
                        but\nless really tyrannical leaders. On the strength of this,
                        I decided that I\ntrust my judgement more than my players
                        as a collective. Some of them may\nhave better judgement,
                        but I firmly believe that as a whole, I am better\nable to
                        pick good administrators.\n\nI suppose though that it's not
                        completely a matter of gettting the best\nadministrators,
                        but also of giving the playerbase a feeling of\nempowerment.
                        Hmm, very interesting idea I have to say. I'm not sure I'd
                        be\nwilling to try it, but I'd love to see it done, particularly
                        totally in\nthe absence of owner interference with the decisions
                        of the\nplayerbase-chosen administration.\n\n\n> >And thank
                        god it doesn't eliminate those things! They are what make\n>
                        >politics in muds EXCITING. Heck, one thing we are always
                        trying to do\n> >(subtly of course) in Achaea is ensure that
                        peace between the various\n> >\"nations\" never breaks out
                        for long, so we always sabotage any treaties\n> >they make
                        by suggesting things that we know at least one party to the\n>
                        >treaty will eventually find completely intolerable, and thus
                        break the\n> >treaty, leading to exciting conflict.\n> \n>
                        \n> Sure the many nations may address user enjoyment along
                        the lines of high \n> drama and political intrigue, etc, etc.
                        \  I think competing administrative\n> hierarchies will likely
                        fall into the hands of those directly at odds with each\n>
                        other along the lines of good play, good behavior.  I'm thinking
                        more along \n> the lines of a mud space as local club and
                        the notions that they will come \n> to a common (fairly stable)
                        code of conduct in whatever game they happen\n> t be playing.
                        \ Obviously high political intrigue and exciting conflict
                        do exist \n> \"in game\" within the framework of many owner-administrated
                        mu*s.   \n> Often the owner defines certain actions that will
                        not be tolerated at all within \n> the space as detrimental
                        to playerbase in general.   They could be along the \n> lines
                        of profanity, harassment, cheating, killing, etc.   \n> That's
                        what I mean by user ownership.  They decide how they want
                        to play, \n> and the penalties for not playing their way.
                        \ It's their collective ball and they \n> decide who can play
                        and who can't.\n\nAhh, now this really gets into some interesting
                        territory I think, but it\nwould have to be a little more
                        complex than that. You are essentially\nmodeling a national
                        democratic system, but with a citizenry far more at\nodds
                        with each other (probably) than in the western democracies.
                        It's not\nso easy as just letting them vote straight out though,
                        and then vesting\nall legislative/executive/judiciary power
                        in one hierarchy, because you\nwill end up with tyranny of
                        the majority. That method is also poor (and I\nthink this
                        is a major failing of American-style democracy) because it
                        does\nnot allow people to indicate HOW strongly they feel
                        about something. What\nif 40% of your players are rabidly
                        pro-player-killing,  15% are rabidly\nanti-player-killing,
                        5% who don't really care but if pressed will be\npro-player-killing
                        because they are speciest and want to kill all\nDwarves, and
                        40% don't really care, but if pressed, will say\nthey are
                        anti-player-killing, because their aunt got killed once (by
                        a\nDwarf, no doubt) when she logged into a mud? (I'm not saying
                        this is a\nrealistic breakdown of this particular issue)\n\nSo,
                        let's define people who are rabidly either way as being people
                        who\ncare enough to quit your mud if things go against them,
                        while the ones\nmore towards the middle might get a bit disgruntled,
                        but don't care enough\nto stop playing.\n\nThen, in this case,
                        even though, when it came to a straight vote, the\nanti-player-killers
                        would win (assuming everyone votes, which may be close\nor
                        far from what actually happens, depending on how important
                        the\nelectorate takes politics), the anti-player-killers would
                        win, with 55% of\nthe vote. However, this does not accurately
                        represent the way this\ncommunity thinks about things. In
                        this case, the majority vote would cost\nyou 40% of your player-base,
                        while had it swung the other day, only 15%\nwould have quit.
                        This is an extreme situation of course, but the principle\nis
                        applicable. How to resolve this issue is not simple. Books
                        have been\nwritten on how to avoid Madison's probolem of majority
                        tyranny. As\npolitically correct as it is to hate special
                        interest groups in American\npolitics (sorry to be nation-specific,
                        but it's what I'm most familiar\nwith), they do help to more
                        accurately represent the true majority\n_preference_ of the
                        community. They essentially magnify the influence of\ntheir
                        members by organizing and collection donations, which are
                        then used\nto affect the electoral process. They effectively
                        magnify the voice of\nthose who care enough to donate/participate
                        in the special interest\ngroups, thus reflecting that those
                        people care extra about those issues.\n\nIf you could set
                        up some sort of system that could more accurately reflect\ntrue
                        majority sentiment, I think you'd be on your way, as far as
                        the\nplayerbase passing such sweeping laws on itself, through
                        elected\nrepresentatives. I don't have a solution, but I do
                        think it'd be neat.\n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                        maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'Re: [MUD-Dev] Community Relations'
                  from: Matthew Mihaly <diablo@best.com>
                  references: []
                  date: 2000-01-22 06:36:03.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: 000DlhU8
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *186
              parent: *144
              children: []
            - &432 !ruby/object:MessageContainer
              key: &187 !ruby/object:MessageId
                raw: JzUMT9ZQ@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: "From: Matthew Mihaly <diablo@best.com>\nDate: Wed, 19 Jan
                    2000 18:30:29 -0800 (PST)\nSubject: RE: [MUD-Dev] Community Relations\n\nOn
                    Wed, 19 Jan 2000, Koster, Raph wrote:\n\n> Matt, and you thought
                    YOU were harsh... :) My apologies in advance.\n\nYes, mine too
                    Raph, in case I do manage to offend you. I have extremely\nstrong
                    personal feelings on the subject of objective ethics (which is
                    what\nI think this argument boils down to), and it's hard for
                    me not to get\nworked up when thinking about it.\n\nYou know though,
                    that I should point out that to a large degree, I am\nplaying
                    devil's advocate on this matter. I do believe everythign I'm\nsaying,
                    but I would certainly not be interested in running MY game\ncapriciously.
                    I'm more than willing to defend someone else's ability to do\nso
                    though (not that it really needs any defending, as it's not against
                    the\nlaw, and none of you can force a mud admin to behave in the
                    manner in\nwhich you want.)\n\n> > \n> > I disagree, and I don't
                    think you thought about this \n> > statement before you\n> > made
                    it. \"Misguided\" mean not guided towards something, \n> > presumably
                    your\n> > goal.\n> \n> Actually, I was speaking of the admin's
                    responsibility towards his players.\n> If he wants to run a psych
                    experiment, a mud devoted towards driving players\n> insane, a
                    mud to experiment with poor management, etc, then he had better
                    be\n> warning players away with huge banners. If he's not explicitly
                    trying to do\n> that, then he had better cut out that behavior.
                    To my mind, when you open a\n> public facility of ANY sort, you
                    are then responsible for it on many levels,\n> regardless of whether
                    he is trying to maximize playerbase size. The fact\n> that playerbse
                    size WILl increase if the place is well-managed is\n> coincidental:
                    you manage it well because you owe it to the players to manage\n>
                    it well, because you have created a public space. If you want
                    to make a\n> private space, then don't tell anyone about it. If
                    you opened a public space\n> in order to get an ego-boo, get over
                    yourself and realize what you've done.\n\nWhy must he better?
                    What are you going to do? Go over to his house and\npunch him
                    in the face? That's a serious question. Why must he \"better cut\nout
                    that behavior?\" \n\n> \n> > It is a mistake, I think, to implicitly
                    assume that the \n> > goal of a\n> > mud is maximize the size
                    of the player base. It's a bias that I see on\n> > this list all
                    the time, and it's a completely unwarranted \n> > one. \n> \n>
                    A commercial mud has as its goal maximizing revenue. Not playerbase\n>
                    size--they are not necessarily the same thing.\n\nI'm picky, so
                    I will point out that maximizing revenue is only the goal of\nreally
                    really poorly run companies. Maximizing shareholder value (even
                    if\nthere aren't formally shares in the strict corporate sense)
                    is the\ngenerally accepted (and most logical) goal for a business.
                    Sorry, I\nrealize that's really nit-picky of me.\n\n\n> \n> A
                    free mud may have many different goals. Almost all of them (certainly
                    all\n> the justifiable ones in the case of an advertised, publicly
                    accessible mud)\n> require a playerbase. \n> \n> If a playerbase
                    is well-treated, it will attract new players. This does not\n>
                    imply growth of the playerbase, as other factors such as retention
                    and\n> advertising may still result in a net loss. Treating the
                    playerbase\n> well--actually, let me make that blunter: treating
                    them decently but also\n> manipulating the hell out of them for
                    the common good--is, to my mind, a\n> responsibility of the admin
                    regardless of which goal they are pursuing, if\n> they are running
                    a publicly accessible space.\n\nWell, again, it's great to say
                    it's a responsibility, but from where does\nthis responsibility
                    derive? Your mind? If I wasn't running a commercial\nmud, and
                    if I had no interest in working in the games industry in the\nfuture,
                    I wouldn't give two shakes of a drunken lamb's tail what any of\nyou
                    believed were my responsibilities, because it's irrelevant, unless
                    you\nare willing to do something about it, which I doubt (and
                    hope against).\n\n> > In summary then, if some mud admins choose
                    to run their muds \n> > capriciously,\n> > I don't see where anyone
                    gets off criticizing them on more than a\n> > \"personal preferences\"
                    level. In other words, perhaps you \n> > find that sort\n> > of
                    style distasteful, but that doesn't mean it's Wrong or Misguided
                    in\n> > some universal sense.\n> \n> I say it is wrong or misguided
                    in a universal sense, and you're not likely\n> to convince me
                    otherwise mostly because my conviction relies on some\n> articles
                    of faith about people.\n\nWell, fair enough. You have your arbitrary
                    ethical systems, I have\nmine. It's lovely that you believe certain
                    things are objectively wrong,\nbut so what? Everyone believes
                    different things. If I am a mud admin\nrunning a mud in a manner
                    you deem \"wrong\", why should I give a darn\nwhat you believe?
                    Once again, unless you're going to do something about it\n(whether
                    that be personal coercion or some sort of attempt to get other\npeople
                    to coerce you), it's meaningless to me, the Capricious Mud\nAdmin.\n\n
                    \n> Players are people. Just because they are people far away
                    on the other side\n> of a lot of wires and computers and routers
                    does not mean they are any less\n> of people. Treating people
                    capriciously in the real world is wrong,\n> especially when you
                    have power over them. Treating them capriciously in the\n> virtual
                    world is also wrong. Admins have power over PEOPLE, not just\n>
                    characters. Those are real feelings over there.\n\nWrong eh? Well,
                    again, you have your beliefs, I have mine. One of my\nfavourite
                    sayings is Scito Te Ipsum, or Know Thyself. It's the name of a\nshort
                    book by Abelard that advances the idea that sin (in a non-religious\nsense,
                    this is, I believe, essentially equivalent to what you mean by\nuniversally
                    wrong) doesn't lie in deeds, as deeds are neither inherently\ngood
                    nor bad, but only in intentions. So, to Abelard then, sin is the\nconsent
                    of the mind to what it knows is wrong. You know one thing is\nwrong,
                    I know another thing is wrong (I don't believe either of us are\n_right_
                    universally). The same actions then would be a sin for one and\nperhaps
                    not a sin for the other. (Of course, and I'm only guessing on\nthis,
                    I'd imagine that Abelard would certainly have subscribed to the\nnotion
                    of natural rights, and probably would have argued that everyone\n_knows_
                    what is right and wrong if he looks inside. Cultural myopia and\nreligious
                    arrogance, but the idea on sin remains valid to me.)\n\n \n> A
                    mud admin who advertises his mud is asking real people to come
                    into a\n> virtual space he created. If he does it for the purpose
                    of knowingly\n> tormenting them, abusing them, or causing them
                    pain, then that is\n> reprehensible. If he torments them, abuses
                    them, or otherwise puts them\n> through emotional pain out of
                    ignorance, it can be forgiven, but he had\n> better realize quickly
                    that they are PEOPLE.\n\nI wouldn't term that reprehensible. The
                    difference between a mud and real\nlife is consent. You don't
                    consent to real life, and there seems to be a\nnearly (though
                    not completely) insurrmountable barrier to opting out of\nlife
                    that is deeply ingrained in our psychology. No such barrier exists
                    in\na mud. Just leave if you aren't happy. Unlike in real life,
                    where escaping\noppression is hard, it is easy to escape oppression
                    in a mud. Just\nleave. It's all very well to talk about how the
                    issues we are discussing\nhere will have serious consequences
                    for the future, when on-line\ncommunities become more ubiquitous
                    and a more integral part of everybody's\nlife, but unless people
                    are forcibly put into the world and somehow not\nallowed to leave,
                    I'm never going to really care much, even on a personal\nlevel
                    (as opposed to making universal judgements), because if I am to\nspend
                    time caring about people, I'd rather do it caring about people
                    who\nactually ARE in fairly inescapable oppressive situations.\n\n
                    \n> He also needs to realize that the reason they are there in
                    his space is\n> partly because of the nature of the space he created,
                    and partly for the\n> other people. All of those people have put
                    themselves in his hands, under\n> his power, in his control. To
                    say he has no responsibility for their welfare\n> is shortsighted
                    and frankly cruel. They do not HAVE the power, in the\n> current
                    state of the art, to manage their affairs completely. Current
                    mud\n> designs RELY on that admin stepping up to the plate and
                    acting in a mature,\n> responsible fashion. In fact, they practically
                    require an inhuman level of\n> devotion to duty.\n\nShortsighted
                    how? I've seen a lot of capricious admins in my time, and at\nleast
                    one of them (who will remain nameless) made a lot of money running
                    a\ncommercial mud. He was one of THE most capricious admins I've
                    ever seen\ntoo. He was happy running his mud, and laughed frequently
                    at the idea that\nhe's living high on the hog off of people whom
                    he regularly abuses (I'm\nnot exaggerating. He said this to me
                    multiple times.) A bit of a\nbastard? You bet. Shortsighted? I
                    don't think so, as he really seemed to\nenjoy it, and was making
                    an excellent living doing it.\n\n> \n> The players doe snot think
                    in these terms. He is generally naive about these\n> matters when
                    he first logs on. But he'll catch on, though he may never be\n>
                    able to articulate it. But the admin--to my mind, the admin damn
                    well better\n> learn this stuff, preferably before advertising
                    any site locations. It\n> doesn't matter what he made the mud
                    for: as soon as he opened the doors, he\n> effectively said, \"this
                    isn't mine anymore, it's yours.\"\n\nThat's ridiculous, I'm sorry.
                    It most certainly is not the\nusers. Ownership only exists based
                    on the use of force. You can\npoint to the car you drive to work
                    every day (or whatever, the thing \ndoesn't matter), and say,
                    \"That's mine.\" but that's just a fantasy unless\nyou have either
                    the ability or the backing to _make_ it yours. You own the\ncar
                    in your mind, and the minds of whoever chooses to believe you,\nonly.
                    You may possess CONTROL over the car, by virtue of the legal system\nwhich
                    says you do, but that's it. The company in which I'm majority\nshareholder,
                    Achaea LLC, owns Achaea, Dreams of Divine Lands, not because\nwe
                    created it and haven't sold it to anyone, but because an organization\n(legal
                    system) exists which is willing to take action to enforce my\ncontrol
                    over it. Ownership is simply meaningless in a \"real\" sense.
                    It\nexists only in people's minds, and if two people disagree,
                    you are\nscrewed, and must resort to simply attempting to control
                    it. Until the\nusers are able to either get laws passed giving
                    them some control, or are\nable to just generally intimidate us
                    into giving them control, we control\nit, and that's really all
                    that matters. By way of simple example, look at\nwhat the US government
                    did to the American Indians. \n\n\n> It would take an exceptionally
                    farsighted company to consider the cost of\n> careful community
                    building to be a necessary upfront expense. :) I am not\n> saying
                    these things in the light of only commercial practices. This is
                    the\n> standard to which I held my immorts on LegendMUD, and frankly,
                    it is the\n> standard to which players *everywhere* hold their
                    immorts. \n\nSure. I should be saying something to the effect
                    of muds where maintenance\nand growth of player-base is a primary
                    goal, rather than commercial muds\nonly. I recognize there are
                    some free muds that are run with those goals\nin mind, and whose
                    admins operate with those goals at the forefront of\ntheir agenda.\n\n>
                    \n> Separate debate, but IMHO the advancement of muds DOES require
                    improved\n> community management. This does not, however, imply
                    administrative\n> management.\n\nI don't think you really mean
                    that. Clearly advances can be made that do\nnot involve improved
                    community management. Also, \"advancement\" implies\nmovement
                    towards a goal, but I'd bet that every single one of us on this\nlist
                    would list different goals, differing either slightly or\ngreatly.
                    We're not moving towards one end-all, be-all mud here. Goals may\nbe
                    equally valid and yet opposite in nature. Perhaps someone's ideal
                    mud\nhas only players hardy enough to withstand lots of admin
                    abuse. In fact,\nthe admin I spoke of before did have a philosophy
                    somewhat like that. He\nwanted a lot of strong-willed players,
                    and felt he could weed out the\nboring ones by messing with them.\n\n\n>
                    \n> If you look at the goals you listed, you'll find that they
                    all depend on\n> playerbase to one extent or another, and the
                    most common of them (which\n> sadly, includes ego-boo) depend
                    very literally on increasing playerbase over\n> time.\n\nAnd if
                    the admin gains pleasure merely from being sadistic? I see nothing\ninvalid
                    about that as a goal.\n\n\n> > Poorly phrased by me. My point
                    is that regardless of where \n> > the content is\n> > coming from
                    (players or creator), the fact is, the world is \n> > _owned_
                    by the\n> > creator (or his assignee). He does not have any real
                    \n> > responsibilities to\n> > his players unless he chooses to
                    accept them.\n> \n> So here we have a fundamental disagreement.\n\nWell,
                    ok. Lucky for the CMA (Capricious Mud Admin) that everyone that\nmatters
                    as far as enforcing ownership goes is on his side, at least\ncurrently.
                    \n\n\n> It is no longer your house, in the case of a mud. Rather,
                    it's actually\n> public parkland. You can choose to take it back,
                    but it is still public\n> parkland until such time as you do.
                    And to my mind, that changes the nature\n> of the equation.\n\nOk.
                    It doesn't change the nature to me.\n\n> \n> > and I decide to
                    arbitrarily insult you \n> > and throw you\n> > out, that's my
                    right, and thank god for it.\n> \n> Actually, doing this sort
                    of thing could very well land you in legal\n> trouble, for the
                    precise reason that it is an activity detrimental to the\n> community.\n\nAssuming
                    that the CMA is running a free mud (which, my example of the\nadmin
                    who managed to still make a damn good living while being an arse\nnotwithstanding,
                    is likely), exactly what legal trouble, is he likely to\nget in?
                    In the US, at least, absolutely none. I could see that happening\neventually
                    in the US, but, thank god, I don't see it happening anytime\nsoon.\n\n\n>
                    Ugh. If a park administrator, restaurant owner, mayor, or president
                    runs his\n> restaurant, park, city, or country in a capricious,
                    vindictive, arbitrary\n> way because it makes him feel good, we
                    usually call him a jerk. He may be\n> the one who put in the effort,
                    time, and possibly money, but I, for one, am\n> still going to
                    tell him he is being a jerk by playing with people that way.\n\nOk,
                    so he's a jerk. I'm not arguing that. Jerk as you use it is a
                    term\nused to indicate someone who possesses certain qualities
                    or who performs\ncertain actions you don't like. It's  not like
                    the universe recognizes him\nas such. It's just a label you have
                    slapped on him.\n\nMy point in all of this, in summary, is mainly
                    that I am a believer in\nethical diversity, not ethical monomania.
                    I also think it's important to\ndistinguish between saying something
                    is Wrong (which I think is a silly\nidea to begin with), and saying
                    something is wrong in the sense that you,\npersonally, don't like
                    it. It's also important to recognize that muds are\nnot moving
                    towards one single goal, thank god. Advancement in muds can and\nwill
                    come in many ways, and you aren't going to like all of them. It's
                    up\nto the controller of the mud to determine what the goal of
                    that mud is,\nand whether to even progress towards that goal,
                    and in what method. You\ncan say he has responsibiliites, etc,
                    but *shrug* it has no bearing.\n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: Matthew Mihaly <diablo@best.com>'
                          name: From
                          value: Matthew Mihaly <diablo@best.com>
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Wed, 19 Jan 2000 18:30:29 -0800 (PST)'
                          name: Date
                          value: Wed, 19 Jan 2000 18:30:29 -0800 (PST)
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: RE: [MUD-Dev] Community Relations'
                          name: Subject
                          value: 'RE: [MUD-Dev] Community Relations'
                        mbox_from: 
                      body: "On Wed, 19 Jan 2000, Koster, Raph wrote:\n\n> Matt, and
                        you thought YOU were harsh... :) My apologies in advance.\n\nYes,
                        mine too Raph, in case I do manage to offend you. I have extremely\nstrong
                        personal feelings on the subject of objective ethics (which
                        is what\nI think this argument boils down to), and it's hard
                        for me not to get\nworked up when thinking about it.\n\nYou
                        know though, that I should point out that to a large degree,
                        I am\nplaying devil's advocate on this matter. I do believe
                        everythign I'm\nsaying, but I would certainly not be interested
                        in running MY game\ncapriciously. I'm more than willing to
                        defend someone else's ability to do\nso though (not that it
                        really needs any defending, as it's not against the\nlaw,
                        and none of you can force a mud admin to behave in the manner
                        in\nwhich you want.)\n\n> > \n> > I disagree, and I don't
                        think you thought about this \n> > statement before you\n>
                        > made it. \"Misguided\" mean not guided towards something,
                        \n> > presumably your\n> > goal.\n> \n> Actually, I was speaking
                        of the admin's responsibility towards his players.\n> If he
                        wants to run a psych experiment, a mud devoted towards driving
                        players\n> insane, a mud to experiment with poor management,
                        etc, then he had better be\n> warning players away with huge
                        banners. If he's not explicitly trying to do\n> that, then
                        he had better cut out that behavior. To my mind, when you
                        open a\n> public facility of ANY sort, you are then responsible
                        for it on many levels,\n> regardless of whether he is trying
                        to maximize playerbase size. The fact\n> that playerbse size
                        WILl increase if the place is well-managed is\n> coincidental:
                        you manage it well because you owe it to the players to manage\n>
                        it well, because you have created a public space. If you want
                        to make a\n> private space, then don't tell anyone about it.
                        If you opened a public space\n> in order to get an ego-boo,
                        get over yourself and realize what you've done.\n\nWhy must
                        he better? What are you going to do? Go over to his house
                        and\npunch him in the face? That's a serious question. Why
                        must he \"better cut\nout that behavior?\" \n\n> \n> > It
                        is a mistake, I think, to implicitly assume that the \n> >
                        goal of a\n> > mud is maximize the size of the player base.
                        It's a bias that I see on\n> > this list all the time, and
                        it's a completely unwarranted \n> > one. \n> \n> A commercial
                        mud has as its goal maximizing revenue. Not playerbase\n>
                        size--they are not necessarily the same thing.\n\nI'm picky,
                        so I will point out that maximizing revenue is only the goal
                        of\nreally really poorly run companies. Maximizing shareholder
                        value (even if\nthere aren't formally shares in the strict
                        corporate sense) is the\ngenerally accepted (and most logical)
                        goal for a business. Sorry, I\nrealize that's really nit-picky
                        of me.\n\n\n> \n> A free mud may have many different goals.
                        Almost all of them (certainly all\n> the justifiable ones
                        in the case of an advertised, publicly accessible mud)\n>
                        require a playerbase. \n> \n> If a playerbase is well-treated,
                        it will attract new players. This does not\n> imply growth
                        of the playerbase, as other factors such as retention and\n>
                        advertising may still result in a net loss. Treating the playerbase\n>
                        well--actually, let me make that blunter: treating them decently
                        but also\n> manipulating the hell out of them for the common
                        good--is, to my mind, a\n> responsibility of the admin regardless
                        of which goal they are pursuing, if\n> they are running a
                        publicly accessible space.\n\nWell, again, it's great to say
                        it's a responsibility, but from where does\nthis responsibility
                        derive? Your mind? If I wasn't running a commercial\nmud,
                        and if I had no interest in working in the games industry
                        in the\nfuture, I wouldn't give two shakes of a drunken lamb's
                        tail what any of\nyou believed were my responsibilities, because
                        it's irrelevant, unless you\nare willing to do something about
                        it, which I doubt (and hope against).\n\n> > In summary then,
                        if some mud admins choose to run their muds \n> > capriciously,\n>
                        > I don't see where anyone gets off criticizing them on more
                        than a\n> > \"personal preferences\" level. In other words,
                        perhaps you \n> > find that sort\n> > of style distasteful,
                        but that doesn't mean it's Wrong or Misguided in\n> > some
                        universal sense.\n> \n> I say it is wrong or misguided in
                        a universal sense, and you're not likely\n> to convince me
                        otherwise mostly because my conviction relies on some\n> articles
                        of faith about people.\n\nWell, fair enough. You have your
                        arbitrary ethical systems, I have\nmine. It's lovely that
                        you believe certain things are objectively wrong,\nbut so
                        what? Everyone believes different things. If I am a mud admin\nrunning
                        a mud in a manner you deem \"wrong\", why should I give a
                        darn\nwhat you believe? Once again, unless you're going to
                        do something about it\n(whether that be personal coercion
                        or some sort of attempt to get other\npeople to coerce you),
                        it's meaningless to me, the Capricious Mud\nAdmin.\n\n \n>
                        Players are people. Just because they are people far away
                        on the other side\n> of a lot of wires and computers and routers
                        does not mean they are any less\n> of people. Treating people
                        capriciously in the real world is wrong,\n> especially when
                        you have power over them. Treating them capriciously in the\n>
                        virtual world is also wrong. Admins have power over PEOPLE,
                        not just\n> characters. Those are real feelings over there.\n\nWrong
                        eh? Well, again, you have your beliefs, I have mine. One of
                        my\nfavourite sayings is Scito Te Ipsum, or Know Thyself.
                        It's the name of a\nshort book by Abelard that advances the
                        idea that sin (in a non-religious\nsense, this is, I believe,
                        essentially equivalent to what you mean by\nuniversally wrong)
                        doesn't lie in deeds, as deeds are neither inherently\ngood
                        nor bad, but only in intentions. So, to Abelard then, sin
                        is the\nconsent of the mind to what it knows is wrong. You
                        know one thing is\nwrong, I know another thing is wrong (I
                        don't believe either of us are\n_right_ universally). The
                        same actions then would be a sin for one and\nperhaps not
                        a sin for the other. (Of course, and I'm only guessing on\nthis,
                        I'd imagine that Abelard would certainly have subscribed to
                        the\nnotion of natural rights, and probably would have argued
                        that everyone\n_knows_ what is right and wrong if he looks
                        inside. Cultural myopia and\nreligious arrogance, but the
                        idea on sin remains valid to me.)\n\n \n> A mud admin who
                        advertises his mud is asking real people to come into a\n>
                        virtual space he created. If he does it for the purpose of
                        knowingly\n> tormenting them, abusing them, or causing them
                        pain, then that is\n> reprehensible. If he torments them,
                        abuses them, or otherwise puts them\n> through emotional pain
                        out of ignorance, it can be forgiven, but he had\n> better
                        realize quickly that they are PEOPLE.\n\nI wouldn't term that
                        reprehensible. The difference between a mud and real\nlife
                        is consent. You don't consent to real life, and there seems
                        to be a\nnearly (though not completely) insurrmountable barrier
                        to opting out of\nlife that is deeply ingrained in our psychology.
                        No such barrier exists in\na mud. Just leave if you aren't
                        happy. Unlike in real life, where escaping\noppression is
                        hard, it is easy to escape oppression in a mud. Just\nleave.
                        It's all very well to talk about how the issues we are discussing\nhere
                        will have serious consequences for the future, when on-line\ncommunities
                        become more ubiquitous and a more integral part of everybody's\nlife,
                        but unless people are forcibly put into the world and somehow
                        not\nallowed to leave, I'm never going to really care much,
                        even on a personal\nlevel (as opposed to making universal
                        judgements), because if I am to\nspend time caring about people,
                        I'd rather do it caring about people who\nactually ARE in
                        fairly inescapable oppressive situations.\n\n \n> He also
                        needs to realize that the reason they are there in his space
                        is\n> partly because of the nature of the space he created,
                        and partly for the\n> other people. All of those people have
                        put themselves in his hands, under\n> his power, in his control.
                        To say he has no responsibility for their welfare\n> is shortsighted
                        and frankly cruel. They do not HAVE the power, in the\n> current
                        state of the art, to manage their affairs completely. Current
                        mud\n> designs RELY on that admin stepping up to the plate
                        and acting in a mature,\n> responsible fashion. In fact, they
                        practically require an inhuman level of\n> devotion to duty.\n\nShortsighted
                        how? I've seen a lot of capricious admins in my time, and
                        at\nleast one of them (who will remain nameless) made a lot
                        of money running a\ncommercial mud. He was one of THE most
                        capricious admins I've ever seen\ntoo. He was happy running
                        his mud, and laughed frequently at the idea that\nhe's living
                        high on the hog off of people whom he regularly abuses (I'm\nnot
                        exaggerating. He said this to me multiple times.) A bit of
                        a\nbastard? You bet. Shortsighted? I don't think so, as he
                        really seemed to\nenjoy it, and was making an excellent living
                        doing it.\n\n> \n> The players doe snot think in these terms.
                        He is generally naive about these\n> matters when he first
                        logs on. But he'll catch on, though he may never be\n> able
                        to articulate it. But the admin--to my mind, the admin damn
                        well better\n> learn this stuff, preferably before advertising
                        any site locations. It\n> doesn't matter what he made the
                        mud for: as soon as he opened the doors, he\n> effectively
                        said, \"this isn't mine anymore, it's yours.\"\n\nThat's ridiculous,
                        I'm sorry. It most certainly is not the\nusers. Ownership
                        only exists based on the use of force. You can\npoint to the
                        car you drive to work every day (or whatever, the thing \ndoesn't
                        matter), and say, \"That's mine.\" but that's just a fantasy
                        unless\nyou have either the ability or the backing to _make_
                        it yours. You own the\ncar in your mind, and the minds of
                        whoever chooses to believe you,\nonly. You may possess CONTROL
                        over the car, by virtue of the legal system\nwhich says you
                        do, but that's it. The company in which I'm majority\nshareholder,
                        Achaea LLC, owns Achaea, Dreams of Divine Lands, not because\nwe
                        created it and haven't sold it to anyone, but because an organization\n(legal
                        system) exists which is willing to take action to enforce
                        my\ncontrol over it. Ownership is simply meaningless in a
                        \"real\" sense. It\nexists only in people's minds, and if
                        two people disagree, you are\nscrewed, and must resort to
                        simply attempting to control it. Until the\nusers are able
                        to either get laws passed giving them some control, or are\nable
                        to just generally intimidate us into giving them control,
                        we control\nit, and that's really all that matters. By way
                        of simple example, look at\nwhat the US government did to
                        the American Indians. \n\n\n> It would take an exceptionally
                        farsighted company to consider the cost of\n> careful community
                        building to be a necessary upfront expense. :) I am not\n>
                        saying these things in the light of only commercial practices.
                        This is the\n> standard to which I held my immorts on LegendMUD,
                        and frankly, it is the\n> standard to which players *everywhere*
                        hold their immorts. \n\nSure. I should be saying something
                        to the effect of muds where maintenance\nand growth of player-base
                        is a primary goal, rather than commercial muds\nonly. I recognize
                        there are some free muds that are run with those goals\nin
                        mind, and whose admins operate with those goals at the forefront
                        of\ntheir agenda.\n\n> \n> Separate debate, but IMHO the advancement
                        of muds DOES require improved\n> community management. This
                        does not, however, imply administrative\n> management.\n\nI
                        don't think you really mean that. Clearly advances can be
                        made that do\nnot involve improved community management. Also,
                        \"advancement\" implies\nmovement towards a goal, but I'd
                        bet that every single one of us on this\nlist would list different
                        goals, differing either slightly or\ngreatly. We're not moving
                        towards one end-all, be-all mud here. Goals may\nbe equally
                        valid and yet opposite in nature. Perhaps someone's ideal
                        mud\nhas only players hardy enough to withstand lots of admin
                        abuse. In fact,\nthe admin I spoke of before did have a philosophy
                        somewhat like that. He\nwanted a lot of strong-willed players,
                        and felt he could weed out the\nboring ones by messing with
                        them.\n\n\n> \n> If you look at the goals you listed, you'll
                        find that they all depend on\n> playerbase to one extent or
                        another, and the most common of them (which\n> sadly, includes
                        ego-boo) depend very literally on increasing playerbase over\n>
                        time.\n\nAnd if the admin gains pleasure merely from being
                        sadistic? I see nothing\ninvalid about that as a goal.\n\n\n>
                        > Poorly phrased by me. My point is that regardless of where
                        \n> > the content is\n> > coming from (players or creator),
                        the fact is, the world is \n> > _owned_ by the\n> > creator
                        (or his assignee). He does not have any real \n> > responsibilities
                        to\n> > his players unless he chooses to accept them.\n> \n>
                        So here we have a fundamental disagreement.\n\nWell, ok. Lucky
                        for the CMA (Capricious Mud Admin) that everyone that\nmatters
                        as far as enforcing ownership goes is on his side, at least\ncurrently.
                        \n\n\n> It is no longer your house, in the case of a mud.
                        Rather, it's actually\n> public parkland. You can choose to
                        take it back, but it is still public\n> parkland until such
                        time as you do. And to my mind, that changes the nature\n>
                        of the equation.\n\nOk. It doesn't change the nature to me.\n\n>
                        \n> > and I decide to arbitrarily insult you \n> > and throw
                        you\n> > out, that's my right, and thank god for it.\n> \n>
                        Actually, doing this sort of thing could very well land you
                        in legal\n> trouble, for the precise reason that it is an
                        activity detrimental to the\n> community.\n\nAssuming that
                        the CMA is running a free mud (which, my example of the\nadmin
                        who managed to still make a damn good living while being an
                        arse\nnotwithstanding, is likely), exactly what legal trouble,
                        is he likely to\nget in? In the US, at least, absolutely none.
                        I could see that happening\neventually in the US, but, thank
                        god, I don't see it happening anytime\nsoon.\n\n\n> Ugh. If
                        a park administrator, restaurant owner, mayor, or president
                        runs his\n> restaurant, park, city, or country in a capricious,
                        vindictive, arbitrary\n> way because it makes him feel good,
                        we usually call him a jerk. He may be\n> the one who put in
                        the effort, time, and possibly money, but I, for one, am\n>
                        still going to tell him he is being a jerk by playing with
                        people that way.\n\nOk, so he's a jerk. I'm not arguing that.
                        Jerk as you use it is a term\nused to indicate someone who
                        possesses certain qualities or who performs\ncertain actions
                        you don't like. It's  not like the universe recognizes him\nas
                        such. It's just a label you have slapped on him.\n\nMy point
                        in all of this, in summary, is mainly that I am a believer
                        in\nethical diversity, not ethical monomania. I also think
                        it's important to\ndistinguish between saying something is
                        Wrong (which I think is a silly\nidea to begin with), and
                        saying something is wrong in the sense that you,\npersonally,
                        don't like it. It's also important to recognize that muds
                        are\nnot moving towards one single goal, thank god. Advancement
                        in muds can and\nwill come in many ways, and you aren't going
                        to like all of them. It's up\nto the controller of the mud
                        to determine what the goal of that mud is,\nand whether to
                        even progress towards that goal, and in what method. You\ncan
                        say he has responsibiliites, etc, but *shrug* it has no bearing.\n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                        maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'RE: [MUD-Dev] Community Relations'
                  from: Matthew Mihaly <diablo@best.com>
                  references: []
                  date: 2000-01-20 02:30:29.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: JzUMT9ZQ
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *187
              parent: *144
              children: []
            - &190 !ruby/object:MessageContainer
              key: &188 !ruby/object:MessageId
                raw: JzUMQw7M@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: "From: Marc Bowden <ryumo@merit.edu>\nDate: Tue, 18 Jan 2000
                    08:05:03 -0500\nSubject: Re: [MUD-Dev] Community Relations\n\n--On
                    Tue, Jan 18, 2000 12:10 AM -0500 \"Jon A. Lambert\"\n<jlsysinc@ix.netcom.com>
                    wrote:\n\n> \n> \"Thy shall not insult or offend any member of
                    the administration\"\n> and\n> \"Thy shall not insult or offend
                    any player\"\n> \n> Note that the former is usually enforced with
                    great enthusiasm,\n> while enforcement of the latter is haphazard
                    and oftentimes\n> explicitly  non-existent.\n> \n> Any thoughts
                    as to why this is so?  \n> \n\n  I believe it's because the majority
                    of the people starting up\nout-of-the box MUDs have very limited
                    social experience, and mostly\nas misfits or outcasts (usually
                    by choice because it's trendy\nnowadays to be a rebel just like
                    everyone else or because they just\ndon't play well with others.)
                    Emotionally immature, they only really\nhave one tool available
                    - make the noisybadthing go away, or hurt it;\nI suppose that
                    depends on the exact degree of social dissonance which\nthey enjoy
                    more. So they lash out to make it stop and (they believe)\nmake
                    an example so people leave them alone.\n  The same administrative
                    \"type\" tends to ignore the playerbase for\nlargely the same
                    reason - they're not him, so it's not that\nimportant. It's much
                    easier to work on code than play referee, plus\nthey don't feel
                    all nervous and anxious when they deal with code as\nopposed to
                    people, who never do what they're supposed to.\n\n> Do such policies
                    introduce a \"class\" system into a muds social\n> structure regardless
                    of whether the administration is faceless or\n> not?\n> \n\n  A
                    class system always gets introduced into any social structure
                    -\nit's human nature to form those kind of social divisions. In
                    any MUD\nor MUD variant there's always going to be in the players'
                    minds and\nus-or-them mentality; in fact, more and more lately,
                    people sign on\nto play on-line games...but not the ones we built
                    for them. Their\ngames tend to be more of them trying to see how
                    far they can push or\noutwit the \"evil\" administrator/administration/anyonebiggerthanthem
                    -\nand evil in their personal context is defined in almost Randian
                    terms\nas \"anything that prevents me from doing whatever I want.\"\n
                    \ Kids *need* to have something to hate - it's pretty much all
                    they\nknow how to do when they feel inadequate or frustrated,
                    and we're\nperfect targets. I'm sure there's not one of us here
                    who's had to\nfail out an \"apprentice\" or remove a \"wizard\"
                    who was morally,\ntechnically, or mentally unfit for the job and
                    hasn't had a few of\nthem continue to hang around under many many
                    aliases and try to \"get\nus back\" for what we did to them, because
                    it's *obviously* our fault.\n  I use the term 'kids' not in the
                    pejorative sense but as a\nreference to the level of social awareness
                    because the problem isn't\nlimited by age. Case in point, while
                    reading the above paragraph a\nname, face, or situation that fit
                    the profile came to you unbidden.\nI'm willing to bet not everyone's
                    personal example fell within that\n13-17 age range we all cringe
                    at dealing with.\n  \n> \n> What is it about administration personnel
                    that makes them so much\n> more delicate and important when it
                    comes to being insulted or \n> offended?\n> \n\n  For the amateur
                    (see above for a vastly oversimplified model)\nadministrator it's
                    usually poor modeling behavior - pick a bad admin,\nany bad admin.
                    Now do what he does. For a smaller (I hope!)\npercentage it's
                    because they assume that their ability to use tar\n-xvf and gcc
                    means that they should be accorded instant respect,\nadulation,
                    and limber nubile slave women. If they don't \"get what's\ncoming
                    to them\" from the playerbase, they feel more than justified in\nhanding
                    out wholesale death.\n  The professional now - and I believe that
                    includes almost everyone\non the list - realizes that, as long
                    as the kids don't cross the line\ninto profanity or character
                    assasination, it's okay to let them vent;\nthey'll eventually
                    expend themselves, get bored, and go back to\nplaying. I put up
                    with an amazing ammount of crap myself, which\ndoesn't bother
                    me because I realize that it's just immature bluster\nand they'll
                    eventually grow out of it. I do admit to encouraging\npeople who
                    pick on people on my staff besides me to find something\nelse
                    to do very, very soon, however - backing up and protecting the\ndignity
                    of your subordinate \"wizards\" is part of the job too, and\nthey
                    deserve the respect.\n\n--------------------------------------------------------------------\nMarc
                    Bowden - Soulsinger         Dreamshadow:The Legacy of the Three\n
                    \ ryumo@merit.edu                                 206.246.120.2
                    3333\n--------------------------------------------------------------------\n\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: Marc Bowden <ryumo@merit.edu>'
                          name: From
                          value: Marc Bowden <ryumo@merit.edu>
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Tue, 18 Jan 2000 08:05:03 -0500'
                          name: Date
                          value: Tue, 18 Jan 2000 08:05:03 -0500
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: Re: [MUD-Dev] Community Relations'
                          name: Subject
                          value: 'Re: [MUD-Dev] Community Relations'
                        mbox_from: 
                      body: "--On Tue, Jan 18, 2000 12:10 AM -0500 \"Jon A. Lambert\"\n<jlsysinc@ix.netcom.com>
                        wrote:\n\n> \n> \"Thy shall not insult or offend any member
                        of the administration\"\n> and\n> \"Thy shall not insult or
                        offend any player\"\n> \n> Note that the former is usually
                        enforced with great enthusiasm,\n> while enforcement of the
                        latter is haphazard and oftentimes\n> explicitly  non-existent.\n>
                        \n> Any thoughts as to why this is so?  \n> \n\n  I believe
                        it's because the majority of the people starting up\nout-of-the
                        box MUDs have very limited social experience, and mostly\nas
                        misfits or outcasts (usually by choice because it's trendy\nnowadays
                        to be a rebel just like everyone else or because they just\ndon't
                        play well with others.) Emotionally immature, they only really\nhave
                        one tool available - make the noisybadthing go away, or hurt
                        it;\nI suppose that depends on the exact degree of social
                        dissonance which\nthey enjoy more. So they lash out to make
                        it stop and (they believe)\nmake an example so people leave
                        them alone.\n  The same administrative \"type\" tends to ignore
                        the playerbase for\nlargely the same reason - they're not
                        him, so it's not that\nimportant. It's much easier to work
                        on code than play referee, plus\nthey don't feel all nervous
                        and anxious when they deal with code as\nopposed to people,
                        who never do what they're supposed to.\n\n> Do such policies
                        introduce a \"class\" system into a muds social\n> structure
                        regardless of whether the administration is faceless or\n>
                        not?\n> \n\n  A class system always gets introduced into any
                        social structure -\nit's human nature to form those kind of
                        social divisions. In any MUD\nor MUD variant there's always
                        going to be in the players' minds and\nus-or-them mentality;
                        in fact, more and more lately, people sign on\nto play on-line
                        games...but not the ones we built for them. Their\ngames tend
                        to be more of them trying to see how far they can push or\noutwit
                        the \"evil\" administrator/administration/anyonebiggerthanthem
                        -\nand evil in their personal context is defined in almost
                        Randian terms\nas \"anything that prevents me from doing whatever
                        I want.\"\n  Kids *need* to have something to hate - it's
                        pretty much all they\nknow how to do when they feel inadequate
                        or frustrated, and we're\nperfect targets. I'm sure there's
                        not one of us here who's had to\nfail out an \"apprentice\"
                        or remove a \"wizard\" who was morally,\ntechnically, or mentally
                        unfit for the job and hasn't had a few of\nthem continue to
                        hang around under many many aliases and try to \"get\nus back\"
                        for what we did to them, because it's *obviously* our fault.\n
                        \ I use the term 'kids' not in the pejorative sense but as
                        a\nreference to the level of social awareness because the
                        problem isn't\nlimited by age. Case in point, while reading
                        the above paragraph a\nname, face, or situation that fit the
                        profile came to you unbidden.\nI'm willing to bet not everyone's
                        personal example fell within that\n13-17 age range we all
                        cringe at dealing with.\n  \n> \n> What is it about administration
                        personnel that makes them so much\n> more delicate and important
                        when it comes to being insulted or \n> offended?\n> \n\n  For
                        the amateur (see above for a vastly oversimplified model)\nadministrator
                        it's usually poor modeling behavior - pick a bad admin,\nany
                        bad admin. Now do what he does. For a smaller (I hope!)\npercentage
                        it's because they assume that their ability to use tar\n-xvf
                        and gcc means that they should be accorded instant respect,\nadulation,
                        and limber nubile slave women. If they don't \"get what's\ncoming
                        to them\" from the playerbase, they feel more than justified
                        in\nhanding out wholesale death.\n  The professional now -
                        and I believe that includes almost everyone\non the list -
                        realizes that, as long as the kids don't cross the line\ninto
                        profanity or character assasination, it's okay to let them
                        vent;\nthey'll eventually expend themselves, get bored, and
                        go back to\nplaying. I put up with an amazing ammount of crap
                        myself, which\ndoesn't bother me because I realize that it's
                        just immature bluster\nand they'll eventually grow out of
                        it. I do admit to encouraging\npeople who pick on people on
                        my staff besides me to find something\nelse to do very, very
                        soon, however - backing up and protecting the\ndignity of
                        your subordinate \"wizards\" is part of the job too, and\nthey
                        deserve the respect.\n\n--------------------------------------------------------------------\nMarc
                        Bowden - Soulsinger         Dreamshadow:The Legacy of the
                        Three\n  ryumo@merit.edu                                 206.246.120.2
                        3333\n--------------------------------------------------------------------\n\n\n\n\n_______________________________________________\nMUD-Dev
                        maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'Re: [MUD-Dev] Community Relations'
                  from: Marc Bowden <ryumo@merit.edu>
                  references: []
                  date: 2000-01-18 13:05:03.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: JzUMQw7M
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *188
              parent: *144
              children:
              - &192 !ruby/object:MessageContainer
                key: &189 !ruby/object:MessageId
                  raw: 00IySsfA@generated-message-id.chibrary.org
                value: !ruby/object:Message
                  email: !ruby/object:Email
                    raw: "From: Ola Fosheim Gr��stad <olag@ifi.uio.no>\nDate: Thu,
                      20 Jan 2000 01:34:05 +0100\nSubject: Re: [MUD-Dev] Community
                      Relations\n\nMatthew Mihaly wrote:\r\n> On Tue, 18 Jan 2000,
                      Jon A. Lambert wrote:\r\n> > What is it about administration
                      personnel that makes them so much\r\n> > more delicate and important
                      when it comes to being insulted or\r\n> > offended?\r\n> \r\n>
                      The exact same reason why judges can sentence you to jail on
                      grounds of\r\n> contempt of court for pretty much anything they
                      choose. I'm not really\r\n> interested in getting into a lengthy
                      debate about whether judges should be\r\n> shot or not, but
                      considering that some of the same functions of admins are\r\n>
                      often dealing with player disputes, I wouldn't be so quick to
                      throw out a\r\n> way of dealing with things that has survived
                      the test of time for quite\r\n> awhile.\r\n\r\nThat is one of
                      the weaknesses of democracy. Rather stable, but incapable\r\nof
                      changing, and when something changes it does so in a rather
                      slow and\r\ninefficient manner.\r\n\r\nAnyway, the authoritative
                      concept of \"contempt of court\" (I don't think\r\nmost people
                      are sent to jail for going bananas, but that is another\r\nissue)
                      and the system itself is partially a historical construct, and\r\npartially
                      functional. It is rather obvious that the judge is responsible\r\nfor
                      allowing the presentation of all relevant facts. That's one
                      reason\r\nfor having that concept. It prevents the usage of
                      powertactics such as\r\n\"BOOOing\". I don't think that holds
                      in a MUD setting. And one usually\r\ntries to find a settlement
                      outside the courtroom...  I don't think the\r\nanalogy is a
                      good one..\r\n\r\nAnother analogy would be the old fashioned
                      school system. \"Listen to\r\nwhat I teach you, do what I say,
                      and don't tell me I am wrong, because\r\nthen I'll whip your
                      butts\". I guess there must be a reason for why\r\nthat's considered
                      old fashioned?\r\n\r\nI think perhaps the police is a better
                      analogy, but the police is\r\nsupposed to be guided by strict
                      rules. And in the physical world you\r\nhave much less control
                      and risk much more. So that kind of respect is\r\nnot really
                      required in a MUD.\r\n\r\n=> I think you are coming up with
                      excuses.  I doubt that such \"violent\"\r\nrespect built on
                      fear is required to administer a mud efficiently.\r\n\r\n> the
                      Gods/admins. Players will die, or suffer other punishments for\r\n>
                      insulting a God though, and sometimes the punishments may weaken
                      the\r\n> player significantly until he has apologized, often
                      publically, and/or\r\n> performed some difficult or tedious
                      task that the God sets for him.\r\n\r\nDoes the \"evil\" God
                      reward you for insulting the \"good\" God? \r\n\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                    header: !ruby/object:Headers
                      rmail: !ruby/object:RMail::Message
                        header: !ruby/object:RMail::Header
                          fields:
                          - !ruby/object:RMail::Header::Field
                            raw: 'From: Ola Fosheim Gr��stad <olag@ifi.uio.no>'
                            name: From
                            value: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                          - !ruby/object:RMail::Header::Field
                            raw: 'Date: Thu, 20 Jan 2000 01:34:05 +0100'
                            name: Date
                            value: Thu, 20 Jan 2000 01:34:05 +0100
                          - !ruby/object:RMail::Header::Field
                            raw: 'Subject: Re: [MUD-Dev] Community Relations'
                            name: Subject
                            value: 'Re: [MUD-Dev] Community Relations'
                          mbox_from: 
                        body: "Matthew Mihaly wrote:\r\n> On Tue, 18 Jan 2000, Jon
                          A. Lambert wrote:\r\n> > What is it about administration
                          personnel that makes them so much\r\n> > more delicate and
                          important when it comes to being insulted or\r\n> > offended?\r\n>
                          \r\n> The exact same reason why judges can sentence you
                          to jail on grounds of\r\n> contempt of court for pretty
                          much anything they choose. I'm not really\r\n> interested
                          in getting into a lengthy debate about whether judges should
                          be\r\n> shot or not, but considering that some of the same
                          functions of admins are\r\n> often dealing with player disputes,
                          I wouldn't be so quick to throw out a\r\n> way of dealing
                          with things that has survived the test of time for quite\r\n>
                          awhile.\r\n\r\nThat is one of the weaknesses of democracy.
                          Rather stable, but incapable\r\nof changing, and when something
                          changes it does so in a rather slow and\r\ninefficient manner.\r\n\r\nAnyway,
                          the authoritative concept of \"contempt of court\" (I don't
                          think\r\nmost people are sent to jail for going bananas,
                          but that is another\r\nissue) and the system itself is partially
                          a historical construct, and\r\npartially functional. It
                          is rather obvious that the judge is responsible\r\nfor allowing
                          the presentation of all relevant facts. That's one reason\r\nfor
                          having that concept. It prevents the usage of powertactics
                          such as\r\n\"BOOOing\". I don't think that holds in a MUD
                          setting. And one usually\r\ntries to find a settlement outside
                          the courtroom...  I don't think the\r\nanalogy is a good
                          one..\r\n\r\nAnother analogy would be the old fashioned
                          school system. \"Listen to\r\nwhat I teach you, do what
                          I say, and don't tell me I am wrong, because\r\nthen I'll
                          whip your butts\". I guess there must be a reason for why\r\nthat's
                          considered old fashioned?\r\n\r\nI think perhaps the police
                          is a better analogy, but the police is\r\nsupposed to be
                          guided by strict rules. And in the physical world you\r\nhave
                          much less control and risk much more. So that kind of respect
                          is\r\nnot really required in a MUD.\r\n\r\n=> I think you
                          are coming up with excuses.  I doubt that such \"violent\"\r\nrespect
                          built on fear is required to administer a mud efficiently.\r\n\r\n>
                          the Gods/admins. Players will die, or suffer other punishments
                          for\r\n> insulting a God though, and sometimes the punishments
                          may weaken the\r\n> player significantly until he has apologized,
                          often publically, and/or\r\n> performed some difficult or
                          tedious task that the God sets for him.\r\n\r\nDoes the
                          \"evil\" God reward you for insulting the \"good\" God?
                          \r\n\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                          maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                        epilogue: 
                        preamble: 
                    message_id: !ruby/object:MessageId
                      raw: "[invalid or missing message id]"
                    subject: !ruby/object:Subject
                      original: 'Re: [MUD-Dev] Community Relations'
                    from: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                    references: []
                    date: 2000-01-20 00:34:05.000000000 Z
                    no_archive: false
                  call_number: !ruby/object:CallNumber
                    str: 00IySsfA
                  source: archive
                  list: !ruby/object:List
                    slug: mud-dev
                    name: 
                    description: 
                    homepage: 
                    footer: 
                  message_id: *189
                parent: *190
                children:
                - &194 !ruby/object:MessageContainer
                  key: &191 !ruby/object:MessageId
                    raw: 00bj5dyq@generated-message-id.chibrary.org
                  value: !ruby/object:Message
                    email: !ruby/object:Email
                      raw: "From: Matthew Mihaly <diablo@best.com>\nDate: Thu, 20
                        Jan 2000 23:10:02 -0800 (PST)\nSubject: Re: [MUD-Dev] Community
                        Relations\n\nOn Thu, 20 Jan 2000, Jon A. Lambert wrote:\n\n>
                        Matthew Mihaly wrote:\n> > Like the way people generally tend
                        to act? Given that I have yet to meet\n> > someone who does
                        not bend morality to fit circumstances, it's hardly a\n> >
                        surprise that admins do it. Christians are against murder,
                        unless it's\n> > done on a really large scale it seems. \n>
                        \n> There there Matt.  You need to find another bogeyman to
                        beat.  At least dare\n> I suggest, \"publicly\".  We Christians
                        haven't been let on a really good rampage \n> in such a long
                        time.  The last two centuries have been quite the party for
                        \n> the \"enlightened atheist\".   Yeah I know, atheists are
                        against murder, but they \n> seem to do it on an incredibly
                        really large scale.  They do put the E in \n> efficiency.
                        \ Now I'll stop here and apology in advance for my bigotry
                        and \n> stereotyping.   \n\nI wasn't attacking Christians
                        in particular, just using this as an example\nof general hypocrisy,
                        which we are all guilty of. I still lapse into\nanarcho-capitalist
                        rhetoric and theory sometimes, even though I have never\nbeen
                        able to reconcile myself with the anarchists prohibition against
                        the\ninitiation of force, and the capitalist idea of private
                        property. I act\nlike I believe it though because, frankly,
                        it's easier. It shames me a bit\nwhenever I think about it.
                        I don't think atheists are against murder\neither, incidentally.
                        There's nothing inherent about atheism that is\nanti-murder.
                        Also, you could make the argument that when \"Christians\"
                        do\ngo to war, or order war to begin, they aren't really Christians,\nparticularly
                        as I don't believe they are sincere in asking for forgiveness\nfor
                        their actions. Kind of off-topic though.\n\n \n> Anyhow isn't
                        this the anti-thesis of the topic \"Community Relations\".
                        \ Presumably \n> WE want better relations not worse.  The
                        collective WE, meaning mud-dev is\n> frankly interested in
                        better relations.  Ooops, that's a mistake, eh?  I mean what
                        \n> right do I have to even begin to speak for such a diverse
                        group.  Anti-patterns of \n> mud administration are good fodder
                        I think, and appropriate in the realm of what \n> not to do.
                        \ Defending a bad example in the context of the rights of
                        an administrator \n> to do it, doesn't really turn bad around
                        to good, nor does it prevent a sort of \n> community judgment
                        or consensus forming that \"doing X is a bad thing\".   \n>
                        Nor is community consensus always a bad thing.  I acknowledge
                        there can be a \n> lot of corner cases here, where the beneficial
                        qualities of some administrative \n> actions aren't immediately
                        obvious.\n\nSorry John, but I'm not going to tame my arguments,
                        particularly as I\nbelieve they are adequately well-reasoned.
                        A community judgement may form,\nbut frankly, that's unlikely
                        to affect my opinion on the matter. I also\nthink it's fairly
                        bad form asking me to go with the flow. Academic science\nsuffers
                        greatly from that sort of attitude, I think. If I was on here,\nspouting
                        things on the level of \"You suck\" that'd be one thing. Raph
                        made\na sweeping statement, and I frankly disagree with it.
                        If you're referring\nto my Christians remark, well, sorry,
                        but if we want to avoid ever\npossibly offending anyone, then
                        I think we better steer away from saying\nanything negative
                        about anyone or any group in real life (Capricious Mud\nAdmins
                        included).\n\nI mean, you seem to be saying that since none
                        of us actually are\ninterested in running our muds badly,
                        there is no point in talking\nabstractly about it. That's
                        fine, but I also didn't bring it up in the\nabstract. I just
                        responded. I also think I should point out again, that I\nhave
                        personally known an admin/owner who made a very good living
                        from a\ncommercial text mud, and he was the kind of admin
                        we all love to\nhate. \n\n\n> The bottom line is 90% of players
                        don't enjoy being f**ked around with by\n> some sadistic psychotic
                        administrator.  And 90% of us don't plan to run \n> our muds
                        like the Marquis de Sade.  So is arguing about the legal rights
                        and\n> morality of the 10% relevant?  Do WE think they are
                        entitled to some sort of \n> social justice or community respect?\n\nActually
                        no, I don't think the players are entitled to anything that
                        was\nnot explicitly promised. I firmly believe the legal owners
                        fully own their\nworld, and that only they have the power
                        to cede any sort of ownership or\ncontrol to the users. And
                        yes, I darn well think arguing about that 10% is\nrelevant.
                        Again, I'm unwilling to shut up just because 90% of you disagree\nwith
                        me.  If that's the standard, then I'll leave the list. But\npresumably,
                        if the topic was not of interest, there wouldn't be this\nflurry
                        of posts on it.\n\n> \n> > I have no problem at all with\n>
                        > infanticide, or just leaving a baby outside to die of the
                        elements, for\n> > instance, providing it is your baby.\n>
                        \n> We all have these odd beliefs and opinions.  I happen
                        to think that the 37 million \n> babies that have been murdered
                        in the last 25 years in the US is sickening.  \n> It's a peculiar
                        notion I hold, that is frankly beyond debate.  \n\nSure, I
                        understand that, and I respect it, but on the other hand,
                        when we\nare talking about issues related to muds, I would
                        hope that no one here is\ngoing to absolutely insist and refuse
                        to ever question, anything. There's\nenough of a lack of diversity
                        in the basic style of muds. I don't think\nthat needs encouraging
                        with dogma.\n\n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                        maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                      header: !ruby/object:Headers
                        rmail: !ruby/object:RMail::Message
                          header: !ruby/object:RMail::Header
                            fields:
                            - !ruby/object:RMail::Header::Field
                              raw: 'From: Matthew Mihaly <diablo@best.com>'
                              name: From
                              value: Matthew Mihaly <diablo@best.com>
                            - !ruby/object:RMail::Header::Field
                              raw: 'Date: Thu, 20 Jan 2000 23:10:02 -0800 (PST)'
                              name: Date
                              value: Thu, 20 Jan 2000 23:10:02 -0800 (PST)
                            - !ruby/object:RMail::Header::Field
                              raw: 'Subject: Re: [MUD-Dev] Community Relations'
                              name: Subject
                              value: 'Re: [MUD-Dev] Community Relations'
                            mbox_from: 
                          body: "On Thu, 20 Jan 2000, Jon A. Lambert wrote:\n\n> Matthew
                            Mihaly wrote:\n> > Like the way people generally tend
                            to act? Given that I have yet to meet\n> > someone who
                            does not bend morality to fit circumstances, it's hardly
                            a\n> > surprise that admins do it. Christians are against
                            murder, unless it's\n> > done on a really large scale
                            it seems. \n> \n> There there Matt.  You need to find
                            another bogeyman to beat.  At least dare\n> I suggest,
                            \"publicly\".  We Christians haven't been let on a really
                            good rampage \n> in such a long time.  The last two centuries
                            have been quite the party for \n> the \"enlightened atheist\".
                            \  Yeah I know, atheists are against murder, but they
                            \n> seem to do it on an incredibly really large scale.
                            \ They do put the E in \n> efficiency.  Now I'll stop
                            here and apology in advance for my bigotry and \n> stereotyping.
                            \  \n\nI wasn't attacking Christians in particular, just
                            using this as an example\nof general hypocrisy, which
                            we are all guilty of. I still lapse into\nanarcho-capitalist
                            rhetoric and theory sometimes, even though I have never\nbeen
                            able to reconcile myself with the anarchists prohibition
                            against the\ninitiation of force, and the capitalist idea
                            of private property. I act\nlike I believe it though because,
                            frankly, it's easier. It shames me a bit\nwhenever I think
                            about it. I don't think atheists are against murder\neither,
                            incidentally. There's nothing inherent about atheism that
                            is\nanti-murder. Also, you could make the argument that
                            when \"Christians\" do\ngo to war, or order war to begin,
                            they aren't really Christians,\nparticularly as I don't
                            believe they are sincere in asking for forgiveness\nfor
                            their actions. Kind of off-topic though.\n\n \n> Anyhow
                            isn't this the anti-thesis of the topic \"Community Relations\".
                            \ Presumably \n> WE want better relations not worse.  The
                            collective WE, meaning mud-dev is\n> frankly interested
                            in better relations.  Ooops, that's a mistake, eh?  I
                            mean what \n> right do I have to even begin to speak for
                            such a diverse group.  Anti-patterns of \n> mud administration
                            are good fodder I think, and appropriate in the realm
                            of what \n> not to do.  Defending a bad example in the
                            context of the rights of an administrator \n> to do it,
                            doesn't really turn bad around to good, nor does it prevent
                            a sort of \n> community judgment or consensus forming
                            that \"doing X is a bad thing\".   \n> Nor is community
                            consensus always a bad thing.  I acknowledge there can
                            be a \n> lot of corner cases here, where the beneficial
                            qualities of some administrative \n> actions aren't immediately
                            obvious.\n\nSorry John, but I'm not going to tame my arguments,
                            particularly as I\nbelieve they are adequately well-reasoned.
                            A community judgement may form,\nbut frankly, that's unlikely
                            to affect my opinion on the matter. I also\nthink it's
                            fairly bad form asking me to go with the flow. Academic
                            science\nsuffers greatly from that sort of attitude, I
                            think. If I was on here,\nspouting things on the level
                            of \"You suck\" that'd be one thing. Raph made\na sweeping
                            statement, and I frankly disagree with it. If you're referring\nto
                            my Christians remark, well, sorry, but if we want to avoid
                            ever\npossibly offending anyone, then I think we better
                            steer away from saying\nanything negative about anyone
                            or any group in real life (Capricious Mud\nAdmins included).\n\nI
                            mean, you seem to be saying that since none of us actually
                            are\ninterested in running our muds badly, there is no
                            point in talking\nabstractly about it. That's fine, but
                            I also didn't bring it up in the\nabstract. I just responded.
                            I also think I should point out again, that I\nhave personally
                            known an admin/owner who made a very good living from
                            a\ncommercial text mud, and he was the kind of admin we
                            all love to\nhate. \n\n\n> The bottom line is 90% of players
                            don't enjoy being f**ked around with by\n> some sadistic
                            psychotic administrator.  And 90% of us don't plan to
                            run \n> our muds like the Marquis de Sade.  So is arguing
                            about the legal rights and\n> morality of the 10% relevant?
                            \ Do WE think they are entitled to some sort of \n> social
                            justice or community respect?\n\nActually no, I don't
                            think the players are entitled to anything that was\nnot
                            explicitly promised. I firmly believe the legal owners
                            fully own their\nworld, and that only they have the power
                            to cede any sort of ownership or\ncontrol to the users.
                            And yes, I darn well think arguing about that 10% is\nrelevant.
                            Again, I'm unwilling to shut up just because 90% of you
                            disagree\nwith me.  If that's the standard, then I'll
                            leave the list. But\npresumably, if the topic was not
                            of interest, there wouldn't be this\nflurry of posts on
                            it.\n\n> \n> > I have no problem at all with\n> > infanticide,
                            or just leaving a baby outside to die of the elements,
                            for\n> > instance, providing it is your baby.\n> \n> We
                            all have these odd beliefs and opinions.  I happen to
                            think that the 37 million \n> babies that have been murdered
                            in the last 25 years in the US is sickening.  \n> It's
                            a peculiar notion I hold, that is frankly beyond debate.
                            \ \n\nSure, I understand that, and I respect it, but on
                            the other hand, when we\nare talking about issues related
                            to muds, I would hope that no one here is\ngoing to absolutely
                            insist and refuse to ever question, anything. There's\nenough
                            of a lack of diversity in the basic style of muds. I don't
                            think\nthat needs encouraging with dogma.\n\n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                          epilogue: 
                          preamble: 
                      message_id: !ruby/object:MessageId
                        raw: "[invalid or missing message id]"
                      subject: !ruby/object:Subject
                        original: 'Re: [MUD-Dev] Community Relations'
                      from: Matthew Mihaly <diablo@best.com>
                      references: []
                      date: 2000-01-21 07:10:02.000000000 Z
                      no_archive: false
                    call_number: !ruby/object:CallNumber
                      str: 00bj5dyq
                    source: archive
                    list: !ruby/object:List
                      slug: mud-dev
                      name: 
                      description: 
                      homepage: 
                      footer: 
                    message_id: *191
                  parent: *192
                  children:
                  - &399 !ruby/object:MessageContainer
                    key: &193 !ruby/object:MessageId
                      raw: 00IySsds@generated-message-id.chibrary.org
                    value: !ruby/object:Message
                      email: !ruby/object:Email
                        raw: "From: \"Jon A. Lambert\" <jlsysinc@ix.netcom.com>\nDate:
                          Thu, 20 Jan 2000 23:55:23 -0500\nSubject: Re: [MUD-Dev]
                          Community Relations\n\nMatthew Mihaly wrote:\n> Like the
                          way people generally tend to act? Given that I have yet
                          to meet\n> someone who does not bend morality to fit circumstances,
                          it's hardly a\n> surprise that admins do it. Christians
                          are against murder, unless it's\n> done on a really large
                          scale it seems. \n\nThere there Matt.  You need to find
                          another bogeyman to beat.  At least dare\nI suggest, \"publicly\".
                          \ We Christians haven't been let on a really good rampage
                          \nin such a long time.  The last two centuries have been
                          quite the party for \nthe \"enlightened atheist\".   Yeah
                          I know, atheists are against murder, but they \nseem to
                          do it on an incredibly really large scale.  They do put
                          the E in \nefficiency.  Now I'll stop here and apology in
                          advance for my bigotry and \nstereotyping.   \n\nAnyhow
                          isn't this the anti-thesis of the topic \"Community Relations\".
                          \ Presumably \nWE want better relations not worse.  The
                          collective WE, meaning mud-dev is\nfrankly interested in
                          better relations.  Ooops, that's a mistake, eh?  I mean
                          what \nright do I have to even begin to speak for such a
                          diverse group.  Anti-patterns of \nmud administration are
                          good fodder I think, and appropriate in the realm of what
                          \nnot to do.  Defending a bad example in the context of
                          the rights of an administrator \nto do it, doesn't really
                          turn bad around to good, nor does it prevent a sort of \ncommunity
                          judgment or consensus forming that \"doing X is a bad thing\".
                          \  \nNor is community consensus always a bad thing.  I acknowledge
                          there can be a \nlot of corner cases here, where the beneficial
                          qualities of some administrative \nactions aren't immediately
                          obvious.\n\nThe bottom line is 90% of players don't enjoy
                          being f**ked around with by\nsome sadistic psychotic administrator.
                          \ And 90% of us don't plan to run \nour muds like the Marquis
                          de Sade.  So is arguing about the legal rights and\nmorality
                          of the 10% relevant?  Do WE think they are entitled to some
                          sort of \nsocial justice or community respect?\n\n> I have
                          no problem at all with\n> infanticide, or just leaving a
                          baby outside to die of the elements, for\n> instance, providing
                          it is your baby.\n\nWe all have these odd beliefs and opinions.
                          \ I happen to think that the 37 million \nbabies that have
                          been murdered in the last 25 years in the US is sickening.
                          \ \nIt's a peculiar notion I hold, that is frankly beyond
                          debate.  \n\n--\n--*     Jon A. Lambert - TychoMUD Email:
                          jlsysinc@nospam.ix.netcom.com     *--\n--*     Mud Server
                          Developer's Page <http://jlsysinc.home.netcom.com>      *--\n--*
                          \"No Free man shall ever be debarred the use of arms.\"
                          Thomas Jefferson *--\n\n\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                        header: !ruby/object:Headers
                          rmail: !ruby/object:RMail::Message
                            header: !ruby/object:RMail::Header
                              fields:
                              - !ruby/object:RMail::Header::Field
                                raw: 'From: "Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                                name: From
                                value: '"Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                              - !ruby/object:RMail::Header::Field
                                raw: 'Date: Thu, 20 Jan 2000 23:55:23 -0500'
                                name: Date
                                value: Thu, 20 Jan 2000 23:55:23 -0500
                              - !ruby/object:RMail::Header::Field
                                raw: 'Subject: Re: [MUD-Dev] Community Relations'
                                name: Subject
                                value: 'Re: [MUD-Dev] Community Relations'
                              mbox_from: 
                            body: "Matthew Mihaly wrote:\n> Like the way people generally
                              tend to act? Given that I have yet to meet\n> someone
                              who does not bend morality to fit circumstances, it's
                              hardly a\n> surprise that admins do it. Christians are
                              against murder, unless it's\n> done on a really large
                              scale it seems. \n\nThere there Matt.  You need to find
                              another bogeyman to beat.  At least dare\nI suggest,
                              \"publicly\".  We Christians haven't been let on a really
                              good rampage \nin such a long time.  The last two centuries
                              have been quite the party for \nthe \"enlightened atheist\".
                              \  Yeah I know, atheists are against murder, but they
                              \nseem to do it on an incredibly really large scale.
                              \ They do put the E in \nefficiency.  Now I'll stop
                              here and apology in advance for my bigotry and \nstereotyping.
                              \  \n\nAnyhow isn't this the anti-thesis of the topic
                              \"Community Relations\".  Presumably \nWE want better
                              relations not worse.  The collective WE, meaning mud-dev
                              is\nfrankly interested in better relations.  Ooops,
                              that's a mistake, eh?  I mean what \nright do I have
                              to even begin to speak for such a diverse group.  Anti-patterns
                              of \nmud administration are good fodder I think, and
                              appropriate in the realm of what \nnot to do.  Defending
                              a bad example in the context of the rights of an administrator
                              \nto do it, doesn't really turn bad around to good,
                              nor does it prevent a sort of \ncommunity judgment or
                              consensus forming that \"doing X is a bad thing\".   \nNor
                              is community consensus always a bad thing.  I acknowledge
                              there can be a \nlot of corner cases here, where the
                              beneficial qualities of some administrative \nactions
                              aren't immediately obvious.\n\nThe bottom line is 90%
                              of players don't enjoy being f**ked around with by\nsome
                              sadistic psychotic administrator.  And 90% of us don't
                              plan to run \nour muds like the Marquis de Sade.  So
                              is arguing about the legal rights and\nmorality of the
                              10% relevant?  Do WE think they are entitled to some
                              sort of \nsocial justice or community respect?\n\n>
                              I have no problem at all with\n> infanticide, or just
                              leaving a baby outside to die of the elements, for\n>
                              instance, providing it is your baby.\n\nWe all have
                              these odd beliefs and opinions.  I happen to think that
                              the 37 million \nbabies that have been murdered in the
                              last 25 years in the US is sickening.  \nIt's a peculiar
                              notion I hold, that is frankly beyond debate.  \n\n--\n--*
                              \    Jon A. Lambert - TychoMUD Email: jlsysinc@nospam.ix.netcom.com
                              \    *--\n--*     Mud Server Developer's Page <http://jlsysinc.home.netcom.com>
                              \     *--\n--* \"No Free man shall ever be debarred
                              the use of arms.\" Thomas Jefferson *--\n\n\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                            epilogue: 
                            preamble: 
                        message_id: !ruby/object:MessageId
                          raw: "[invalid or missing message id]"
                        subject: !ruby/object:Subject
                          original: 'Re: [MUD-Dev] Community Relations'
                        from: Jon A. Lambert <jlsysinc@ix.netcom.com>
                        references: []
                        date: 2000-01-21 04:55:23.000000000 Z
                        no_archive: false
                      call_number: !ruby/object:CallNumber
                        str: 00IySsds
                      source: archive
                      list: !ruby/object:List
                        slug: mud-dev
                        name: 
                        description: 
                        homepage: 
                        footer: 
                      message_id: *193
                    parent: *194
                    children: []
                - &244 !ruby/object:MessageContainer
                  key: &195 !ruby/object:MessageId
                    raw: 00IyQgGO@generated-message-id.chibrary.org
                  value: !ruby/object:Message
                    email: !ruby/object:Email
                      raw: |
                        From: Matthew Mihaly <diablo@best.com>
                        Date: Wed, 19 Jan 2000 18:40:22 -0800 (PST)
                        Subject: Re: [MUD-Dev] Community Relations

                        On Thu, 20 Jan 2000, Ola Fosheim [iso-8859-1] Gr=F8stad wrote:

                        > Matthew Mihaly wrote:
                        >=20
                        > Another analogy would be the old fashioned school system. "Listen to
                        > what I teach you, do what I say, and don't tell me I am wrong, because
                        > then I'll whip your butts". I guess there must be a reason for why
                        > that's considered old fashioned?

                        Yes, but I don't see how it is relevant. The children were forced to go to
                        schol. No one is forcing you to play a mud. The issue of choice is the
                        paramount issue to me.

                        >=20
                        > I think perhaps the police is a better analogy, but the police is
                        > supposed to be guided by strict rules. And in the physical world you
                        > have much less control and risk much more. So that kind of respect is
                        > not really required in a MUD.

                        Required for what? Again, you are implicitly assuming that all mud admins
                        do and must have the same goals.

                        >=20
                        > =3D> I think you are coming up with excuses.  I doubt that such "violent"
                        > respect built on fear is required to administer a mud efficiently.

                        Oh, i agree, definitely not required for that, but I hardly see where
                        administering a mud efficiently is the goal of the vast majority of mud
                        admins.


                        I wrote:
                        =20
                        > > the Gods/admins. Players will die, or suffer other punishments for
                        > > insulting a God though, and sometimes the punishments may weaken the
                        > > player significantly until he has apologized, often publically, and/or
                        > > performed some difficult or tedious task that the God sets for him.
                        >=20
                        > Does the "evil" God reward you for insulting the "good" God?=20

                        Gasp, definitely not. Doing so would weaken the respect that the
                        institution of Godhood must hold for our system to be effective. Gods
                        actually will generally punish even their own followers for overt
                        disrespect to any other God, though probably not as strongly as if the
                        insult was directed at the God whose follower is doing the insulting.

                        --matt




                        _______________________________________________
                        MUD-Dev maillist  -  MUD-Dev@kanga.nu
                        http://www.kanga.nu/lists/listinfo/mud-dev
                      header: !ruby/object:Headers
                        rmail: !ruby/object:RMail::Message
                          header: !ruby/object:RMail::Header
                            fields:
                            - !ruby/object:RMail::Header::Field
                              raw: 'From: Matthew Mihaly <diablo@best.com>'
                              name: From
                              value: Matthew Mihaly <diablo@best.com>
                            - !ruby/object:RMail::Header::Field
                              raw: 'Date: Wed, 19 Jan 2000 18:40:22 -0800 (PST)'
                              name: Date
                              value: Wed, 19 Jan 2000 18:40:22 -0800 (PST)
                            - !ruby/object:RMail::Header::Field
                              raw: 'Subject: Re: [MUD-Dev] Community Relations'
                              name: Subject
                              value: 'Re: [MUD-Dev] Community Relations'
                            mbox_from: 
                          body: |
                            On Thu, 20 Jan 2000, Ola Fosheim [iso-8859-1] Gr=F8stad wrote:

                            > Matthew Mihaly wrote:
                            >=20
                            > Another analogy would be the old fashioned school system. "Listen to
                            > what I teach you, do what I say, and don't tell me I am wrong, because
                            > then I'll whip your butts". I guess there must be a reason for why
                            > that's considered old fashioned?

                            Yes, but I don't see how it is relevant. The children were forced to go to
                            schol. No one is forcing you to play a mud. The issue of choice is the
                            paramount issue to me.

                            >=20
                            > I think perhaps the police is a better analogy, but the police is
                            > supposed to be guided by strict rules. And in the physical world you
                            > have much less control and risk much more. So that kind of respect is
                            > not really required in a MUD.

                            Required for what? Again, you are implicitly assuming that all mud admins
                            do and must have the same goals.

                            >=20
                            > =3D> I think you are coming up with excuses.  I doubt that such "violent"
                            > respect built on fear is required to administer a mud efficiently.

                            Oh, i agree, definitely not required for that, but I hardly see where
                            administering a mud efficiently is the goal of the vast majority of mud
                            admins.


                            I wrote:
                            =20
                            > > the Gods/admins. Players will die, or suffer other punishments for
                            > > insulting a God though, and sometimes the punishments may weaken the
                            > > player significantly until he has apologized, often publically, and/or
                            > > performed some difficult or tedious task that the God sets for him.
                            >=20
                            > Does the "evil" God reward you for insulting the "good" God?=20

                            Gasp, definitely not. Doing so would weaken the respect that the
                            institution of Godhood must hold for our system to be effective. Gods
                            actually will generally punish even their own followers for overt
                            disrespect to any other God, though probably not as strongly as if the
                            insult was directed at the God whose follower is doing the insulting.

                            --matt




                            _______________________________________________
                            MUD-Dev maillist  -  MUD-Dev@kanga.nu
                            http://www.kanga.nu/lists/listinfo/mud-dev
                          epilogue: 
                          preamble: 
                      message_id: !ruby/object:MessageId
                        raw: "[invalid or missing message id]"
                      subject: !ruby/object:Subject
                        original: 'Re: [MUD-Dev] Community Relations'
                      from: Matthew Mihaly <diablo@best.com>
                      references: []
                      date: 2000-01-20 02:40:22.000000000 Z
                      no_archive: false
                    call_number: !ruby/object:CallNumber
                      str: 00IyQgGO
                    source: archive
                    list: !ruby/object:List
                      slug: mud-dev
                      name: 
                      description: 
                      homepage: 
                      footer: 
                    message_id: *195
                  parent: *192
                  children: []
          children:
          - *196
        children:
        - &267 !ruby/object:MessageContainer
          key: &197 !ruby/object:MessageId
            raw: Jzn788Ku@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: Matthew Mihaly <diablo@best.com>\nDate: Tue, 18 Jan 2000
                03:43:42 -0800 (PST)\nSubject: Re: [MUD-Dev] Community Relations\n\nOn
                Tue, 18 Jan 2000, Jon A. Lambert wrote:\n\n> Do such policies introduce
                a \"class\" system into a muds social\n> structure regardless of whether
                the administration is faceless or not?\n\nYes.\n\n> \n> Don't such
                obtuse policies essentially boil down to \n>     \"You can be banned
                at our whim\"?\n\nYes.\n\n> \n> What is it about administration personnel
                that makes them so much\n> more delicate and important when it comes
                to being insulted or \n> offended?\n\nThe exact same reason why judges
                can sentence you to jail on grounds of\ncontempt of court for pretty
                much anything they choose. I'm not really\ninterested in getting into
                a lengthy debate about whether judges should be\nshot or not, but
                considering that some of the same functions of admins are\noften dealing
                with player disputes, I wouldn't be so quick to throw out a\nway of
                dealing with things that has survived the test of time for quite\nawhile.\n\nFurther,
                some games (Achaea and Avalon for instance) have an admin\nstructure
                where the admins are mainly Gods in the polytheistic sense. They\nhelp
                drive the action within the game, and, because they are Gods, they\nmust
                be treated with respect, or they will cease to be Godly in the eyes\nof
                the players. You can't have your God of Evil being spit upon and just\nstanding
                there taking it. A good divine smiting is in order. Having said\nthat,
                unless players go really really over the line, and persistently do\nit,
                we don't ban people or give any permanent punishments for insults
                to\nthe Gods/admins. Players will die, or suffer other punishments
                for\ninsulting a God though, and sometimes the punishments may weaken
                the\nplayer significantly until he has apologized, often publically,
                and/or\nperformed some difficult or tedious task that the God sets
                for him. \n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: Matthew Mihaly <diablo@best.com>'
                      name: From
                      value: Matthew Mihaly <diablo@best.com>
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Tue, 18 Jan 2000 03:43:42 -0800 (PST)'
                      name: Date
                      value: Tue, 18 Jan 2000 03:43:42 -0800 (PST)
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Community Relations'
                      name: Subject
                      value: 'Re: [MUD-Dev] Community Relations'
                    mbox_from: 
                  body: "On Tue, 18 Jan 2000, Jon A. Lambert wrote:\n\n> Do such policies
                    introduce a \"class\" system into a muds social\n> structure regardless
                    of whether the administration is faceless or not?\n\nYes.\n\n>
                    \n> Don't such obtuse policies essentially boil down to \n>     \"You
                    can be banned at our whim\"?\n\nYes.\n\n> \n> What is it about
                    administration personnel that makes them so much\n> more delicate
                    and important when it comes to being insulted or \n> offended?\n\nThe
                    exact same reason why judges can sentence you to jail on grounds
                    of\ncontempt of court for pretty much anything they choose. I'm
                    not really\ninterested in getting into a lengthy debate about
                    whether judges should be\nshot or not, but considering that some
                    of the same functions of admins are\noften dealing with player
                    disputes, I wouldn't be so quick to throw out a\nway of dealing
                    with things that has survived the test of time for quite\nawhile.\n\nFurther,
                    some games (Achaea and Avalon for instance) have an admin\nstructure
                    where the admins are mainly Gods in the polytheistic sense. They\nhelp
                    drive the action within the game, and, because they are Gods,
                    they\nmust be treated with respect, or they will cease to be Godly
                    in the eyes\nof the players. You can't have your God of Evil being
                    spit upon and just\nstanding there taking it. A good divine smiting
                    is in order. Having said\nthat, unless players go really really
                    over the line, and persistently do\nit, we don't ban people or
                    give any permanent punishments for insults to\nthe Gods/admins.
                    Players will die, or suffer other punishments for\ninsulting a
                    God though, and sometimes the punishments may weaken the\nplayer
                    significantly until he has apologized, often publically, and/or\nperformed
                    some difficult or tedious task that the God sets for him. \n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Community Relations'
              from: Matthew Mihaly <diablo@best.com>
              references: []
              date: 2000-01-18 11:43:42.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: Jzn788Ku
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *197
          parent: *196
          children: []
        - &200 !ruby/object:MessageContainer
          key: &198 !ruby/object:MessageId
            raw: 00uTmp8q@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: |
                From: "Eli Stevens {Grey}" <ens017@mizzou.edu>
                Date: Tue, 18 Jan 2000 13:22:42 -0600
                Subject: Re: [MUD-Dev] Community Relations

                As always, that which I state as fact in the following are just MHO.  :)

                From: Jon A. Lambert <jlsysinc@ix.netcom.com>
                > Dundee wrote:
                > > The player was banned for being insulting to me.
                >
                > I understand that these are very common policies throughout the
                > "mudding" universe.
                >
                > "Thy shall not insult or offend any member of the administration"
                > and
                > "Thy shall not insult or offend any player"
                >
                > Note that the former is usually enforced with great enthusiasm, while
                > enforcement of the latter is haphazard and oftentimes explicitly
                > non-existent.
                >
                > Any thoughts as to why this is so?

                An administrator can usually judge for themselves, immediatly, if they have
                been insulted.  Assuming a competent admin staff, there is little question
                IF an infraction has occured.  With players, this can be much more elusive,
                as players can lie, etc.  If people who were accused of being insulting were
                regularly banned, then you can bet that players would invent situations to
                extract revenge on those they did not like.

                > Do such policies introduce a "class" system into a muds social
                > structure regardless of whether the administration is faceless or not?
                >
                > Don't such obtuse policies essentially boil down to
                >     "You can be banned at our whim"?
                >
                > What is it about administration personnel that makes them so much
                > more delicate and important when it comes to being insulted or
                > offended?

                I know that I would want a player to at least make a token acknowledgement
                of the favor I was doing them - offering them a place to have fun.  While I
                would not expect fawning or fake, suck-up type attitudes, some respect is
                appropriate.  If you cannot appriciate the gift, why should you have it?
                (Flamebait?)

                The other players, however, are not explicitly providing the environment,
                and so are not as deserving of respect _in that sense_.

                Silence is respect
                Eli - mailto:ens017@mizzou.edu





                _______________________________________________
                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                http://www.kanga.nu/lists/listinfo/mud-dev
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: "Eli Stevens {Grey}" <ens017@mizzou.edu>'
                      name: From
                      value: '"Eli Stevens {Grey}" <ens017@mizzou.edu>'
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Tue, 18 Jan 2000 13:22:42 -0600'
                      name: Date
                      value: Tue, 18 Jan 2000 13:22:42 -0600
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Community Relations'
                      name: Subject
                      value: 'Re: [MUD-Dev] Community Relations'
                    mbox_from: 
                  body: |
                    As always, that which I state as fact in the following are just MHO.  :)

                    From: Jon A. Lambert <jlsysinc@ix.netcom.com>
                    > Dundee wrote:
                    > > The player was banned for being insulting to me.
                    >
                    > I understand that these are very common policies throughout the
                    > "mudding" universe.
                    >
                    > "Thy shall not insult or offend any member of the administration"
                    > and
                    > "Thy shall not insult or offend any player"
                    >
                    > Note that the former is usually enforced with great enthusiasm, while
                    > enforcement of the latter is haphazard and oftentimes explicitly
                    > non-existent.
                    >
                    > Any thoughts as to why this is so?

                    An administrator can usually judge for themselves, immediatly, if they have
                    been insulted.  Assuming a competent admin staff, there is little question
                    IF an infraction has occured.  With players, this can be much more elusive,
                    as players can lie, etc.  If people who were accused of being insulting were
                    regularly banned, then you can bet that players would invent situations to
                    extract revenge on those they did not like.

                    > Do such policies introduce a "class" system into a muds social
                    > structure regardless of whether the administration is faceless or not?
                    >
                    > Don't such obtuse policies essentially boil down to
                    >     "You can be banned at our whim"?
                    >
                    > What is it about administration personnel that makes them so much
                    > more delicate and important when it comes to being insulted or
                    > offended?

                    I know that I would want a player to at least make a token acknowledgement
                    of the favor I was doing them - offering them a place to have fun.  While I
                    would not expect fawning or fake, suck-up type attitudes, some respect is
                    appropriate.  If you cannot appriciate the gift, why should you have it?
                    (Flamebait?)

                    The other players, however, are not explicitly providing the environment,
                    and so are not as deserving of respect _in that sense_.

                    Silence is respect
                    Eli - mailto:ens017@mizzou.edu





                    _______________________________________________
                    MUD-Dev maillist  -  MUD-Dev@kanga.nu
                    http://www.kanga.nu/lists/listinfo/mud-dev
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Community Relations'
              from: Eli Stevens {Grey} <ens017@mizzou.edu>
              references: []
              date: 2000-01-18 19:22:42.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: 00uTmp8q
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *198
          parent: *196
          children:
          - &202 !ruby/object:MessageContainer
            key: &199 !ruby/object:MessageId
              raw: 00IySseu@generated-message-id.chibrary.org
            value: !ruby/object:Message
              email: !ruby/object:Email
                raw: "From: Matthew Mihaly <diablo@best.com>\nDate: Tue, 18 Jan 2000
                  13:22:56 -0800 (PST)\nSubject: Re: [MUD-Dev] Community Relations\n\nOn
                  Tue, 18 Jan 2000, Eli Stevens (Grey) wrote:\n\n> I know that I would
                  want a player to at least make a token acknowledgement\n> of the
                  favor I was doing them - offering them a place to have fun.  While
                  I\n> would not expect fawning or fake, suck-up type attitudes, some
                  respect is\n> appropriate.  If you cannot appriciate the gift, why
                  should you have it?\n> (Flamebait?)\n> \n> The other players, however,
                  are not explicitly providing the environment,\n> and so are not
                  as deserving of respect _in that sense_.\n\nRemember though that
                  many of us are involved in commercial endeavours, and\nthat attitude
                  is not appropriate for most commercial endeavours. When a\nplayer
                  is shelling out hundreds, perhaps even thousands, of dollars over
                  a\nperiod of time to play your game, you are not doing him a favour.
                  You\nmight say he's doing you a favour, but I don't think that's
                  accurate\neither, as presumably he thinks the fun he gets out of
                  your game is worth\nthe money. Personally, even though Achaea is
                  commercial, I am sometimes\nwilling to lose customers who irritate
                  me, simply because I don't answer\nto any corporate management above
                  myself. Being able to do that\noccassionally is a good outlet for
                  the frustration all admins sometimes\nfeel. However, I'm quite sure
                  that Simutronics, for example, would be most\nupset to find out
                  that one of their GMs was treating players as if he\nexpects the
                  player to be grateful to him.\n\nIt's understandable why someone
                  running a free mud would act that way,\nand, were Achaea not my
                  main source of income, I probably would too. You\ncreate something
                  for free for the enjoyment of other people, and I think\nit is quite
                  reasonable to expect that those taking advantage of your\ngenerosity
                  show you some respect. No one starts a volunteer project with\nthe
                  goal of getting spit on.\n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                header: !ruby/object:Headers
                  rmail: !ruby/object:RMail::Message
                    header: !ruby/object:RMail::Header
                      fields:
                      - !ruby/object:RMail::Header::Field
                        raw: 'From: Matthew Mihaly <diablo@best.com>'
                        name: From
                        value: Matthew Mihaly <diablo@best.com>
                      - !ruby/object:RMail::Header::Field
                        raw: 'Date: Tue, 18 Jan 2000 13:22:56 -0800 (PST)'
                        name: Date
                        value: Tue, 18 Jan 2000 13:22:56 -0800 (PST)
                      - !ruby/object:RMail::Header::Field
                        raw: 'Subject: Re: [MUD-Dev] Community Relations'
                        name: Subject
                        value: 'Re: [MUD-Dev] Community Relations'
                      mbox_from: 
                    body: "On Tue, 18 Jan 2000, Eli Stevens (Grey) wrote:\n\n> I know
                      that I would want a player to at least make a token acknowledgement\n>
                      of the favor I was doing them - offering them a place to have
                      fun.  While I\n> would not expect fawning or fake, suck-up type
                      attitudes, some respect is\n> appropriate.  If you cannot appriciate
                      the gift, why should you have it?\n> (Flamebait?)\n> \n> The
                      other players, however, are not explicitly providing the environment,\n>
                      and so are not as deserving of respect _in that sense_.\n\nRemember
                      though that many of us are involved in commercial endeavours,
                      and\nthat attitude is not appropriate for most commercial endeavours.
                      When a\nplayer is shelling out hundreds, perhaps even thousands,
                      of dollars over a\nperiod of time to play your game, you are
                      not doing him a favour. You\nmight say he's doing you a favour,
                      but I don't think that's accurate\neither, as presumably he
                      thinks the fun he gets out of your game is worth\nthe money.
                      Personally, even though Achaea is commercial, I am sometimes\nwilling
                      to lose customers who irritate me, simply because I don't answer\nto
                      any corporate management above myself. Being able to do that\noccassionally
                      is a good outlet for the frustration all admins sometimes\nfeel.
                      However, I'm quite sure that Simutronics, for example, would
                      be most\nupset to find out that one of their GMs was treating
                      players as if he\nexpects the player to be grateful to him.\n\nIt's
                      understandable why someone running a free mud would act that
                      way,\nand, were Achaea not my main source of income, I probably
                      would too. You\ncreate something for free for the enjoyment
                      of other people, and I think\nit is quite reasonable to expect
                      that those taking advantage of your\ngenerosity show you some
                      respect. No one starts a volunteer project with\nthe goal of
                      getting spit on.\n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    epilogue: 
                    preamble: 
                message_id: !ruby/object:MessageId
                  raw: "[invalid or missing message id]"
                subject: !ruby/object:Subject
                  original: 'Re: [MUD-Dev] Community Relations'
                from: Matthew Mihaly <diablo@best.com>
                references: []
                date: 2000-01-18 21:22:56.000000000 Z
                no_archive: false
              call_number: !ruby/object:CallNumber
                str: 00IySseu
              source: archive
              list: !ruby/object:List
                slug: mud-dev
                name: 
                description: 
                homepage: 
                footer: 
              message_id: *199
            parent: *200
            children:
            - &410 !ruby/object:MessageContainer
              key: &201 !ruby/object:MessageId
                raw: 000Dntsu@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: |
                    From: "Raph & Kristen Koster" <koster@eden.com>
                    Date: Tue, 18 Jan 2000 21:11:46 -0600
                    Subject: Re: [MUD-Dev] Community Relations

                    ----- Original Message -----
                    From: Matthew Mihaly <diablo@best.com>
                    To: <mud-dev@kanga.nu>
                    Sent: Tuesday, January 18, 2000 3:22 PM
                    Subject: Re: [MUD-Dev] Community Relations


                    > On Tue, 18 Jan 2000, Eli Stevens (Grey) wrote:
                    >
                    > > I know that I would want a player to at least make a token
                    acknowledgement
                    > > of the favor I was doing them - offering them a place to have fun.
                    [SNIP]
                    > > The other players, however, are not explicitly providing the
                    environment,
                    > > and so are not as deserving of respect _in that sense_.

                    The fundamental mistake is that the players ARE explicitly providing the
                    environment. The server and data you supply are basically incidental. They
                    are there to amuse the players when the other players aren't doing so. The
                    gameplay on most muds does NOT compare to a standalone game experience in
                    any way. The combat is simpler, the environments are less compelling, the
                    puzzles simplistic... what a mud generally supplies is a context for social
                    interaction that is more compelling than the blankness of an IRC chat room.

                    Now, I know there are exceptions (before you jump up to defend Achaea's
                    combat system, Matt ;). But by and large, a simple examination of the
                    playing patterns of mudders, and of the typical retention and migration
                    patterns, shows that people are mostly there for the other people. And they
                    leave when the other people leave.

                    > Remember though that many of us are involved in commercial endeavours, and
                    > that attitude is not appropriate for most commercial endeavours.

                    It is misguided regardless of whether the venture is a for-profit mud or
                    not.

                    > Personally, even though Achaea is commercial, I am sometimes
                    > willing to lose customers who irritate me, simply because I don't answer
                    > to any corporate management above myself.

                    And if they irritate large groups of players, it is smart business to get
                    rid of them.

                    >  Being able to do that
                    > occassionally is a good outlet for the frustration all admins sometimes
                    > feel. However, I'm quite sure that Simutronics, for example, would be most
                    > upset to find out that one of their GMs was treating players as if he
                    > expects the player to be grateful to him.

                    Motive for dismissal at any comemrcial system I know of, if the GM is
                    actually matching actions to that expectation.

                    > No one starts a volunteer project with
                    > the goal of getting spit on.

                    People caring for the homeless or the mentally deficient? Civil rights
                    volunteers in a segregated society? Sure they do. It's just a difference of
                    knowing in advance that's what they were doing. Most mud admins don't seem
                    to realize what it is that they are actually making. A game is the least of
                    it.

                    -Raph




                    _______________________________________________
                    MUD-Dev maillist  -  MUD-Dev@kanga.nu
                    http://www.kanga.nu/lists/listinfo/mud-dev
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: "Raph & Kristen Koster" <koster@eden.com>'
                          name: From
                          value: '"Raph & Kristen Koster" <koster@eden.com>'
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Tue, 18 Jan 2000 21:11:46 -0600'
                          name: Date
                          value: Tue, 18 Jan 2000 21:11:46 -0600
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: Re: [MUD-Dev] Community Relations'
                          name: Subject
                          value: 'Re: [MUD-Dev] Community Relations'
                        mbox_from: 
                      body: |
                        ----- Original Message -----
                        From: Matthew Mihaly <diablo@best.com>
                        To: <mud-dev@kanga.nu>
                        Sent: Tuesday, January 18, 2000 3:22 PM
                        Subject: Re: [MUD-Dev] Community Relations


                        > On Tue, 18 Jan 2000, Eli Stevens (Grey) wrote:
                        >
                        > > I know that I would want a player to at least make a token
                        acknowledgement
                        > > of the favor I was doing them - offering them a place to have fun.
                        [SNIP]
                        > > The other players, however, are not explicitly providing the
                        environment,
                        > > and so are not as deserving of respect _in that sense_.

                        The fundamental mistake is that the players ARE explicitly providing the
                        environment. The server and data you supply are basically incidental. They
                        are there to amuse the players when the other players aren't doing so. The
                        gameplay on most muds does NOT compare to a standalone game experience in
                        any way. The combat is simpler, the environments are less compelling, the
                        puzzles simplistic... what a mud generally supplies is a context for social
                        interaction that is more compelling than the blankness of an IRC chat room.

                        Now, I know there are exceptions (before you jump up to defend Achaea's
                        combat system, Matt ;). But by and large, a simple examination of the
                        playing patterns of mudders, and of the typical retention and migration
                        patterns, shows that people are mostly there for the other people. And they
                        leave when the other people leave.

                        > Remember though that many of us are involved in commercial endeavours, and
                        > that attitude is not appropriate for most commercial endeavours.

                        It is misguided regardless of whether the venture is a for-profit mud or
                        not.

                        > Personally, even though Achaea is commercial, I am sometimes
                        > willing to lose customers who irritate me, simply because I don't answer
                        > to any corporate management above myself.

                        And if they irritate large groups of players, it is smart business to get
                        rid of them.

                        >  Being able to do that
                        > occassionally is a good outlet for the frustration all admins sometimes
                        > feel. However, I'm quite sure that Simutronics, for example, would be most
                        > upset to find out that one of their GMs was treating players as if he
                        > expects the player to be grateful to him.

                        Motive for dismissal at any comemrcial system I know of, if the GM is
                        actually matching actions to that expectation.

                        > No one starts a volunteer project with
                        > the goal of getting spit on.

                        People caring for the homeless or the mentally deficient? Civil rights
                        volunteers in a segregated society? Sure they do. It's just a difference of
                        knowing in advance that's what they were doing. Most mud admins don't seem
                        to realize what it is that they are actually making. A game is the least of
                        it.

                        -Raph




                        _______________________________________________
                        MUD-Dev maillist  -  MUD-Dev@kanga.nu
                        http://www.kanga.nu/lists/listinfo/mud-dev
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'Re: [MUD-Dev] Community Relations'
                  from: Raph & Kristen Koster <koster@eden.com>
                  references: []
                  date: 2000-01-19 03:11:46.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: 000Dntsu
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *201
              parent: *202
              children: []
        - &438 !ruby/object:MessageContainer
          key: &203 !ruby/object:MessageId
            raw: 000DlgP2@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: \"Travis S. Casey\" <efindel@io.com>\nDate: Tue, 18 Jan
                2000 13:41:23 -0600 (EST)\nSubject: Re: [MUD-Dev] Community Relations\n\nOn
                Tue, 18 Jan 2000, Jon A. Lambert wrote:\n> Dundee wrote:\n\n> > The
                player was banned for being insulting to me.  \n> \n> I understand
                that these are very common policies throughout the \n> \"mudding\"
                universe.\n> \n> \"Thy shall not insult or offend any member of the
                administration\"\n> and\n> \"Thy shall not insult or offend any player\"\n>
                \n> Note that the former is usually enforced with great enthusiasm,
                while\n> enforcement of the latter is haphazard and oftentimes explicitly
                \n> non-existent.\n> \n> Any thoughts as to why this is so?  \n\nSome
                obvious reasons:\n\n - Such cases often come down to one person's
                word against another's --\n   A says B was insulting, B denies it.
                \ If one of the parties is a \n   member of the mud's administration,
                the other admins are much more\n   likely to take that person's word.\n\n
                \  Sometimes there are witnesses -- but many of those times, witnesses\n
                \  will be split on what happened.  Again, it comes down to \"who
                can we\n   trust?\"\n\n - Human nature.  Police go after offenders
                who are attacking other \n   police with greater zeal.  By the same
                token, when a player starts\n   insulting an admin, the whole admin
                team is likely to band together\n   behind the insulted admin.  In
                a player-vs-player, dispute, however,\n   there may be one or more
                dissenting admins.\n\n - Lack of reporting.  Admins are likely to
                either ban the offender \n   themselves or report it to the other
                admins, because they can be \n   fairly certain that their word will
                be respected and the person\n   will be banned.\n\n   Players, on
                the other hand, may not have that certainty, or may not\n   want to
                involve the admins for various reasons.  Some players may \n   act
                in a passive-agressive fashion, complaining loudly about the\n   insults
                but not taking any action to do anything about them (i.e.,\n   not
                directly contacting the admins).\n\n> Do such policies introduce a
                \"class\" system into a muds social\n> structure regardless of whether
                the administration is faceless or not?\n\nPolicies which explicitly
                say that insulting admins is punishable, but\ninsulting others is
                not, do introduce a class distinction.  Differential\nenforcement
                of policies may introduce a de facto class distinction.\n\nIMHO, there
                will *always* be a class distinction between admins and\nplayers.
                \ Indeed, there has to be; if there is no distinction between\nthem,
                then there is no difference, and no reason to call one an \"admin\"\nand
                the other a \"player.\"\n\nHowever, you can work to minimize the distinctions
                and to reduce friction\nbetween the players and the admins.  \"Faceless\"
                admins are one way to do\nit, but won't do it by themselves -- people
                will come to dislike even a\nfaceless administration that is unfair.\n\nIn
                this sort of case, it might be better to found an independent tribunal,\nmade
                up of a 50/50 mix of admins and players, and let these people decide\nif
                there is enough evidence to support a claim and what to do about it.\nThis
                helps to sidestep the problem of admins sticking together.\n\n> Don't
                such obtuse policies essentially boil down to \n>     \"You can be
                banned at our whim\"?\n\nThey can.  Indeed, *any* policy can boil
                down to that.  Take the example\nof countries that have human rights
                policies, but ignore them on a regular\nbasis.\n\nIf you do not enforce
                policies consistently and fairly, it may not matter\nhow good those
                policies theoretically are.\n\n> What is it about administration personnel
                that makes them so much\n> more delicate and important when it comes
                to being insulted or \n> offended?\n\nAdmins often have a higher emotional
                investment in the game, and a greater\nfeeling of ownership.  Consider
                the difference between a random person\nyelling an insult at you out
                on the street, and someone you've invited\ninto your home insulting
                you there.  Also, consider the difference in\nbeing insulted by a
                random person on the street vs. having someone insult\nyou while eating
                a cake you helped make.\n\nIn the first case, it's natural to feel
                more insulted, and to feel an urge\nto tell that person to leave.
                \ In the second case, it's natural to feel\nmore insulted and to not
                want that person to get to enjoy any more of the\ncake.\n\nBy the
                same token, when a mud admin is insulted by someone in the mud\nhe/she
                helped build -- someone who is enjoying the fruits of the admin's\nlabor
                -- it's natural for the admin to feel more insulted than he/she\notherwise
                would, and to want to expel that person from the mud.\n\n--\n       |\\
                \     _,,,---,,_        Travis S. Casey  <efindel@io.com>\n ZZzz  /,`.-'`'
                \   -.  ;-;;,_   No one agrees with me.  Not even me.\n      |,4-
                \ ) )-,_..;\\ (  `'-'\n     '---''(_/--'  `-'_) \n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: "Travis S. Casey" <efindel@io.com>'
                      name: From
                      value: '"Travis S. Casey" <efindel@io.com>'
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Tue, 18 Jan 2000 13:41:23 -0600 (EST)'
                      name: Date
                      value: Tue, 18 Jan 2000 13:41:23 -0600 (EST)
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Community Relations'
                      name: Subject
                      value: 'Re: [MUD-Dev] Community Relations'
                    mbox_from: 
                  body: "On Tue, 18 Jan 2000, Jon A. Lambert wrote:\n> Dundee wrote:\n\n>
                    > The player was banned for being insulting to me.  \n> \n> I
                    understand that these are very common policies throughout the
                    \n> \"mudding\" universe.\n> \n> \"Thy shall not insult or offend
                    any member of the administration\"\n> and\n> \"Thy shall not insult
                    or offend any player\"\n> \n> Note that the former is usually
                    enforced with great enthusiasm, while\n> enforcement of the latter
                    is haphazard and oftentimes explicitly \n> non-existent.\n> \n>
                    Any thoughts as to why this is so?  \n\nSome obvious reasons:\n\n
                    - Such cases often come down to one person's word against another's
                    --\n   A says B was insulting, B denies it.  If one of the parties
                    is a \n   member of the mud's administration, the other admins
                    are much more\n   likely to take that person's word.\n\n   Sometimes
                    there are witnesses -- but many of those times, witnesses\n   will
                    be split on what happened.  Again, it comes down to \"who can
                    we\n   trust?\"\n\n - Human nature.  Police go after offenders
                    who are attacking other \n   police with greater zeal.  By the
                    same token, when a player starts\n   insulting an admin, the whole
                    admin team is likely to band together\n   behind the insulted
                    admin.  In a player-vs-player, dispute, however,\n   there may
                    be one or more dissenting admins.\n\n - Lack of reporting.  Admins
                    are likely to either ban the offender \n   themselves or report
                    it to the other admins, because they can be \n   fairly certain
                    that their word will be respected and the person\n   will be banned.\n\n
                    \  Players, on the other hand, may not have that certainty, or
                    may not\n   want to involve the admins for various reasons.  Some
                    players may \n   act in a passive-agressive fashion, complaining
                    loudly about the\n   insults but not taking any action to do anything
                    about them (i.e.,\n   not directly contacting the admins).\n\n>
                    Do such policies introduce a \"class\" system into a muds social\n>
                    structure regardless of whether the administration is faceless
                    or not?\n\nPolicies which explicitly say that insulting admins
                    is punishable, but\ninsulting others is not, do introduce a class
                    distinction.  Differential\nenforcement of policies may introduce
                    a de facto class distinction.\n\nIMHO, there will *always* be
                    a class distinction between admins and\nplayers.  Indeed, there
                    has to be; if there is no distinction between\nthem, then there
                    is no difference, and no reason to call one an \"admin\"\nand
                    the other a \"player.\"\n\nHowever, you can work to minimize the
                    distinctions and to reduce friction\nbetween the players and the
                    admins.  \"Faceless\" admins are one way to do\nit, but won't
                    do it by themselves -- people will come to dislike even a\nfaceless
                    administration that is unfair.\n\nIn this sort of case, it might
                    be better to found an independent tribunal,\nmade up of a 50/50
                    mix of admins and players, and let these people decide\nif there
                    is enough evidence to support a claim and what to do about it.\nThis
                    helps to sidestep the problem of admins sticking together.\n\n>
                    Don't such obtuse policies essentially boil down to \n>     \"You
                    can be banned at our whim\"?\n\nThey can.  Indeed, *any* policy
                    can boil down to that.  Take the example\nof countries that have
                    human rights policies, but ignore them on a regular\nbasis.\n\nIf
                    you do not enforce policies consistently and fairly, it may not
                    matter\nhow good those policies theoretically are.\n\n> What is
                    it about administration personnel that makes them so much\n> more
                    delicate and important when it comes to being insulted or \n>
                    offended?\n\nAdmins often have a higher emotional investment in
                    the game, and a greater\nfeeling of ownership.  Consider the difference
                    between a random person\nyelling an insult at you out on the street,
                    and someone you've invited\ninto your home insulting you there.
                    \ Also, consider the difference in\nbeing insulted by a random
                    person on the street vs. having someone insult\nyou while eating
                    a cake you helped make.\n\nIn the first case, it's natural to
                    feel more insulted, and to feel an urge\nto tell that person to
                    leave.  In the second case, it's natural to feel\nmore insulted
                    and to not want that person to get to enjoy any more of the\ncake.\n\nBy
                    the same token, when a mud admin is insulted by someone in the
                    mud\nhe/she helped build -- someone who is enjoying the fruits
                    of the admin's\nlabor -- it's natural for the admin to feel more
                    insulted than he/she\notherwise would, and to want to expel that
                    person from the mud.\n\n--\n       |\\      _,,,---,,_        Travis
                    S. Casey  <efindel@io.com>\n ZZzz  /,`.-'`'    -.  ;-;;,_   No
                    one agrees with me.  Not even me.\n      |,4-  ) )-,_..;\\ (  `'-'\n
                    \    '---''(_/--'  `-'_) \n\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Community Relations'
              from: Travis S. Casey <efindel@io.com>
              references: []
              date: 2000-01-18 19:41:23.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: 000DlgP2
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *203
          parent: *196
          children: []
        - *204
      children:
      - *205
      - &211 !ruby/object:MessageContainer
        key: &206 !ruby/object:MessageId
          raw: JzUMT9aC@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: \"Jon A. Lambert\" <jlsysinc@ix.netcom.com>\nDate: Fri, 21
              Jan 2000 22:57:52 -0500\nSubject: Re: [MUD-Dev] Community Relations\n\nMatthew
              Mihaly wrote:\n>On Thu, 20 Jan 2000, Jon A. Lambert wrote:\n>\n>> Assume
              that the role of the administrator is solely that of a police officer\n>>
              or executive government.  They may even be ranked in some heirarchy\n>>
              where there's a single authoritarian figure or committee at the top.
              \ This \n>> sort of administrator doesn't have anything to do with coding,
              building, \n>> security.  Their roles are primarily behavior control,
              enforcement of law.   \n>> And they have the means and level of trust
              to perform that role without \n>> recourse to a higher power.  And what
              if these adminstrators were elected \n>> and deposed directly by users,
              and came from the user population.  \n>\n>I'm currently writing an article
              for Gamasutra on this topic, more or\n>less. It's what I call \"dynamic
              politics\" (ie where players have real,\n>though not total, power over
              other players, and it is difficult for other\n>players to completely
              opt out of the system, or at least they lose\n>advantages they might
              otherwise have had by opting out). I don't advocate\n>having a single
              hierarchy though. I advocate multiple, competing\n>hierachies (basically
              like nations in the real world), because it's more\n>interesting and
              slightly less prone to the occassional abusive player\n>government.\n>\n\nI've
              thought along those lines, but it doesn't resolve one of the common\nproblems
              of administrating a space.  In particular, the multiple heirarchies\napproach
              doesn't address the problem of the complete expulsion of a \nparticular
              annoying user from that mud space.  The toading or banning \nof a player
              completely from the mud.  I assume you reserve that power.\nI'm talking
              about giving that power over to the general user administrators\nas
              well.  \n\n>> This does not eliminate dissent, partisanship, corruption,
              and injustice,\n>> obviously.  We're back to human nature again.  And
              it definitely does\n>> not guarantee \"good governance/good administration\".
              \  However it\n>> does put power in the users' hands, perhaps a sense
              that this is our\n>> mud, we run things here.   I suppose the one could
              accuse the owner \n>> of abject laziness and a total abrogation of responsibility.
              \  Is it really?\n>> Or have they given the users a valuable gift?\n>\n>And
              thank god it doesn't eliminate those things! They are what make\n>politics
              in muds EXCITING. Heck, one thing we are always trying to do\n>(subtly
              of course) in Achaea is ensure that peace between the various\n>\"nations\"
              never breaks out for long, so we always sabotage any treaties\n>they
              make by suggesting things that we know at least one party to the\n>treaty
              will eventually find completely intolerable, and thus break the\n>treaty,
              leading to exciting conflict.\n\n\nSure the many nations may address
              user enjoyment along the lines of high \ndrama and political intrigue,
              etc, etc.   I think competing administrative\nhierarchies will likely
              fall into the hands of those directly at odds with each\nother along
              the lines of good play, good behavior.  I'm thinking more along \nthe
              lines of a mud space as local club and the notions that they will come
              \nto a common (fairly stable) code of conduct in whatever game they
              happen\nt be playing.  Obviously high political intrigue and exciting
              conflict do exist \n\"in game\" within the framework of many owner-administrated
              mu*s.   \nOften the owner defines certain actions that will not be tolerated
              at all within \nthe space as detrimental to playerbase in general.   They
              could be along the \nlines of profanity, harassment, cheating, killing,
              etc.   \nThat's what I mean by user ownership.  They decide how they
              want to play, \nand the penalties for not playing their way.  It's their
              collective ball and they \ndecide who can play and who can't.\n\n--\n--*
              \    Jon A. Lambert - TychoMUD Email: jlsysinc@nospam.ix.netcom.com
              \    *--\n--*     Mud Server Developer's Page <http://jlsysinc.home.netcom.com>
              \     *--\n--* \"No Free man shall ever be debarred the use of arms.\"
              Thomas Jefferson *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: "Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                    name: From
                    value: '"Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Fri, 21 Jan 2000 22:57:52 -0500'
                    name: Date
                    value: Fri, 21 Jan 2000 22:57:52 -0500
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] Community Relations'
                    name: Subject
                    value: 'Re: [MUD-Dev] Community Relations'
                  mbox_from: 
                body: "Matthew Mihaly wrote:\n>On Thu, 20 Jan 2000, Jon A. Lambert
                  wrote:\n>\n>> Assume that the role of the administrator is solely
                  that of a police officer\n>> or executive government.  They may
                  even be ranked in some heirarchy\n>> where there's a single authoritarian
                  figure or committee at the top.  This \n>> sort of administrator
                  doesn't have anything to do with coding, building, \n>> security.
                  \ Their roles are primarily behavior control, enforcement of law.
                  \  \n>> And they have the means and level of trust to perform that
                  role without \n>> recourse to a higher power.  And what if these
                  adminstrators were elected \n>> and deposed directly by users, and
                  came from the user population.  \n>\n>I'm currently writing an article
                  for Gamasutra on this topic, more or\n>less. It's what I call \"dynamic
                  politics\" (ie where players have real,\n>though not total, power
                  over other players, and it is difficult for other\n>players to completely
                  opt out of the system, or at least they lose\n>advantages they might
                  otherwise have had by opting out). I don't advocate\n>having a single
                  hierarchy though. I advocate multiple, competing\n>hierachies (basically
                  like nations in the real world), because it's more\n>interesting
                  and slightly less prone to the occassional abusive player\n>government.\n>\n\nI've
                  thought along those lines, but it doesn't resolve one of the common\nproblems
                  of administrating a space.  In particular, the multiple heirarchies\napproach
                  doesn't address the problem of the complete expulsion of a \nparticular
                  annoying user from that mud space.  The toading or banning \nof
                  a player completely from the mud.  I assume you reserve that power.\nI'm
                  talking about giving that power over to the general user administrators\nas
                  well.  \n\n>> This does not eliminate dissent, partisanship, corruption,
                  and injustice,\n>> obviously.  We're back to human nature again.
                  \ And it definitely does\n>> not guarantee \"good governance/good
                  administration\".   However it\n>> does put power in the users'
                  hands, perhaps a sense that this is our\n>> mud, we run things here.
                  \  I suppose the one could accuse the owner \n>> of abject laziness
                  and a total abrogation of responsibility.   Is it really?\n>> Or
                  have they given the users a valuable gift?\n>\n>And thank god it
                  doesn't eliminate those things! They are what make\n>politics in
                  muds EXCITING. Heck, one thing we are always trying to do\n>(subtly
                  of course) in Achaea is ensure that peace between the various\n>\"nations\"
                  never breaks out for long, so we always sabotage any treaties\n>they
                  make by suggesting things that we know at least one party to the\n>treaty
                  will eventually find completely intolerable, and thus break the\n>treaty,
                  leading to exciting conflict.\n\n\nSure the many nations may address
                  user enjoyment along the lines of high \ndrama and political intrigue,
                  etc, etc.   I think competing administrative\nhierarchies will likely
                  fall into the hands of those directly at odds with each\nother along
                  the lines of good play, good behavior.  I'm thinking more along
                  \nthe lines of a mud space as local club and the notions that they
                  will come \nto a common (fairly stable) code of conduct in whatever
                  game they happen\nt be playing.  Obviously high political intrigue
                  and exciting conflict do exist \n\"in game\" within the framework
                  of many owner-administrated mu*s.   \nOften the owner defines certain
                  actions that will not be tolerated at all within \nthe space as
                  detrimental to playerbase in general.   They could be along the
                  \nlines of profanity, harassment, cheating, killing, etc.   \nThat's
                  what I mean by user ownership.  They decide how they want to play,
                  \nand the penalties for not playing their way.  It's their collective
                  ball and they \ndecide who can play and who can't.\n\n--\n--*     Jon
                  A. Lambert - TychoMUD Email: jlsysinc@nospam.ix.netcom.com     *--\n--*
                  \    Mud Server Developer's Page <http://jlsysinc.home.netcom.com>
                  \     *--\n--* \"No Free man shall ever be debarred the use of arms.\"
                  Thomas Jefferson *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] Community Relations'
            from: Jon A. Lambert <jlsysinc@ix.netcom.com>
            references: []
            date: 2000-01-22 03:57:52.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: JzUMT9aC
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *206
        parent: *204
        children: []
      - &376 !ruby/object:MessageContainer
        key: &207 !ruby/object:MessageId
          raw: 000DlgPI@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: |
              From: "Dundee" <SkeptAck@antisocial.com>
              Date: Tue, 18 Jan 2000 14:51:21 GMT
              Subject: Re: [MUD-Dev] Community Relations

              Jon A. Lambert" <jlsysinc@ix.netcom.com> wrote:

              > Note that the former is usually enforced with great enthusiasm, while
              > enforcement of the latter is haphazard and oftentimes explicitly=20
              > non-existent.

              In our case, the attitude was very much "This is not a public park, this =
              is
              my backyard.  If you don't like me, then get off my swingset and go play
              somewhere else."

              We had no mud hierarchy, no admin policy, no code of conduct (beyond =
              "don't
              be a jerk").  We're only now starting to put that stuff together (only =
              been
              up for six months, so maybe that's normal ... or maybe we've just been
              stupid).

              > Any thoughts as to why this is so? =20

              We spend the time and money to make the mud for other people to enjoy. To=
               be
              insulted on top of that...  Eh.

              > Don't such obtuse policies essentially boil down to=20
              >     "You can be banned at our whim"?

              'Can't say for most muds, but I think in our case, our demographic is a =
              bit
              different.  We're running a UO emulator.  We have a handful of players =
              that
              never played UO, a handful for whom EQ's expansion "Caverns of Camping" =
              was
              not sufficiently appealing to make them stick with that, and all the rest=
               of
              our users (90% or so) come from OSI.

              All of those (the 90%) fall into two categories:  1.  People who quit =
              OSI's
              servers due to the antisocial element. and 2. People that OSI banned =
              (which
              is to say, the very worst of the antisocial element).

              That day a while back that OSI banned massive numbers of people, we had =
              20
              applicants in one day.  People with names like PsyKoBarf and Buttpirate.

              So... we're very aggressive in trying to identify which group a person is=
               in.
              The players want us to ban early and ban often.  It's a feature.

              On top of that, there aren't very many UO Emulators running 24/7.  It's a
              very different thing than with text muds, where there seem to be about 3 =
              muds
              per player and if you want players, maybe you have to be a little more
              diplomatic, tolerant and even manipulative.

              I wish I had been more involved in MUDs 15 or 20 years ago.  I wonder how=
               our
              growing pains compare to the MUDs at that time.  We're in a very =
              different
              situation than text muds today, but similar to where text muds were years=
               and
              years ago, maybe.
              =20
              > What is it about administration personnel that makes them so much
              > more delicate and important when it comes to being insulted or=20
              > offended?

              That's a good question.

              --=20
              http://dundee.uong.com/



              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: "Dundee" <SkeptAck@antisocial.com>'
                    name: From
                    value: '"Dundee" <SkeptAck@antisocial.com>'
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Tue, 18 Jan 2000 14:51:21 GMT'
                    name: Date
                    value: Tue, 18 Jan 2000 14:51:21 GMT
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] Community Relations'
                    name: Subject
                    value: 'Re: [MUD-Dev] Community Relations'
                  mbox_from: 
                body: |
                  Jon A. Lambert" <jlsysinc@ix.netcom.com> wrote:

                  > Note that the former is usually enforced with great enthusiasm, while
                  > enforcement of the latter is haphazard and oftentimes explicitly=20
                  > non-existent.

                  In our case, the attitude was very much "This is not a public park, this =
                  is
                  my backyard.  If you don't like me, then get off my swingset and go play
                  somewhere else."

                  We had no mud hierarchy, no admin policy, no code of conduct (beyond =
                  "don't
                  be a jerk").  We're only now starting to put that stuff together (only =
                  been
                  up for six months, so maybe that's normal ... or maybe we've just been
                  stupid).

                  > Any thoughts as to why this is so? =20

                  We spend the time and money to make the mud for other people to enjoy. To=
                   be
                  insulted on top of that...  Eh.

                  > Don't such obtuse policies essentially boil down to=20
                  >     "You can be banned at our whim"?

                  'Can't say for most muds, but I think in our case, our demographic is a =
                  bit
                  different.  We're running a UO emulator.  We have a handful of players =
                  that
                  never played UO, a handful for whom EQ's expansion "Caverns of Camping" =
                  was
                  not sufficiently appealing to make them stick with that, and all the rest=
                   of
                  our users (90% or so) come from OSI.

                  All of those (the 90%) fall into two categories:  1.  People who quit =
                  OSI's
                  servers due to the antisocial element. and 2. People that OSI banned =
                  (which
                  is to say, the very worst of the antisocial element).

                  That day a while back that OSI banned massive numbers of people, we had =
                  20
                  applicants in one day.  People with names like PsyKoBarf and Buttpirate.

                  So... we're very aggressive in trying to identify which group a person is=
                   in.
                  The players want us to ban early and ban often.  It's a feature.

                  On top of that, there aren't very many UO Emulators running 24/7.  It's a
                  very different thing than with text muds, where there seem to be about 3 =
                  muds
                  per player and if you want players, maybe you have to be a little more
                  diplomatic, tolerant and even manipulative.

                  I wish I had been more involved in MUDs 15 or 20 years ago.  I wonder how=
                   our
                  growing pains compare to the MUDs at that time.  We're in a very =
                  different
                  situation than text muds today, but similar to where text muds were years=
                   and
                  years ago, maybe.
                  =20
                  > What is it about administration personnel that makes them so much
                  > more delicate and important when it comes to being insulted or=20
                  > offended?

                  That's a good question.

                  --=20
                  http://dundee.uong.com/



                  _______________________________________________
                  MUD-Dev maillist  -  MUD-Dev@kanga.nu
                  http://www.kanga.nu/lists/listinfo/mud-dev
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] Community Relations'
            from: Dundee <SkeptAck@antisocial.com>
            references: []
            date: 2000-01-18 14:51:21.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 000DlgPI
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *207
        parent: *204
        children: []
      - &403 !ruby/object:MessageContainer
        key: &208 !ruby/object:MessageId
          raw: Jysi41rM@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: Matthew Mihaly <diablo@best.com>\nDate: Thu, 20 Jan 2000 20:12:13
              -0800 (PST)\nSubject: Re: [MUD-Dev] Community Relations\n\nOn Thu, 20
              Jan 2000, Jon A. Lambert wrote:\n\n> I really like the police analogy.
              \  Administrators in general behave very \n> much like civilian police.
              \ They are just as likely to overreact or make \n> assumptions when
              it comes to a known \"perpetrator\".  I'l bet a lot of\n> administrators
              even use \"profiling\" (i.e. users coming from AOL domains).\n> A crime
              against a fellow officer invokes swift and harsh retribution.  \n> Constant
              complainers may endure longer response times, \"domestic \n> violence
              complaint again over at the EvilPK clan headquarters, who \n> wants
              to handle it?\".  \n\nChuckle. A BWD (Bashing While Dwarf) vs. a rl
              DWB (Driving While Black).\n\n \n> Assume that the role of the administrator
              is solely that of a police officer\n> or executive government.  They
              may even be ranked in some heirarchy\n> where there's a single authoritarian
              figure or committee at the top.  This \n> sort of administrator doesn't
              have anything to do with coding, building, \n> security.  Their roles
              are primarily behavior control, enforcement of law.   \n> And they have
              the means and level of trust to perform that role without \n> recourse
              to a higher power.  And what if these adminstrators were elected \n>
              and deposed directly by users, and came from the user population.  \n\nI'm
              currently writing an article for Gamasutra on this topic, more or\nless.
              It's what I call \"dynamic politics\" (ie where players have real,\nthough
              not total, power over other players, and it is difficult for other\nplayers
              to completely opt out of the system, or at least they lose\nadvantages
              they might otherwise have had by opting out). I don't advocate\nhaving
              a single hierarchy though. I advocate multiple, competing\nhierachies
              (basically like nations in the real world), because it's more\ninteresting
              and slightly less prone to the occassional abusive player\ngovernment.\n\n
              \n> This does not eliminate dissent, partisanship, corruption, and injustice,\n>
              obviously.  We're back to human nature again.  And it definitely does\n>
              not guarantee \"good governance/good administration\".   However it\n>
              does put power in the users' hands, perhaps a sense that this is our\n>
              mud, we run things here.   I suppose the one could accuse the owner
              \n> of abject laziness and a total abrogation of responsibility.   Is
              it really?\n> Or have they given the users a valuable gift?\n\nAnd thank
              god it doesn't eliminate those things! They are what make\npolitics
              in muds EXCITING. Heck, one thing we are always trying to do\n(subtly
              of course) in Achaea is ensure that peace between the various\n\"nations\"
              never breaks out for long, so we always sabotage any treaties\nthey
              make by suggesting things that we know at least one party to the\ntreaty
              will eventually find completely intolerable, and thus break the\ntreaty,
              leading to exciting conflict.\n\n \n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: Matthew Mihaly <diablo@best.com>'
                    name: From
                    value: Matthew Mihaly <diablo@best.com>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Thu, 20 Jan 2000 20:12:13 -0800 (PST)'
                    name: Date
                    value: Thu, 20 Jan 2000 20:12:13 -0800 (PST)
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] Community Relations'
                    name: Subject
                    value: 'Re: [MUD-Dev] Community Relations'
                  mbox_from: 
                body: "On Thu, 20 Jan 2000, Jon A. Lambert wrote:\n\n> I really like
                  the police analogy.   Administrators in general behave very \n>
                  much like civilian police.  They are just as likely to overreact
                  or make \n> assumptions when it comes to a known \"perpetrator\".
                  \ I'l bet a lot of\n> administrators even use \"profiling\" (i.e.
                  users coming from AOL domains).\n> A crime against a fellow officer
                  invokes swift and harsh retribution.  \n> Constant complainers may
                  endure longer response times, \"domestic \n> violence complaint
                  again over at the EvilPK clan headquarters, who \n> wants to handle
                  it?\".  \n\nChuckle. A BWD (Bashing While Dwarf) vs. a rl DWB (Driving
                  While Black).\n\n \n> Assume that the role of the administrator
                  is solely that of a police officer\n> or executive government.  They
                  may even be ranked in some heirarchy\n> where there's a single authoritarian
                  figure or committee at the top.  This \n> sort of administrator
                  doesn't have anything to do with coding, building, \n> security.
                  \ Their roles are primarily behavior control, enforcement of law.
                  \  \n> And they have the means and level of trust to perform that
                  role without \n> recourse to a higher power.  And what if these
                  adminstrators were elected \n> and deposed directly by users, and
                  came from the user population.  \n\nI'm currently writing an article
                  for Gamasutra on this topic, more or\nless. It's what I call \"dynamic
                  politics\" (ie where players have real,\nthough not total, power
                  over other players, and it is difficult for other\nplayers to completely
                  opt out of the system, or at least they lose\nadvantages they might
                  otherwise have had by opting out). I don't advocate\nhaving a single
                  hierarchy though. I advocate multiple, competing\nhierachies (basically
                  like nations in the real world), because it's more\ninteresting
                  and slightly less prone to the occassional abusive player\ngovernment.\n\n
                  \n> This does not eliminate dissent, partisanship, corruption, and
                  injustice,\n> obviously.  We're back to human nature again.  And
                  it definitely does\n> not guarantee \"good governance/good administration\".
                  \  However it\n> does put power in the users' hands, perhaps a sense
                  that this is our\n> mud, we run things here.   I suppose the one
                  could accuse the owner \n> of abject laziness and a total abrogation
                  of responsibility.   Is it really?\n> Or have they given the users
                  a valuable gift?\n\nAnd thank god it doesn't eliminate those things!
                  They are what make\npolitics in muds EXCITING. Heck, one thing we
                  are always trying to do\n(subtly of course) in Achaea is ensure
                  that peace between the various\n\"nations\" never breaks out for
                  long, so we always sabotage any treaties\nthey make by suggesting
                  things that we know at least one party to the\ntreaty will eventually
                  find completely intolerable, and thus break the\ntreaty, leading
                  to exciting conflict.\n\n \n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] Community Relations'
            from: Matthew Mihaly <diablo@best.com>
            references: []
            date: 2000-01-21 04:12:13.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: Jysi41rM
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *208
        parent: *204
        children: []
      - &453 !ruby/object:MessageContainer
        key: &209 !ruby/object:MessageId
          raw: Jysr6zcu@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: \"Jon A. Lambert\" <jlsysinc@ix.netcom.com>\nDate: Sun, 23
              Jan 2000 23:56:45 -0500\nSubject: Re: [MUD-Dev] Community Relations\n\nMatthew
              Mihaly wrote:\n>On Fri, 21 Jan 2000, Jon A. Lambert wrote:\n>\n>> \n>>
              I've thought along those lines, but it doesn't resolve one of the common\n>>
              problems of administrating a space.  In particular, the multiple hierarchies\n>>
              approach doesn't address the problem of the complete expulsion of a
              \n>> particular annoying user from that mud space.  The toading or banning
              \n>> of a player completely from the mud.  I assume you reserve that
              power.\n>> I'm talking about giving that power over to the general user
              administrators\n>> as well.  \n>\n>Ahh yes, I see what you mean. You're
              right. About the most extreme would\n>be effectively banning a player
              from the area under your jurisdiction\n>(say, a city, or, if you are
              on the Council of Oakstone, all the forests\n>on the continent) by causing
              the player to take regular, and significant\n>damage, whenever in that
              area (for instance, wolves and thorned vines will\n>attack you in the
              forest). \n\nYes and if something about your game setup is predicated
              on global \ncommunications it's not likely to help.  This could also
              be a big world vs small \nworld issue.  There are some very big worlds
              (in size, number of areas, etc..) \nthat are actually really very small
              worlds in terms of the ability for players to\nmove about easily.  The
              effectiveness of @exile on a particular player can be\nquite variable.\n\n>I'm
              curious, how do you (or do you propose) choose the players? \n\nIt may
              be easier to start this experiment from a mud where one has \nalready
              established a playerbase.  One where the owner believes their \naudience
              is \"ready for it\" and can \"handle it\".   A very subjective \nand
              slippery notion.  Certainly something rather annoying and unproductive\nmight
              show in a playerbase that rises to about 10 and passes laws to\neffectively
              ensure it stays that way.  :-P\n\n>It sounds\n>to me like you are talking
              about some sort of populist democratic\n>system? (correct me if I'm
              wrong please.) \n\nPerhaps, more or less.  I suppose pure populism would
              require that every \nissue or action require a vote.  Most power would
              reside in the players' \nelected representatives, a republican form
              of government.\nAlthough I wouldn't want to presuppose that whatever
              initial setup\nwas implemented would be permanent.  It may be that the
              playerbase\ndecides to shift the different powers around into some other
              form. \n\n>What happens when they elect the\n>mud equivalent of hitler,
              and he decides that all Dwarves should be kicked\n>off. Or, worse yet,
              what happens if the player who is at the top of the\n>hierarchy decides
              hr is going to quit, and is going to go out with a bang? \n\nCould happen.
              \ I would guess that maybe half or more of mud startups\nalready suffer
              one or both of the above at some point.  I've seen an awful \nlot of
              owners (co-owners) go out with a bang. \n\n>I think this really boils
              down to the old argument about democracy\n>vs. autocracy. Democracy,
              historically, produces less great leaders but\n>less really tyrannical
              leaders. On the strength of this, I decided that I\n>trust my judgement
              more than my players as a collective. Some of them may\n>have better
              judgement, but I firmly believe that as a whole, I am better\n>able
              to pick good administrators.\n>\n>I suppose though that it's not completely
              a matter of gettting the best\n>administrators, but also of giving the
              playerbase a feeling of\n>empowerment. Hmm, very interesting idea I
              have to say. I'm not sure I'd be\n>willing to try it, but I'd love to
              see it done, particularly totally in\n>the absence of owner interference
              with the decisions of the\n>playerbase-chosen administration.\n\nMore
              than just a feeling, an actuality.  Granted it just won't be universal.
              \ I'm\ncertain there will be minorities created that just aren't going
              to share that feeling \nof empowerment no matter what. \n\n>> That's
              what I mean by user ownership.  They decide how they want to play, \n>>
              and the penalties for not playing their way.  It's their collective
              ball and they \n>> decide who can play and who can't.\n>\n>Ahh, now
              this really gets into some interesting territory I think, but it\n>would
              have to be a little more complex than that. You are essentially\n>modeling
              a national democratic system, but with a citizenry far more at\n>odds
              with each other (probably) than in the western democracies. \n\nI think
              they would be much less at odds with each other.  After all for the
              most \npart they share a common purpose, that of playing a game.  \nHere's
              another analogy.  The owner builds a fenced-in set of basketball \ncourts
              and hands the keys to a group of players, and says it's yours, go \nplay,
              and if you need to do anything that you can't do page me.  They might
              \ndecide to play horse or pig, or they may pick teams and play regular
              style.  \nThey may develop all sorts of criteria for letting people
              on the courts, or none \nat all.  The owner tries to provide mechanisms
              that allow them to exercise\nwhatever administrative functions the desire.
              \ \n\nSure they could decide not to play basketball at all, they might
              decide \nto use the courts to engage in drug trafficking.  There are
              probably some issues\nwhere an owner would have to _demand_ minimum
              standards of enforcement \nfrom any user government.  The server is
              going to live on an ISP which is \nunder some localities legal jurisdiction.
              \ It's very existence may depend on \nsome criteria that has to be enforced,
              like those on a university-owned box.  \nThen again maybe there aren't
              any. \n \nThey might decide that they want to play pinochle or contract
              bridge, however \nthe presence of the basketball courts is compelling,
              it's the reason they came \nin the first place.   That much they share
              in common, though they may have \nsubstantial disagreement on the mechanics
              of play or what is considered good\nplay.   What is a foul and what
              is not a foul.  They might establish that some of the \ncourts be set-aside
              for different games.   They may prohibit fouling period or \nestablish
              that players must sit out for some infractions; complete banning for
              others.\n\n>It's not\n>so easy as just letting them vote straight out
              though, and then vesting\n>all legislative/executive/judiciary power
              in one hierarchy, because you\n>will end up with tyranny of the majority.
              That method is also poor\n<snip>\n>is applicable. How to resolve this
              issue is not simple. Books have been\n>written on how to avoid Madison's
              problem of majority tyranny. \n\nThat's certainly possible.  On the
              other hand, It's also possible that a user\ngovt. will recognize this
              situation as well and develop a compromise.  Many\nplayers share the
              same desire as owners when it comes to playerbase size.\nThose whose
              jobs depend on it may be more in tune with the nature and\nstrength
              of popular opinion than even an admin.  I'm thinking compromises \nmay
              be more common with indirect representation, than direct representation.
              \nEmigration and immigration are much more fluid in mud spaces than
              IRL.  \nIt's possible the playerbase will undergo some dramatic purges
              and variations\nin size until it attains a uniformity of common purpose
              that's stable.  How much \ndiversity in play will be tolerated by a
              player majority is something I do not know.\nPerhaps such a space will
              invariably gravitate towards either one strongly-suited \nin hearts
              or strongly-suited in clubs.\n\n>If you could set up some sort of system
              that could more accurately reflect\n>true majority sentiment, I think
              you'd be on your way, as far as the\n>playerbase passing such sweeping
              laws on itself, through elected\n>representatives. I don't have a solution,
              but I do think it'd be neat.\n\nIt poses interesting technical problems.
              \ Is suffrage universal and immediate,\nor predicated on one-vote per
              user, one vote for character (multi-playing), one \nvote per active
              character?  Another potential set of problems for mule characters.  \nLength
              of time for polling, determining when a quorum is present, etc.  Certainly\nmost
              muds have a sizable majority of inactive and for most purposes dead
              \nplayerbase, as compared to active characters.  Where to invest and
              how to \nimplement immediate executive powers like @squelching and @booting?
              \nIn individuals like \"police\" or the shared keys approach that's
              common to those \ncharged with overseeing nuclear devices?  Permanent
              @bans by executive\naction, legislative committee vote or popular vote?
              \ Mechanisms for voting\nand recall, terms of service, checks and balances,
              ad nauseam... ;-)\n\n\n\n--\n--*     Jon A. Lambert - TychoMUD Email:
              jlsysinc@nospam.ix.netcom.com     *--\n--*     Mud Server Developer's
              Page <http://jlsysinc.home.netcom.com>      *--\n--* \"No Free man shall
              ever be debarred the use of arms.\" Thomas Jefferson *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: "Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                    name: From
                    value: '"Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Sun, 23 Jan 2000 23:56:45 -0500'
                    name: Date
                    value: Sun, 23 Jan 2000 23:56:45 -0500
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] Community Relations'
                    name: Subject
                    value: 'Re: [MUD-Dev] Community Relations'
                  mbox_from: 
                body: "Matthew Mihaly wrote:\n>On Fri, 21 Jan 2000, Jon A. Lambert
                  wrote:\n>\n>> \n>> I've thought along those lines, but it doesn't
                  resolve one of the common\n>> problems of administrating a space.
                  \ In particular, the multiple hierarchies\n>> approach doesn't address
                  the problem of the complete expulsion of a \n>> particular annoying
                  user from that mud space.  The toading or banning \n>> of a player
                  completely from the mud.  I assume you reserve that power.\n>> I'm
                  talking about giving that power over to the general user administrators\n>>
                  as well.  \n>\n>Ahh yes, I see what you mean. You're right. About
                  the most extreme would\n>be effectively banning a player from the
                  area under your jurisdiction\n>(say, a city, or, if you are on the
                  Council of Oakstone, all the forests\n>on the continent) by causing
                  the player to take regular, and significant\n>damage, whenever in
                  that area (for instance, wolves and thorned vines will\n>attack
                  you in the forest). \n\nYes and if something about your game setup
                  is predicated on global \ncommunications it's not likely to help.
                  \ This could also be a big world vs small \nworld issue.  There
                  are some very big worlds (in size, number of areas, etc..) \nthat
                  are actually really very small worlds in terms of the ability for
                  players to\nmove about easily.  The effectiveness of @exile on a
                  particular player can be\nquite variable.\n\n>I'm curious, how do
                  you (or do you propose) choose the players? \n\nIt may be easier
                  to start this experiment from a mud where one has \nalready established
                  a playerbase.  One where the owner believes their \naudience is
                  \"ready for it\" and can \"handle it\".   A very subjective \nand
                  slippery notion.  Certainly something rather annoying and unproductive\nmight
                  show in a playerbase that rises to about 10 and passes laws to\neffectively
                  ensure it stays that way.  :-P\n\n>It sounds\n>to me like you are
                  talking about some sort of populist democratic\n>system? (correct
                  me if I'm wrong please.) \n\nPerhaps, more or less.  I suppose pure
                  populism would require that every \nissue or action require a vote.
                  \ Most power would reside in the players' \nelected representatives,
                  a republican form of government.\nAlthough I wouldn't want to presuppose
                  that whatever initial setup\nwas implemented would be permanent.
                  \ It may be that the playerbase\ndecides to shift the different
                  powers around into some other form. \n\n>What happens when they
                  elect the\n>mud equivalent of hitler, and he decides that all Dwarves
                  should be kicked\n>off. Or, worse yet, what happens if the player
                  who is at the top of the\n>hierarchy decides hr is going to quit,
                  and is going to go out with a bang? \n\nCould happen.  I would guess
                  that maybe half or more of mud startups\nalready suffer one or both
                  of the above at some point.  I've seen an awful \nlot of owners
                  (co-owners) go out with a bang. \n\n>I think this really boils down
                  to the old argument about democracy\n>vs. autocracy. Democracy,
                  historically, produces less great leaders but\n>less really tyrannical
                  leaders. On the strength of this, I decided that I\n>trust my judgement
                  more than my players as a collective. Some of them may\n>have better
                  judgement, but I firmly believe that as a whole, I am better\n>able
                  to pick good administrators.\n>\n>I suppose though that it's not
                  completely a matter of gettting the best\n>administrators, but also
                  of giving the playerbase a feeling of\n>empowerment. Hmm, very interesting
                  idea I have to say. I'm not sure I'd be\n>willing to try it, but
                  I'd love to see it done, particularly totally in\n>the absence of
                  owner interference with the decisions of the\n>playerbase-chosen
                  administration.\n\nMore than just a feeling, an actuality.  Granted
                  it just won't be universal.  I'm\ncertain there will be minorities
                  created that just aren't going to share that feeling \nof empowerment
                  no matter what. \n\n>> That's what I mean by user ownership.  They
                  decide how they want to play, \n>> and the penalties for not playing
                  their way.  It's their collective ball and they \n>> decide who
                  can play and who can't.\n>\n>Ahh, now this really gets into some
                  interesting territory I think, but it\n>would have to be a little
                  more complex than that. You are essentially\n>modeling a national
                  democratic system, but with a citizenry far more at\n>odds with
                  each other (probably) than in the western democracies. \n\nI think
                  they would be much less at odds with each other.  After all for
                  the most \npart they share a common purpose, that of playing a game.
                  \ \nHere's another analogy.  The owner builds a fenced-in set of
                  basketball \ncourts and hands the keys to a group of players, and
                  says it's yours, go \nplay, and if you need to do anything that
                  you can't do page me.  They might \ndecide to play horse or pig,
                  or they may pick teams and play regular style.  \nThey may develop
                  all sorts of criteria for letting people on the courts, or none
                  \nat all.  The owner tries to provide mechanisms that allow them
                  to exercise\nwhatever administrative functions the desire.  \n\nSure
                  they could decide not to play basketball at all, they might decide
                  \nto use the courts to engage in drug trafficking.  There are probably
                  some issues\nwhere an owner would have to _demand_ minimum standards
                  of enforcement \nfrom any user government.  The server is going
                  to live on an ISP which is \nunder some localities legal jurisdiction.
                  \ It's very existence may depend on \nsome criteria that has to
                  be enforced, like those on a university-owned box.  \nThen again
                  maybe there aren't any. \n \nThey might decide that they want to
                  play pinochle or contract bridge, however \nthe presence of the
                  basketball courts is compelling, it's the reason they came \nin
                  the first place.   That much they share in common, though they may
                  have \nsubstantial disagreement on the mechanics of play or what
                  is considered good\nplay.   What is a foul and what is not a foul.
                  \ They might establish that some of the \ncourts be set-aside for
                  different games.   They may prohibit fouling period or \nestablish
                  that players must sit out for some infractions; complete banning
                  for others.\n\n>It's not\n>so easy as just letting them vote straight
                  out though, and then vesting\n>all legislative/executive/judiciary
                  power in one hierarchy, because you\n>will end up with tyranny of
                  the majority. That method is also poor\n<snip>\n>is applicable.
                  How to resolve this issue is not simple. Books have been\n>written
                  on how to avoid Madison's problem of majority tyranny. \n\nThat's
                  certainly possible.  On the other hand, It's also possible that
                  a user\ngovt. will recognize this situation as well and develop
                  a compromise.  Many\nplayers share the same desire as owners when
                  it comes to playerbase size.\nThose whose jobs depend on it may
                  be more in tune with the nature and\nstrength of popular opinion
                  than even an admin.  I'm thinking compromises \nmay be more common
                  with indirect representation, than direct representation. \nEmigration
                  and immigration are much more fluid in mud spaces than IRL.  \nIt's
                  possible the playerbase will undergo some dramatic purges and variations\nin
                  size until it attains a uniformity of common purpose that's stable.
                  \ How much \ndiversity in play will be tolerated by a player majority
                  is something I do not know.\nPerhaps such a space will invariably
                  gravitate towards either one strongly-suited \nin hearts or strongly-suited
                  in clubs.\n\n>If you could set up some sort of system that could
                  more accurately reflect\n>true majority sentiment, I think you'd
                  be on your way, as far as the\n>playerbase passing such sweeping
                  laws on itself, through elected\n>representatives. I don't have
                  a solution, but I do think it'd be neat.\n\nIt poses interesting
                  technical problems.  Is suffrage universal and immediate,\nor predicated
                  on one-vote per user, one vote for character (multi-playing), one
                  \nvote per active character?  Another potential set of problems
                  for mule characters.  \nLength of time for polling, determining
                  when a quorum is present, etc.  Certainly\nmost muds have a sizable
                  majority of inactive and for most purposes dead \nplayerbase, as
                  compared to active characters.  Where to invest and how to \nimplement
                  immediate executive powers like @squelching and @booting? \nIn individuals
                  like \"police\" or the shared keys approach that's common to those
                  \ncharged with overseeing nuclear devices?  Permanent @bans by executive\naction,
                  legislative committee vote or popular vote?  Mechanisms for voting\nand
                  recall, terms of service, checks and balances, ad nauseam... ;-)\n\n\n\n--\n--*
                  \    Jon A. Lambert - TychoMUD Email: jlsysinc@nospam.ix.netcom.com
                  \    *--\n--*     Mud Server Developer's Page <http://jlsysinc.home.netcom.com>
                  \     *--\n--* \"No Free man shall ever be debarred the use of arms.\"
                  Thomas Jefferson *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] Community Relations'
            from: Jon A. Lambert <jlsysinc@ix.netcom.com>
            references: []
            date: 2000-01-24 04:56:45.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: Jysr6zcu
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *209
        parent: *204
        children: []
    children: []
  *59: *210
  *206: *211
  *53: *212
  ? &213 !ruby/object:MessageId
    raw: JzBSj0dc@generated-message-id.chibrary.org
  : &215 !ruby/object:MessageContainer
    key: *213
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: Vladimir Prelovac <tomcat@galeb.etf.bg.ac.yu>\nDate: Thu, 20 Jan
          2000 17:35:52 +0100 (CET)\nSubject: Re: [MUD-Dev] Simulated Populations\n\nOn
          Wed, 19 Jan 2000, phlUID wrote:\n\n>  Simulated Populations in Fantasy MUDS\n>
          \ -------------------------------------\n\n> target other Areas. For example,
          if a dwarf is born\n> as an adventurer who wants to kill Elves, it can\n>
          set off to an Area with an elf population. This\n\n\n  I am just having
          a look at this from the programming side of view. If\nyou are going to have
          large numbers of mobs moving from one location to\nthe other (ie. hunting,
          searching for food, going to war...) you will have\nto spend a *lot* of
          CPU time calculating shortest paths. And I still dont\nknow an efficient
          way to handle this. Maybe there is a way to build this\ndatabase with some
          kind of implemented solution to this problem within it.\n\n  Second matter
          is problem of handling system crashes or at least reboots.\nYou would obviously
          need a very safe and precise method of saving all the\ndata that have evolved
          (population info, every mob's current goal, etc\netc) and restoring them
          back, because you dont want your world to start\nbuilding itself from scratch
          every time you reboot.\n\n  The whole idea is of course very interesting.
          But also the effort that\nhas to be put into building it is simply HUGE.
          Hope you will finish it\nthough. \n\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Vladimir Prelovac <tomcat@galeb.etf.bg.ac.yu>'
                name: From
                value: Vladimir Prelovac <tomcat@galeb.etf.bg.ac.yu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Thu, 20 Jan 2000 17:35:52 +0100 (CET)'
                name: Date
                value: Thu, 20 Jan 2000 17:35:52 +0100 (CET)
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: [MUD-Dev] Simulated Populations'
                name: Subject
                value: 'Re: [MUD-Dev] Simulated Populations'
              mbox_from: 
            body: "On Wed, 19 Jan 2000, phlUID wrote:\n\n>  Simulated Populations
              in Fantasy MUDS\n>  -------------------------------------\n\n> target
              other Areas. For example, if a dwarf is born\n> as an adventurer who
              wants to kill Elves, it can\n> set off to an Area with an elf population.
              This\n\n\n  I am just having a look at this from the programming side
              of view. If\nyou are going to have large numbers of mobs moving from
              one location to\nthe other (ie. hunting, searching for food, going to
              war...) you will have\nto spend a *lot* of CPU time calculating shortest
              paths. And I still dont\nknow an efficient way to handle this. Maybe
              there is a way to build this\ndatabase with some kind of implemented
              solution to this problem within it.\n\n  Second matter is problem of
              handling system crashes or at least reboots.\nYou would obviously need
              a very safe and precise method of saving all the\ndata that have evolved
              (population info, every mob's current goal, etc\netc) and restoring
              them back, because you dont want your world to start\nbuilding itself
              from scratch every time you reboot.\n\n  The whole idea is of course
              very interesting. But also the effort that\nhas to be put into building
              it is simply HUGE. Hope you will finish it\nthough. \n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: [MUD-Dev] Simulated Populations'
        from: Vladimir Prelovac <tomcat@galeb.etf.bg.ac.yu>
        references: []
        date: 2000-01-20 16:35:52.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: JzBSj0dc
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *213
    parent: &217 !ruby/object:MessageContainer
      key: &214 !ruby/object:MessageId
        raw: JzBboAnw@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: |
            From: "phlUID" <phluid@mindless.com>
            Date: Wed, 19 Jan 2000 18:06:10 -0500
            Subject: [MUD-Dev] Simulated Populations

             Simulated Populations in Fantasy MUDS
             -------------------------------------

            My goal for my current MUD server project (Spellbound) is to
            create an environment that uses a mix of population
            simulations and intelligent agents to create a game that
            is rich and immersive, even when there isn't anyone playing.
            It isn't my intent to have a purely automated world, however,
            it is my main goal for simulating populations to make the
            world feel dynamic and alive for players.

            Recently, I started delving into what exactly I wanted to
            accomplish and my ideas about how to achieve my goals. I
            have decided to post these to this list to see if anyone
            has any suggestions or personal experience with designing
            simulated populations.

            Spellbound has a simple MUSH-like database heirarchy.
            Everything in the game is given a database number.
            Rooms, Objects, Exits, Characters, Areas, Spells, Races,
            Help Files, Worlds all have their own database numbers.
            This allows an integrated idea of OLC, in which you
            can edit attributes on any object just by using the
            database manipulation commands with the number of the
            object you are trying to modify.

            For population modelling, I will be using the Area
            object extensively to define area's that populations
            exist within. This idea stems from DIKUmud, where
            different themes, cities, or nations might be seperated
            by Areas. The only difference is that Spellbound allows
            for embedded Areas, where one area may be within another.
            A small part of the current world heirarchy is layed
            out below:

               The Planet Aeryn
                 |___ The Elven Kingdoms
                 |      |___ Magehaven (Elven, Human City)
                 |      |___ Vespen (Elven City)
                 |      |___ Illustria (Elven City)
                 |
                 |___ The Dwarven Nation
                 |      |___ Thorand (Gnome, Dwarf City)
                 |      |___ Mithryn (Dwarf City)
                 |
                 |___ The Isle of Daggers
                 |      |___ Darnock (Evil Aligned City)
                 |
                 |___ The Crystal Empire
                 |      |___ Krysalis (Good Aligned City)
                 |      |___ The Castle of Tears (Stronghold)
                 |
                 |___ The Troll Wastes
                 |      |___ Daruthen (Lizardmen City)
                etc.    |___ Murkmire (Troll, Gnome City)

            The first level Area (The Planet Aeryn) defines the
            whole world, and should be inconsequential except
            for defining the border's that populations may
            extend. For my purposes, I wish to use the general
            idea that automated agents from one population should
            never need to spread too far away from their own
            area.

            The second level Areas define container's for
            the Cities and Strongholds. Their use is for both
            population control as well as organization. This
            will be covered later.

            The lowest level Areas have the ability to have
            populations configured for them. We will use
            Mithryn as an example. The Mithryn area is a large
            stronghold in the northeastern part of the game
            wilderness. The wilderness itself is split up into
            the second level Areas. Mithryn and Thorand
            are both inside a section of the map referred to
            as the Dwarven Nation. Mithryn consists of a large
            stronghold filled primarily with dwarves. Mithryn
            is an Area object, and it contains all the objects,
            exits, rooms, mobs, races, spells, etc, that are
            part of the Mithryn area.

            Mithyn also has a population of dwarves. How exactly
            this population is defined has yet to be designed.
            One possibility is the creation of Population object's
            that define behavior for populations, and contain
            pointer's to different 'social classes' in a population.
            Population objects can also contain information on
            racism, migration patterns, economic wants, adventuring
            patterns, etc. The possibilities for these are endless.
            By using a population object it also allows me to have
            several population's in one city and allow them to
            interact at any level.

            A population should have several things:

             - A way of growing, resetting, repoping, or procreating.

                While we might not mind the possibility of having
                a population completely die out, every population
                should have a way of regenerating itself against
                the constant onslaught of experience runs. Of course,
                we also need to implement glass roofs and extinction
                level events to control populations that are growing
                out of hand.

             - Level ranges.

                This is mostly to cover balance issues, and it does
                not need to be specifically 'levels'. A population
                should have certain racial prowesses and special
                abilities. Level ranges can be used to make sure
                that dwarves are not overly wimpy or overly
                strong depending on their place within the framework
                of the world.

             - Equipment lists and associated 'social classes'.

                This is important for dressing up the 'characters'
                in our population. Social classes define different
                members of our population, such as 'female warrior',
                'male baby', 'male merchant', 'female mage'. The
                equipment lists allow us to scatter clothing and
                items that are appropriate depending on the social
                classes of the people we are trying to dress up.

              OR

             - Character lists

                This is the same idea as the 'equipment lists'
                and social classes, but instead of building unique
                mobiles every time, we just use DIKU's idea about
                resetting pre-existing characters into the game.
                This is probably an easy route and therefore will
                be the one that will be implemented.

             - Goals

                This is what seperates our populations from simple
                resets. By giving an entire population a set of
                goals or ideals and distributing them sanely, you
                create mobiles that don't just sit around waiting
                to be killed. In our example of Mithryn, most
                dwarves will be equiped with the 'attack enemies'
                goal. A few dwarves will be equipped with the
                'adventure' goal, which will drive them to leave
                Mithryn and scour the world. Obviously, both goals
                makes for a very short lived hero, as the dwarf
                will go forth and attack the first evil thing
                that it sees. A list of goals and associated code
                for those goals, combined with simple dwarven
                mobiles, allows for unlimited possibilites. It
                also allows for fun. I love the idea that some
                weird strain could go through the dwarven gene
                pool and they all would suddenly start attacking
                the Elven Nation. Inter-race warfare is probably
                my favorite part of the Goal system, but there
                are many other possibilities. Inter-area trade
                is another fun one. The economy can change and
                hopefully benefit from dynamic populations that
                cause inflation. Obviously, limits will be placed
                everywhere to make sure that populations won't
                get out of hand, but everything is easily
                tweakable.

            Okay. Lets see what we have now. We are generating
            generic Dwarf mobs that are listed in a population
            object, and these mobs pick up Goals. The goals
            are probably going to be coded using state machines
            that include strategies and actions, such as the
            engine from Twilight Minds. These dwarves will
            each set out to do their goals, and because dwarves
            are constantly dying and being re-born, the world
            changes all the time. The dramaticness of this
            needs to be tonned down somewhat, as we cannot have
            a billion dwarves suddenly take over the world.

            One thing that makes this system seriously easier
            is the fact that you cannot run out of money or
            food in Spellbound. However, this does not mean that
            these will not have an impact on the populations.
            The actual code that chooses which goals to give to
            new dwarves will be based on 'needs'. These needs
            are tallied, and each goal is considered to help
            repair these 'needs'.

            - If a population is becoming too large, the population
              system will simply stop spouting little dwarves.
            - If the population becomes too rich, more dwarves
              will be generated with goals that involve dangerous
              quests.
            - If a population is low on food, more dwarves will be
              generated with goals that involve searching for
              food to sell back to the local market.
            - If a population is dying out, more warriors will be
              made.

            Areas are good for defining exploration, trade,
            warfare, and adventuring goals. Because I use
            a heirarchical Area system, the dwarves can
            target other Areas. For example, if a dwarf is born
            as an adventurer who wants to kill Elves, it can
            set off to an Area with an elf population. This
            is used mostly to organize the different populations
            into their respective centers. We won't just be
            popping dwarves all over the map either. :)

            A side effect of populations is that it becomes
            possible to allow players to take over or claim
            areas of the map and allow the respective population
            to react to this. Clans can battle over areas and
            taxes that these populations bring in. The possibilities
            are endless, and the best part about is that with
            a well-designed system, there is no administration
            required. Yay. Suddenly the idea of player-run
            governments is feasible, as you just need to set up
            certain goals that say that dwarves will follow
            whoever is elected King of the Dwarven Nation.

            I think a lot of these ideas have been covered
            previously with the posts discussing MURKLE, but
            the difference is that I am trying to apply these
            populations to a familiar environment. Imagine
            playing a normal DIKU mud where your starting town
            is being overrun by trolls. As a result, players
            will start getting more interesting in killing more
            of the trolls to defend their hometowns. This can
            be helped along by allowing populations to hand out
            'auto quests'. The dwarven population might give out
            quests to kill members of the troll population if
            they are becoming too much of a pest. Obviously,
            once trolls start dying out, the elves and dwarves
            start thriving until they hit their glass ceilings.
            This is when a gnome population might show up and
            suddenly declare war on the elves. Many possibilies
            exist, and the imagination is the limit as to what
            can be coded into the population engine.

            My question to the MUD community is what a
            population engine should include for checks, balances,
            and possible algorithms for resets. The end result
            is a game where single people can make small impacts
            on entire populations, and the world is constantly
            moving around you as different races conflict, each
            trying to achieve their own private goals.

            Immersion is what makes the difference between a living,
            breathing mud, and a mere reactive one.

            Amos Wetherbee,
            The Spellbound Project



            _______________________________________________
            MUD-Dev maillist  -  MUD-Dev@kanga.nu
            http://www.kanga.nu/lists/listinfo/mud-dev
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: "phlUID" <phluid@mindless.com>'
                  name: From
                  value: '"phlUID" <phluid@mindless.com>'
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Wed, 19 Jan 2000 18:06:10 -0500'
                  name: Date
                  value: Wed, 19 Jan 2000 18:06:10 -0500
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: [MUD-Dev] Simulated Populations'
                  name: Subject
                  value: "[MUD-Dev] Simulated Populations"
                mbox_from: 
              body: |2
                 Simulated Populations in Fantasy MUDS
                 -------------------------------------

                My goal for my current MUD server project (Spellbound) is to
                create an environment that uses a mix of population
                simulations and intelligent agents to create a game that
                is rich and immersive, even when there isn't anyone playing.
                It isn't my intent to have a purely automated world, however,
                it is my main goal for simulating populations to make the
                world feel dynamic and alive for players.

                Recently, I started delving into what exactly I wanted to
                accomplish and my ideas about how to achieve my goals. I
                have decided to post these to this list to see if anyone
                has any suggestions or personal experience with designing
                simulated populations.

                Spellbound has a simple MUSH-like database heirarchy.
                Everything in the game is given a database number.
                Rooms, Objects, Exits, Characters, Areas, Spells, Races,
                Help Files, Worlds all have their own database numbers.
                This allows an integrated idea of OLC, in which you
                can edit attributes on any object just by using the
                database manipulation commands with the number of the
                object you are trying to modify.

                For population modelling, I will be using the Area
                object extensively to define area's that populations
                exist within. This idea stems from DIKUmud, where
                different themes, cities, or nations might be seperated
                by Areas. The only difference is that Spellbound allows
                for embedded Areas, where one area may be within another.
                A small part of the current world heirarchy is layed
                out below:

                   The Planet Aeryn
                     |___ The Elven Kingdoms
                     |      |___ Magehaven (Elven, Human City)
                     |      |___ Vespen (Elven City)
                     |      |___ Illustria (Elven City)
                     |
                     |___ The Dwarven Nation
                     |      |___ Thorand (Gnome, Dwarf City)
                     |      |___ Mithryn (Dwarf City)
                     |
                     |___ The Isle of Daggers
                     |      |___ Darnock (Evil Aligned City)
                     |
                     |___ The Crystal Empire
                     |      |___ Krysalis (Good Aligned City)
                     |      |___ The Castle of Tears (Stronghold)
                     |
                     |___ The Troll Wastes
                     |      |___ Daruthen (Lizardmen City)
                    etc.    |___ Murkmire (Troll, Gnome City)

                The first level Area (The Planet Aeryn) defines the
                whole world, and should be inconsequential except
                for defining the border's that populations may
                extend. For my purposes, I wish to use the general
                idea that automated agents from one population should
                never need to spread too far away from their own
                area.

                The second level Areas define container's for
                the Cities and Strongholds. Their use is for both
                population control as well as organization. This
                will be covered later.

                The lowest level Areas have the ability to have
                populations configured for them. We will use
                Mithryn as an example. The Mithryn area is a large
                stronghold in the northeastern part of the game
                wilderness. The wilderness itself is split up into
                the second level Areas. Mithryn and Thorand
                are both inside a section of the map referred to
                as the Dwarven Nation. Mithryn consists of a large
                stronghold filled primarily with dwarves. Mithryn
                is an Area object, and it contains all the objects,
                exits, rooms, mobs, races, spells, etc, that are
                part of the Mithryn area.

                Mithyn also has a population of dwarves. How exactly
                this population is defined has yet to be designed.
                One possibility is the creation of Population object's
                that define behavior for populations, and contain
                pointer's to different 'social classes' in a population.
                Population objects can also contain information on
                racism, migration patterns, economic wants, adventuring
                patterns, etc. The possibilities for these are endless.
                By using a population object it also allows me to have
                several population's in one city and allow them to
                interact at any level.

                A population should have several things:

                 - A way of growing, resetting, repoping, or procreating.

                    While we might not mind the possibility of having
                    a population completely die out, every population
                    should have a way of regenerating itself against
                    the constant onslaught of experience runs. Of course,
                    we also need to implement glass roofs and extinction
                    level events to control populations that are growing
                    out of hand.

                 - Level ranges.

                    This is mostly to cover balance issues, and it does
                    not need to be specifically 'levels'. A population
                    should have certain racial prowesses and special
                    abilities. Level ranges can be used to make sure
                    that dwarves are not overly wimpy or overly
                    strong depending on their place within the framework
                    of the world.

                 - Equipment lists and associated 'social classes'.

                    This is important for dressing up the 'characters'
                    in our population. Social classes define different
                    members of our population, such as 'female warrior',
                    'male baby', 'male merchant', 'female mage'. The
                    equipment lists allow us to scatter clothing and
                    items that are appropriate depending on the social
                    classes of the people we are trying to dress up.

                  OR

                 - Character lists

                    This is the same idea as the 'equipment lists'
                    and social classes, but instead of building unique
                    mobiles every time, we just use DIKU's idea about
                    resetting pre-existing characters into the game.
                    This is probably an easy route and therefore will
                    be the one that will be implemented.

                 - Goals

                    This is what seperates our populations from simple
                    resets. By giving an entire population a set of
                    goals or ideals and distributing them sanely, you
                    create mobiles that don't just sit around waiting
                    to be killed. In our example of Mithryn, most
                    dwarves will be equiped with the 'attack enemies'
                    goal. A few dwarves will be equipped with the
                    'adventure' goal, which will drive them to leave
                    Mithryn and scour the world. Obviously, both goals
                    makes for a very short lived hero, as the dwarf
                    will go forth and attack the first evil thing
                    that it sees. A list of goals and associated code
                    for those goals, combined with simple dwarven
                    mobiles, allows for unlimited possibilites. It
                    also allows for fun. I love the idea that some
                    weird strain could go through the dwarven gene
                    pool and they all would suddenly start attacking
                    the Elven Nation. Inter-race warfare is probably
                    my favorite part of the Goal system, but there
                    are many other possibilities. Inter-area trade
                    is another fun one. The economy can change and
                    hopefully benefit from dynamic populations that
                    cause inflation. Obviously, limits will be placed
                    everywhere to make sure that populations won't
                    get out of hand, but everything is easily
                    tweakable.

                Okay. Lets see what we have now. We are generating
                generic Dwarf mobs that are listed in a population
                object, and these mobs pick up Goals. The goals
                are probably going to be coded using state machines
                that include strategies and actions, such as the
                engine from Twilight Minds. These dwarves will
                each set out to do their goals, and because dwarves
                are constantly dying and being re-born, the world
                changes all the time. The dramaticness of this
                needs to be tonned down somewhat, as we cannot have
                a billion dwarves suddenly take over the world.

                One thing that makes this system seriously easier
                is the fact that you cannot run out of money or
                food in Spellbound. However, this does not mean that
                these will not have an impact on the populations.
                The actual code that chooses which goals to give to
                new dwarves will be based on 'needs'. These needs
                are tallied, and each goal is considered to help
                repair these 'needs'.

                - If a population is becoming too large, the population
                  system will simply stop spouting little dwarves.
                - If the population becomes too rich, more dwarves
                  will be generated with goals that involve dangerous
                  quests.
                - If a population is low on food, more dwarves will be
                  generated with goals that involve searching for
                  food to sell back to the local market.
                - If a population is dying out, more warriors will be
                  made.

                Areas are good for defining exploration, trade,
                warfare, and adventuring goals. Because I use
                a heirarchical Area system, the dwarves can
                target other Areas. For example, if a dwarf is born
                as an adventurer who wants to kill Elves, it can
                set off to an Area with an elf population. This
                is used mostly to organize the different populations
                into their respective centers. We won't just be
                popping dwarves all over the map either. :)

                A side effect of populations is that it becomes
                possible to allow players to take over or claim
                areas of the map and allow the respective population
                to react to this. Clans can battle over areas and
                taxes that these populations bring in. The possibilities
                are endless, and the best part about is that with
                a well-designed system, there is no administration
                required. Yay. Suddenly the idea of player-run
                governments is feasible, as you just need to set up
                certain goals that say that dwarves will follow
                whoever is elected King of the Dwarven Nation.

                I think a lot of these ideas have been covered
                previously with the posts discussing MURKLE, but
                the difference is that I am trying to apply these
                populations to a familiar environment. Imagine
                playing a normal DIKU mud where your starting town
                is being overrun by trolls. As a result, players
                will start getting more interesting in killing more
                of the trolls to defend their hometowns. This can
                be helped along by allowing populations to hand out
                'auto quests'. The dwarven population might give out
                quests to kill members of the troll population if
                they are becoming too much of a pest. Obviously,
                once trolls start dying out, the elves and dwarves
                start thriving until they hit their glass ceilings.
                This is when a gnome population might show up and
                suddenly declare war on the elves. Many possibilies
                exist, and the imagination is the limit as to what
                can be coded into the population engine.

                My question to the MUD community is what a
                population engine should include for checks, balances,
                and possible algorithms for resets. The end result
                is a game where single people can make small impacts
                on entire populations, and the world is constantly
                moving around you as different races conflict, each
                trying to achieve their own private goals.

                Immersion is what makes the difference between a living,
                breathing mud, and a mere reactive one.

                Amos Wetherbee,
                The Spellbound Project



                _______________________________________________
                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                http://www.kanga.nu/lists/listinfo/mud-dev
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: "[MUD-Dev] Simulated Populations"
          from: phlUID <phluid@mindless.com>
          references: []
          date: 2000-01-19 23:06:10.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: JzBboAnw
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *214
      parent: 
      children:
      - *215
      - &468 !ruby/object:MessageContainer
        key: &216 !ruby/object:MessageId
          raw: 00uTkcl6@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: Charles Hughes <charles.hughes@bigfoot.com>\nDate: Wed, 19
              Jan 2000 19:33:57 -0500\nSubject: RE: [MUD-Dev] Simulated Populations\n\nOn
              Wednesday, January 19, 2000 6:06 PM, phlUID [SMTP:phluid@mindless.com]
              \nwrote:\n>  Simulated Populations in Fantasy MUDS\n>  -------------------------------------\n[snip]\n>
              One thing that makes this system seriously easier\n> is the fact that
              you cannot run out of money or\n> food in Spellbound. However, this
              does not mean that\n> these will not have an impact on the populations.\n>
              The actual code that chooses which goals to give to\n> new dwarves will
              be based on 'needs'. These needs\n> are tallied, and each goal is considered
              to help\n> repair these 'needs'.\n\nIt all seems very interesting, but
              your plans involve\nsimply automating procreation.  Why not make it
              a goal?\nAs a population dwindles in number, the pressure to\nprocreate
              should increase.  As it increases, the\npressure to procreate should
              decrease.  Of course,\ncertain other factors could be included - sexual\nproclivity,
              interracial (interspecie?) couplings, etc.\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: Charles Hughes <charles.hughes@bigfoot.com>'
                    name: From
                    value: Charles Hughes <charles.hughes@bigfoot.com>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Wed, 19 Jan 2000 19:33:57 -0500'
                    name: Date
                    value: Wed, 19 Jan 2000 19:33:57 -0500
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: RE: [MUD-Dev] Simulated Populations'
                    name: Subject
                    value: 'RE: [MUD-Dev] Simulated Populations'
                  mbox_from: 
                body: "On Wednesday, January 19, 2000 6:06 PM, phlUID [SMTP:phluid@mindless.com]
                  \nwrote:\n>  Simulated Populations in Fantasy MUDS\n>  -------------------------------------\n[snip]\n>
                  One thing that makes this system seriously easier\n> is the fact
                  that you cannot run out of money or\n> food in Spellbound. However,
                  this does not mean that\n> these will not have an impact on the
                  populations.\n> The actual code that chooses which goals to give
                  to\n> new dwarves will be based on 'needs'. These needs\n> are tallied,
                  and each goal is considered to help\n> repair these 'needs'.\n\nIt
                  all seems very interesting, but your plans involve\nsimply automating
                  procreation.  Why not make it a goal?\nAs a population dwindles
                  in number, the pressure to\nprocreate should increase.  As it increases,
                  the\npressure to procreate should decrease.  Of course,\ncertain
                  other factors could be included - sexual\nproclivity, interracial
                  (interspecie?) couplings, etc.\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'RE: [MUD-Dev] Simulated Populations'
            from: Charles Hughes <charles.hughes@bigfoot.com>
            references: []
            date: 2000-01-20 00:33:57.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 00uTkcl6
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *216
        parent: *217
        children: []
    children:
    - &220 !ruby/object:MessageContainer
      key: &218 !ruby/object:MessageId
        raw: 00bj5f2O@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: |
            From: "phlUID" <phluid@mindless.com>
            Date: Thu, 20 Jan 2000 23:11:51 -0500
            Subject: Re: [MUD-Dev] Simulated Populations

            Vladimir Prelovac wrote:
            >   I am just having a look at this from the programming side of view. If
            > you are going to have large numbers of mobs moving from one location to
            > the other (ie. hunting, searching for food, going to war...) you will have
            > to spend a *lot* of CPU time calculating shortest paths. And I still dont
            > know an efficient way to handle this. Maybe there is a way to build this
            > database with some kind of implemented solution to this problem within it.

            Well, there are a couple of thoughts on this:

            1. We could just throw out the whole path finding thing and make mobs
               wander aimlessly. This would make sense because populations would
               remain mostly concentrated in one locale. Obviously, this isn't the
               fun way. :)

            2. The database could calculate inter-wilderness paths upon bootup.
               I've never heard of this being done before so I'll give a quick
               description. Say I have a dwarven population in the north part of
               the map, and I want to make routes to all the other populations
               they might want to later interact with. I can use variations of
               the A* pathfinding algorithm with different heuristics to generate
               different paths through the wilderness. When one of the dwarves
               enter's a room that is part of this path, they just have to pick
               up the path ID and fallow all the path pointer's along the way to
               it's destination. This creates invisible roads through which the
               dwarves will move. Ranger's can also use tracking with zero CPU
               time. The only problem with this is that the paths will break if
               one of the rooms on them is destroyed. In this case, we will have
               some method of destroying the path, or else all the dwarves will
               end up in some deadend all trying to go east. :)

            3. I use a wilderness system to connect different areas. This system
               shows a small overhead map in your room description depending on
               your current position within the wilderness. Luckily, the wilderness
               is graphed, so path finding is extremely fast when determining the
               way from one coordinate to the other coordinate. Of course, this
               doesn't account for the fact that the area's that are not part of
               the wilderness don't have coordinates. I will need to do cpu
               tests on a hybrid version of this system, using both graph path
               finding and non-graph path finding.

            4. I can use regular pathfinding, but instead of just sitting there
               and sucking up the CPU to death, I can use the idle time spent in
               select() utilizing the path finding algorithm. Dwarves don't
               need paths to suddenly appear at that very pulse because they can
               effectively wait a few minutes for an answer. This conserves CPU
               and produces very reliable results. What's the point of wasting
               CPU cycles when you can use them to make the game more alive?

            I believe that it is also possible to combine any number of these
            elements together into one system. For example, I could use graph
            pathfinding and wandering, so that a dwarf would wander around it's
            area until it stumbled into the wilderness and then have it determine
            if it wants to go back or go to another area. Another possibility is
            to use pregenerated paths with wandering, so dwarfs will wander aimlessly
            until they stumble upon a room with a path. It can then decide if it wants
            to fallow that path.

            Vladimir Prelovac wrote:
            >   Second matter is problem of handling system crashes or at least reboots.
            > You would obviously need a very safe and precise method of saving all the
            > data that have evolved (population info, every mob's current goal, etc
            > etc) and restoring them back, because you dont want your world to start
            > building itself from scratch every time you reboot.

               Luckily, because Spellbound uses C++ every object in the game inherits
              from a 'Savable' class. Because of this, Spellbound is 100% persistent.
              When the game saves to disk and loads from disk, it is in the exact same
              stage as it was when it went down or crashed. Total database saves are
              done periodically ever hour, so the worst that can happen is a time
              warp. The database is only copied if the save is successful.

            Vladimir Prelovac wrote:
            >   The whole idea is of course very interesting. But also the effort that
            > has to be put into building it is simply HUGE. Hope you will finish it
            > though.

               Me too. There never seems enough time for a good coding run. For some
              odd reason people start asking questions about where you have been and
              where all the twinkies and soda keep going. :)

            Amos Wetherbee,
            The Spellbound Project




            _______________________________________________
            MUD-Dev maillist  -  MUD-Dev@kanga.nu
            http://www.kanga.nu/lists/listinfo/mud-dev
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: "phlUID" <phluid@mindless.com>'
                  name: From
                  value: '"phlUID" <phluid@mindless.com>'
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Thu, 20 Jan 2000 23:11:51 -0500'
                  name: Date
                  value: Thu, 20 Jan 2000 23:11:51 -0500
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] Simulated Populations'
                  name: Subject
                  value: 'Re: [MUD-Dev] Simulated Populations'
                mbox_from: 
              body: |
                Vladimir Prelovac wrote:
                >   I am just having a look at this from the programming side of view. If
                > you are going to have large numbers of mobs moving from one location to
                > the other (ie. hunting, searching for food, going to war...) you will have
                > to spend a *lot* of CPU time calculating shortest paths. And I still dont
                > know an efficient way to handle this. Maybe there is a way to build this
                > database with some kind of implemented solution to this problem within it.

                Well, there are a couple of thoughts on this:

                1. We could just throw out the whole path finding thing and make mobs
                   wander aimlessly. This would make sense because populations would
                   remain mostly concentrated in one locale. Obviously, this isn't the
                   fun way. :)

                2. The database could calculate inter-wilderness paths upon bootup.
                   I've never heard of this being done before so I'll give a quick
                   description. Say I have a dwarven population in the north part of
                   the map, and I want to make routes to all the other populations
                   they might want to later interact with. I can use variations of
                   the A* pathfinding algorithm with different heuristics to generate
                   different paths through the wilderness. When one of the dwarves
                   enter's a room that is part of this path, they just have to pick
                   up the path ID and fallow all the path pointer's along the way to
                   it's destination. This creates invisible roads through which the
                   dwarves will move. Ranger's can also use tracking with zero CPU
                   time. The only problem with this is that the paths will break if
                   one of the rooms on them is destroyed. In this case, we will have
                   some method of destroying the path, or else all the dwarves will
                   end up in some deadend all trying to go east. :)

                3. I use a wilderness system to connect different areas. This system
                   shows a small overhead map in your room description depending on
                   your current position within the wilderness. Luckily, the wilderness
                   is graphed, so path finding is extremely fast when determining the
                   way from one coordinate to the other coordinate. Of course, this
                   doesn't account for the fact that the area's that are not part of
                   the wilderness don't have coordinates. I will need to do cpu
                   tests on a hybrid version of this system, using both graph path
                   finding and non-graph path finding.

                4. I can use regular pathfinding, but instead of just sitting there
                   and sucking up the CPU to death, I can use the idle time spent in
                   select() utilizing the path finding algorithm. Dwarves don't
                   need paths to suddenly appear at that very pulse because they can
                   effectively wait a few minutes for an answer. This conserves CPU
                   and produces very reliable results. What's the point of wasting
                   CPU cycles when you can use them to make the game more alive?

                I believe that it is also possible to combine any number of these
                elements together into one system. For example, I could use graph
                pathfinding and wandering, so that a dwarf would wander around it's
                area until it stumbled into the wilderness and then have it determine
                if it wants to go back or go to another area. Another possibility is
                to use pregenerated paths with wandering, so dwarfs will wander aimlessly
                until they stumble upon a room with a path. It can then decide if it wants
                to fallow that path.

                Vladimir Prelovac wrote:
                >   Second matter is problem of handling system crashes or at least reboots.
                > You would obviously need a very safe and precise method of saving all the
                > data that have evolved (population info, every mob's current goal, etc
                > etc) and restoring them back, because you dont want your world to start
                > building itself from scratch every time you reboot.

                   Luckily, because Spellbound uses C++ every object in the game inherits
                  from a 'Savable' class. Because of this, Spellbound is 100% persistent.
                  When the game saves to disk and loads from disk, it is in the exact same
                  stage as it was when it went down or crashed. Total database saves are
                  done periodically ever hour, so the worst that can happen is a time
                  warp. The database is only copied if the save is successful.

                Vladimir Prelovac wrote:
                >   The whole idea is of course very interesting. But also the effort that
                > has to be put into building it is simply HUGE. Hope you will finish it
                > though.

                   Me too. There never seems enough time for a good coding run. For some
                  odd reason people start asking questions about where you have been and
                  where all the twinkies and soda keep going. :)

                Amos Wetherbee,
                The Spellbound Project




                _______________________________________________
                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                http://www.kanga.nu/lists/listinfo/mud-dev
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] Simulated Populations'
          from: phlUID <phluid@mindless.com>
          references: []
          date: 2000-01-21 04:11:51.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: 00bj5f2O
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *218
      parent: *215
      children:
      - &222 !ruby/object:MessageContainer
        key: &219 !ruby/object:MessageId
          raw: Jzmy2x8a@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: |
              From: "Dundee" <SkeptAck@antisocial.com>
              Date: Fri, 21 Jan 2000 15:05:04 GMT
              Subject: Re: [MUD-Dev] Simulated Populations

              "phlUID" <phluid@mindless.com> wrote:

              > 1. We could just throw out the whole path finding thing and make mobs
              >    wander aimlessly.=20
              > I believe that it is also possible to combine any number of these
              > elements together into one system.

              I think I might like to look at the way ants create trails by wandering
              aimlessly, marking/refreshing their path and following other ants' paths.
              Been a while since I read anything about it, but as I recall, it wasn't
              really a very complicated system.

              Could be slow going from "completely random 'path'" to "straight trail =
              from
              point a to point b", but it seems like you could start out with npcs
              wandering randomly (rather, "scouting"), but eventually have pretty
              well-defined paths and trails, created by the npcs.  You could even make =
              the
              paths more or less visible to the players, depending on traffic, or
              block/disrupt the trails and let the npcs build new ones around whatever =
              the
              problem is.  Or maybe the players could scout a new trail for the npcs.  =
              Or
              if pcs start killing orcs in an orc path, maybe that would count as an
              obstruction and the orcs would eventually develop a new path around them
              (unless the first response to an obstruction is to send bigger troops).

              Interesting possibilities anyway, if you've really got a lot of npcs
              migrating about.

              --=20
              http://dundee.uong.com/



              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: "Dundee" <SkeptAck@antisocial.com>'
                    name: From
                    value: '"Dundee" <SkeptAck@antisocial.com>'
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Fri, 21 Jan 2000 15:05:04 GMT'
                    name: Date
                    value: Fri, 21 Jan 2000 15:05:04 GMT
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] Simulated Populations'
                    name: Subject
                    value: 'Re: [MUD-Dev] Simulated Populations'
                  mbox_from: 
                body: |
                  "phlUID" <phluid@mindless.com> wrote:

                  > 1. We could just throw out the whole path finding thing and make mobs
                  >    wander aimlessly.=20
                  > I believe that it is also possible to combine any number of these
                  > elements together into one system.

                  I think I might like to look at the way ants create trails by wandering
                  aimlessly, marking/refreshing their path and following other ants' paths.
                  Been a while since I read anything about it, but as I recall, it wasn't
                  really a very complicated system.

                  Could be slow going from "completely random 'path'" to "straight trail =
                  from
                  point a to point b", but it seems like you could start out with npcs
                  wandering randomly (rather, "scouting"), but eventually have pretty
                  well-defined paths and trails, created by the npcs.  You could even make =
                  the
                  paths more or less visible to the players, depending on traffic, or
                  block/disrupt the trails and let the npcs build new ones around whatever =
                  the
                  problem is.  Or maybe the players could scout a new trail for the npcs.  =
                  Or
                  if pcs start killing orcs in an orc path, maybe that would count as an
                  obstruction and the orcs would eventually develop a new path around them
                  (unless the first response to an obstruction is to send bigger troops).

                  Interesting possibilities anyway, if you've really got a lot of npcs
                  migrating about.

                  --=20
                  http://dundee.uong.com/



                  _______________________________________________
                  MUD-Dev maillist  -  MUD-Dev@kanga.nu
                  http://www.kanga.nu/lists/listinfo/mud-dev
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] Simulated Populations'
            from: Dundee <SkeptAck@antisocial.com>
            references: []
            date: 2000-01-21 15:05:04.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: Jzmy2x8a
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *219
        parent: *220
        children:
        - &451 !ruby/object:MessageContainer
          key: &221 !ruby/object:MessageId
            raw: Jzn75uu8@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: Wes Connell <wconnell@adhesive.com>\nDate: Fri, 21 Jan 2000
                18:14:29 -0600 (CST)\nSubject: Re: [MUD-Dev] Simulated Populations\n\nOn
                Fri, 21 Jan 2000, Dundee wrote:\n\n> \"phlUID\" <phluid@mindless.com>
                wrote:\n> \n> I think I might like to look at the way ants create
                trails by wandering\n> aimlessly, marking/refreshing their path and
                following other ants' paths.\n> Been a while since I read anything
                about it, but as I recall, it wasn't\n> really a very complicated
                system.\n\nObviously orcs starting out at their camp would not know
                the absolute shortest\npath without scouting. First have the orcs
                wander aimlessly. Whenever an orc\nencountered resistance or something
                interesting he would report back to the\ncamp. This \"report\" could
                then be saved in the orc logs or something. Now the\norcs know that
                along Path A they can find something specific. So they send\nmore
                scouts along that path. Another party of scouts return with more info\non
                Path B. Now the orcs have some \"pregenerated\" routes to places of
                interest\nwithout the routes being the absolute shortest route.\n\nJust
                like in C&C/Warcraft if you are scouting and all of a sudden the scout\nis
                slaughtered then you can bet you found the enemy base.\n\n> problem
                is.  Or maybe the players could scout a new trail for the npcs.  Or\n>
                if pcs start killing orcs in an orc path, maybe that would count as
                an\n> obstruction and the orcs would eventually develop a new path
                around them\n> (unless the first response to an obstruction is to
                send bigger troops).\n\nIf the scout from the above example never
                reports back then the orcs never \nlearn of Path A. Yet the orcs would
                know *something* was there that killed\nor captured the scout.\n\nWes
                Connell               wconnell@adhesive.com\nAdhesive Software, Inc.
                - Dynamic Web Site Management Solutions\nhttp://www.adhesive.com        512-647-1200
                \       512-647-1299 Fax\n!07/11 PDP a ni deppart m'I  !pleH\n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: Wes Connell <wconnell@adhesive.com>'
                      name: From
                      value: Wes Connell <wconnell@adhesive.com>
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Fri, 21 Jan 2000 18:14:29 -0600 (CST)'
                      name: Date
                      value: Fri, 21 Jan 2000 18:14:29 -0600 (CST)
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Simulated Populations'
                      name: Subject
                      value: 'Re: [MUD-Dev] Simulated Populations'
                    mbox_from: 
                  body: "On Fri, 21 Jan 2000, Dundee wrote:\n\n> \"phlUID\" <phluid@mindless.com>
                    wrote:\n> \n> I think I might like to look at the way ants create
                    trails by wandering\n> aimlessly, marking/refreshing their path
                    and following other ants' paths.\n> Been a while since I read
                    anything about it, but as I recall, it wasn't\n> really a very
                    complicated system.\n\nObviously orcs starting out at their camp
                    would not know the absolute shortest\npath without scouting. First
                    have the orcs wander aimlessly. Whenever an orc\nencountered resistance
                    or something interesting he would report back to the\ncamp. This
                    \"report\" could then be saved in the orc logs or something. Now
                    the\norcs know that along Path A they can find something specific.
                    So they send\nmore scouts along that path. Another party of scouts
                    return with more info\non Path B. Now the orcs have some \"pregenerated\"
                    routes to places of interest\nwithout the routes being the absolute
                    shortest route.\n\nJust like in C&C/Warcraft if you are scouting
                    and all of a sudden the scout\nis slaughtered then you can bet
                    you found the enemy base.\n\n> problem is.  Or maybe the players
                    could scout a new trail for the npcs.  Or\n> if pcs start killing
                    orcs in an orc path, maybe that would count as an\n> obstruction
                    and the orcs would eventually develop a new path around them\n>
                    (unless the first response to an obstruction is to send bigger
                    troops).\n\nIf the scout from the above example never reports
                    back then the orcs never \nlearn of Path A. Yet the orcs would
                    know *something* was there that killed\nor captured the scout.\n\nWes
                    Connell               wconnell@adhesive.com\nAdhesive Software,
                    Inc. - Dynamic Web Site Management Solutions\nhttp://www.adhesive.com
                    \       512-647-1200        512-647-1299 Fax\n!07/11 PDP a ni
                    deppart m'I  !pleH\n\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Simulated Populations'
              from: Wes Connell <wconnell@adhesive.com>
              references: []
              date: 2000-01-22 00:14:29.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: Jzn75uu8
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *221
          parent: *222
          children: []
    - &225 !ruby/object:MessageContainer
      key: &223 !ruby/object:MessageId
        raw: JzBboAmO@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: |
            From: "Nicolai Hansen" <nic@aub.dk>
            Date: Thu, 20 Jan 2000 23:48:27 +0100
            Subject: Re: [MUD-Dev] Simulated Populations

            Vladimir Prelovac wrote:

            >  I am just having a look at this from the programming side of view. If
            >you are going to have large numbers of mobs moving from one location to
            >the other (ie. hunting, searching for food, going to war...) you will have
            >to spend a *lot* of CPU time calculating shortest paths. And I still dont
            >know an efficient way to handle this. Maybe there is a way to build this
            >database with some kind of implemented solution to this problem within it.


            What he was talking about was single mobs going out on adventure. The
            solution to the large army problem would be rather easy, as a large army
            would follow the paths of its generals (that would be a kind of a huge
            group).

            I would personally consider exploring a more interesting / harder to code
            part of the simulated population. For example, the dwarves do not know
            excactly *where* the elves live, and need to explore to find the enemy
            towns.
            An approach seen in several strategy games (command & conquer style as well
            as more advanced games), but rarely with a good solution.

            And this part is *excactly* what will keep a small population alive - they
            are able to hide from the enemy.

            Without this factor, one population will take over, and conquer everything
            in sight.

            - Nic




            _______________________________________________
            MUD-Dev maillist  -  MUD-Dev@kanga.nu
            http://www.kanga.nu/lists/listinfo/mud-dev
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: "Nicolai Hansen" <nic@aub.dk>'
                  name: From
                  value: '"Nicolai Hansen" <nic@aub.dk>'
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Thu, 20 Jan 2000 23:48:27 +0100'
                  name: Date
                  value: Thu, 20 Jan 2000 23:48:27 +0100
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] Simulated Populations'
                  name: Subject
                  value: 'Re: [MUD-Dev] Simulated Populations'
                mbox_from: 
              body: |
                Vladimir Prelovac wrote:

                >  I am just having a look at this from the programming side of view. If
                >you are going to have large numbers of mobs moving from one location to
                >the other (ie. hunting, searching for food, going to war...) you will have
                >to spend a *lot* of CPU time calculating shortest paths. And I still dont
                >know an efficient way to handle this. Maybe there is a way to build this
                >database with some kind of implemented solution to this problem within it.


                What he was talking about was single mobs going out on adventure. The
                solution to the large army problem would be rather easy, as a large army
                would follow the paths of its generals (that would be a kind of a huge
                group).

                I would personally consider exploring a more interesting / harder to code
                part of the simulated population. For example, the dwarves do not know
                excactly *where* the elves live, and need to explore to find the enemy
                towns.
                An approach seen in several strategy games (command & conquer style as well
                as more advanced games), but rarely with a good solution.

                And this part is *excactly* what will keep a small population alive - they
                are able to hide from the enemy.

                Without this factor, one population will take over, and conquer everything
                in sight.

                - Nic




                _______________________________________________
                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                http://www.kanga.nu/lists/listinfo/mud-dev
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] Simulated Populations'
          from: Nicolai Hansen <nic@aub.dk>
          references: []
          date: 2000-01-20 22:48:27.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: JzBboAmO
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *223
      parent: *215
      children:
      - &254 !ruby/object:MessageContainer
        key: &224 !ruby/object:MessageId
          raw: 000DlhTs@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Tue, 25 Jan 2000 21:32:31
              -0800\nSubject: Re: [MUD-Dev] Simulated Populations\n\nOn Thu, 20 Jan
              2000 23:48:27 +0100 \nNicolai Hansen <nic@aub.dk> wrote:\n\n> I would
              personally consider exploring a more interesting / harder\n> to code
              part of the simulated population. For example, the dwarves\n> do not
              know excactly *where* the elves live, and need to explore\n> to find
              the enemy towns.  An approach seen in several strategy\n> games (command
              & conquer style as well as more advanced games),\n> but rarely with
              a good solution.\n\nInfluence mapping can help here.  There's a decent
              article on the\narea, (abstracted from a comp.ai.games thread) at:\n\n
              \ http://www.gameai.com/influ.thread.html\n\n--\nJ C Lawrence                                 Home:
              claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
              A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: J C Lawrence <claw@kanga.nu>'
                    name: From
                    value: J C Lawrence <claw@kanga.nu>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Tue, 25 Jan 2000 21:32:31 -0800'
                    name: Date
                    value: Tue, 25 Jan 2000 21:32:31 -0800
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] Simulated Populations'
                    name: Subject
                    value: 'Re: [MUD-Dev] Simulated Populations'
                  mbox_from: 
                body: "On Thu, 20 Jan 2000 23:48:27 +0100 \nNicolai Hansen <nic@aub.dk>
                  wrote:\n\n> I would personally consider exploring a more interesting
                  / harder\n> to code part of the simulated population. For example,
                  the dwarves\n> do not know excactly *where* the elves live, and
                  need to explore\n> to find the enemy towns.  An approach seen in
                  several strategy\n> games (command & conquer style as well as more
                  advanced games),\n> but rarely with a good solution.\n\nInfluence
                  mapping can help here.  There's a decent article on the\narea, (abstracted
                  from a comp.ai.games thread) at:\n\n  http://www.gameai.com/influ.thread.html\n\n--\nJ
                  C Lawrence                                 Home: claw@kanga.nu\n----------(*)
                  \                             Other: coder@kanga.nu\n--=| A man
                  is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] Simulated Populations'
            from: J C Lawrence <claw@kanga.nu>
            references: []
            date: 2000-01-26 05:32:31.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 000DlhTs
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *224
        parent: *225
        children: []
  ? &226 !ruby/object:MessageId
    raw: Jysr9Ax6@generated-message-id.chibrary.org
  : &230 !ruby/object:MessageContainer
    key: *226
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: Wes Connell <wconnell@adhesive.com>\nDate: Wed, 19 Jan 2000 13:19:07
          -0600 (CST)\nSubject: Re: [MUD-Dev] How to handle/display partial language
          skill\n\nOn Tue, 18 Jan 2000, Joe Kingry wrote:\n\n> We have a very basic
          way of handling languages on our mud. Currently each\n> language has a table
          of sylables/words and a mapping to a some assortment of\n> letters. Each
          language table of course has a mapping for individual letters.\n> When someone
          says something in a different language, those that can\n> understand the
          language see something like:\n> \t(sylvan) Mab says 'Hello world'\n> While
          those that don't see:\n> \tMab gossips 'nlaelelrr 'luurrwaelli''\n\n[table
          snipped]\n\n> But how do you handle non 100% skill in a language? I imagine
          in our case\n> with a table that maps various fragments you could do a reverse
          map of the\n> fragment only if you passed a skill check.  I've experimented
          with this with\n> varying results.  I'm just looking for other ideas at
          this time.\n> \n> Any suggestions on how to handle languages?\n\nA few things
          come to mind.\n\nFirst add an extra translation argument. \n\n{ \"the\",
          \"lrr\", \"lrs\" }\n\nIf they pass the die roll for that specific syllable
          then they pronounce the\nsyllable with \"lrr\", if they fail then use the
          \"lrs\".\n\nSecond idea is that if the player fails the die roll then change
          a (random?)\ncharacter to an 's' or something.\n\nThird option is to simply
          bypass the translation and output a message \nalong the lines of \"Bubba
          says something in elven.\" Whether or not you get\nthis message instead
          of the actual text would depend on the skill. This is\na popular method
          since it stops the reverse engineering of the languages.\nAll it takes is
          some geek with a lot of time on his hands and some good regex\nand your
          language could be decoded on the fly by tintin.\n\nSort of OT: What would
          be really cool is if you could have a list of words \nthat don't really
          match well between languages. I'm sure orcs have no \nconcept of the word
          'molecule'. So when a player that is of orcish background\nsays 'Ugh his
          brain is no bigger than a molecule!' the code would translate \nit to 'Ugh
          his brain is no bigger than a *small bit*!'. If anyone played\nStar Control
          2 there was a race in that game that did this. The universal \ntranslater
          on the ship couldn't quite match the some of the words so it made\nfor some
          pretty funny conversations.\n\nWes Connell               wconnell@adhesive.com\nAdhesive
          Software, Inc. - Dynamic Web Site Management Solutions\nhttp://www.adhesive.com
          \       512-647-1200        512-647-1299 Fax\n!07/11 PDP a ni deppart m'I
          \ !pleH\n\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Wes Connell <wconnell@adhesive.com>'
                name: From
                value: Wes Connell <wconnell@adhesive.com>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Wed, 19 Jan 2000 13:19:07 -0600 (CST)'
                name: Date
                value: Wed, 19 Jan 2000 13:19:07 -0600 (CST)
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: [MUD-Dev] How to handle/display partial language
                  skill'
                name: Subject
                value: 'Re: [MUD-Dev] How to handle/display partial language skill'
              mbox_from: 
            body: "On Tue, 18 Jan 2000, Joe Kingry wrote:\n\n> We have a very basic
              way of handling languages on our mud. Currently each\n> language has
              a table of sylables/words and a mapping to a some assortment of\n> letters.
              Each language table of course has a mapping for individual letters.\n>
              When someone says something in a different language, those that can\n>
              understand the language see something like:\n> \t(sylvan) Mab says 'Hello
              world'\n> While those that don't see:\n> \tMab gossips 'nlaelelrr 'luurrwaelli''\n\n[table
              snipped]\n\n> But how do you handle non 100% skill in a language? I
              imagine in our case\n> with a table that maps various fragments you
              could do a reverse map of the\n> fragment only if you passed a skill
              check.  I've experimented with this with\n> varying results.  I'm just
              looking for other ideas at this time.\n> \n> Any suggestions on how
              to handle languages?\n\nA few things come to mind.\n\nFirst add an extra
              translation argument. \n\n{ \"the\", \"lrr\", \"lrs\" }\n\nIf they pass
              the die roll for that specific syllable then they pronounce the\nsyllable
              with \"lrr\", if they fail then use the \"lrs\".\n\nSecond idea is that
              if the player fails the die roll then change a (random?)\ncharacter
              to an 's' or something.\n\nThird option is to simply bypass the translation
              and output a message \nalong the lines of \"Bubba says something in
              elven.\" Whether or not you get\nthis message instead of the actual
              text would depend on the skill. This is\na popular method since it stops
              the reverse engineering of the languages.\nAll it takes is some geek
              with a lot of time on his hands and some good regex\nand your language
              could be decoded on the fly by tintin.\n\nSort of OT: What would be
              really cool is if you could have a list of words \nthat don't really
              match well between languages. I'm sure orcs have no \nconcept of the
              word 'molecule'. So when a player that is of orcish background\nsays
              'Ugh his brain is no bigger than a molecule!' the code would translate
              \nit to 'Ugh his brain is no bigger than a *small bit*!'. If anyone
              played\nStar Control 2 there was a race in that game that did this.
              The universal \ntranslater on the ship couldn't quite match the some
              of the words so it made\nfor some pretty funny conversations.\n\nWes
              Connell               wconnell@adhesive.com\nAdhesive Software, Inc.
              - Dynamic Web Site Management Solutions\nhttp://www.adhesive.com        512-647-1200
              \       512-647-1299 Fax\n!07/11 PDP a ni deppart m'I  !pleH\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: [MUD-Dev] How to handle/display partial language skill'
        from: Wes Connell <wconnell@adhesive.com>
        references: []
        date: 2000-01-19 19:19:07.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jysr9Ax6
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *226
    parent: &229 !ruby/object:MessageContainer
      key: &227 !ruby/object:MessageId
        raw: Jysi40no@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: Greg Underwood <gunderwood@donet.com>\nDate: Tue, 18 Jan 2000
            23:53:57 +0000\nSubject: Re: [MUD-Dev] How to handle/display partial language
            skill\n\nAt 07:44 PM 1/18/00 -0800, \"Joe Kingry\" <jkingry@uwaterloo.ca>
            wrote:\n>We have a very basic way of handling languages on our mud. Currently
            each\n>language has a table of sylables/words and a mapping to a some
            assortment of\n>letters. \n[...]\n>But how do you handle non 100% skill
            in a language? I imagine in our case\n>with a table that maps various
            fragments you could do a reverse map of the\n>fragment only if you passed
            a skill check.  I've experimented with this with\n>varying results.  I'm
            just looking for other ideas at this time.\n>\n>Any suggestions on how
            to handle languages?\n\nmmm... how about something like this.  Your %
            skill in the langauge\ndetermines not only whether you got the translation
            at all, but what % of\nit you got.  IE: a 50% in the skill might result
            in a correct translation\nof half of the phrase, or an incorrect translation
            of the whole phrase, or\na mix.\n\nSomething like:\n\nresults = throwdice();\n\nif
            (results <= skill[target_lang])\n{\n   // give them an accurate translation,
            but not \n   // necessarily of the whole sentance\n}\nelse if ((results
            > skill[target_lang]) && \n         (results < skill[target_lang] + \n
            \           ((100-skill[target_lang])/2))  )\n{\n   // IE: skill[target_lang]
            = 50%, and they roll\n   // between 50 and 75 give them some correct,\n
            \  // and some incorrect, and some not at all.\n}\nelse if (results >
            skill[target_lang] + \n            ((100-skill[target_lang])/2) )\n{\n
            \  // give them an incorrect translation/gobbly-gook\n}\n\nJust some thoughts.\n\n-Greg\n\n\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: Greg Underwood <gunderwood@donet.com>'
                  name: From
                  value: Greg Underwood <gunderwood@donet.com>
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Tue, 18 Jan 2000 23:53:57 +0000'
                  name: Date
                  value: Tue, 18 Jan 2000 23:53:57 +0000
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] How to handle/display partial language
                    skill'
                  name: Subject
                  value: 'Re: [MUD-Dev] How to handle/display partial language skill'
                mbox_from: 
              body: "At 07:44 PM 1/18/00 -0800, \"Joe Kingry\" <jkingry@uwaterloo.ca>
                wrote:\n>We have a very basic way of handling languages on our mud.
                Currently each\n>language has a table of sylables/words and a mapping
                to a some assortment of\n>letters. \n[...]\n>But how do you handle
                non 100% skill in a language? I imagine in our case\n>with a table
                that maps various fragments you could do a reverse map of the\n>fragment
                only if you passed a skill check.  I've experimented with this with\n>varying
                results.  I'm just looking for other ideas at this time.\n>\n>Any
                suggestions on how to handle languages?\n\nmmm... how about something
                like this.  Your % skill in the langauge\ndetermines not only whether
                you got the translation at all, but what % of\nit you got.  IE: a
                50% in the skill might result in a correct translation\nof half of
                the phrase, or an incorrect translation of the whole phrase, or\na
                mix.\n\nSomething like:\n\nresults = throwdice();\n\nif (results <=
                skill[target_lang])\n{\n   // give them an accurate translation, but
                not \n   // necessarily of the whole sentance\n}\nelse if ((results
                > skill[target_lang]) && \n         (results < skill[target_lang]
                + \n            ((100-skill[target_lang])/2))  )\n{\n   // IE: skill[target_lang]
                = 50%, and they roll\n   // between 50 and 75 give them some correct,\n
                \  // and some incorrect, and some not at all.\n}\nelse if (results
                > skill[target_lang] + \n            ((100-skill[target_lang])/2)
                )\n{\n   // give them an incorrect translation/gobbly-gook\n}\n\nJust
                some thoughts.\n\n-Greg\n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] How to handle/display partial language skill'
          from: Greg Underwood <gunderwood@donet.com>
          references: []
          date: 2000-01-18 23:53:57.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: Jysi40no
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *227
      parent: &316 !ruby/object:MessageContainer
        key: &228 !ruby/object:MessageId
          raw: Jysr6yYa@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: \"Joe Kingry\" <jkingry@uwaterloo.ca>\nDate: Tue, 18 Jan 2000
              19:44:17 -0800\nSubject: [MUD-Dev] How to handle/display partial language
              skill\n\nWe have a very basic way of handling languages on our mud.
              Currently each\nlanguage has a table of sylables/words and a mapping
              to a some assortment of\nletters. Each language table of course has
              a mapping for individual letters.\nWhen someone says something in a
              different language, those that can\nunderstand the language see something
              like:\n\t(sylvan) Mab says 'Hello world'\nWhile those that don't see:\n\tMab
              gossips 'nlaelelrr 'luurrwaelli''\n\nThe table would look something
              like this:\n\n    static const struct language_type sylvan_table[] =\n
              \   {\n        { \" \",          \" \"      },\n        { \"the\",        \"lle\"
              \   },\n        { \"and\",        \"ywr\"    },\n        { \"kill\",
              \      \"tlet\"   },\n        { \"me\",         \"ae\"     },\n        {
              \"are\",        \"slf\"    },\n        { \"to\", \"yl\" }, { \"at\"
              , \"llyn\" },\n        { \"here\",               \"ptha\"          },\n
              \       { \"dude\",               \"aale\"          },\n        { \"magic\",
              \             \"ife\"         },\n        { \"horde\",     \"neebler\"
              \               },\n        { \"immortal\",            \"ddley\"               },\n
              \       { \"moon\",       \"lun\"          },\n        { \"a\", \"i\"
              }, { \"b\", \"ll\" }, { \"c\", \"y\" }, { \"d\", \"li'\" },\n        {
              \"e\", \"a\" }, { \"f\", \"s\" }, { \"g\", \"wy\" }, { \"h\", \"nl\"
              },\n        { \"i\", \"wa\" }, { \"j\", \"n\" }, { \"k\", \"q\" }, {
              \"l\", \"el\" },\n        { \"m\", \"yn\" }, { \"n\", \"el\" }, { \"o\",
              \"rr\" }, { \"p\", \"fs\" },\n        { \"q\", \"ue\" }, { \"r\", \"wa\"
              }, { \"s\", \"az\" }, { \"t\", \"l\" },\n        { \"u\", \"u\" }, {
              \"v\", \"or\" }, { \"w\", \"'luu\" }, { \"x\", \"wyn\" },\n        {
              \"y\", \"y\" }, { \"z\", \"cee\" },\n        { \"\", \"\" }\n    };\n\nBut
              how do you handle non 100% skill in a language? I imagine in our case\nwith
              a table that maps various fragments you could do a reverse map of the\nfragment
              only if you passed a skill check.  I've experimented with this with\nvarying
              results.  I'm just looking for other ideas at this time.\n\nAny suggestions
              on how to handle languages?\n\nThanks,\n\nJoe\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: "Joe Kingry" <jkingry@uwaterloo.ca>'
                    name: From
                    value: '"Joe Kingry" <jkingry@uwaterloo.ca>'
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Tue, 18 Jan 2000 19:44:17 -0800'
                    name: Date
                    value: Tue, 18 Jan 2000 19:44:17 -0800
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: [MUD-Dev] How to handle/display partial language
                      skill'
                    name: Subject
                    value: "[MUD-Dev] How to handle/display partial language skill"
                  mbox_from: 
                body: "We have a very basic way of handling languages on our mud.
                  Currently each\nlanguage has a table of sylables/words and a mapping
                  to a some assortment of\nletters. Each language table of course
                  has a mapping for individual letters.\nWhen someone says something
                  in a different language, those that can\nunderstand the language
                  see something like:\n\t(sylvan) Mab says 'Hello world'\nWhile those
                  that don't see:\n\tMab gossips 'nlaelelrr 'luurrwaelli''\n\nThe
                  table would look something like this:\n\n    static const struct
                  language_type sylvan_table[] =\n    {\n        { \" \",          \"
                  \"      },\n        { \"the\",        \"lle\"    },\n        { \"and\",
                  \       \"ywr\"    },\n        { \"kill\",       \"tlet\"   },\n
                  \       { \"me\",         \"ae\"     },\n        { \"are\",        \"slf\"
                  \   },\n        { \"to\", \"yl\" }, { \"at\" , \"llyn\" },\n        {
                  \"here\",               \"ptha\"          },\n        { \"dude\",
                  \              \"aale\"          },\n        { \"magic\",              \"ife\"
                  \        },\n        { \"horde\",     \"neebler\"                },\n
                  \       { \"immortal\",            \"ddley\"               },\n
                  \       { \"moon\",       \"lun\"          },\n        { \"a\",
                  \"i\" }, { \"b\", \"ll\" }, { \"c\", \"y\" }, { \"d\", \"li'\" },\n
                  \       { \"e\", \"a\" }, { \"f\", \"s\" }, { \"g\", \"wy\" }, {
                  \"h\", \"nl\" },\n        { \"i\", \"wa\" }, { \"j\", \"n\" }, {
                  \"k\", \"q\" }, { \"l\", \"el\" },\n        { \"m\", \"yn\" }, {
                  \"n\", \"el\" }, { \"o\", \"rr\" }, { \"p\", \"fs\" },\n        {
                  \"q\", \"ue\" }, { \"r\", \"wa\" }, { \"s\", \"az\" }, { \"t\",
                  \"l\" },\n        { \"u\", \"u\" }, { \"v\", \"or\" }, { \"w\",
                  \"'luu\" }, { \"x\", \"wyn\" },\n        { \"y\", \"y\" }, { \"z\",
                  \"cee\" },\n        { \"\", \"\" }\n    };\n\nBut how do you handle
                  non 100% skill in a language? I imagine in our case\nwith a table
                  that maps various fragments you could do a reverse map of the\nfragment
                  only if you passed a skill check.  I've experimented with this with\nvarying
                  results.  I'm just looking for other ideas at this time.\n\nAny
                  suggestions on how to handle languages?\n\nThanks,\n\nJoe\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: "[MUD-Dev] How to handle/display partial language skill"
            from: Joe Kingry <jkingry@uwaterloo.ca>
            references: []
            date: 2000-01-19 03:44:17.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: Jysr6yYa
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *228
        parent: 
        children:
        - *229
      children:
      - *230
    children:
    - &268 !ruby/object:MessageContainer
      key: &231 !ruby/object:MessageId
        raw: Jzn787H6@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: Matt Chatterley <chattemp@ee.port.ac.uk>\nDate: Wed, 19 Jan
            2000 14:54:36 +0000 (GMT)\nSubject: Re: [MUD-Dev] How to handle/display
            partial language skill\n\nOn Tue, 18 Jan 2000, Joe Kingry wrote:\n\n>
            We have a very basic way of handling languages on our mud. Currently each\n>
            language has a table of sylables/words and a mapping to a some assortment
            of\n> letters. Each language table of course has a mapping for individual
            letters.\n> When someone says something in a different language, those
            that can\n> understand the language see something like:\n\n[Snip example
            output and map]\n\nWe used an almost identical system on B5 MUSH, a long
            time ago, and I \nbelieve they still use it to this day. The only different
            was that we \ntook mostly pairs of letters which can occur together, and
            mapped these, ie:\n\nee -> a\ntt -> s\n\nand then a few single letters
            and mapped them to others, carefully \ntesting all the time, so that the
            output from common words had the \n'appearance' of being 'foreign'. How
            you interpret something appearing \nforeign or alien is upto you, of course.
            :)\n\nThe obvious point which I would raise about this system (its kinda
            \nnegative criticism, though), is that it's not really how it works, and
            it \nbreaks down when doing partial representation. Think about a foreign
            \nlanguage for a moment, and you'll find that words change their place
            in a \nsentence (German is notorious for this, among others), some words
            may \nmean three or four things in English, and so forth.\n \n> But how
            do you handle non 100% skill in a language? I imagine in our case\n> with
            a table that maps various fragments you could do a reverse map of the\n>
            fragment only if you passed a skill check.  I've experimented with this
            with\n> varying results.  I'm just looking for other ideas at this time.\n\nWe
            used to do this on B5, yeah. There was a slight problem in that you \nget
            double-errors. Ie, Person A has 50% skill, Person B has 50% skill. We
            \nnow allow A to speak with 50% accuracy (0.5 probability of getting a
            \nspecific letter/letter-pair/phrasing correct), and B to listen with
            the \nsame accuracy (0.5 probability to interpret correctly).\n\nAs a
            result, B has an 0.5 x 0.5 = 0.25 probability (25% chance) of \nhearing
            any given set of letters (one translation) correctly. Whereas in \na slightly
            more sane universe, if I were half-fluent in French, talking \nto someone
            who was also half-fluent in French (assuming no *common* \nlanguage),
            we could both 'dumb down' our speech, point at objects, \ngesture, and
            so forth until we made ourselves understood.\n\nThis leaves a potentially
            very tricky puzzle, but, if you ask yourself \none question first, it
            becomes easier:\n\nWhat am I using languages for?\n\nIn the context of
            my most recent MUD project (An LP called Caffeine, \nwhich is currently
            stagnating very nicely due to my utter lack of online \ntime beyond the
            odd email-check), we contemplated some form of language \nsystem, and
            then decided that all it would do was hinder people in \ncommunicating,
            in a game where we want to encourage communication and \nin-character
            (re)action.\n\nOn B5, the game context was full-Roleplay with very few
            (next to no) \nautomated systems, and the addition of languages (given
            that everyone \nshares a common tongue, almost without exception), allowed
            racial groups \nto converse in their 'natural' language, both allowing
            'concealed' IC \ncommunication (unless a 'spy' who could understand was
            present), and \nquite simply created some interesting roleplay situations.\n\nHowever,
            I would argue that in the latter example, good roleplayers could \ndo
            the same without any language code (mind you, that assumes that you \nare
            dealing with good roleplayers who need fewer, *or* more sophisticated
            \ntools, not poor roleplayers who rely on relatively basic, but functional
            \ntools to support them).\n\nAnyway, I feel that I'm digressing.\n\nThe
            best approach (I have not tested this, personally) might be for now \nto
            take a full on 'syllable translation' approach in this ilk, taking \neach
            unique syllable pair (within reason) and changing it, using a \nsimilar
            algorithm. Perhaps add more complex routines to \nchange/move/remove ifs,
            thes, Is, and so forth, just to jumble it up a \nlittle - but remember
            you are essentially encrypting the text. If you \ncan't decrypt it at
            the end, its useless. :)\n\n-- Matt Chatterley\n\".. You live for the
            fight, when its all that you've got ..\"\n\t\tJon Bon Jovi; Livin' on
            a Prayer, as always.\n\n\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: Matt Chatterley <chattemp@ee.port.ac.uk>'
                  name: From
                  value: Matt Chatterley <chattemp@ee.port.ac.uk>
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Wed, 19 Jan 2000 14:54:36 +0000 (GMT)'
                  name: Date
                  value: Wed, 19 Jan 2000 14:54:36 +0000 (GMT)
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] How to handle/display partial language
                    skill'
                  name: Subject
                  value: 'Re: [MUD-Dev] How to handle/display partial language skill'
                mbox_from: 
              body: "On Tue, 18 Jan 2000, Joe Kingry wrote:\n\n> We have a very basic
                way of handling languages on our mud. Currently each\n> language has
                a table of sylables/words and a mapping to a some assortment of\n>
                letters. Each language table of course has a mapping for individual
                letters.\n> When someone says something in a different language, those
                that can\n> understand the language see something like:\n\n[Snip example
                output and map]\n\nWe used an almost identical system on B5 MUSH,
                a long time ago, and I \nbelieve they still use it to this day. The
                only different was that we \ntook mostly pairs of letters which can
                occur together, and mapped these, ie:\n\nee -> a\ntt -> s\n\nand then
                a few single letters and mapped them to others, carefully \ntesting
                all the time, so that the output from common words had the \n'appearance'
                of being 'foreign'. How you interpret something appearing \nforeign
                or alien is upto you, of course. :)\n\nThe obvious point which I would
                raise about this system (its kinda \nnegative criticism, though),
                is that it's not really how it works, and it \nbreaks down when doing
                partial representation. Think about a foreign \nlanguage for a moment,
                and you'll find that words change their place in a \nsentence (German
                is notorious for this, among others), some words may \nmean three
                or four things in English, and so forth.\n \n> But how do you handle
                non 100% skill in a language? I imagine in our case\n> with a table
                that maps various fragments you could do a reverse map of the\n> fragment
                only if you passed a skill check.  I've experimented with this with\n>
                varying results.  I'm just looking for other ideas at this time.\n\nWe
                used to do this on B5, yeah. There was a slight problem in that you
                \nget double-errors. Ie, Person A has 50% skill, Person B has 50%
                skill. We \nnow allow A to speak with 50% accuracy (0.5 probability
                of getting a \nspecific letter/letter-pair/phrasing correct), and
                B to listen with the \nsame accuracy (0.5 probability to interpret
                correctly).\n\nAs a result, B has an 0.5 x 0.5 = 0.25 probability
                (25% chance) of \nhearing any given set of letters (one translation)
                correctly. Whereas in \na slightly more sane universe, if I were half-fluent
                in French, talking \nto someone who was also half-fluent in French
                (assuming no *common* \nlanguage), we could both 'dumb down' our speech,
                point at objects, \ngesture, and so forth until we made ourselves
                understood.\n\nThis leaves a potentially very tricky puzzle, but,
                if you ask yourself \none question first, it becomes easier:\n\nWhat
                am I using languages for?\n\nIn the context of my most recent MUD
                project (An LP called Caffeine, \nwhich is currently stagnating very
                nicely due to my utter lack of online \ntime beyond the odd email-check),
                we contemplated some form of language \nsystem, and then decided that
                all it would do was hinder people in \ncommunicating, in a game where
                we want to encourage communication and \nin-character (re)action.\n\nOn
                B5, the game context was full-Roleplay with very few (next to no)
                \nautomated systems, and the addition of languages (given that everyone
                \nshares a common tongue, almost without exception), allowed racial
                groups \nto converse in their 'natural' language, both allowing 'concealed'
                IC \ncommunication (unless a 'spy' who could understand was present),
                and \nquite simply created some interesting roleplay situations.\n\nHowever,
                I would argue that in the latter example, good roleplayers could \ndo
                the same without any language code (mind you, that assumes that you
                \nare dealing with good roleplayers who need fewer, *or* more sophisticated
                \ntools, not poor roleplayers who rely on relatively basic, but functional
                \ntools to support them).\n\nAnyway, I feel that I'm digressing.\n\nThe
                best approach (I have not tested this, personally) might be for now
                \nto take a full on 'syllable translation' approach in this ilk, taking
                \neach unique syllable pair (within reason) and changing it, using
                a \nsimilar algorithm. Perhaps add more complex routines to \nchange/move/remove
                ifs, thes, Is, and so forth, just to jumble it up a \nlittle - but
                remember you are essentially encrypting the text. If you \ncan't decrypt
                it at the end, its useless. :)\n\n-- Matt Chatterley\n\".. You live
                for the fight, when its all that you've got ..\"\n\t\tJon Bon Jovi;
                Livin' on a Prayer, as always.\n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] How to handle/display partial language skill'
          from: Matt Chatterley <chattemp@ee.port.ac.uk>
          references: []
          date: 2000-01-19 14:54:36.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: Jzn787H6
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *231
      parent: *230
      children: []
  ? &232 !ruby/object:MessageId
    raw: Jysr6zce@generated-message-id.chibrary.org
  : &234 !ruby/object:MessageContainer
    key: *232
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: Phillip Lenhardt <philen@funky.monkey.org>\nDate: Sat, 1 Jan 2000
          17:49:22 -0500\nSubject: [MUD-Dev] OS Inspiration\n\nI myself don't have
          the ability to apply this code and its ideas to MUD\ndesign, but I feel
          EROS (http://www.eros-os.org/) has a lot \nto offer the MUD developer, including:\n\n\nPure
          Capability Architecture\n\n    EROS is a pure capability system. Authority
          in the system is conveyed\n    exclusivly by secure capabilities, down to
          the granularity of\n    individual pages.\n                  \nOrthogonal
          Global Persistence\n\n    All user state, including both data and running
          programs, are\n    transparently saved on a periodic basis. In the event
          of system\n    failure processes are resumed as of the last checkpoint.
          No special\n    action or programming on the part of the application is
          required.\n                  \nKernel Threads\n\n    The EROS kernel itself
          is implemented using multiple kernel-mode\n    threads. This improves the
          performance of EROS drivers, makes them\n    simpler to code, and greatly
          simplifies the design of the kernel. In\n    addition, it enables selected
          kernel functionality to be preempted by\n    higher priority user activities.\n\nSecurity\n
          \                                          \n    Because EROS processes
          are persistent, processes can hold authorities\n    in their own right rather
          than inheriting them from the user. This\n    enables a rich variety of
          options for security and access control that\n    are impossible in systems
          lacking persistent processes.\n\n\"Stateless\" Supervisor\n\n    While the
          EROS kernel caches user state in a variety of ways for the\n    sake of
          performance, essentially all of the state maintained by the\n    kernel
          is derived from user-provided information. Only two pieces of\n    kernel
          state are saved in a persistent snapshot: the list of running\n    threads
          and the directory of objects in the checkpoint log.\n\nDeadlock-Free Supervisor\n\nMinimal
          Kernel\n            \n    The EROS kernel contains relatively little code.
          The current\n    (incomplete) system is 24.3k of binary code. The final,\n
          \   non-distributed kernel is expected to weigh in at 50k to 60k on\n    completion.
          The latter number includes critical drivers and the\n    persistence manager.
          No size tuning has been done.\n\nDistribution\n\n    EROS provides all of
          these facilities, including orthogonal\n    persistence, across a cluster
          of machines.\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Phillip Lenhardt <philen@funky.monkey.org>'
                name: From
                value: Phillip Lenhardt <philen@funky.monkey.org>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Sat, 1 Jan 2000 17:49:22 -0500'
                name: Date
                value: Sat, 1 Jan 2000 17:49:22 -0500
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] OS Inspiration'
                name: Subject
                value: "[MUD-Dev] OS Inspiration"
              mbox_from: 
            body: "I myself don't have the ability to apply this code and its ideas
              to MUD\ndesign, but I feel EROS (http://www.eros-os.org/) has a lot
              \nto offer the MUD developer, including:\n\n\nPure Capability Architecture\n\n
              \   EROS is a pure capability system. Authority in the system is conveyed\n
              \   exclusivly by secure capabilities, down to the granularity of\n
              \   individual pages.\n                  \nOrthogonal Global Persistence\n\n
              \   All user state, including both data and running programs, are\n
              \   transparently saved on a periodic basis. In the event of system\n
              \   failure processes are resumed as of the last checkpoint. No special\n
              \   action or programming on the part of the application is required.\n
              \                 \nKernel Threads\n\n    The EROS kernel itself is
              implemented using multiple kernel-mode\n    threads. This improves the
              performance of EROS drivers, makes them\n    simpler to code, and greatly
              simplifies the design of the kernel. In\n    addition, it enables selected
              kernel functionality to be preempted by\n    higher priority user activities.\n\nSecurity\n
              \                                          \n    Because EROS processes
              are persistent, processes can hold authorities\n    in their own right
              rather than inheriting them from the user. This\n    enables a rich
              variety of options for security and access control that\n    are impossible
              in systems lacking persistent processes.\n\n\"Stateless\" Supervisor\n\n
              \   While the EROS kernel caches user state in a variety of ways for
              the\n    sake of performance, essentially all of the state maintained
              by the\n    kernel is derived from user-provided information. Only two
              pieces of\n    kernel state are saved in a persistent snapshot: the
              list of running\n    threads and the directory of objects in the checkpoint
              log.\n\nDeadlock-Free Supervisor\n\nMinimal Kernel\n            \n    The
              EROS kernel contains relatively little code. The current\n    (incomplete)
              system is 24.3k of binary code. The final,\n    non-distributed kernel
              is expected to weigh in at 50k to 60k on\n    completion. The latter
              number includes critical drivers and the\n    persistence manager. No
              size tuning has been done.\n\nDistribution\n\n    EROS provides all
              of these facilities, including orthogonal\n    persistence, across a
              cluster of machines.\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] OS Inspiration"
        from: Phillip Lenhardt <philen@funky.monkey.org>
        references: []
        date: 2000-01-01 22:49:22.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jysr6zce
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *232
    parent: 
    children:
    - &253 !ruby/object:MessageContainer
      key: &233 !ruby/object:MessageId
        raw: 000DnsnY@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: Greg Miller <gmiller@classic-games.com>\nDate: Sun, 02 Jan 2000
            04:10:57 -0600\nSubject: Re: [MUD-Dev] OS Inspiration\n\nPhillip Lenhardt
            wrote:\n> \n> I myself don't have the ability to apply this code and its
            ideas to MUD\n> design, but I feel EROS (http://www.eros-os.org/) has
            a lot\n> to offer the MUD developer, including:\n\nActually, I mentioned
            this one once before in a security discussion\nhere.\n\n> Pure Capability
            Architecture\n\nMUDs frequently do this in a primitive way by querying
            an object for\napproval. For example, LP servers call a user-supplied
            \"master\" object\nto check some permissions. Unfortunately, this is often
            not extended to\nservices provided by the mudlib. Lately, I've been considering
            providing\na built-in system for passing around capability tokens. It'll
            likely get\nimplemented Some Day.\n\n> Orthogonal Global Persistence\n\nThis
            one's already caught on around here. It makes us happy :)\n\n> Kernel
            Threads\n\nThreading is fairly popular on the list, but we don't have
            a terribly\nlarge amount of agreement on how to go about it.\n--\nhttp://www.classic-games.com/\nConspiracy
            theorists mistakenly assume others think before acting.\n*** Please limit
            .sigs to four lines and avoid HTML mail or posts. ***\n\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: Greg Miller <gmiller@classic-games.com>'
                  name: From
                  value: Greg Miller <gmiller@classic-games.com>
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Sun, 02 Jan 2000 04:10:57 -0600'
                  name: Date
                  value: Sun, 02 Jan 2000 04:10:57 -0600
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] OS Inspiration'
                  name: Subject
                  value: 'Re: [MUD-Dev] OS Inspiration'
                mbox_from: 
              body: "Phillip Lenhardt wrote:\n> \n> I myself don't have the ability
                to apply this code and its ideas to MUD\n> design, but I feel EROS
                (http://www.eros-os.org/) has a lot\n> to offer the MUD developer,
                including:\n\nActually, I mentioned this one once before in a security
                discussion\nhere.\n\n> Pure Capability Architecture\n\nMUDs frequently
                do this in a primitive way by querying an object for\napproval. For
                example, LP servers call a user-supplied \"master\" object\nto check
                some permissions. Unfortunately, this is often not extended to\nservices
                provided by the mudlib. Lately, I've been considering providing\na
                built-in system for passing around capability tokens. It'll likely
                get\nimplemented Some Day.\n\n> Orthogonal Global Persistence\n\nThis
                one's already caught on around here. It makes us happy :)\n\n> Kernel
                Threads\n\nThreading is fairly popular on the list, but we don't have
                a terribly\nlarge amount of agreement on how to go about it.\n--\nhttp://www.classic-games.com/\nConspiracy
                theorists mistakenly assume others think before acting.\n*** Please
                limit .sigs to four lines and avoid HTML mail or posts. ***\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] OS Inspiration'
          from: Greg Miller <gmiller@classic-games.com>
          references: []
          date: 2000-01-02 10:10:57.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: 000DnsnY
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *233
      parent: *234
      children: []
  ? &235 !ruby/object:MessageId
    raw: Jysr6yZ6@generated-message-id.chibrary.org
  : &237 !ruby/object:MessageContainer
    key: *235
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: Chris Turner <christ@rd.bbc.co.uk>\nDate: Sat, 22 Jan 2000 14:34:52
          +0000 (GMT)\nSubject: Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)\n\nOn Mon,
          10 Jan 2000, Dundee wrote:\n\n> > Eli Stevens wrote:\n> > >    To the northeast:\n>
          > >       Two ugly thugs.\n> \n> Douglas Couch wrote:\n> > How does this
          affect the thugs?  Presumably, if you can see the thugs, then\n> > they
          should be able to see you also.  Does this mean that auto-attacking\n> >
          mobs will move and attack to adjacent rooms too?  \n> \n> And if so, how
          is the end result any different than just not being able to\n> see into
          adjacent rooms in the first place?  You step into a room, you get\n> attacked
          by two ugly thugs that you couldn't see from where you were before.\n\nThe
          difference is that the thugs first have to react to your arrival\nnearby,
          move to the room and _THEN_ hit you.  By which time you would have\nspotted
          them and run away.\n\nIdeally you should be able to see as far as possible
          - and hear things you\ncan't see.\n\nChris\n--\nchrist@rd.bbc.co.uk   #include
          <stddisclaimer.h>   http://www.fysh.org/~maddy\n\n   \"So this is really
          me? A no-style gimbo with teeth druids could use as a\n       place of worship\"
          - Duaine Dibley (Red Dwarf - \"Back to Reality\")\n\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Chris Turner <christ@rd.bbc.co.uk>'
                name: From
                value: Chris Turner <christ@rd.bbc.co.uk>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Sat, 22 Jan 2000 14:34:52 +0000 (GMT)'
                name: Date
                value: Sat, 22 Jan 2000 14:34:52 +0000 (GMT)
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)'
                name: Subject
                value: 'Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)'
              mbox_from: 
            body: "On Mon, 10 Jan 2000, Dundee wrote:\n\n> > Eli Stevens wrote:\n>
              > >    To the northeast:\n> > >       Two ugly thugs.\n> \n> Douglas
              Couch wrote:\n> > How does this affect the thugs?  Presumably, if you
              can see the thugs, then\n> > they should be able to see you also.  Does
              this mean that auto-attacking\n> > mobs will move and attack to adjacent
              rooms too?  \n> \n> And if so, how is the end result any different than
              just not being able to\n> see into adjacent rooms in the first place?
              \ You step into a room, you get\n> attacked by two ugly thugs that you
              couldn't see from where you were before.\n\nThe difference is that the
              thugs first have to react to your arrival\nnearby, move to the room
              and _THEN_ hit you.  By which time you would have\nspotted them and
              run away.\n\nIdeally you should be able to see as far as possible -
              and hear things you\ncan't see.\n\nChris\n--\nchrist@rd.bbc.co.uk   #include
              <stddisclaimer.h>   http://www.fysh.org/~maddy\n\n   \"So this is really
              me? A no-style gimbo with teeth druids could use as a\n       place
              of worship\" - Duaine Dibley (Red Dwarf - \"Back to Reality\")\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)'
        from: Chris Turner <christ@rd.bbc.co.uk>
        references: []
        date: 2000-01-22 14:34:52.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jysr6yZ6
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *235
    parent: 
    children:
    - &239 !ruby/object:MessageContainer
      key: &236 !ruby/object:MessageId
        raw: 00bj5f28@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: |
            From: "Eli Stevens {Grey}" <ens017@mizzou.edu>
            Date: Mon, 10 Jan 2000 11:45:53 -0600
            Subject: Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)

            ----- Original Message -----
            From: Marian Griffith <gryphon@iaehv.nl>
            To: Mud Dev Mailing list <mud-dev@kanga.nu>
            Sent: Thursday, December 23, 1999 4:24 AM
            Subject: Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)


            > I think 'scan' is a crude way to work around the -real- problem that
            > most muds do not have any from of  'line of sight'  You can not look
            > into the next room,  even if it is supposed to be the same street or
            > market square. The implementations I have seen allow players to look
            > around corners, which is equally silly as the absence of scan.

            I had been considering having the occupants of adjacent rooms visible to
            everyone as part of the standard 'look' command.

                >look
                A narrow alley [NE,S]
                This alley fits all of the typical
                   fantasy alley stereotypes.  It
                   happens to be quite cluttered.
                Here:
                   A sleeping beggar.
                   A large rat.
                To the northeast:
                   Two ugly thugs.

            One thing I like about it is that it gets rid of the silly "is here" tagged
            onto the end of everyone's short desc.  Crowded areas could become a
            problem, but I think that by only allowing a player to notice a subset of
            the present/nearby people, the spam should not be too bad (if you are in a
            crowded hallway, you just _cannot_ see everyone).  This would be in
            conjunction with the features of the attention thread mentioned a while
            back, rooted at (or near):

            http://www.kanga.nu/archives/MUD-Dev-L/1999Q2/msg00250.html
            http://www.kanga.nu/archives/MUD-Dev-L/1999Q2/msg00326.html

            Of course builders will be able to turn the ability to see adjacent rooms
            off, to acount for doors, curtains, twisty little passages, etc.

            Of course, all this may fail horribly in alpha testing.  :)

            Silence is golden
            Eli - mailto:ens017@mizzou.edu





            _______________________________________________
            MUD-Dev maillist  -  MUD-Dev@kanga.nu
            http://www.kanga.nu/lists/listinfo/mud-dev
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: "Eli Stevens {Grey}" <ens017@mizzou.edu>'
                  name: From
                  value: '"Eli Stevens {Grey}" <ens017@mizzou.edu>'
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Mon, 10 Jan 2000 11:45:53 -0600'
                  name: Date
                  value: Mon, 10 Jan 2000 11:45:53 -0600
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)'
                  name: Subject
                  value: 'Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)'
                mbox_from: 
              body: |
                ----- Original Message -----
                From: Marian Griffith <gryphon@iaehv.nl>
                To: Mud Dev Mailing list <mud-dev@kanga.nu>
                Sent: Thursday, December 23, 1999 4:24 AM
                Subject: Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)


                > I think 'scan' is a crude way to work around the -real- problem that
                > most muds do not have any from of  'line of sight'  You can not look
                > into the next room,  even if it is supposed to be the same street or
                > market square. The implementations I have seen allow players to look
                > around corners, which is equally silly as the absence of scan.

                I had been considering having the occupants of adjacent rooms visible to
                everyone as part of the standard 'look' command.

                    >look
                    A narrow alley [NE,S]
                    This alley fits all of the typical
                       fantasy alley stereotypes.  It
                       happens to be quite cluttered.
                    Here:
                       A sleeping beggar.
                       A large rat.
                    To the northeast:
                       Two ugly thugs.

                One thing I like about it is that it gets rid of the silly "is here" tagged
                onto the end of everyone's short desc.  Crowded areas could become a
                problem, but I think that by only allowing a player to notice a subset of
                the present/nearby people, the spam should not be too bad (if you are in a
                crowded hallway, you just _cannot_ see everyone).  This would be in
                conjunction with the features of the attention thread mentioned a while
                back, rooted at (or near):

                http://www.kanga.nu/archives/MUD-Dev-L/1999Q2/msg00250.html
                http://www.kanga.nu/archives/MUD-Dev-L/1999Q2/msg00326.html

                Of course builders will be able to turn the ability to see adjacent rooms
                off, to acount for doors, curtains, twisty little passages, etc.

                Of course, all this may fail horribly in alpha testing.  :)

                Silence is golden
                Eli - mailto:ens017@mizzou.edu





                _______________________________________________
                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                http://www.kanga.nu/lists/listinfo/mud-dev
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)'
          from: Eli Stevens {Grey} <ens017@mizzou.edu>
          references: []
          date: 2000-01-10 17:45:53.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: 00bj5f28
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *236
      parent: *237
      children:
      - &241 !ruby/object:MessageContainer
        key: &238 !ruby/object:MessageId
          raw: Jysr9C0O@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: |
              From: Douglas Couch <dscouch@purdue.edu>
              Date: Mon, 10 Jan 2000 13:33:46 -0500
              Subject: Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)

              Eli Stevens wrote:
              >I had been considering having the occupants of adjacent rooms visible to
              >everyone as part of the standard 'look' command.
              >
              >    >look
              >    A narrow alley [NE,S]
              >    This alley fits all of the typical
              >       fantasy alley stereotypes.  It
              >       happens to be quite cluttered.
              >    Here:
              >       A sleeping beggar.
              >       A large rat.
              >    To the northeast:
              >       Two ugly thugs.

              How does this affect the thugs?  Presumably, if you can see the thugs, then
              they should be able to see you also.  Does this mean that auto-attacking
              mobs will move and attack to adjacent rooms too?  What about sound too?
              Should this include giving the thugs the ability to taunt or throw insults
              to people within adjacent rooms?  I like some of these concepts, but for
              myself, I think the complexity gets pretty heavy.  I'll be interested to
              hear more about how it works as you move into alpha testing.

              Doug Couch



              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: Douglas Couch <dscouch@purdue.edu>'
                    name: From
                    value: Douglas Couch <dscouch@purdue.edu>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Mon, 10 Jan 2000 13:33:46 -0500'
                    name: Date
                    value: Mon, 10 Jan 2000 13:33:46 -0500
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)'
                    name: Subject
                    value: 'Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)'
                  mbox_from: 
                body: |
                  Eli Stevens wrote:
                  >I had been considering having the occupants of adjacent rooms visible to
                  >everyone as part of the standard 'look' command.
                  >
                  >    >look
                  >    A narrow alley [NE,S]
                  >    This alley fits all of the typical
                  >       fantasy alley stereotypes.  It
                  >       happens to be quite cluttered.
                  >    Here:
                  >       A sleeping beggar.
                  >       A large rat.
                  >    To the northeast:
                  >       Two ugly thugs.

                  How does this affect the thugs?  Presumably, if you can see the thugs, then
                  they should be able to see you also.  Does this mean that auto-attacking
                  mobs will move and attack to adjacent rooms too?  What about sound too?
                  Should this include giving the thugs the ability to taunt or throw insults
                  to people within adjacent rooms?  I like some of these concepts, but for
                  myself, I think the complexity gets pretty heavy.  I'll be interested to
                  hear more about how it works as you move into alpha testing.

                  Doug Couch



                  _______________________________________________
                  MUD-Dev maillist  -  MUD-Dev@kanga.nu
                  http://www.kanga.nu/lists/listinfo/mud-dev
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)'
            from: Douglas Couch <dscouch@purdue.edu>
            references: []
            date: 2000-01-10 18:33:46.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: Jysr9C0O
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *238
        parent: *239
        children:
        - &463 !ruby/object:MessageContainer
          key: &240 !ruby/object:MessageId
            raw: 000Dntrs@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: |
                From: "Dundee" <SkeptAck@antisocial.com>
                Date: Mon, 10 Jan 2000 20:26:57 GMT
                Subject: Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)

                > Eli Stevens wrote:
                > >    To the northeast:
                > >       Two ugly thugs.

                Douglas Couch wrote:
                > How does this affect the thugs?  Presumably, if you can see the thugs, =
                then
                > they should be able to see you also.  Does this mean that =
                auto-attacking
                > mobs will move and attack to adjacent rooms too? =20

                And if so, how is the end result any different than just not being able =
                to
                see into adjacent rooms in the first place?  You step into a room, you =
                get
                attacked by two ugly thugs that you couldn't see from where you were =
                before.

                --=20
                http://dundee.uong.com/



                _______________________________________________
                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                http://www.kanga.nu/lists/listinfo/mud-dev
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: "Dundee" <SkeptAck@antisocial.com>'
                      name: From
                      value: '"Dundee" <SkeptAck@antisocial.com>'
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Mon, 10 Jan 2000 20:26:57 GMT'
                      name: Date
                      value: Mon, 10 Jan 2000 20:26:57 GMT
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)'
                      name: Subject
                      value: 'Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)'
                    mbox_from: 
                  body: |
                    > Eli Stevens wrote:
                    > >    To the northeast:
                    > >       Two ugly thugs.

                    Douglas Couch wrote:
                    > How does this affect the thugs?  Presumably, if you can see the thugs, =
                    then
                    > they should be able to see you also.  Does this mean that =
                    auto-attacking
                    > mobs will move and attack to adjacent rooms too? =20

                    And if so, how is the end result any different than just not being able =
                    to
                    see into adjacent rooms in the first place?  You step into a room, you =
                    get
                    attacked by two ugly thugs that you couldn't see from where you were =
                    before.

                    --=20
                    http://dundee.uong.com/



                    _______________________________________________
                    MUD-Dev maillist  -  MUD-Dev@kanga.nu
                    http://www.kanga.nu/lists/listinfo/mud-dev
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)'
              from: Dundee <SkeptAck@antisocial.com>
              references: []
              date: 2000-01-10 20:26:57.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: 000Dntrs
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *240
          parent: *241
          children: []
      - &411 !ruby/object:MessageContainer
        key: &242 !ruby/object:MessageId
          raw: 000Dntse@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: \"David Bennett\" <ddt@discworld.imaginary.com>\nDate: Mon,
              10 Jan 2000 13:44:19 -0800\nSubject: Re: [MUD-Dev] Fair/Unfair? Scenarios
              (fwd)\n\nOn 1/10/00, at 11:45 AM, Eli Stevens (Grey) wrote: \n\n>I had
              been considering having the occupants of adjacent rooms visible to\n>everyone
              as part of the standard 'look' command.\n\nWe did this for large open
              spaces on Discworld.  It works quite well...\nYou also get messages
              like:\nThe happy wizard moves southeast in Sator Square.\nThe happy
              wizard leaves Sator Square to the northwest.\n\netc...  Makes the squares
              really feel like a busy part of the city.\n\n>One thing I like about
              it is that it gets rid of the silly \"is here\"\ntagged\n>onto the end
              of everyone's short desc.  Crowded areas could become a\n>problem, but
              I think that by only allowing a player to notice a subset of\n>the present/nearby
              people, the spam should not be too bad (if you are in a\n>crowded hallway,
              you just _cannot_ see everyone).  This would be in\n>conjunction with
              the features of the attention thread mentioned a while\n>back, rooted
              at (or near):\n\nWe didn't get rid of the 'is here' though.  The description
              lines end up\nlooking like:\n\nThe happy beggar is meditating to the
              northeast,  the spotted dog and the\nbeggar are standing to the west
              and a red badger is here.\n\nGood luck!\nDavid.\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: "David Bennett" <ddt@discworld.imaginary.com>'
                    name: From
                    value: '"David Bennett" <ddt@discworld.imaginary.com>'
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Mon, 10 Jan 2000 13:44:19 -0800'
                    name: Date
                    value: Mon, 10 Jan 2000 13:44:19 -0800
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)'
                    name: Subject
                    value: 'Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)'
                  mbox_from: 
                body: "On 1/10/00, at 11:45 AM, Eli Stevens (Grey) wrote: \n\n>I had
                  been considering having the occupants of adjacent rooms visible
                  to\n>everyone as part of the standard 'look' command.\n\nWe did
                  this for large open spaces on Discworld.  It works quite well...\nYou
                  also get messages like:\nThe happy wizard moves southeast in Sator
                  Square.\nThe happy wizard leaves Sator Square to the northwest.\n\netc...
                  \ Makes the squares really feel like a busy part of the city.\n\n>One
                  thing I like about it is that it gets rid of the silly \"is here\"\ntagged\n>onto
                  the end of everyone's short desc.  Crowded areas could become a\n>problem,
                  but I think that by only allowing a player to notice a subset of\n>the
                  present/nearby people, the spam should not be too bad (if you are
                  in a\n>crowded hallway, you just _cannot_ see everyone).  This would
                  be in\n>conjunction with the features of the attention thread mentioned
                  a while\n>back, rooted at (or near):\n\nWe didn't get rid of the
                  'is here' though.  The description lines end up\nlooking like:\n\nThe
                  happy beggar is meditating to the northeast,  the spotted dog and
                  the\nbeggar are standing to the west and a red badger is here.\n\nGood
                  luck!\nDavid.\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] Fair/Unfair? Scenarios (fwd)'
            from: David Bennett <ddt@discworld.imaginary.com>
            references: []
            date: 2000-01-10 21:44:19.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 000Dntse
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *242
        parent: *239
        children: []
  *15: *243
  *191: *194
  *175: *178
  *6: *9
  *195: *244
  ? &245 !ruby/object:MessageId
    raw: 00IyQfCq@generated-message-id.chibrary.org
  : &251 !ruby/object:MessageContainer
    key: *245
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: \"Koster, Raph\" <rkoster@origin.ea.com>\nDate: Thu, 6 Jan 2000
          18:06:11 -0600\nSubject: RE: [MUD-Dev] Hello!\n\n> -----Original Message-----\n>
          From: F. Randall Farmer [mailto:randy@communities.com]\n> Sent: Thursday,
          January 06, 2000 2:01 PM\n> To: mud-dev@kanga.nu\n> Subject: [MUD-Dev] Hello!\n\n>
          \n> I draw some rather scathing\n> lessons from some of the failures of
          products created by, and still run\nby,\n> people on this very list.\n\nSkewer
          away! :) I have noticed that sometimes in the rush to be polite and\nprofessional
          about other people's work, we don't critique enough.\n\n-Raph\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: "Koster, Raph" <rkoster@origin.ea.com>'
                name: From
                value: '"Koster, Raph" <rkoster@origin.ea.com>'
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Thu, 6 Jan 2000 18:06:11 -0600'
                name: Date
                value: Thu, 6 Jan 2000 18:06:11 -0600
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: RE: [MUD-Dev] Hello!'
                name: Subject
                value: 'RE: [MUD-Dev] Hello!'
              mbox_from: 
            body: "> -----Original Message-----\n> From: F. Randall Farmer [mailto:randy@communities.com]\n>
              Sent: Thursday, January 06, 2000 2:01 PM\n> To: mud-dev@kanga.nu\n>
              Subject: [MUD-Dev] Hello!\n\n> \n> I draw some rather scathing\n> lessons
              from some of the failures of products created by, and still run\nby,\n>
              people on this very list.\n\nSkewer away! :) I have noticed that sometimes
              in the rush to be polite and\nprofessional about other people's work,
              we don't critique enough.\n\n-Raph\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'RE: [MUD-Dev] Hello!'
        from: Koster, Raph <rkoster@origin.ea.com>
        references: []
        date: 2000-01-07 00:06:11.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00IyQfCq
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *245
    parent: &250 !ruby/object:MessageContainer
      key: &246 !ruby/object:MessageId
        raw: 000DlhSq@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: \"Sellers, Michael\" <MSellers@maxis.com>\nDate: Fri, 7 Jan
            2000 07:57:24 -0800\nSubject: RE: [MUD-Dev] Hello!\n\nRaph wrote:\n> Randy
            wrote:\n> > I draw some rather scathing\n> > lessons from some of the
            failures of products created by, and still run\nby,\n> > people on this
            very list.\n> \n> Skewer away! :) I have noticed that sometimes in the
            rush to be polite and\n> professional about other people's work, we don't
            critique enough.\n\nHmmm, is that the sound of knives sharpening I hear...?
            :-)\n\nWelcome to the list Randy, great to see you here.  Can you tell
            us what's\ngoing on with you and massively-shared worlds (aka MUDs/MMPOGs)
            these days?\n\n\nMike Sellers\n(I'm at EA/Maxis, working on SimCity Online)\n\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: "Sellers, Michael" <MSellers@maxis.com>'
                  name: From
                  value: '"Sellers, Michael" <MSellers@maxis.com>'
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Fri, 7 Jan 2000 07:57:24 -0800'
                  name: Date
                  value: Fri, 7 Jan 2000 07:57:24 -0800
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: RE: [MUD-Dev] Hello!'
                  name: Subject
                  value: 'RE: [MUD-Dev] Hello!'
                mbox_from: 
              body: "Raph wrote:\n> Randy wrote:\n> > I draw some rather scathing\n>
                > lessons from some of the failures of products created by, and still
                run\nby,\n> > people on this very list.\n> \n> Skewer away! :) I have
                noticed that sometimes in the rush to be polite and\n> professional
                about other people's work, we don't critique enough.\n\nHmmm, is that
                the sound of knives sharpening I hear...? :-)\n\nWelcome to the list
                Randy, great to see you here.  Can you tell us what's\ngoing on with
                you and massively-shared worlds (aka MUDs/MMPOGs) these days?\n\n\nMike
                Sellers\n(I'm at EA/Maxis, working on SimCity Online)\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'RE: [MUD-Dev] Hello!'
          from: Sellers, Michael <MSellers@maxis.com>
          references: []
          date: 2000-01-07 15:57:24.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: 000DlhSq
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *246
      parent: &249 !ruby/object:MessageContainer
        key: &247 !ruby/object:MessageId
          raw: JzUMT9ZA@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: |
              From: Cynbe ru Taren <cynbe@muq.org>
              Date: Fri, 7 Jan 2000 13:07:32 -0600
              Subject: Re: [MUD-Dev] Hello!

              Randy wrote:

              | Hi! I'm Randy Farmer. Based on a quick ego-scan of the archives, I see that
              | most of you know who I am already. So I won't waste a lot of bandwidth
              | beating my chest or tooting my horn. :-)

              So -I- will do a little. :)

              Among very many other things, Randy is co-author (with Chip) of

                   The Lessons of Lucasfilm's Habitat

              which is merely head-and-shoulders the BEST online-community
              article I have ever read:  My first photocopy of it lived on
              my dining room table for weeks, and its lessons are permanently
              etched in the back of my skull, and rise mysteriously to the
              surface of my consciousness whenever I'm doing related
              software design.

              Anyone on this list who has yet to read it is in for a treat:
              the nicest online copy I see at the moment is:

                http://imaginaryrealities.imaginary.com/volume2/issue9/lessons.html

              (Rereading, I notice that reference #1 just happens to be my
              favorite SF story of all time, Vernor Vinge's True Names!)

              I'd be curious to know if, one decade later, Randy would change
              or add to any of those lessons... :)

               Cynbe



              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: Cynbe ru Taren <cynbe@muq.org>'
                    name: From
                    value: Cynbe ru Taren <cynbe@muq.org>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Fri, 7 Jan 2000 13:07:32 -0600'
                    name: Date
                    value: Fri, 7 Jan 2000 13:07:32 -0600
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] Hello!'
                    name: Subject
                    value: 'Re: [MUD-Dev] Hello!'
                  mbox_from: 
                body: |
                  Randy wrote:

                  | Hi! I'm Randy Farmer. Based on a quick ego-scan of the archives, I see that
                  | most of you know who I am already. So I won't waste a lot of bandwidth
                  | beating my chest or tooting my horn. :-)

                  So -I- will do a little. :)

                  Among very many other things, Randy is co-author (with Chip) of

                       The Lessons of Lucasfilm's Habitat

                  which is merely head-and-shoulders the BEST online-community
                  article I have ever read:  My first photocopy of it lived on
                  my dining room table for weeks, and its lessons are permanently
                  etched in the back of my skull, and rise mysteriously to the
                  surface of my consciousness whenever I'm doing related
                  software design.

                  Anyone on this list who has yet to read it is in for a treat:
                  the nicest online copy I see at the moment is:

                    http://imaginaryrealities.imaginary.com/volume2/issue9/lessons.html

                  (Rereading, I notice that reference #1 just happens to be my
                  favorite SF story of all time, Vernor Vinge's True Names!)

                  I'd be curious to know if, one decade later, Randy would change
                  or add to any of those lessons... :)

                   Cynbe



                  _______________________________________________
                  MUD-Dev maillist  -  MUD-Dev@kanga.nu
                  http://www.kanga.nu/lists/listinfo/mud-dev
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] Hello!'
            from: Cynbe ru Taren <cynbe@muq.org>
            references: []
            date: 2000-01-07 19:07:32.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: JzUMT9ZA
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *247
        parent: &352 !ruby/object:MessageContainer
          key: &248 !ruby/object:MessageId
            raw: JzBblyPA@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: \"F. Randall Farmer\" <randy@communities.com>\nDate: Thu,
                06 Jan 2000 12:01:17 -0800\nSubject: [MUD-Dev] Hello!\n\nHi! I'm Randy
                Farmer. Based on a quick ego-scan of the archives, I see that\nmost
                of you know who I am already. So I won't waste a lot of bandwidth\nbeating
                my chest or tooting my horn. :-)\n\nI _ALSO_ see that I know a decent
                percentage of _you_ and an even larger\npercentage of you by reputation
                and work. Very impressive. That's probably\nthe number One reason
                I'm taking Cynbe up on the invitation to join this list.\n\nWarnings
                follow:\n\n1) I believe that to be on a list, I should be a contributor
                as well as an\nobserver. If I end up feeling that I can't join the
                conversations, I'll\nprobably leave. If I do, it isn't a reflection
                on the list, but rather\nmyself. I truly believe that communities
                are based on mutual obligation\ncreated by \"gift\"-exchange. I'm
                expecting no less here. :-)\n\n2) I should also let you know that
                I don't flame, but I have held some\nrather _unpopular_ views on the
                relationship of technology (software AND\nhardware) to the formation
                of Online community. I draw some rather scathing\nlessons from some
                of the failures of products created by, and still run by,\npeople
                on this very list. Heck, as you know I skewer my OWN products! I'm\nnot
                bashful. I think this stuff is too important to be glossed over with\nhype
                and rhetoric. I have little tolerance for hubris and statements like\n\"it'll
                obviously be better.\" During the VRML hype days, I was one of the\nlouder
                detractors, more interested in human interaction than polygon count.\n\n3)
                The final warning is that I'm a founder of the largest graphical virtual\ncommunity
                company on the internet. There's only so much I can say on a\npublic
                list. Some of what we're doing I will be unable to talk about at all\nuntil
                it is either demoed publicly, or ships. I can't give away the family\njewels
                for free. ;-( This may place too great a strain on my participation\n(see
                Warning #1.) I hope no one here is expecting anything more from me\nthan
                the participation of someone who's been in the field for 22 years.
                No\npronouncements from on high. I often make mistakes. I sometimes
                change\npositions. Sometimes I am flat out wrong. Hopefully, the distinguished\npersons
                on this list will feel free to point this out when it happens.\n\nGiven
                the warnings above I'd like to participate on this list at least\nprovisionally,
                if you'll have me. :-)\n\nRandy\n\nF. Randall Farmer                \"Home
                pages are passe', everybody's\nCommunities.com                  building
                a palace\" - Time Magazine\nCofounder and VP Services        http://www.communities.com\n
                \  \nrandy@communities.com            \n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: "F. Randall Farmer" <randy@communities.com>'
                      name: From
                      value: '"F. Randall Farmer" <randy@communities.com>'
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Thu, 06 Jan 2000 12:01:17 -0800'
                      name: Date
                      value: Thu, 06 Jan 2000 12:01:17 -0800
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: [MUD-Dev] Hello!'
                      name: Subject
                      value: "[MUD-Dev] Hello!"
                    mbox_from: 
                  body: "Hi! I'm Randy Farmer. Based on a quick ego-scan of the archives,
                    I see that\nmost of you know who I am already. So I won't waste
                    a lot of bandwidth\nbeating my chest or tooting my horn. :-)\n\nI
                    _ALSO_ see that I know a decent percentage of _you_ and an even
                    larger\npercentage of you by reputation and work. Very impressive.
                    That's probably\nthe number One reason I'm taking Cynbe up on
                    the invitation to join this list.\n\nWarnings follow:\n\n1) I
                    believe that to be on a list, I should be a contributor as well
                    as an\nobserver. If I end up feeling that I can't join the conversations,
                    I'll\nprobably leave. If I do, it isn't a reflection on the list,
                    but rather\nmyself. I truly believe that communities are based
                    on mutual obligation\ncreated by \"gift\"-exchange. I'm expecting
                    no less here. :-)\n\n2) I should also let you know that I don't
                    flame, but I have held some\nrather _unpopular_ views on the relationship
                    of technology (software AND\nhardware) to the formation of Online
                    community. I draw some rather scathing\nlessons from some of the
                    failures of products created by, and still run by,\npeople on
                    this very list. Heck, as you know I skewer my OWN products! I'm\nnot
                    bashful. I think this stuff is too important to be glossed over
                    with\nhype and rhetoric. I have little tolerance for hubris and
                    statements like\n\"it'll obviously be better.\" During the VRML
                    hype days, I was one of the\nlouder detractors, more interested
                    in human interaction than polygon count.\n\n3) The final warning
                    is that I'm a founder of the largest graphical virtual\ncommunity
                    company on the internet. There's only so much I can say on a\npublic
                    list. Some of what we're doing I will be unable to talk about
                    at all\nuntil it is either demoed publicly, or ships. I can't
                    give away the family\njewels for free. ;-( This may place too
                    great a strain on my participation\n(see Warning #1.) I hope no
                    one here is expecting anything more from me\nthan the participation
                    of someone who's been in the field for 22 years. No\npronouncements
                    from on high. I often make mistakes. I sometimes change\npositions.
                    Sometimes I am flat out wrong. Hopefully, the distinguished\npersons
                    on this list will feel free to point this out when it happens.\n\nGiven
                    the warnings above I'd like to participate on this list at least\nprovisionally,
                    if you'll have me. :-)\n\nRandy\n\nF. Randall Farmer                \"Home
                    pages are passe', everybody's\nCommunities.com                  building
                    a palace\" - Time Magazine\nCofounder and VP Services        http://www.communities.com\n
                    \  \nrandy@communities.com            \n\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: "[MUD-Dev] Hello!"
              from: F. Randall Farmer <randy@communities.com>
              references: []
              date: 2000-01-06 20:01:17.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: JzBblyPA
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *248
          parent: 
          children:
          - *249
        children:
        - *250
      children:
      - *251
    children: []
  *23: *252
  *233: *253
  *224: *254
  *61: *255
  *101: *256
  *20: *257
  ? &258 !ruby/object:MessageId
    raw: JzBblyPg@generated-message-id.chibrary.org
  : &475 !ruby/object:MessageContainer
    key: *258
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Sat, 01 Jan 2000 21:06:05
          -0800\nSubject: [MUD-Dev] Chomsky's recursive theory of grammar\n\nI just
          added this to the Library:\n\n  http://members.tripod.com/~SoftBlue/chompy_guide.htm\n\nIts
          really a section of the documentation on Chompy, a NLP done in\njava, but
          the basic premises and disucssion are interesting:\n\n--<cut>--\nChomsky
          (1957) presented a structured syntactic theory of\ngrammar. The aim of syntactic
          theories is to model of a system that\nenables us to to tell which sentences
          are part of our language and\nwhich are not.That is the theory tried to
          explain how we can tell if\na series of worlds is a permissible sentence
          in our language or not.\n\nHowever a difficulty with creating such a model
          is that there are an\nin finite number of possible grammatical sentence,
          and the model\nneeds to be able to identify these from the infinite number
          of\nnon-grammatical sentences that may also be generated. In order to\naddress
          this problem Chomsky suggested that sentences are\ncomprehended using a
          recursive procedure. A recursive procedure is\none which refers to itself
          an a repetitive manner. Hence allowing\nfor infinite generatively via a
          finite set of procedures. Recursion\nis used widely in computer programming
          and forms the basis of\nChompy, which is in effect a recursive engine.  \n--<cut>--\n\n--\nJ
          C Lawrence                                 Home: claw@kanga.nu\n----------(*)
          \                             Other: coder@kanga.nu\n--=| A man is as sane
          as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Sat, 01 Jan 2000 21:06:05 -0800'
                name: Date
                value: Sat, 01 Jan 2000 21:06:05 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] Chomsky''s recursive theory of grammar'
                name: Subject
                value: "[MUD-Dev] Chomsky's recursive theory of grammar"
              mbox_from: 
            body: "I just added this to the Library:\n\n  http://members.tripod.com/~SoftBlue/chompy_guide.htm\n\nIts
              really a section of the documentation on Chompy, a NLP done in\njava,
              but the basic premises and disucssion are interesting:\n\n--<cut>--\nChomsky
              (1957) presented a structured syntactic theory of\ngrammar. The aim
              of syntactic theories is to model of a system that\nenables us to to
              tell which sentences are part of our language and\nwhich are not.That
              is the theory tried to explain how we can tell if\na series of worlds
              is a permissible sentence in our language or not.\n\nHowever a difficulty
              with creating such a model is that there are an\nin finite number of
              possible grammatical sentence, and the model\nneeds to be able to identify
              these from the infinite number of\nnon-grammatical sentences that may
              also be generated. In order to\naddress this problem Chomsky suggested
              that sentences are\ncomprehended using a recursive procedure. A recursive
              procedure is\none which refers to itself an a repetitive manner. Hence
              allowing\nfor infinite generatively via a finite set of procedures.
              Recursion\nis used widely in computer programming and forms the basis
              of\nChompy, which is in effect a recursive engine.  \n--<cut>--\n\n--\nJ
              C Lawrence                                 Home: claw@kanga.nu\n----------(*)
              \                             Other: coder@kanga.nu\n--=| A man is as
              sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] Chomsky's recursive theory of grammar"
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-02 05:06:05.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: JzBblyPg
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *258
    parent: 
    children: []
  *151: *259
  *130: *260
  ? &261 !ruby/object:MessageId
    raw: 00uTkcjo@generated-message-id.chibrary.org
  : &263 !ruby/object:MessageContainer
    key: *261
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: J C Lawrence <claw@cp.net>\nDate: Tue, 04 Jan 2000 15:56:27 -0800\nSubject:
          Re: [MUD-Dev] EQ packet analyzer is gone?\n\nOn Tue, 4 Jan 2000 09:39:02
          -0800  \nSellers, Michael <MSellers@maxis.com> wrote:\n\n> FWIW, my interest
          is not in hacking EQ, but is purely\n> professional.\n\n<shock!>\n\nI have
          some edditional data on this by private email which I've\nsuggested the
          poster forward to the list (he's a member).  Hopefully\nhe will.  ITMT I've
          removed the link from the Library, but the\nFreshmeat entry remains.\n\n--\nJ
          C Lawrence                              Internet: claw@kanga.nu\n----------(*)
          \                           Internet: coder@kanga.nu\n...Honorary Member
          of Clan McFud -- Teamer's Avenging Monolith...\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@cp.net>'
                name: From
                value: J C Lawrence <claw@cp.net>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Tue, 04 Jan 2000 15:56:27 -0800'
                name: Date
                value: Tue, 04 Jan 2000 15:56:27 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: [MUD-Dev] EQ packet analyzer is gone?'
                name: Subject
                value: 'Re: [MUD-Dev] EQ packet analyzer is gone?'
              mbox_from: 
            body: "On Tue, 4 Jan 2000 09:39:02 -0800  \nSellers, Michael <MSellers@maxis.com>
              wrote:\n\n> FWIW, my interest is not in hacking EQ, but is purely\n>
              professional.\n\n<shock!>\n\nI have some edditional data on this by
              private email which I've\nsuggested the poster forward to the list (he's
              a member).  Hopefully\nhe will.  ITMT I've removed the link from the
              Library, but the\nFreshmeat entry remains.\n\n--\nJ C Lawrence                              Internet:
              claw@kanga.nu\n----------(*)                            Internet: coder@kanga.nu\n...Honorary
              Member of Clan McFud -- Teamer's Avenging Monolith...\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: [MUD-Dev] EQ packet analyzer is gone?'
        from: J C Lawrence <claw@cp.net>
        references: []
        date: 2000-01-04 23:56:27.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00uTkcjo
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *261
    parent: &265 !ruby/object:MessageContainer
      key: &262 !ruby/object:MessageId
        raw: JzUMT9Zg@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: \"Sellers, Michael\" <MSellers@maxis.com>\nDate: Tue, 4 Jan
            2000 09:39:02 -0800\nSubject: [MUD-Dev] EQ packet analyzer is gone?\n\nDid
            anyone grab the EQ packet analyser that was at \nhttp://www.angelfire.com/games/showeq/
            ?  I pointed the site out to a\ncolleague, and now it's >poof< gone.  \n\nFWIW,
            my interest is not in hacking EQ, but is purely professional.  \n\nThanks,\nMike
            Sellers\n\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: "Sellers, Michael" <MSellers@maxis.com>'
                  name: From
                  value: '"Sellers, Michael" <MSellers@maxis.com>'
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Tue, 4 Jan 2000 09:39:02 -0800'
                  name: Date
                  value: Tue, 4 Jan 2000 09:39:02 -0800
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: [MUD-Dev] EQ packet analyzer is gone?'
                  name: Subject
                  value: "[MUD-Dev] EQ packet analyzer is gone?"
                mbox_from: 
              body: "Did anyone grab the EQ packet analyser that was at \nhttp://www.angelfire.com/games/showeq/
                ?  I pointed the site out to a\ncolleague, and now it's >poof< gone.
                \ \n\nFWIW, my interest is not in hacking EQ, but is purely professional.
                \ \n\nThanks,\nMike Sellers\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: "[MUD-Dev] EQ packet analyzer is gone?"
          from: Sellers, Michael <MSellers@maxis.com>
          references: []
          date: 2000-01-04 17:39:02.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: JzUMT9Zg
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *262
      parent: 
      children:
      - *263
      - &360 !ruby/object:MessageContainer
        key: &264 !ruby/object:MessageId
          raw: 00bj7qMK@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Tue, 18 Jan 2000 01:26:48
              -0800\nSubject: Re: [MUD-Dev] EQ packet analyzer is gone?\n\nOn Tue,
              4 Jan 2000 09:39:02 -0800  \nSellers, Michael <MSellers@maxis.com> wrote:\n\n>
              Did anyone grab the EQ packet analyser that was at\n> http://www.angelfire.com/games/showeq/
              ?  \n\nIt has been wandering the 'net like an unkillable cockroach (the\nguys
              at EQ are reportedly, umm, less than pleased and have been\nworking
              hard to stamp it out).  If anyone is interested in where it\nseems to
              be living currently (it moves every couple days), please\ndrop me a
              note off-list.\n\n--\nJ C Lawrence                                 Home:
              claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
              A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: J C Lawrence <claw@kanga.nu>'
                    name: From
                    value: J C Lawrence <claw@kanga.nu>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Tue, 18 Jan 2000 01:26:48 -0800'
                    name: Date
                    value: Tue, 18 Jan 2000 01:26:48 -0800
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] EQ packet analyzer is gone?'
                    name: Subject
                    value: 'Re: [MUD-Dev] EQ packet analyzer is gone?'
                  mbox_from: 
                body: "On Tue, 4 Jan 2000 09:39:02 -0800  \nSellers, Michael <MSellers@maxis.com>
                  wrote:\n\n> Did anyone grab the EQ packet analyser that was at\n>
                  http://www.angelfire.com/games/showeq/ ?  \n\nIt has been wandering
                  the 'net like an unkillable cockroach (the\nguys at EQ are reportedly,
                  umm, less than pleased and have been\nworking hard to stamp it out).
                  \ If anyone is interested in where it\nseems to be living currently
                  (it moves every couple days), please\ndrop me a note off-list.\n\n--\nJ
                  C Lawrence                                 Home: claw@kanga.nu\n----------(*)
                  \                             Other: coder@kanga.nu\n--=| A man
                  is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] EQ packet analyzer is gone?'
            from: J C Lawrence <claw@kanga.nu>
            references: []
            date: 2000-01-18 09:26:48.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 00bj7qMK
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *264
        parent: *265
        children: []
    children: []
  *86: *266
  *197: *267
  *41: *44
  *231: *268
  ? &269 !ruby/object:MessageId
    raw: Jzmy2yCe@generated-message-id.chibrary.org
  : &277 !ruby/object:MessageContainer
    key: *269
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: Matthew Mihaly <diablo@best.com>\nDate: Fri, 21 Jan 2000 15:43:42
          -0800 (PST)\nSubject: Re: [MUD-Dev] [adv-mud] What good is a hero when nobody
          knows? (fwd)\n\nOn Fri, 21 Jan 2000, Wes Connell wrote:\n\n> On Thu, 20
          Jan 2000, Matthew Mihaly wrote:\n> \n> \n> I don't think he was refering
          to the actual mechanics of the tables rather than\n> the tables themselves.
          The PK mechanics of the table could easily modified to\n> subtract fame
          for killing weaker players. Its the fact that players will be\n> fighting
          for the glory of being number one on the list. The list could be \n> amount
          of wealth, number of orc skulls collected, number of damsels rescued,\n>
          etc, etc. \n\nRight, I know, but I'm not a fan of subtracing fame for killing
          weaker\nplayers either. If a smaller player insults you, I see no reason
          why you\nshouldn't go kill him or her, at least in games where death is
          not really\nDEATH. The weaker player may get away with it if he or she is
          able to gain\nprotection either from other players or from the game, but
          I don't believe\nin protecting the weak from deserved killings, and I don't
          want to punish\na player for killing someone who insulted his honour, etc.\n\n
          \n> A \"top-ten\" list could actually be a very nice thing for veteran players
          who\n> are getting bored with the game. Along with more quests and areas
          the veteran\n> players will always have to defend their top-ten positions
          from the newbies\n> stepping into veteran-hood. For example in UO aside
          from owning a castle\n> my roomate and I have pretty much done everything
          and had everything in the\n> game. Only after a month break do I find it
          entertaining again. Just about the\n> only public recognition for extraordinary
          play are the PK bounty boards. \n\nWe have an xp-ranking board, but that's
          about it right now. I agree\nthough, more ranking systems are good. More
          ladderss of success for the\nplayers to climb.\n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Matthew Mihaly <diablo@best.com>'
                name: From
                value: Matthew Mihaly <diablo@best.com>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Fri, 21 Jan 2000 15:43:42 -0800 (PST)'
                name: Date
                value: Fri, 21 Jan 2000 15:43:42 -0800 (PST)
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: [MUD-Dev] [adv-mud] What good is a hero when nobody
                  knows? (fwd)'
                name: Subject
                value: 'Re: [MUD-Dev] [adv-mud] What good is a hero when nobody knows?
                  (fwd)'
              mbox_from: 
            body: "On Fri, 21 Jan 2000, Wes Connell wrote:\n\n> On Thu, 20 Jan 2000,
              Matthew Mihaly wrote:\n> \n> \n> I don't think he was refering to the
              actual mechanics of the tables rather than\n> the tables themselves.
              The PK mechanics of the table could easily modified to\n> subtract fame
              for killing weaker players. Its the fact that players will be\n> fighting
              for the glory of being number one on the list. The list could be \n>
              amount of wealth, number of orc skulls collected, number of damsels
              rescued,\n> etc, etc. \n\nRight, I know, but I'm not a fan of subtracing
              fame for killing weaker\nplayers either. If a smaller player insults
              you, I see no reason why you\nshouldn't go kill him or her, at least
              in games where death is not really\nDEATH. The weaker player may get
              away with it if he or she is able to gain\nprotection either from other
              players or from the game, but I don't believe\nin protecting the weak
              from deserved killings, and I don't want to punish\na player for killing
              someone who insulted his honour, etc.\n\n \n> A \"top-ten\" list could
              actually be a very nice thing for veteran players who\n> are getting
              bored with the game. Along with more quests and areas the veteran\n>
              players will always have to defend their top-ten positions from the
              newbies\n> stepping into veteran-hood. For example in UO aside from
              owning a castle\n> my roomate and I have pretty much done everything
              and had everything in the\n> game. Only after a month break do I find
              it entertaining again. Just about the\n> only public recognition for
              extraordinary play are the PK bounty boards. \n\nWe have an xp-ranking
              board, but that's about it right now. I agree\nthough, more ranking
              systems are good. More ladderss of success for the\nplayers to climb.\n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: [MUD-Dev] [adv-mud] What good is a hero when nobody knows?
            (fwd)'
        from: Matthew Mihaly <diablo@best.com>
        references: []
        date: 2000-01-21 23:43:42.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jzmy2yCe
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *269
    parent: &276 !ruby/object:MessageContainer
      key: &270 !ruby/object:MessageId
        raw: 00uTkdo8@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: Wes Connell <wconnell@adhesive.com>\nDate: Fri, 21 Jan 2000
            17:38:11 -0600 (CST)\nSubject: Re: [MUD-Dev] [adv-mud] What good is a
            hero when nobody knows? (fwd)\n\nOn Thu, 20 Jan 2000, Matthew Mihaly wrote:\n\n[table
            stuff snipped]\n> \n> We rejected doing something similar to this because
            a) it's too open to\n> abuse and b) we feel it encourages killing smaller
            players. If you know\n> that you can at least 1 point for killing someone
            smaller than you, then\n> you will have players (particularly on the mud
            referred to here, which I'm\n> assuming has no credit card tracking capabilities
            to control account\n> creation) simply creating newbies to kill in order
            to get points.\n\nI don't think he was refering to the actual mechanics
            of the tables rather than\nthe tables themselves. The PK mechanics of
            the table could easily modified to\nsubtract fame for killing weaker players.
            Its the fact that players will be\nfighting for the glory of being number
            one on the list. The list could be \namount of wealth, number of orc skulls
            collected, number of damsels rescued,\netc, etc. \n\nA \"top-ten\" list
            could actually be a very nice thing for veteran players who\nare getting
            bored with the game. Along with more quests and areas the veteran\nplayers
            will always have to defend their top-ten positions from the newbies\nstepping
            into veteran-hood. For example in UO aside from owning a castle\nmy roomate
            and I have pretty much done everything and had everything in the\ngame.
            Only after a month break do I find it entertaining again. Just about the\nonly
            public recognition for extraordinary play are the PK bounty boards. \n\nWes
            Connell               wconnell@adhesive.com\n\n\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: Wes Connell <wconnell@adhesive.com>'
                  name: From
                  value: Wes Connell <wconnell@adhesive.com>
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Fri, 21 Jan 2000 17:38:11 -0600 (CST)'
                  name: Date
                  value: Fri, 21 Jan 2000 17:38:11 -0600 (CST)
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] [adv-mud] What good is a hero when
                    nobody knows? (fwd)'
                  name: Subject
                  value: 'Re: [MUD-Dev] [adv-mud] What good is a hero when nobody
                    knows? (fwd)'
                mbox_from: 
              body: "On Thu, 20 Jan 2000, Matthew Mihaly wrote:\n\n[table stuff snipped]\n>
                \n> We rejected doing something similar to this because a) it's too
                open to\n> abuse and b) we feel it encourages killing smaller players.
                If you know\n> that you can at least 1 point for killing someone smaller
                than you, then\n> you will have players (particularly on the mud referred
                to here, which I'm\n> assuming has no credit card tracking capabilities
                to control account\n> creation) simply creating newbies to kill in
                order to get points.\n\nI don't think he was refering to the actual
                mechanics of the tables rather than\nthe tables themselves. The PK
                mechanics of the table could easily modified to\nsubtract fame for
                killing weaker players. Its the fact that players will be\nfighting
                for the glory of being number one on the list. The list could be \namount
                of wealth, number of orc skulls collected, number of damsels rescued,\netc,
                etc. \n\nA \"top-ten\" list could actually be a very nice thing for
                veteran players who\nare getting bored with the game. Along with more
                quests and areas the veteran\nplayers will always have to defend their
                top-ten positions from the newbies\nstepping into veteran-hood. For
                example in UO aside from owning a castle\nmy roomate and I have pretty
                much done everything and had everything in the\ngame. Only after a
                month break do I find it entertaining again. Just about the\nonly
                public recognition for extraordinary play are the PK bounty boards.
                \n\nWes Connell               wconnell@adhesive.com\n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] [adv-mud] What good is a hero when nobody knows?
              (fwd)'
          from: Wes Connell <wconnell@adhesive.com>
          references: []
          date: 2000-01-21 23:38:11.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: 00uTkdo8
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *270
      parent: &275 !ruby/object:MessageContainer
        key: &271 !ruby/object:MessageId
          raw: Jzmy2x84@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: Matthew Mihaly <diablo@best.com>\nDate: Thu, 20 Jan 2000 15:29:03
              -0800 (PST)\nSubject: Re: [MUD-Dev] [adv-mud] What good is a hero when
              nobody knows? (fwd)\n\nOn Thu, 20 Jan 2000, J C Lawrence wrote:\n\n>
              ------- Forwarded Message\n> \n> From: \"Powell, Warren\" <warren.powell@nz.unisys.com>\n>
              To: \"'adv-mud@egroups.com'\" <adv-mud@egroups.com>\n> Date: Thu, 20
              Jan 2000 15:46:55 -0600\n> \n> 3. Pkill table\n> Individual fame and
              its glory is all well and good, but what if you are\n> clanned and fighting
              for their good name? To answer this issue, we created\n> the clan pkill
              table. Players earn points for pkilling others (who arent in\n> their
              clan) and these are collected on the pkill table. They get 1 point for\n>
              each 5 levels that the other plyer is above them, but a min of 1 point
              for\n> lower levs. This keeps the pkillers in the clans competitive.\n>
              \n> Name                 Class         Pkills   Score\n> ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n>
              Dynasty              Thug          16       52\n> Kruza                Warrior
              \      11       35\n> Nme                  Warrior       11       34\n>
              Brachah              Warrior       10       27\n> Vahl                 Warrior
              \      8        24\n> ....\n> \n> Eventually of course, there are going
              to be players who finally get to hero\n> level. We have adjusted this
              table so that it is totally dynamic and adds\n> players when they level
              rather than editing a help file to give them instant\n> feedback.\n>
              \n\nWe rejected doing something similar to this because a) it's too
              open to\nabuse and b) we feel it encourages killing smaller players.
              If you know\nthat you can at least 1 point for killing someone smaller
              than you, then\nyou will have players (particularly on the mud referred
              to here, which I'm\nassuming has no credit card tracking capabilities
              to control account\ncreation) simply creating newbies to kill in order
              to get points.\n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: Matthew Mihaly <diablo@best.com>'
                    name: From
                    value: Matthew Mihaly <diablo@best.com>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Thu, 20 Jan 2000 15:29:03 -0800 (PST)'
                    name: Date
                    value: Thu, 20 Jan 2000 15:29:03 -0800 (PST)
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] [adv-mud] What good is a hero when
                      nobody knows? (fwd)'
                    name: Subject
                    value: 'Re: [MUD-Dev] [adv-mud] What good is a hero when nobody
                      knows? (fwd)'
                  mbox_from: 
                body: "On Thu, 20 Jan 2000, J C Lawrence wrote:\n\n> ------- Forwarded
                  Message\n> \n> From: \"Powell, Warren\" <warren.powell@nz.unisys.com>\n>
                  To: \"'adv-mud@egroups.com'\" <adv-mud@egroups.com>\n> Date: Thu,
                  20 Jan 2000 15:46:55 -0600\n> \n> 3. Pkill table\n> Individual fame
                  and its glory is all well and good, but what if you are\n> clanned
                  and fighting for their good name? To answer this issue, we created\n>
                  the clan pkill table. Players earn points for pkilling others (who
                  arent in\n> their clan) and these are collected on the pkill table.
                  They get 1 point for\n> each 5 levels that the other plyer is above
                  them, but a min of 1 point for\n> lower levs. This keeps the pkillers
                  in the clans competitive.\n> \n> Name                 Class         Pkills
                  \  Score\n> ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n>
                  Dynasty              Thug          16       52\n> Kruza                Warrior
                  \      11       35\n> Nme                  Warrior       11       34\n>
                  Brachah              Warrior       10       27\n> Vahl                 Warrior
                  \      8        24\n> ....\n> \n> Eventually of course, there are
                  going to be players who finally get to hero\n> level. We have adjusted
                  this table so that it is totally dynamic and adds\n> players when
                  they level rather than editing a help file to give them instant\n>
                  feedback.\n> \n\nWe rejected doing something similar to this because
                  a) it's too open to\nabuse and b) we feel it encourages killing
                  smaller players. If you know\nthat you can at least 1 point for
                  killing someone smaller than you, then\nyou will have players (particularly
                  on the mud referred to here, which I'm\nassuming has no credit card
                  tracking capabilities to control account\ncreation) simply creating
                  newbies to kill in order to get points.\n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] [adv-mud] What good is a hero when nobody knows?
                (fwd)'
            from: Matthew Mihaly <diablo@best.com>
            references: []
            date: 2000-01-20 23:29:03.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: Jzmy2x84
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *271
        parent: &274 !ruby/object:MessageContainer
          key: &272 !ruby/object:MessageId
            raw: JzUMQw6q@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: Erik Jarvi <ejarvi@megsinet.net>\nDate: Thu, 20 Jan 2000
                18:19:08 -0600\nSubject: Re: [MUD-Dev] [adv-mud] What good is a hero
                when nobody knows? (fwd)\n\nJ C Lawrence wrote:\n> \n> ------- Forwarded
                Message\n> \n> From: \"Powell, Warren\" <warren.powell@nz.unisys.com>\n<snip>\n\nDelurking
                :)\n\nA bit about me first, I'm a (just) a Elder Wiz at Shattered
                Worlds.\nI've been a Wiz for ~1 year there, and a player there for
                about 9 months\nbefore that. Shattered has been around since about
                '91 or '92.\n\n\nAt Shattered Worlds, we have a IMO a neat system.\nFirst
                there are Players, which are all players who have not completed\neither
                all of the quests, or all of the quests that are required in\nwhich
                ever guild that they are in. After completing the quest\nrequirements,\nthe
                player becomes a Lord.  Once a Lord, the player has to do Lord\nTasks,\nwhich
                are things in the line of get such-and-suches head, and there is\nalso\na
                Lord Ball.( An unfortunate failure, it is still in the game, but\nplayers
                are\nuninterested in it. I was the implementor on that one. :-) )\nAs
                the Lord gets more Lord Points, his/her Lord rank increases, they\nalso
                \ndecrease in time  A Lord starts out at Sir/Madam, then gets to\nBaron/Baroness,
                \nand almost finally Duke/Duchess. The ultimate achievement is\nKing/Queen.
                \ \nTo become King/Queen the player must be at least a Baron/Baroness
                and\nhave\nhis/her cult be the largest. Largest being the total amount
                of quest\npoints\nof all of the members, plus extra points for being
                a Citizen. (We allow\n1\nplayer to have 1 citizen character.)  Sooo
                while there is one player who\ntends to be King most of the time,
                power plays from the other Lords\nhappen\nabout 3 to 4 times a year.
                Some are quite bloody. :-) But there \nalways seems that there is
                a take-over brewing.  Not only are these take\novers\nenjoyable to
                the man who would be King, but to the members of the cult.\nIt tends\nto
                get very political. (We have a Democratic Monarchy, and almost\neverything\nis
                player run, shops, laws, justice, guild alliances, cults.)\n\nThe
                King/Queen has his/her own \"palace\", and is in charge of keeping
                the\nguards\nof the main city up and running through taxation. \n\nJC
                wrote in a followup\n> I'd be tempted to give people with places on
                the fame table\n> something special; something to signify their status.
                \n\nWe don't give very much atm, but the players are pretty happy.\nTho
                we are introducing unique items for Guild Leaders, and the\nKing/Queen.\n\n\nErik\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: Erik Jarvi <ejarvi@megsinet.net>'
                      name: From
                      value: Erik Jarvi <ejarvi@megsinet.net>
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Thu, 20 Jan 2000 18:19:08 -0600'
                      name: Date
                      value: Thu, 20 Jan 2000 18:19:08 -0600
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] [adv-mud] What good is a hero when
                        nobody knows? (fwd)'
                      name: Subject
                      value: 'Re: [MUD-Dev] [adv-mud] What good is a hero when nobody
                        knows? (fwd)'
                    mbox_from: 
                  body: "J C Lawrence wrote:\n> \n> ------- Forwarded Message\n> \n>
                    From: \"Powell, Warren\" <warren.powell@nz.unisys.com>\n<snip>\n\nDelurking
                    :)\n\nA bit about me first, I'm a (just) a Elder Wiz at Shattered
                    Worlds.\nI've been a Wiz for ~1 year there, and a player there
                    for about 9 months\nbefore that. Shattered has been around since
                    about '91 or '92.\n\n\nAt Shattered Worlds, we have a IMO a neat
                    system.\nFirst there are Players, which are all players who have
                    not completed\neither all of the quests, or all of the quests
                    that are required in\nwhich ever guild that they are in. After
                    completing the quest\nrequirements,\nthe player becomes a Lord.
                    \ Once a Lord, the player has to do Lord\nTasks,\nwhich are things
                    in the line of get such-and-suches head, and there is\nalso\na
                    Lord Ball.( An unfortunate failure, it is still in the game, but\nplayers
                    are\nuninterested in it. I was the implementor on that one. :-)
                    )\nAs the Lord gets more Lord Points, his/her Lord rank increases,
                    they\nalso \ndecrease in time  A Lord starts out at Sir/Madam,
                    then gets to\nBaron/Baroness, \nand almost finally Duke/Duchess.
                    The ultimate achievement is\nKing/Queen.  \nTo become King/Queen
                    the player must be at least a Baron/Baroness and\nhave\nhis/her
                    cult be the largest. Largest being the total amount of quest\npoints\nof
                    all of the members, plus extra points for being a Citizen. (We
                    allow\n1\nplayer to have 1 citizen character.)  Sooo while there
                    is one player who\ntends to be King most of the time, power plays
                    from the other Lords\nhappen\nabout 3 to 4 times a year. Some
                    are quite bloody. :-) But there \nalways seems that there is a
                    take-over brewing.  Not only are these take\novers\nenjoyable
                    to the man who would be King, but to the members of the cult.\nIt
                    tends\nto get very political. (We have a Democratic Monarchy,
                    and almost\neverything\nis player run, shops, laws, justice, guild
                    alliances, cults.)\n\nThe King/Queen has his/her own \"palace\",
                    and is in charge of keeping the\nguards\nof the main city up and
                    running through taxation. \n\nJC wrote in a followup\n> I'd be
                    tempted to give people with places on the fame table\n> something
                    special; something to signify their status. \n\nWe don't give
                    very much atm, but the players are pretty happy.\nTho we are introducing
                    unique items for Guild Leaders, and the\nKing/Queen.\n\n\nErik\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] [adv-mud] What good is a hero when nobody
                  knows? (fwd)'
              from: Erik Jarvi <ejarvi@megsinet.net>
              references: []
              date: 2000-01-21 00:19:08.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: JzUMQw6q
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *272
          parent: &362 !ruby/object:MessageContainer
            key: &273 !ruby/object:MessageId
              raw: 000Dnts8@generated-message-id.chibrary.org
            value: !ruby/object:Message
              email: !ruby/object:Email
                raw: |
                  From: J C Lawrence <claw@kanga.nu>
                  Date: Thu, 20 Jan 2000 15:08:39 -0800
                  Subject: [MUD-Dev] [adv-mud] What good is a hero when nobody knows? (fwd)

                  ------- Forwarded Message

                  From: "Powell, Warren" <warren.powell@nz.unisys.com>
                  To: "'adv-mud@egroups.com'" <adv-mud@egroups.com>
                  Date: Thu, 20 Jan 2000 15:46:55 -0600

                  Hero. Everybody wants to get there eventually, but who knows what they have
                  they done while getting there?

                  We (the immstaff on DD3) decided that players needed a way to keep their
                  competitive edge honed as well as providing incentive to keep playing and
                  give them goals. We also wanted to make sure that players who had achieved
                  greatness were remembered.

                  The main way in which we do this is via the folowing tables:

                  1. Fame table
                  The traditional fame table where individual players recieve fame points for
                  killing mobs (or chars) that are of a higher level than themselves. So if a
                  player kills a mob that is +10 levels he will receive 10 fame (these numbers
                  are not accurate). If he has gained enough fame to make him one of the top
                  20 fame holders in the mud, his name will be added to the fame table and the
                  other entries will shuffle around to accomodate him, dropping the lowest
                  from the table. The person who was then removed will have to do some more
                  work to gain his position back.

                  Fame Table
                           Mantor    4087
                            Bliss    2427
                         Madriker    2404
                            Amaya    2386
                             Saen    2299
                  ....

                  2. Legend table
                  Fame can be lost by dying or killing innocents which affects the fame table.
                  But to keep a record of those who have achieved the greatest amount of fame
                  (at any time) we created the legends table. This table only holds 10
                  entries, so the competition to get there is intense. These entries only go
                  up and never down though, so once you hit the top, you can lose all of your
                  fame and still have your name there. I have seen one player lose 5k fame and
                  go off the fame table but remain at the top of the legend table for a good 3
                  to 4 weeks. The incentive here is to be "the" top dog.

                  Name                 Class         Max Fame Gained
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  KillerRace           Ninja         11574
                  Amaya                Vampire       6589
                  Dachau               Witch         6380
                  Mantor               Warrior       6270
                  Drakkyn              ShpShftr      3550
                  ....

                  3. Pkill table
                  Individual fame and its glory is all well and good, but what if you are
                  clanned and fighting for their good name? To answer this issue, we created
                  the clan pkill table. Players earn points for pkilling others (who arent in
                  their clan) and these are collected on the pkill table. They get 1 point for
                  each 5 levels that the other plyer is above them, but a min of 1 point for
                  lower levs. This keeps the pkillers in the clans competitive.

                  Name                 Class         Pkills   Score
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  Dynasty              Thug          16       52
                  Kruza                Warrior       11       35
                  Nme                  Warrior       11       34
                  Brachah              Warrior       10       27
                  Vahl                 Warrior       8        24
                  ....

                  Eventually of course, there are going to be players who finally get to hero
                  level. We have adjusted this table so that it is totally dynamic and adds
                  players when they level rather than editing a help file to give them instant
                  feedback.

                  Hopefully, these table descriptions will give others out there ideas on
                  providing feedback for your players. Obviously, these tables are not
                  designed for a more RP mud, but we are working on a new RP world that will
                  incorporate some of these ideas.

                  Happy mudding.


                  - --------------------------------
                  Tavolir
                  Dragons Domain III (dopey.metrolan.co.nz:8888)
                  warren.powell@unisys.com

                  ------- End of Forwarded Message



                  _______________________________________________
                  MUD-Dev maillist  -  MUD-Dev@kanga.nu
                  http://www.kanga.nu/lists/listinfo/mud-dev
                header: !ruby/object:Headers
                  rmail: !ruby/object:RMail::Message
                    header: !ruby/object:RMail::Header
                      fields:
                      - !ruby/object:RMail::Header::Field
                        raw: 'From: J C Lawrence <claw@kanga.nu>'
                        name: From
                        value: J C Lawrence <claw@kanga.nu>
                      - !ruby/object:RMail::Header::Field
                        raw: 'Date: Thu, 20 Jan 2000 15:08:39 -0800'
                        name: Date
                        value: Thu, 20 Jan 2000 15:08:39 -0800
                      - !ruby/object:RMail::Header::Field
                        raw: 'Subject: [MUD-Dev] [adv-mud] What good is a hero when
                          nobody knows? (fwd)'
                        name: Subject
                        value: "[MUD-Dev] [adv-mud] What good is a hero when nobody
                          knows? (fwd)"
                      mbox_from: 
                    body: |
                      ------- Forwarded Message

                      From: "Powell, Warren" <warren.powell@nz.unisys.com>
                      To: "'adv-mud@egroups.com'" <adv-mud@egroups.com>
                      Date: Thu, 20 Jan 2000 15:46:55 -0600

                      Hero. Everybody wants to get there eventually, but who knows what they have
                      they done while getting there?

                      We (the immstaff on DD3) decided that players needed a way to keep their
                      competitive edge honed as well as providing incentive to keep playing and
                      give them goals. We also wanted to make sure that players who had achieved
                      greatness were remembered.

                      The main way in which we do this is via the folowing tables:

                      1. Fame table
                      The traditional fame table where individual players recieve fame points for
                      killing mobs (or chars) that are of a higher level than themselves. So if a
                      player kills a mob that is +10 levels he will receive 10 fame (these numbers
                      are not accurate). If he has gained enough fame to make him one of the top
                      20 fame holders in the mud, his name will be added to the fame table and the
                      other entries will shuffle around to accomodate him, dropping the lowest
                      from the table. The person who was then removed will have to do some more
                      work to gain his position back.

                      Fame Table
                               Mantor    4087
                                Bliss    2427
                             Madriker    2404
                                Amaya    2386
                                 Saen    2299
                      ....

                      2. Legend table
                      Fame can be lost by dying or killing innocents which affects the fame table.
                      But to keep a record of those who have achieved the greatest amount of fame
                      (at any time) we created the legends table. This table only holds 10
                      entries, so the competition to get there is intense. These entries only go
                      up and never down though, so once you hit the top, you can lose all of your
                      fame and still have your name there. I have seen one player lose 5k fame and
                      go off the fame table but remain at the top of the legend table for a good 3
                      to 4 weeks. The incentive here is to be "the" top dog.

                      Name                 Class         Max Fame Gained
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                      KillerRace           Ninja         11574
                      Amaya                Vampire       6589
                      Dachau               Witch         6380
                      Mantor               Warrior       6270
                      Drakkyn              ShpShftr      3550
                      ....

                      3. Pkill table
                      Individual fame and its glory is all well and good, but what if you are
                      clanned and fighting for their good name? To answer this issue, we created
                      the clan pkill table. Players earn points for pkilling others (who arent in
                      their clan) and these are collected on the pkill table. They get 1 point for
                      each 5 levels that the other plyer is above them, but a min of 1 point for
                      lower levs. This keeps the pkillers in the clans competitive.

                      Name                 Class         Pkills   Score
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                      Dynasty              Thug          16       52
                      Kruza                Warrior       11       35
                      Nme                  Warrior       11       34
                      Brachah              Warrior       10       27
                      Vahl                 Warrior       8        24
                      ....

                      Eventually of course, there are going to be players who finally get to hero
                      level. We have adjusted this table so that it is totally dynamic and adds
                      players when they level rather than editing a help file to give them instant
                      feedback.

                      Hopefully, these table descriptions will give others out there ideas on
                      providing feedback for your players. Obviously, these tables are not
                      designed for a more RP mud, but we are working on a new RP world that will
                      incorporate some of these ideas.

                      Happy mudding.


                      - --------------------------------
                      Tavolir
                      Dragons Domain III (dopey.metrolan.co.nz:8888)
                      warren.powell@unisys.com

                      ------- End of Forwarded Message



                      _______________________________________________
                      MUD-Dev maillist  -  MUD-Dev@kanga.nu
                      http://www.kanga.nu/lists/listinfo/mud-dev
                    epilogue: 
                    preamble: 
                message_id: !ruby/object:MessageId
                  raw: "[invalid or missing message id]"
                subject: !ruby/object:Subject
                  original: "[MUD-Dev] [adv-mud] What good is a hero when nobody knows?
                    (fwd)"
                from: J C Lawrence <claw@kanga.nu>
                references: []
                date: 2000-01-20 23:08:39.000000000 Z
                no_archive: false
              call_number: !ruby/object:CallNumber
                str: 000Dnts8
              source: archive
              list: !ruby/object:List
                slug: mud-dev
                name: 
                description: 
                homepage: 
                footer: 
              message_id: *273
            parent: 
            children:
            - *274
          children:
          - *275
        children:
        - *276
      children:
      - *277
    children: []
  ? &278 !ruby/object:MessageId
    raw: Jzmy0loO@generated-message-id.chibrary.org
  : &286 !ruby/object:MessageContainer
    key: *278
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Sun, 30 Jan 2000 10:06:56
          -0800\nSubject: Re: [MUD-Dev] RE: [adv-mud] What good is a hero when nobody
          knows?\n\nOn Sat, 29 Jan 2000 21:13:08 -0800 \nJ C Lawrence <claw@kanga.nu>
          wrote:\n\n>   Community -- they are a part of a society or social group,
          and\n> are needed by and valuable to that group.\n\n>   Investment -- they
          have invested effort and expertise with gains\n> that might be lost without
          attention.\n\n>   Involvement -- they are an implicit and functional part
          of the\n> world, such that both they, and the game world, are mutually\n>
          dependent and will change (possibly for the worse) without their\n> continued
          involvement.\n\n>   Participation -- they are involved in group and game-world\n>
          activities such that they are a \"member\" to an observable (to\n> them)
          extent, and thus feel a pleasant sense of obligation and\n> duty toward
          those activities.\n\n>   Value -- they value their role, its impact, and
          their\n> participation in in-game activities and the other people there.\n\nAdding:\n\n
          \ Future -- the player must have and be able to sustain the idea\nthat he
          has a future in the game, and that that future can or will\nbe be sufficiently
          interesting and different from what has done\nalready (\"more of the same\"
          is a death knell).\n\n  Mystery -- The game must retain things that are
          unknown but which\nthe player feels are knowable.  More simply, the player
          must feel\nthat there things he can still learn in the game, and that he
          will\nlike what he will learn.  The game must never become \"solved\" from\nthe
          view of the player.  Mystery is the thing that sticks people to\nthings.\n\nMy
          purpose in this list, and the reason I'd like to see them beat on\nand discussed
          here is an effort to develop a logical tool.  I'd like\nto try and arrive
          at something of a checklist such that a game\nfeature or idea can be held
          up against these items and weighed as to\nhow it benefits the basic structural
          purposes of the game.  I'm not\nlooking for recipes or formulae here, just
          some basic\ncharacteristics that we can use as tools in judgement.\n\n--\nJ
          C Lawrence                                 Home: claw@kanga.nu\n----------(*)
          \                             Other: coder@kanga.nu\n--=| A man is as sane
          as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Sun, 30 Jan 2000 10:06:56 -0800'
                name: Date
                value: Sun, 30 Jan 2000 10:06:56 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: [MUD-Dev] RE: [adv-mud] What good is a hero when
                  nobody knows?'
                name: Subject
                value: 'Re: [MUD-Dev] RE: [adv-mud] What good is a hero when nobody
                  knows?'
              mbox_from: 
            body: "On Sat, 29 Jan 2000 21:13:08 -0800 \nJ C Lawrence <claw@kanga.nu>
              wrote:\n\n>   Community -- they are a part of a society or social group,
              and\n> are needed by and valuable to that group.\n\n>   Investment --
              they have invested effort and expertise with gains\n> that might be
              lost without attention.\n\n>   Involvement -- they are an implicit and
              functional part of the\n> world, such that both they, and the game world,
              are mutually\n> dependent and will change (possibly for the worse) without
              their\n> continued involvement.\n\n>   Participation -- they are involved
              in group and game-world\n> activities such that they are a \"member\"
              to an observable (to\n> them) extent, and thus feel a pleasant sense
              of obligation and\n> duty toward those activities.\n\n>   Value -- they
              value their role, its impact, and their\n> participation in in-game
              activities and the other people there.\n\nAdding:\n\n  Future -- the
              player must have and be able to sustain the idea\nthat he has a future
              in the game, and that that future can or will\nbe be sufficiently interesting
              and different from what has done\nalready (\"more of the same\" is a
              death knell).\n\n  Mystery -- The game must retain things that are unknown
              but which\nthe player feels are knowable.  More simply, the player must
              feel\nthat there things he can still learn in the game, and that he
              will\nlike what he will learn.  The game must never become \"solved\"
              from\nthe view of the player.  Mystery is the thing that sticks people
              to\nthings.\n\nMy purpose in this list, and the reason I'd like to see
              them beat on\nand discussed here is an effort to develop a logical tool.
              \ I'd like\nto try and arrive at something of a checklist such that
              a game\nfeature or idea can be held up against these items and weighed
              as to\nhow it benefits the basic structural purposes of the game.  I'm
              not\nlooking for recipes or formulae here, just some basic\ncharacteristics
              that we can use as tools in judgement.\n\n--\nJ C Lawrence                                 Home:
              claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
              A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: [MUD-Dev] RE: [adv-mud] What good is a hero when nobody knows?'
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-30 18:06:56.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jzmy0loO
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *278
    parent: &285 !ruby/object:MessageContainer
      key: &279 !ruby/object:MessageId
        raw: 00IyQgFM@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: Ben Greear <greearb@candelatech.com>\nDate: Sat, 29 Jan 2000
            23:05:39 -0700\nSubject: Re: [MUD-Dev] RE: [adv-mud] What good is a hero
            when nobody knows?\n\nJ C Lawrence wrote:\n\n>   Participation -- they
            are involved in group and game-world\n>   activities such that they are
            a \"member\" to an observable (to\n>   them) extent, and thus feel a pleasant
            sense of obligation and\n>   duty toward those activities.\n> \n>   Value
            -- they value their role, its impact, and their\n>   participation in
            in-game activities and the other people there.\n\nOne of my favorite activities
            of all time was a Death Quest on JediMUD.\n\nBasically, seven of the most
            powerful ppl in the game paid 2mil (a bunch)\nto join a group that had
            a singular goal in mind.  A special, linear zone,\nwas set up, and populated
            with large, nasty, imm-controlled (in some cases)\ncritters.  The goal
            was very simple, get to the end.  The quest was over\nwhen there was no
            living player in the zone...  (ie clerics could summon\nin other members
            of the team back in if they had the mana, and\nweren't dead themselves.)\n\nBasically,
            almost all 100 or so of the players online were tuned to the\nquest, and
            one or two of the immortals had the sole responsibility of\n'calling'
            the quest..kinda like a football game or something!\n\nIn my two years
            of playing there, I had the good luck to be involved in\ntwo quests.  We
            completed neither of them, but I remember having more\nfun in those quests
            than anything else.\n\nAs far as I know, only one group EVER finished.
            \ They were legends...and\nnot some cheesy legend that someone could have
            just created...it was a\nreal legend told and retold by the denizens of
            the MUD, even spreading\nto usenet from time to time...\n\nSome of the
            features I think made it as good as it was:\n- There was a real cost.
            \ You didn't get back the $$, and you didn't get\n  back any experience.
            \ In addition, most players would spend a good week's\n  worth of play
            gathering potions and such in order to prepare for the quest.\n- They
            were rare, and were unique each time, because the imms set everything\n
            \ up by hand.\n- The immortals were cruel & unfair, and made no appologies
            for it. \n  You were almost guaranteed to lose, which made the chance
            of success all\n  the more desirable!\n- The entire MUD was interested
            in them.  This is probably not so much a\n  cause, as a result, but it
            was a positive feedback loop for sure.\n\nI don't think you can just re-produce
            something like this..the players have\nto be 'right', and a million other
            intangibles have to be there.  However,\nhopefully someone can extract
            an essence and carry it on in other forms...\n\nBen\n\n--\nBen Greear
            (greearb@candelatech.com)  http://scry.wanfear.com/~greear \nAuthor of
            ScryMUD:  scry.wanfear.com 4444        (Released under GPL)\nhttp://scry.wanfear.com\n\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: Ben Greear <greearb@candelatech.com>'
                  name: From
                  value: Ben Greear <greearb@candelatech.com>
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Sat, 29 Jan 2000 23:05:39 -0700'
                  name: Date
                  value: Sat, 29 Jan 2000 23:05:39 -0700
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] RE: [adv-mud] What good is a hero when
                    nobody knows?'
                  name: Subject
                  value: 'Re: [MUD-Dev] RE: [adv-mud] What good is a hero when nobody
                    knows?'
                mbox_from: 
              body: "J C Lawrence wrote:\n\n>   Participation -- they are involved
                in group and game-world\n>   activities such that they are a \"member\"
                to an observable (to\n>   them) extent, and thus feel a pleasant sense
                of obligation and\n>   duty toward those activities.\n> \n>   Value
                -- they value their role, its impact, and their\n>   participation
                in in-game activities and the other people there.\n\nOne of my favorite
                activities of all time was a Death Quest on JediMUD.\n\nBasically,
                seven of the most powerful ppl in the game paid 2mil (a bunch)\nto
                join a group that had a singular goal in mind.  A special, linear
                zone,\nwas set up, and populated with large, nasty, imm-controlled
                (in some cases)\ncritters.  The goal was very simple, get to the end.
                \ The quest was over\nwhen there was no living player in the zone...
                \ (ie clerics could summon\nin other members of the team back in if
                they had the mana, and\nweren't dead themselves.)\n\nBasically, almost
                all 100 or so of the players online were tuned to the\nquest, and
                one or two of the immortals had the sole responsibility of\n'calling'
                the quest..kinda like a football game or something!\n\nIn my two years
                of playing there, I had the good luck to be involved in\ntwo quests.
                \ We completed neither of them, but I remember having more\nfun in
                those quests than anything else.\n\nAs far as I know, only one group
                EVER finished.  They were legends...and\nnot some cheesy legend that
                someone could have just created...it was a\nreal legend told and retold
                by the denizens of the MUD, even spreading\nto usenet from time to
                time...\n\nSome of the features I think made it as good as it was:\n-
                There was a real cost.  You didn't get back the $$, and you didn't
                get\n  back any experience.  In addition, most players would spend
                a good week's\n  worth of play gathering potions and such in order
                to prepare for the quest.\n- They were rare, and were unique each
                time, because the imms set everything\n  up by hand.\n- The immortals
                were cruel & unfair, and made no appologies for it. \n  You were almost
                guaranteed to lose, which made the chance of success all\n  the more
                desirable!\n- The entire MUD was interested in them.  This is probably
                not so much a\n  cause, as a result, but it was a positive feedback
                loop for sure.\n\nI don't think you can just re-produce something
                like this..the players have\nto be 'right', and a million other intangibles
                have to be there.  However,\nhopefully someone can extract an essence
                and carry it on in other forms...\n\nBen\n\n--\nBen Greear (greearb@candelatech.com)
                \ http://scry.wanfear.com/~greear \nAuthor of ScryMUD:  scry.wanfear.com
                4444        (Released under GPL)\nhttp://scry.wanfear.com\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] RE: [adv-mud] What good is a hero when nobody
              knows?'
          from: Ben Greear <greearb@candelatech.com>
          references: []
          date: 2000-01-30 06:05:39.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: 00IyQgFM
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *279
      parent: &282 !ruby/object:MessageContainer
        key: &280 !ruby/object:MessageId
          raw: 00uTkckK@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Sat, 29 Jan 2000 21:13:08
              -0800\nSubject: Re: [MUD-Dev] RE: [adv-mud] What good is a hero when
              nobody knows?\n\nOn Fri, 21 Jan 2000 01:15:25 -0500 \nphlUID  <phluid@mindless.com>
              wrote:\n\n> How do you get players addicted to your mud? \n\nA few basic
              goals/techniques that rather overlap:\n\n  Community -- they are a part
              of a society or social group, and are\n  needed by and valuable to that
              group.\n\n  Investment -- they have invested effort and expertise with
              gains\n  that might be lost without attention.\n\n  Involvement -- they
              are an implicit and functional part of the\n  world, such that both
              they, and the game world, are mutually\n  dependent and will change
              (possibly for the worse) without their\n  continued involvement.\n\n
              \ Participation -- they are involved in group and game-world\n  activities
              such that they are a \"member\" to an observable (to\n  them) extent,
              and thus feel a pleasant sense of obligation and\n  duty toward those
              activities.\n\n  Value -- they value their role, its impact, and their\n
              \ participation in in-game activities and the other people there.\n\nHow
              you can achieve these things is various and has been an\nextensive,
              and never-ending topic here.  They are also of course a\nprimary concern
              of commercial games in their efforts to reduce churn\nand lock in players
              (and their resulting income) for extended\nperiods.\n\nI'd love to see
              some discussion and expansion on the above so that\nwe can start establishing
              some recipies.  Periodic celebrations and\nEvents are probably the only
              real recipe we've discussed here\n(thanks to Amy Jo Kim for observing
              that all societies have 'em).\n\n> What are some ideas that people have
              implemented to make players\n> just HAVE to get on and player for just
              a FEW more minutes. \n\nI suspect that that is the wrong target and
              view to approach the\nproblem with.  I would expect that a more profitable
              view would be:\n\n  What can I do to the game/game world, such that
              players value\n  their participation in the game more?\n\nYou're not
              looking for addiction, or visceral hormonal thrills.\nThose are too
              short-lived and have nasty burn out factors.  What you\nare looking
              for is the ability to establish the willing habit in\nyour players of
              playing your game.  You want them to incorporate\nyour game and its
              world as a standard and even anticipated part of\ntheir normal routine.
              \ More, you want them _coming_back_, not just\nplaying ever spare second
              they have until they find some other\nsilicon tart that winds their
              curlies even tighter than you do.\n\n> I've read an excellent paper
              on the subject of addiction from\n> Amit's Game Programming Resources
              (no link offhand)...\n\nThere's a link off the Library at Kanga.Nu.\n\n>
              ... and it seems to me that the more players that you can get\n> addicted,
              the more stable your playerbase is and the more free\n> advertising
              you are getting. \n\nPlayer count is obviously important.  There is
              definitely a\n\"critical mass\" required which seems to vary in magnitude
              for each\ngame and the size of its target public.  \n\nI would however
              look at it this way:\n\n  People play MIST again, again, and again.
              \ They play it just to\nwalk thru the scenery, to appreciate some of
              the craft that went\ninto it, and, I suspect, to re-experience the memory
              of the wonder\nfrom the first time they played it.\n\n  People play
              Quake for a while, even obsessively, and then \"get\nsick of it\", and
              go do something else.  \n\nObStory: I got Quake-World set up here under
              Linux and have been\nmessing with the various Team Fortress variants
              (I have the marked\nadvantage of being a definite LPB on the server
              I haunt -- my\ntypical ping is between 30 and 80).  It took about a
              week of\noccassional playing however before I came to a simple conclusion:\nI'm
              tired of 2fort5 and variants.  I'll now only play more\ninteresting
              maps like Dune, Tater, CanalZone, Canyon, etc.  I have\nno doubt that
              in another week or so I'll be burnt out on those, and\nwill abandone
              QuakeWorld.  \n\nMUDs need longer lived players than a couple weeks.\n\n--\nJ
              C Lawrence                                 Home: claw@kanga.nu\n----------(*)
              \                             Other: coder@kanga.nu\n--=| A man is as
              sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: J C Lawrence <claw@kanga.nu>'
                    name: From
                    value: J C Lawrence <claw@kanga.nu>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Sat, 29 Jan 2000 21:13:08 -0800'
                    name: Date
                    value: Sat, 29 Jan 2000 21:13:08 -0800
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] RE: [adv-mud] What good is a hero
                      when nobody knows?'
                    name: Subject
                    value: 'Re: [MUD-Dev] RE: [adv-mud] What good is a hero when nobody
                      knows?'
                  mbox_from: 
                body: "On Fri, 21 Jan 2000 01:15:25 -0500 \nphlUID  <phluid@mindless.com>
                  wrote:\n\n> How do you get players addicted to your mud? \n\nA few
                  basic goals/techniques that rather overlap:\n\n  Community -- they
                  are a part of a society or social group, and are\n  needed by and
                  valuable to that group.\n\n  Investment -- they have invested effort
                  and expertise with gains\n  that might be lost without attention.\n\n
                  \ Involvement -- they are an implicit and functional part of the\n
                  \ world, such that both they, and the game world, are mutually\n
                  \ dependent and will change (possibly for the worse) without their\n
                  \ continued involvement.\n\n  Participation -- they are involved
                  in group and game-world\n  activities such that they are a \"member\"
                  to an observable (to\n  them) extent, and thus feel a pleasant sense
                  of obligation and\n  duty toward those activities.\n\n  Value --
                  they value their role, its impact, and their\n  participation in
                  in-game activities and the other people there.\n\nHow you can achieve
                  these things is various and has been an\nextensive, and never-ending
                  topic here.  They are also of course a\nprimary concern of commercial
                  games in their efforts to reduce churn\nand lock in players (and
                  their resulting income) for extended\nperiods.\n\nI'd love to see
                  some discussion and expansion on the above so that\nwe can start
                  establishing some recipies.  Periodic celebrations and\nEvents are
                  probably the only real recipe we've discussed here\n(thanks to Amy
                  Jo Kim for observing that all societies have 'em).\n\n> What are
                  some ideas that people have implemented to make players\n> just
                  HAVE to get on and player for just a FEW more minutes. \n\nI suspect
                  that that is the wrong target and view to approach the\nproblem
                  with.  I would expect that a more profitable view would be:\n\n
                  \ What can I do to the game/game world, such that players value\n
                  \ their participation in the game more?\n\nYou're not looking for
                  addiction, or visceral hormonal thrills.\nThose are too short-lived
                  and have nasty burn out factors.  What you\nare looking for is the
                  ability to establish the willing habit in\nyour players of playing
                  your game.  You want them to incorporate\nyour game and its world
                  as a standard and even anticipated part of\ntheir normal routine.
                  \ More, you want them _coming_back_, not just\nplaying ever spare
                  second they have until they find some other\nsilicon tart that winds
                  their curlies even tighter than you do.\n\n> I've read an excellent
                  paper on the subject of addiction from\n> Amit's Game Programming
                  Resources (no link offhand)...\n\nThere's a link off the Library
                  at Kanga.Nu.\n\n> ... and it seems to me that the more players that
                  you can get\n> addicted, the more stable your playerbase is and
                  the more free\n> advertising you are getting. \n\nPlayer count is
                  obviously important.  There is definitely a\n\"critical mass\" required
                  which seems to vary in magnitude for each\ngame and the size of
                  its target public.  \n\nI would however look at it this way:\n\n
                  \ People play MIST again, again, and again.  They play it just to\nwalk
                  thru the scenery, to appreciate some of the craft that went\ninto
                  it, and, I suspect, to re-experience the memory of the wonder\nfrom
                  the first time they played it.\n\n  People play Quake for a while,
                  even obsessively, and then \"get\nsick of it\", and go do something
                  else.  \n\nObStory: I got Quake-World set up here under Linux and
                  have been\nmessing with the various Team Fortress variants (I have
                  the marked\nadvantage of being a definite LPB on the server I haunt
                  -- my\ntypical ping is between 30 and 80).  It took about a week
                  of\noccassional playing however before I came to a simple conclusion:\nI'm
                  tired of 2fort5 and variants.  I'll now only play more\ninteresting
                  maps like Dune, Tater, CanalZone, Canyon, etc.  I have\nno doubt
                  that in another week or so I'll be burnt out on those, and\nwill
                  abandone QuakeWorld.  \n\nMUDs need longer lived players than a
                  couple weeks.\n\n--\nJ C Lawrence                                 Home:
                  claw@kanga.nu\n----------(*)                              Other:
                  coder@kanga.nu\n--=| A man is as sane as he is dangerous to his
                  environment |=--\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] RE: [adv-mud] What good is a hero when nobody
                knows?'
            from: J C Lawrence <claw@kanga.nu>
            references: []
            date: 2000-01-30 05:13:08.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 00uTkckK
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *280
        parent: &284 !ruby/object:MessageContainer
          key: &281 !ruby/object:MessageId
            raw: JzBboAme@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: \"phlUID\" <phluid@mindless.com>\nDate: Fri, 21 Jan 2000
                01:15:25 -0500\nSubject: [MUD-Dev] RE: [adv-mud] What good is a hero
                when nobody knows?\n\nWarren Powell wrote:\n> The main way in which
                we do this is via the folowing tables:\n> \n> 1. Fame table\n\n  Spellbound
                will have functionality such as this by using the 'top'\ncommand.
                This idea was adapted from ElendorMUSH and Abandoned Reality.\nThe
                'top' command allows players to view tables where they can compete\nfor
                the highest ranking. This builds a certain competetive edge, and\nthe
                more varied your tables are, the more addicted players will be to\ntrying
                to show up the 'other guy'. A small list of tops are:\n - Top online
                time. Who is on the most?\n - Top pkiller. Who is that pkilling bastard?\n
                - Top experience/remorts/level. Who is a powerleveller?\n - Top fame.
                (Fame is akin to karma, favor, quest points, etc).\n - Top races.\n
                - Top <class>. Who are the best mages? Warriors? Thieves?\n - Top
                contributions. For builders. Who has built the most rooms? Areas?\n
                - Top postings. Who has posted the most to the bulletin boards?\n
                - Top explorer. Who has explored most of the game world?\n - Top money
                hoarder. Who is Bill Gates?\n - .. the list goes on and on.\n\n  This
                brings up another subject that I am interested in researching.\nHow
                do you get players addicted to your mud? What are some ideas that\npeople
                have implemented to make players just HAVE to get on and player\nfor
                just a FEW more minutes.. I've read an excellent paper on the\nsubject
                of addiction from Amit's Game Programming Resources (no link\noffhand),
                and it seems to me that the more players that you can get\naddicted,
                the more stable your playerbase is and the more free\nadvertising
                you are getting. (The more devoted players, the more they\nwill want
                to tell their friends about your MUD. Word of mouth is\ninvaluable
                in the Mudding community.)\n\nAmos Wetherbee,\nThe Spellbound Project\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: "phlUID" <phluid@mindless.com>'
                      name: From
                      value: '"phlUID" <phluid@mindless.com>'
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Fri, 21 Jan 2000 01:15:25 -0500'
                      name: Date
                      value: Fri, 21 Jan 2000 01:15:25 -0500
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: [MUD-Dev] RE: [adv-mud] What good is a hero when
                        nobody knows?'
                      name: Subject
                      value: "[MUD-Dev] RE: [adv-mud] What good is a hero when nobody
                        knows?"
                    mbox_from: 
                  body: "Warren Powell wrote:\n> The main way in which we do this
                    is via the folowing tables:\n> \n> 1. Fame table\n\n  Spellbound
                    will have functionality such as this by using the 'top'\ncommand.
                    This idea was adapted from ElendorMUSH and Abandoned Reality.\nThe
                    'top' command allows players to view tables where they can compete\nfor
                    the highest ranking. This builds a certain competetive edge, and\nthe
                    more varied your tables are, the more addicted players will be
                    to\ntrying to show up the 'other guy'. A small list of tops are:\n
                    - Top online time. Who is on the most?\n - Top pkiller. Who is
                    that pkilling bastard?\n - Top experience/remorts/level. Who is
                    a powerleveller?\n - Top fame. (Fame is akin to karma, favor,
                    quest points, etc).\n - Top races.\n - Top <class>. Who are the
                    best mages? Warriors? Thieves?\n - Top contributions. For builders.
                    Who has built the most rooms? Areas?\n - Top postings. Who has
                    posted the most to the bulletin boards?\n - Top explorer. Who
                    has explored most of the game world?\n - Top money hoarder. Who
                    is Bill Gates?\n - .. the list goes on and on.\n\n  This brings
                    up another subject that I am interested in researching.\nHow do
                    you get players addicted to your mud? What are some ideas that\npeople
                    have implemented to make players just HAVE to get on and player\nfor
                    just a FEW more minutes.. I've read an excellent paper on the\nsubject
                    of addiction from Amit's Game Programming Resources (no link\noffhand),
                    and it seems to me that the more players that you can get\naddicted,
                    the more stable your playerbase is and the more free\nadvertising
                    you are getting. (The more devoted players, the more they\nwill
                    want to tell their friends about your MUD. Word of mouth is\ninvaluable
                    in the Mudding community.)\n\nAmos Wetherbee,\nThe Spellbound
                    Project\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: "[MUD-Dev] RE: [adv-mud] What good is a hero when nobody
                  knows?"
              from: phlUID <phluid@mindless.com>
              references: []
              date: 2000-01-21 06:15:25.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: JzBboAme
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *281
          parent: 
          children:
          - *282
          - &428 !ruby/object:MessageContainer
            key: &283 !ruby/object:MessageId
              raw: 00IyQgF6@generated-message-id.chibrary.org
            value: !ruby/object:Message
              email: !ruby/object:Email
                raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Thu, 20 Jan 2000 15:34:24
                  -0800\nSubject: [MUD-Dev] Re: [adv-mud] What good is a hero when
                  nobody knows?\n\nOn Thu, 20 Jan 2000 15:46:55 -0600 \nPowell, Warren
                  <warren.powell@nz.unisys.com> wrote:\n\n<<Note: I crossed your this
                  original of the post I'm replying to,\nand this reply to MUD-Dev
                  as this is a not infrequent topic there.>>\n\n> Hero. Everybody
                  wants to get there eventually, but who knows what\n> they have they
                  done while getting there?\n\nAhem.  This is the goal of some players,
                  but it is unique to a very\nsmall subsection of Bartle's card suits,
                  and in turn is unique to a\nparticular form of goal-oriented game.
                  \ Its not an RP vs <other>\nthing, its a question of goals and purposes.\n\nAs
                  a case in point, while I do play goal oriented combat based MUDs,\nmy
                  goal has never been to becomes famous or particularly well known.\nI
                  don't care what my stats or level are, just what I can do within\nthe
                  game.  If stats are necessary to \"knowing\" a particular object,\ntrick,
                  or area, then accumulate stats I will.  If they're not\nnecessary,
                  then I don't give a damn.  The typical result is that\nI'll usually
                  know how to make \"top level\" in an absolute minimum of\ntime,
                  but will then never bother to as there are more interesting\ntargets
                  to pursue.\n\nIt may be worth your while to broaden the scope of
                  your target\naudience.\n\n> We also wanted to make sure that players
                  who had achieved\n> greatness were remembered.\n\nYou can also extend
                  this as a community building exercise,\nintituting events, ceremonies,
                  and other ritual trivia about\n\"famous\" acts.  As Amy Jo Kim (?)
                  once observed, there are no\nsocieties without regular celebrations,
                  special days, or other\n\"social events\".  \n\n> The main way in
                  which we do this is via the folowing tables:\n\n> 1. Fame table
                  The traditional fame table where individual players\n> recieve fame
                  points for killing mobs (or chars) that are of a\n> higher level
                  than themselves. So if a player kills a mob that is\n> +10 levels
                  he will receive 10 fame (these numbers are not\n> accurate). If
                  he has gained enough fame to make him one of the top\n> 20 fame
                  holders in the mud, his name will be added to the fame\n> table
                  and the other entries will shuffle around to accomodate him,\n>
                  dropping the lowest from the table. The person who was then\n> removed
                  will have to do some more work to gain his position back.\n\nI'd
                  be tempted to give people with places on the fame table\nsomething
                  special; something to signify their status.  It could be\nas simple
                  as as a desc mod, a fame-table-unique object which does\nsomething
                  interesting but has no general in-game use, a couple extra\nspiffy
                  commands that do something other's can't do, etc.  You would\nthen
                  of course remove said <whatever> when the player left the\ntable.\n\n--\nJ
                  C Lawrence                                 Home: claw@kanga.nu\n----------(*)
                  \                             Other: coder@kanga.nu\n--=| A man
                  is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                header: !ruby/object:Headers
                  rmail: !ruby/object:RMail::Message
                    header: !ruby/object:RMail::Header
                      fields:
                      - !ruby/object:RMail::Header::Field
                        raw: 'From: J C Lawrence <claw@kanga.nu>'
                        name: From
                        value: J C Lawrence <claw@kanga.nu>
                      - !ruby/object:RMail::Header::Field
                        raw: 'Date: Thu, 20 Jan 2000 15:34:24 -0800'
                        name: Date
                        value: Thu, 20 Jan 2000 15:34:24 -0800
                      - !ruby/object:RMail::Header::Field
                        raw: 'Subject: [MUD-Dev] Re: [adv-mud] What good is a hero
                          when nobody knows?'
                        name: Subject
                        value: "[MUD-Dev] Re: [adv-mud] What good is a hero when nobody
                          knows?"
                      mbox_from: 
                    body: "On Thu, 20 Jan 2000 15:46:55 -0600 \nPowell, Warren <warren.powell@nz.unisys.com>
                      wrote:\n\n<<Note: I crossed your this original of the post I'm
                      replying to,\nand this reply to MUD-Dev as this is a not infrequent
                      topic there.>>\n\n> Hero. Everybody wants to get there eventually,
                      but who knows what\n> they have they done while getting there?\n\nAhem.
                      \ This is the goal of some players, but it is unique to a very\nsmall
                      subsection of Bartle's card suits, and in turn is unique to
                      a\nparticular form of goal-oriented game.  Its not an RP vs
                      <other>\nthing, its a question of goals and purposes.\n\nAs
                      a case in point, while I do play goal oriented combat based
                      MUDs,\nmy goal has never been to becomes famous or particularly
                      well known.\nI don't care what my stats or level are, just what
                      I can do within\nthe game.  If stats are necessary to \"knowing\"
                      a particular object,\ntrick, or area, then accumulate stats
                      I will.  If they're not\nnecessary, then I don't give a damn.
                      \ The typical result is that\nI'll usually know how to make
                      \"top level\" in an absolute minimum of\ntime, but will then
                      never bother to as there are more interesting\ntargets to pursue.\n\nIt
                      may be worth your while to broaden the scope of your target\naudience.\n\n>
                      We also wanted to make sure that players who had achieved\n>
                      greatness were remembered.\n\nYou can also extend this as a
                      community building exercise,\nintituting events, ceremonies,
                      and other ritual trivia about\n\"famous\" acts.  As Amy Jo Kim
                      (?) once observed, there are no\nsocieties without regular celebrations,
                      special days, or other\n\"social events\".  \n\n> The main way
                      in which we do this is via the folowing tables:\n\n> 1. Fame
                      table The traditional fame table where individual players\n>
                      recieve fame points for killing mobs (or chars) that are of
                      a\n> higher level than themselves. So if a player kills a mob
                      that is\n> +10 levels he will receive 10 fame (these numbers
                      are not\n> accurate). If he has gained enough fame to make him
                      one of the top\n> 20 fame holders in the mud, his name will
                      be added to the fame\n> table and the other entries will shuffle
                      around to accomodate him,\n> dropping the lowest from the table.
                      The person who was then\n> removed will have to do some more
                      work to gain his position back.\n\nI'd be tempted to give people
                      with places on the fame table\nsomething special; something
                      to signify their status.  It could be\nas simple as as a desc
                      mod, a fame-table-unique object which does\nsomething interesting
                      but has no general in-game use, a couple extra\nspiffy commands
                      that do something other's can't do, etc.  You would\nthen of
                      course remove said <whatever> when the player left the\ntable.\n\n--\nJ
                      C Lawrence                                 Home: claw@kanga.nu\n----------(*)
                      \                             Other: coder@kanga.nu\n--=| A
                      man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    epilogue: 
                    preamble: 
                message_id: !ruby/object:MessageId
                  raw: "[invalid or missing message id]"
                subject: !ruby/object:Subject
                  original: "[MUD-Dev] Re: [adv-mud] What good is a hero when nobody
                    knows?"
                from: J C Lawrence <claw@kanga.nu>
                references: []
                date: 2000-01-20 23:34:24.000000000 Z
                no_archive: false
              call_number: !ruby/object:CallNumber
                str: 00IyQgF6
              source: archive
              list: !ruby/object:List
                slug: mud-dev
                name: 
                description: 
                homepage: 
                footer: 
              message_id: *283
            parent: *284
            children: []
        children:
        - *285
      children:
      - *286
    children: []
  ? &287 !ruby/object:MessageId
    raw: JzUMT9Ye@generated-message-id.chibrary.org
  : &291 !ruby/object:MessageContainer
    key: *287
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: Richard Woolcock <KaVir@dial.pipex.com>\nDate: Wed, 19 Jan 2000
          00:26:29 -0800\nSubject: Re: [MUD-Dev] Valhalla license?\n\nCFrancy@aol.com
          wrote:\n> \n> Do any of you have any advice to give on my situation:\n>
          Im looking to have a codebase to use on a mud without restriction\n> commercially.
          \ Valhalla (derivation of Diku , www.valhalla.com ) offers a\n> business
          lisence for 900 dollars.  Does anyone think I'd be better off buying\n>
          Valhalla than attempting to create a codebase from scrath with 4 other\n>
          coders?\n\nPerhaps you could give us some information on the requirements
          of your\nmud?  It's hard to suggest a solution without knowing the problem.\n\nIn
          short (as another poster already mentioned) it's probably better to\nuse
          Valhalla, unless you've something very specific in mind.  However\nthat
          really is an over-generalised answer.\n\nKaVir.\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Richard Woolcock <KaVir@dial.pipex.com>'
                name: From
                value: Richard Woolcock <KaVir@dial.pipex.com>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Wed, 19 Jan 2000 00:26:29 -0800'
                name: Date
                value: Wed, 19 Jan 2000 00:26:29 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: [MUD-Dev] Valhalla license?'
                name: Subject
                value: 'Re: [MUD-Dev] Valhalla license?'
              mbox_from: 
            body: "CFrancy@aol.com wrote:\n> \n> Do any of you have any advice to
              give on my situation:\n> Im looking to have a codebase to use on a mud
              without restriction\n> commercially.  Valhalla (derivation of Diku ,
              www.valhalla.com ) offers a\n> business lisence for 900 dollars.  Does
              anyone think I'd be better off buying\n> Valhalla than attempting to
              create a codebase from scrath with 4 other\n> coders?\n\nPerhaps you
              could give us some information on the requirements of your\nmud?  It's
              hard to suggest a solution without knowing the problem.\n\nIn short
              (as another poster already mentioned) it's probably better to\nuse Valhalla,
              unless you've something very specific in mind.  However\nthat really
              is an over-generalised answer.\n\nKaVir.\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: [MUD-Dev] Valhalla license?'
        from: Richard Woolcock <KaVir@dial.pipex.com>
        references: []
        date: 2000-01-19 08:26:29.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: JzUMT9Ye
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *287
    parent: &290 !ruby/object:MessageContainer
      key: &288 !ruby/object:MessageId
        raw: JzBblyOO@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: Matthew Mihaly <diablo@best.com>\nDate: Tue, 18 Jan 2000 03:49:34
            -0800 (PST)\nSubject: Re: [MUD-Dev] Valhalla license?\n\nOn Tue, 18 Jan
            2000 CFrancy@aol.com wrote:\n\n> Do any of you have any advice to give
            on my situation:\n> Im looking to have a codebase to use on a mud without
            restriction \n> commercially.  Valhalla (derivation of Diku , www.valhalla.com
            ) offers a \n> business lisence for 900 dollars.  Does anyone think I'd
            be better off buying \n> Valhalla than attempting to create a codebase
            from scrath with 4 other \n> coders? \n> \n> Thanks beforehand for any
            advice given.\n> CFrancy@aol.com\n\nAre you kidding me? Unless you intend
            to license/sell your language for\nmoney after you develop it, and providing
            that Valhalla fits your needs,\nyou'd be crazy to develop your own. The
            time you would put into it is\nworth way more than $900. Heck, if the
            four of you just went and got jobs\nat McDonalds for a week, at $6/hour,
            you'd have $960 before taxes. A week\nand a half of that and you are sorted.
            And, I'd imagine that if you are\nconsidering writing your own codebase,
            you have skills that will get you\npaid a lot more than some burger-flipping
            job. \n\nBuy the license, spend your time developing the game. (Again,
            provided\nValhalla fits your needs. I know nothing about it.)\n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: Matthew Mihaly <diablo@best.com>'
                  name: From
                  value: Matthew Mihaly <diablo@best.com>
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Tue, 18 Jan 2000 03:49:34 -0800 (PST)'
                  name: Date
                  value: Tue, 18 Jan 2000 03:49:34 -0800 (PST)
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] Valhalla license?'
                  name: Subject
                  value: 'Re: [MUD-Dev] Valhalla license?'
                mbox_from: 
              body: "On Tue, 18 Jan 2000 CFrancy@aol.com wrote:\n\n> Do any of you
                have any advice to give on my situation:\n> Im looking to have a codebase
                to use on a mud without restriction \n> commercially.  Valhalla (derivation
                of Diku , www.valhalla.com ) offers a \n> business lisence for 900
                dollars.  Does anyone think I'd be better off buying \n> Valhalla
                than attempting to create a codebase from scrath with 4 other \n>
                coders? \n> \n> Thanks beforehand for any advice given.\n> CFrancy@aol.com\n\nAre
                you kidding me? Unless you intend to license/sell your language for\nmoney
                after you develop it, and providing that Valhalla fits your needs,\nyou'd
                be crazy to develop your own. The time you would put into it is\nworth
                way more than $900. Heck, if the four of you just went and got jobs\nat
                McDonalds for a week, at $6/hour, you'd have $960 before taxes. A
                week\nand a half of that and you are sorted. And, I'd imagine that
                if you are\nconsidering writing your own codebase, you have skills
                that will get you\npaid a lot more than some burger-flipping job.
                \n\nBuy the license, spend your time developing the game. (Again,
                provided\nValhalla fits your needs. I know nothing about it.)\n\n--matt\n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] Valhalla license?'
          from: Matthew Mihaly <diablo@best.com>
          references: []
          date: 2000-01-18 11:49:34.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: JzBblyOO
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *288
      parent: &350 !ruby/object:MessageContainer
        key: &289 !ruby/object:MessageId
          raw: Jzn787HM@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: CFrancy@aol.com\nDate: Tue, 18 Jan 2000 02:18:15 EST\nSubject:
              [MUD-Dev] Valhalla license?\n\nDo any of you have any advice to give
              on my situation:\nIm looking to have a codebase to use on a mud without
              restriction \ncommercially.  Valhalla (derivation of Diku , www.valhalla.com
              ) offers a \nbusiness lisence for 900 dollars.  Does anyone think I'd
              be better off buying \nValhalla than attempting to create a codebase
              from scrath with 4 other \ncoders? \n\nThanks beforehand for any advice
              given.\nCFrancy@aol.com\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: CFrancy@aol.com'
                    name: From
                    value: CFrancy@aol.com
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Tue, 18 Jan 2000 02:18:15 EST'
                    name: Date
                    value: Tue, 18 Jan 2000 02:18:15 EST
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: [MUD-Dev] Valhalla license?'
                    name: Subject
                    value: "[MUD-Dev] Valhalla license?"
                  mbox_from: 
                body: "Do any of you have any advice to give on my situation:\nIm
                  looking to have a codebase to use on a mud without restriction \ncommercially.
                  \ Valhalla (derivation of Diku , www.valhalla.com ) offers a \nbusiness
                  lisence for 900 dollars.  Does anyone think I'd be better off buying
                  \nValhalla than attempting to create a codebase from scrath with
                  4 other \ncoders? \n\nThanks beforehand for any advice given.\nCFrancy@aol.com\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: "[MUD-Dev] Valhalla license?"
            from: CFrancy@aol.com
            references: []
            date: 2000-01-18 07:18:15.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: Jzn787HM
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *289
        parent: 
        children:
        - *290
      children:
      - *291
    children: []
  ? &292 !ruby/object:MessageId
    raw: JzUDNyLo@generated-message-id.chibrary.org
  : &302 !ruby/object:MessageContainer
    key: *292
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Tue, 18 Jan 2000 01:08:08
          -0800\nSubject: Re: [MUD-Dev] concerning tokenization, compilation, performance,
          and other fun stuff.\n\nOn Mon, 03 Jan 2000 14:47:11 +0100 \nolag  <Ola>
          wrote:\n\n> Anyone noticing an emerging pattern here? Every autumn we have
          a\n> PK debate (endless, repetitive and mostly pointless, I might add)\n>
          and now we'll have an annual dynamic linking project around new\n> year...
          \n\nUmm yes.  And yes, they are repetitive, tiresome, and nearly\npointless
          every time, the key point being \"nearly\".  Every time we\ngo around those
          old merry go rounds something new seems to fall of.\nThat single fact tells
          me that one of two things is true:\n\n  a) We're approaching the bottom
          of the bucket\n\n  b) We're about to make a breakthrough\n\nI'd rather beat
          that dead horse a few more times before giving up on \n#B.\n\n--\nJ C Lawrence
          \                                Home: claw@kanga.nu\n----------(*)                              Other:
          coder@kanga.nu\n--=| A man is as sane as he is dangerous to his environment
          |=--\n\n\n_______________________________________________\nMUD-Dev maillist
          \ -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Tue, 18 Jan 2000 01:08:08 -0800'
                name: Date
                value: Tue, 18 Jan 2000 01:08:08 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: [MUD-Dev] concerning tokenization, compilation,
                  performance, and other fun stuff.'
                name: Subject
                value: 'Re: [MUD-Dev] concerning tokenization, compilation, performance,
                  and other fun stuff.'
              mbox_from: 
            body: "On Mon, 03 Jan 2000 14:47:11 +0100 \nolag  <Ola> wrote:\n\n> Anyone
              noticing an emerging pattern here? Every autumn we have a\n> PK debate
              (endless, repetitive and mostly pointless, I might add)\n> and now we'll
              have an annual dynamic linking project around new\n> year... \n\nUmm
              yes.  And yes, they are repetitive, tiresome, and nearly\npointless
              every time, the key point being \"nearly\".  Every time we\ngo around
              those old merry go rounds something new seems to fall of.\nThat single
              fact tells me that one of two things is true:\n\n  a) We're approaching
              the bottom of the bucket\n\n  b) We're about to make a breakthrough\n\nI'd
              rather beat that dead horse a few more times before giving up on \n#B.\n\n--\nJ
              C Lawrence                                 Home: claw@kanga.nu\n----------(*)
              \                             Other: coder@kanga.nu\n--=| A man is as
              sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: [MUD-Dev] concerning tokenization, compilation, performance,
            and other fun stuff.'
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-18 09:08:08.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: JzUDNyLo
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *292
    parent: &300 !ruby/object:MessageContainer
      key: &293 !ruby/object:MessageId
        raw: 00uTkck4@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: Ola Fosheim Gr��stad <olag@ifi.uio.no>\nDate: Mon, 03 Jan 2000
            14:47:11 +0100\nSubject: Re: [MUD-Dev] concerning tokenization, compilation,
            performance, and other fun stuff.\n\nNate Cain wrote:\r\n> techniques.
            \ It seems to me (And I am no authority as I have never\r\n> implemented
            a full driver, library, or compiler for any complex\r\n> language) that
            the optimal solution for programming mud objects would be\r\n> to have
            all of the objects be dynamicly linked libraries of some sort.\r\n\r\nI'm
            no authority either, and my personal MUD projects never take off,\r\nalthough
            I'd claim they all have implied novel new ideas. (hhmm.. that\r\ncould
            be the reason). Still, I have to say this:\r\n\r\n*SCREAM* *FAINT* *BANG*
            *BANG* *BANG*\r\n\r\nAnyone noticing an emerging pattern here? Every autumn
            we have a PK\r\ndebate (endless, repetitive and mostly pointless, I might
            add) and now\r\nwe'll have an annual dynamic linking project around new
            year... Not your\r\nfault of course, it seems to be a geek instinct, assumed
            to be triggered\r\nby excessive exposure to firecrackers. Kill in the
            autumn, link in\r\nJanuary.\r\n\r\nI'm not going to try to convince anyone
            that there are other more basic\r\nchallenges that needs to be addressed
            in order to advance the state of\r\nthe art, because that has proved to
            be very time-consuming and\r\ncounterproductive in the past. \r\n\r\nSo,
            why not aim for something more flexible, like a JIT?  There could be\r\nsome
            problems with your OS of choice and self modifying code, but as\r\nthere
            are open sourced approaches to look at (kaffe?) it could be a\r\nreasonable
            learning experience? If you limit yourself to the most basic\r\noperators
            on strings and integers, plus conditionals and function calls\r\nthen
            it could actually be done in a fair amount of time. You don't even\r\nhave
            to generate particularly good code in order to beat an interpreter!\r\nOne
            advantage is that you can prune out constant conditionals and\r\nprovide
            many \"code snippets\" for the same method optimized for different\r\ncircumstances.
            That's actually how you optimize a graphics driver, so\r\nyou can in theory
            get faster code than that generated by a regular\r\ncompiler (this is
            because the conditions are not known until run-time).\r\n\r\nIf you embark
            on this, then I would suggest using pc-relative code to\r\nmake your life
            easier in the start...\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: Ola Fosheim Gr��stad <olag@ifi.uio.no>'
                  name: From
                  value: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Mon, 03 Jan 2000 14:47:11 +0100'
                  name: Date
                  value: Mon, 03 Jan 2000 14:47:11 +0100
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] concerning tokenization, compilation,
                    performance, and other fun stuff.'
                  name: Subject
                  value: 'Re: [MUD-Dev] concerning tokenization, compilation, performance,
                    and other fun stuff.'
                mbox_from: 
              body: "Nate Cain wrote:\r\n> techniques.  It seems to me (And I am no
                authority as I have never\r\n> implemented a full driver, library,
                or compiler for any complex\r\n> language) that the optimal solution
                for programming mud objects would be\r\n> to have all of the objects
                be dynamicly linked libraries of some sort.\r\n\r\nI'm no authority
                either, and my personal MUD projects never take off,\r\nalthough I'd
                claim they all have implied novel new ideas. (hhmm.. that\r\ncould
                be the reason). Still, I have to say this:\r\n\r\n*SCREAM* *FAINT*
                *BANG* *BANG* *BANG*\r\n\r\nAnyone noticing an emerging pattern here?
                Every autumn we have a PK\r\ndebate (endless, repetitive and mostly
                pointless, I might add) and now\r\nwe'll have an annual dynamic linking
                project around new year... Not your\r\nfault of course, it seems to
                be a geek instinct, assumed to be triggered\r\nby excessive exposure
                to firecrackers. Kill in the autumn, link in\r\nJanuary.\r\n\r\nI'm
                not going to try to convince anyone that there are other more basic\r\nchallenges
                that needs to be addressed in order to advance the state of\r\nthe
                art, because that has proved to be very time-consuming and\r\ncounterproductive
                in the past. \r\n\r\nSo, why not aim for something more flexible,
                like a JIT?  There could be\r\nsome problems with your OS of choice
                and self modifying code, but as\r\nthere are open sourced approaches
                to look at (kaffe?) it could be a\r\nreasonable learning experience?
                If you limit yourself to the most basic\r\noperators on strings and
                integers, plus conditionals and function calls\r\nthen it could actually
                be done in a fair amount of time. You don't even\r\nhave to generate
                particularly good code in order to beat an interpreter!\r\nOne advantage
                is that you can prune out constant conditionals and\r\nprovide many
                \"code snippets\" for the same method optimized for different\r\ncircumstances.
                That's actually how you optimize a graphics driver, so\r\nyou can
                in theory get faster code than that generated by a regular\r\ncompiler
                (this is because the conditions are not known until run-time).\r\n\r\nIf
                you embark on this, then I would suggest using pc-relative code to\r\nmake
                your life easier in the start...\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] concerning tokenization, compilation, performance,
              and other fun stuff.'
          from: Ola Fosheim Gr��stad <olag@ifi.uio.no>
          references: []
          date: 2000-01-03 13:47:11.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: 00uTkck4
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *293
      parent: &296 !ruby/object:MessageContainer
        key: &294 !ruby/object:MessageId
          raw: 00uTmp8a@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: |
              From: Nate Cain <nate@cotdom.com>
              Date: Sun, 02 Jan 2000 17:35:39 -0500
              Subject: [MUD-Dev] concerning tokenization, compilation, performance, and other fun stuff.

              There has been a lot of talk recently, on this list, about tokenization,
              parsing, compilation, and virtual machines for in-game languages.  Also,
              there has been some talk about performance issues of these various
              techniques.  It seems to me (And I am no authority as I have never
              implemented a full driver, library, or compiler for any complex
              language) that the optimal solution for programming mud objects would be
              to have all of the objects be dynamicly linked libraries of some sort.

              This would have many advantages over other methods.  The most notable of
              these would be speed.  Objects would be compiled to native machine code,
              and would run directly on the processor.  Also, these objects could very
              quickly and easily be loaded and unloaded as well.  The objects could be
              written in any language for which there was a compiler available for the
              target OS, and could, potentially, allow objects to have access to
              system/os functions that would make objects able to do some very cool
              things.

              This sort of system could also be implemented very easily, and could
              also very easily be multithreaded.  It's a perfect use for the COM
              model, or ActiveX... if you want to go that route.  :-)

              Has anyone tried this sort of thing?  Are there any docs/papers out
              there on how such a system might work?  if no-one has done it yet, is
              anyone willing to help out? ;-)

              --Nate



              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: Nate Cain <nate@cotdom.com>'
                    name: From
                    value: Nate Cain <nate@cotdom.com>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Sun, 02 Jan 2000 17:35:39 -0500'
                    name: Date
                    value: Sun, 02 Jan 2000 17:35:39 -0500
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: [MUD-Dev] concerning tokenization, compilation,
                      performance, and other fun stuff.'
                    name: Subject
                    value: "[MUD-Dev] concerning tokenization, compilation, performance,
                      and other fun stuff."
                  mbox_from: 
                body: |
                  There has been a lot of talk recently, on this list, about tokenization,
                  parsing, compilation, and virtual machines for in-game languages.  Also,
                  there has been some talk about performance issues of these various
                  techniques.  It seems to me (And I am no authority as I have never
                  implemented a full driver, library, or compiler for any complex
                  language) that the optimal solution for programming mud objects would be
                  to have all of the objects be dynamicly linked libraries of some sort.

                  This would have many advantages over other methods.  The most notable of
                  these would be speed.  Objects would be compiled to native machine code,
                  and would run directly on the processor.  Also, these objects could very
                  quickly and easily be loaded and unloaded as well.  The objects could be
                  written in any language for which there was a compiler available for the
                  target OS, and could, potentially, allow objects to have access to
                  system/os functions that would make objects able to do some very cool
                  things.

                  This sort of system could also be implemented very easily, and could
                  also very easily be multithreaded.  It's a perfect use for the COM
                  model, or ActiveX... if you want to go that route.  :-)

                  Has anyone tried this sort of thing?  Are there any docs/papers out
                  there on how such a system might work?  if no-one has done it yet, is
                  anyone willing to help out? ;-)

                  --Nate



                  _______________________________________________
                  MUD-Dev maillist  -  MUD-Dev@kanga.nu
                  http://www.kanga.nu/lists/listinfo/mud-dev
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: "[MUD-Dev] concerning tokenization, compilation, performance,
                and other fun stuff."
            from: Nate Cain <nate@cotdom.com>
            references: []
            date: 2000-01-02 22:35:39.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 00uTmp8a
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *294
        parent: 
        children:
        - &298 !ruby/object:MessageContainer
          key: &295 !ruby/object:MessageId
            raw: 00uTmqCe@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: |
                From: Joel Dillon <jo@kaffein.troll.no>
                Date: Mon, 3 Jan 2000 14:42:53 +0100
                Subject: Re: [MUD-Dev] concerning tokenization, compilation, performance, and other fun stuff.

                Nate Cain (nate@cotdom.com) spake thusly:
                > This would have many advantages over other methods.  The most notable of
                > these would be speed.  Objects would be compiled to native machine code,
                > and would run directly on the processor.  Also, these objects could very
                > quickly and easily be loaded and unloaded as well.  The objects could be
                > written in any language for which there was a compiler available for the
                > target OS, and could, potentially, allow objects to have access to
                > system/os functions that would make objects able to do some very cool
                > things.

                  And some very nasty things. You need to be careful about security,
                at least if you have an open building model.

                > This sort of system could also be implemented very easily, and could
                > also very easily be multithreaded.  It's a perfect use for the COM
                > model, or ActiveX... if you want to go that route.  :-)

                  Ick, say byebye to portability ;)

                > Has anyone tried this sort of thing?  Are there any docs/papers out
                > there on how such a system might work?  if no-one has done it yet, is
                > anyone willing to help out? ;-)

                  It's been tried, a little - someone on here called Robert Brady was
                working on something similar, check the archives. I'd prefer to have a
                mixture myself; interpreted languages for ease of debugging, which can
                then be compiled on the fly into dynamic libraries for speed.




                _______________________________________________
                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                http://www.kanga.nu/lists/listinfo/mud-dev
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: Joel Dillon <jo@kaffein.troll.no>'
                      name: From
                      value: Joel Dillon <jo@kaffein.troll.no>
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Mon, 3 Jan 2000 14:42:53 +0100'
                      name: Date
                      value: Mon, 3 Jan 2000 14:42:53 +0100
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] concerning tokenization, compilation,
                        performance, and other fun stuff.'
                      name: Subject
                      value: 'Re: [MUD-Dev] concerning tokenization, compilation,
                        performance, and other fun stuff.'
                    mbox_from: 
                  body: |
                    Nate Cain (nate@cotdom.com) spake thusly:
                    > This would have many advantages over other methods.  The most notable of
                    > these would be speed.  Objects would be compiled to native machine code,
                    > and would run directly on the processor.  Also, these objects could very
                    > quickly and easily be loaded and unloaded as well.  The objects could be
                    > written in any language for which there was a compiler available for the
                    > target OS, and could, potentially, allow objects to have access to
                    > system/os functions that would make objects able to do some very cool
                    > things.

                      And some very nasty things. You need to be careful about security,
                    at least if you have an open building model.

                    > This sort of system could also be implemented very easily, and could
                    > also very easily be multithreaded.  It's a perfect use for the COM
                    > model, or ActiveX... if you want to go that route.  :-)

                      Ick, say byebye to portability ;)

                    > Has anyone tried this sort of thing?  Are there any docs/papers out
                    > there on how such a system might work?  if no-one has done it yet, is
                    > anyone willing to help out? ;-)

                      It's been tried, a little - someone on here called Robert Brady was
                    working on something similar, check the archives. I'd prefer to have a
                    mixture myself; interpreted languages for ease of debugging, which can
                    then be compiled on the fly into dynamic libraries for speed.




                    _______________________________________________
                    MUD-Dev maillist  -  MUD-Dev@kanga.nu
                    http://www.kanga.nu/lists/listinfo/mud-dev
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] concerning tokenization, compilation, performance,
                  and other fun stuff.'
              from: Joel Dillon <jo@kaffein.troll.no>
              references: []
              date: 2000-01-03 13:42:53.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: 00uTmqCe
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *295
          parent: *296
          children:
          - &467 !ruby/object:MessageContainer
            key: &297 !ruby/object:MessageId
              raw: JzBSgnBI@generated-message-id.chibrary.org
            value: !ruby/object:Message
              email: !ruby/object:Email
                raw: "From: Greg Miller <gmiller@classic-games.com>\nDate: Mon, 03
                  Jan 2000 11:14:14 -0600\nSubject: Re: [MUD-Dev] concerning tokenization,
                  compilation, performance, and other fun stuff.\n\nJoel Dillon wrote:\n>
                  \  And some very nasty things. You need to be careful about security,\n>
                  at least if you have an open building model.\n\nBugs may be even
                  more problematic than malicious attack. Compare the\nstability of
                  the typical lpmud to that of the typical diku--and that's\n*without*
                  builder-supplied hard code.\n\n> \n> > This sort of system could
                  also be implemented very easily, and could\n> > also very easily
                  be multithreaded.  It's a perfect use for the COM\n> > model, or
                  ActiveX... if you want to go that route.  :-)\n> \n>   Ick, say
                  byebye to portability ;)\n\nNot necessarily. Check out Mozilla's
                  XPCOM system, which is available\nunder a nonviral license.\n--\nhttp://www.classic-games.com/\nConspiracy
                  theorists mistakenly assume others think before acting.\n*** Please
                  limit .sigs to four lines and avoid HTML mail or posts. ***\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                header: !ruby/object:Headers
                  rmail: !ruby/object:RMail::Message
                    header: !ruby/object:RMail::Header
                      fields:
                      - !ruby/object:RMail::Header::Field
                        raw: 'From: Greg Miller <gmiller@classic-games.com>'
                        name: From
                        value: Greg Miller <gmiller@classic-games.com>
                      - !ruby/object:RMail::Header::Field
                        raw: 'Date: Mon, 03 Jan 2000 11:14:14 -0600'
                        name: Date
                        value: Mon, 03 Jan 2000 11:14:14 -0600
                      - !ruby/object:RMail::Header::Field
                        raw: 'Subject: Re: [MUD-Dev] concerning tokenization, compilation,
                          performance, and other fun stuff.'
                        name: Subject
                        value: 'Re: [MUD-Dev] concerning tokenization, compilation,
                          performance, and other fun stuff.'
                      mbox_from: 
                    body: "Joel Dillon wrote:\n>   And some very nasty things. You
                      need to be careful about security,\n> at least if you have an
                      open building model.\n\nBugs may be even more problematic than
                      malicious attack. Compare the\nstability of the typical lpmud
                      to that of the typical diku--and that's\n*without* builder-supplied
                      hard code.\n\n> \n> > This sort of system could also be implemented
                      very easily, and could\n> > also very easily be multithreaded.
                      \ It's a perfect use for the COM\n> > model, or ActiveX... if
                      you want to go that route.  :-)\n> \n>   Ick, say byebye to
                      portability ;)\n\nNot necessarily. Check out Mozilla's XPCOM
                      system, which is available\nunder a nonviral license.\n--\nhttp://www.classic-games.com/\nConspiracy
                      theorists mistakenly assume others think before acting.\n***
                      Please limit .sigs to four lines and avoid HTML mail or posts.
                      ***\n\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    epilogue: 
                    preamble: 
                message_id: !ruby/object:MessageId
                  raw: "[invalid or missing message id]"
                subject: !ruby/object:Subject
                  original: 'Re: [MUD-Dev] concerning tokenization, compilation, performance,
                    and other fun stuff.'
                from: Greg Miller <gmiller@classic-games.com>
                references: []
                date: 2000-01-03 17:14:14.000000000 Z
                no_archive: false
              call_number: !ruby/object:CallNumber
                str: JzBSgnBI
              source: archive
              list: !ruby/object:List
                slug: mud-dev
                name: 
                description: 
                homepage: 
                footer: 
              message_id: *297
            parent: *298
            children: []
        - &441 !ruby/object:MessageContainer
          key: &299 !ruby/object:MessageId
            raw: JzUMQxAO@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: |
                From: cg@ami-cg.GraySage.Edmonton.AB.CA
                Date: Sun, 2 Jan 2000 22:35:15 -0700
                Subject: Re: [MUD-Dev] concerning tokenization, compilation, performance, and other fun stuff.

                [Nate Cain:]

                > Has anyone tried this sort of thing?  Are there any docs/papers out
                > there on how such a system might work?  if no-one has done it yet, is
                > anyone willing to help out? ;-)

                This idea, although at not so fine a level, was part of the basis for
                the dev-mud project. There was lots of discussion on that list, which
                is likely still all on kanga.nu. See there for lots of issues with
                this kind of technique.

                --
                Don't design inefficiency in - it'll happen in the implementation.

                Chris Gray     cg@ami-cg.GraySage.Edmonton.AB.CA
                               http://www.GraySage.Edmonton.AB.CA/cg/



                _______________________________________________
                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                http://www.kanga.nu/lists/listinfo/mud-dev
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: cg@ami-cg.GraySage.Edmonton.AB.CA'
                      name: From
                      value: cg@ami-cg.GraySage.Edmonton.AB.CA
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Sun, 2 Jan 2000 22:35:15 -0700'
                      name: Date
                      value: Sun, 2 Jan 2000 22:35:15 -0700
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] concerning tokenization, compilation,
                        performance, and other fun stuff.'
                      name: Subject
                      value: 'Re: [MUD-Dev] concerning tokenization, compilation,
                        performance, and other fun stuff.'
                    mbox_from: 
                  body: |
                    [Nate Cain:]

                    > Has anyone tried this sort of thing?  Are there any docs/papers out
                    > there on how such a system might work?  if no-one has done it yet, is
                    > anyone willing to help out? ;-)

                    This idea, although at not so fine a level, was part of the basis for
                    the dev-mud project. There was lots of discussion on that list, which
                    is likely still all on kanga.nu. See there for lots of issues with
                    this kind of technique.

                    --
                    Don't design inefficiency in - it'll happen in the implementation.

                    Chris Gray     cg@ami-cg.GraySage.Edmonton.AB.CA
                                   http://www.GraySage.Edmonton.AB.CA/cg/



                    _______________________________________________
                    MUD-Dev maillist  -  MUD-Dev@kanga.nu
                    http://www.kanga.nu/lists/listinfo/mud-dev
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] concerning tokenization, compilation, performance,
                  and other fun stuff.'
              from: cg@ami-cg.GraySage.Edmonton.AB.CA
              references: []
              date: 2000-01-03 05:35:15.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: JzUMQxAO
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *299
          parent: *296
          children: []
        - *300
        - &459 !ruby/object:MessageContainer
          key: &301 !ruby/object:MessageId
            raw: JzBboAmu@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: |
                From: Nate Cain <nate@cotdom.com>
                Date: Sun, 02 Jan 2000 17:34:41 -0500
                Subject: [MUD-Dev] concerning tokenization, compilation, performance, and other fun stuff.

                There has been a lot of talk recently, on this list, about tokenization,
                parsing, compilation, and virtual machines for in-game languages.  Also,
                there has been some talk about performance issues of these various
                techniques.  It seems to me (And I am no authority as I have never
                implemented a full driver, library, or compiler for any complex
                language) that the optimal solution for programming mud objects would be
                to have all of the objects be dynamicly linked libraries of some sort.

                This would have many advantages over other methods.  The most notable of
                these would be speed.  Objects would be compiled to native machine code,
                and would run directly on the processor.  Also, these objects could very
                quickly and easily be loaded and unloaded as well.  The objects could be
                written in any language for which there was a compiler available for the
                target OS, and could, potentially, allow objects to have access to
                system/os functions that would make objects able to do some very cool
                things.

                This sort of system could also be implemented very easily, and could
                also very easily be multithreaded.  It's a perfect use for the COM
                model, or ActiveX... if you want to go that route.  :-)

                Has anyone tried this sort of thing?  Are there any docs/papers out
                there on how such a system might work?  if no-one has done it yet, is
                anyone willing to help out? ;-)

                --Nate




                _______________________________________________
                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                http://www.kanga.nu/lists/listinfo/mud-dev
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: Nate Cain <nate@cotdom.com>'
                      name: From
                      value: Nate Cain <nate@cotdom.com>
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Sun, 02 Jan 2000 17:34:41 -0500'
                      name: Date
                      value: Sun, 02 Jan 2000 17:34:41 -0500
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: [MUD-Dev] concerning tokenization, compilation,
                        performance, and other fun stuff.'
                      name: Subject
                      value: "[MUD-Dev] concerning tokenization, compilation, performance,
                        and other fun stuff."
                    mbox_from: 
                  body: |
                    There has been a lot of talk recently, on this list, about tokenization,
                    parsing, compilation, and virtual machines for in-game languages.  Also,
                    there has been some talk about performance issues of these various
                    techniques.  It seems to me (And I am no authority as I have never
                    implemented a full driver, library, or compiler for any complex
                    language) that the optimal solution for programming mud objects would be
                    to have all of the objects be dynamicly linked libraries of some sort.

                    This would have many advantages over other methods.  The most notable of
                    these would be speed.  Objects would be compiled to native machine code,
                    and would run directly on the processor.  Also, these objects could very
                    quickly and easily be loaded and unloaded as well.  The objects could be
                    written in any language for which there was a compiler available for the
                    target OS, and could, potentially, allow objects to have access to
                    system/os functions that would make objects able to do some very cool
                    things.

                    This sort of system could also be implemented very easily, and could
                    also very easily be multithreaded.  It's a perfect use for the COM
                    model, or ActiveX... if you want to go that route.  :-)

                    Has anyone tried this sort of thing?  Are there any docs/papers out
                    there on how such a system might work?  if no-one has done it yet, is
                    anyone willing to help out? ;-)

                    --Nate




                    _______________________________________________
                    MUD-Dev maillist  -  MUD-Dev@kanga.nu
                    http://www.kanga.nu/lists/listinfo/mud-dev
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: "[MUD-Dev] concerning tokenization, compilation, performance,
                  and other fun stuff."
              from: Nate Cain <nate@cotdom.com>
              references: []
              date: 2000-01-02 22:34:41.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: JzBboAmu
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *301
          parent: *296
          children: []
      children:
      - *302
    children: []
  ? &303 !ruby/object:MessageId
    raw: JzBbo9iq@generated-message-id.chibrary.org
  : &313 !ruby/object:MessageContainer
    key: *303
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: \"Sellers, Michael\" <MSellers@maxis.com>\nDate: Mon, 31 Jan 2000
          09:18:36 -0800\nSubject: RE: player politics (was RE: [MUD-Dev] An introduction...)\n\nJC
          wrote: \n> On Mon, 10 Jan 2000 15:23:53 -0800 \n> Sellers, Michael <MSellers@maxis.com>
          wrote:\n> \n> > (Besides, both the Plymouth Compact and the Frame of Government\n>
          > are pretty short and easy to read -- though there is voluminous\n> > commentary
          on both.)\n> \n> Could you give URls for these?  In particular I've not
          been able to\n> find what I think you are referring to as the Plymouth Compact.
          \ The\n> closest I've gotten are the various links under:\n> \n>   http://www.yale.edu/lawweb/avalon/constpap.htm\n>
          \n> (Some good stuff in there).  The same page also lists several \"Frame\n>
          of Government\" documents for Pennsylvania.  Is that set the one you\n>
          are referring to?.\n\nYes (sorry, I thought I'd posted a link earlier).
          \ There are a lot of good\ndocs on theses pages at Yale, particularly the
          older ones\n(http://www.yale.edu/lawweb/avalon/pre18.htm).  Earlier I was
          specifically\nreferring to The Plymouth Compact (aka the Mayflower Compact)\n(http://www.yale.edu/lawweb/avalon/mayflowr.htm)
          and Penn's original Frame\nof Government (http://www.yale.edu/lawweb/avalon/states/pa04.htm)
          though the\nnext versions are good too for showing how reality eventually
          comes into\nplay.  \n\n\nMike Sellers\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: "Sellers, Michael" <MSellers@maxis.com>'
                name: From
                value: '"Sellers, Michael" <MSellers@maxis.com>'
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Mon, 31 Jan 2000 09:18:36 -0800'
                name: Date
                value: Mon, 31 Jan 2000 09:18:36 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: RE: player politics (was RE: [MUD-Dev] An introduction...)'
                name: Subject
                value: 'RE: player politics (was RE: [MUD-Dev] An introduction...)'
              mbox_from: 
            body: "JC wrote: \n> On Mon, 10 Jan 2000 15:23:53 -0800 \n> Sellers, Michael
              <MSellers@maxis.com> wrote:\n> \n> > (Besides, both the Plymouth Compact
              and the Frame of Government\n> > are pretty short and easy to read --
              though there is voluminous\n> > commentary on both.)\n> \n> Could you
              give URls for these?  In particular I've not been able to\n> find what
              I think you are referring to as the Plymouth Compact.  The\n> closest
              I've gotten are the various links under:\n> \n>   http://www.yale.edu/lawweb/avalon/constpap.htm\n>
              \n> (Some good stuff in there).  The same page also lists several \"Frame\n>
              of Government\" documents for Pennsylvania.  Is that set the one you\n>
              are referring to?.\n\nYes (sorry, I thought I'd posted a link earlier).
              \ There are a lot of good\ndocs on theses pages at Yale, particularly
              the older ones\n(http://www.yale.edu/lawweb/avalon/pre18.htm).  Earlier
              I was specifically\nreferring to The Plymouth Compact (aka the Mayflower
              Compact)\n(http://www.yale.edu/lawweb/avalon/mayflowr.htm) and Penn's
              original Frame\nof Government (http://www.yale.edu/lawweb/avalon/states/pa04.htm)
              though the\nnext versions are good too for showing how reality eventually
              comes into\nplay.  \n\n\nMike Sellers\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'RE: player politics (was RE: [MUD-Dev] An introduction...)'
        from: Sellers, Michael <MSellers@maxis.com>
        references: []
        date: 2000-01-31 17:18:36.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: JzBbo9iq
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *303
    parent: &312 !ruby/object:MessageContainer
      key: &304 !ruby/object:MessageId
        raw: 00IyQfCa@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Sat, 29 Jan 2000 23:58:15
            -0800\nSubject: Re: player politics (was RE: [MUD-Dev] An introduction...)\n\nOn
            Mon, 10 Jan 2000 15:23:53 -0800 \nSellers, Michael <MSellers@maxis.com>
            wrote:\n\n> (Besides, both the Plymouth Compact and the Frame of Government\n>
            are pretty short and easy to read -- though there is voluminous\n> commentary
            on both.)\n\nCould you give URls for these?  In particular I've not been
            able to\nfind what I think you are referring to as the Plymouth Compact.
            \ The\nclosest I've gotten are the various links under:\n\n  http://www.yale.edu/lawweb/avalon/constpap.htm\n\n(Some
            good stuff in there).  The same page also lists several \"Frame\nof Government\"
            documents for Pennsylvania.  Is that set the one you\nare referring to?.\n\n--\nJ
            C Lawrence                                 Home: claw@kanga.nu\n----------(*)
            \                             Other: coder@kanga.nu\n--=| A man is as
            sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: J C Lawrence <claw@kanga.nu>'
                  name: From
                  value: J C Lawrence <claw@kanga.nu>
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Sat, 29 Jan 2000 23:58:15 -0800'
                  name: Date
                  value: Sat, 29 Jan 2000 23:58:15 -0800
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: player politics (was RE: [MUD-Dev] An introduction...)'
                  name: Subject
                  value: 'Re: player politics (was RE: [MUD-Dev] An introduction...)'
                mbox_from: 
              body: "On Mon, 10 Jan 2000 15:23:53 -0800 \nSellers, Michael <MSellers@maxis.com>
                wrote:\n\n> (Besides, both the Plymouth Compact and the Frame of Government\n>
                are pretty short and easy to read -- though there is voluminous\n>
                commentary on both.)\n\nCould you give URls for these?  In particular
                I've not been able to\nfind what I think you are referring to as the
                Plymouth Compact.  The\nclosest I've gotten are the various links
                under:\n\n  http://www.yale.edu/lawweb/avalon/constpap.htm\n\n(Some
                good stuff in there).  The same page also lists several \"Frame\nof
                Government\" documents for Pennsylvania.  Is that set the one you\nare
                referring to?.\n\n--\nJ C Lawrence                                 Home:
                claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
                A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: player politics (was RE: [MUD-Dev] An introduction...)'
          from: J C Lawrence <claw@kanga.nu>
          references: []
          date: 2000-01-30 07:58:15.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: 00IyQfCa
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *304
      parent: &311 !ruby/object:MessageContainer
        key: &305 !ruby/object:MessageId
          raw: JzUMQxBQ@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: Ola Fosheim Gr��stad <olag@ifi.uio.no>\nDate: Sun, 16 Jan
              2000 01:20:30 +0100\nSubject: Re: player politics (was RE: [MUD-Dev]
              An introduction...)\n\n\"Sellers, Michael\" wrote:\r\n> Can you explain
              what you mean here?  Do you think that MUD-players are\r\n> ill-equipped
              to deal with conflict and conflict resolution?\r\n\r\nHeh...  My understanding
              of Smith's paper is that there should be\r\nmediators available/involved
              at an early stage, before the conflict is\r\napparent, in order to achieve
              good results...\r\n\r\nWhat _I_ think is another issue.  I think the
              basic problem is that you\r\ntypically have a fixed structural situation,
              thus conflicts emerge which\r\nmight have been avoided if you allowed
              a more dynamic structure. IRC is\r\nobviously a welcome example of a
              very simple system. It is my opinion\r\nthat we need to solve the problem
              of creating systems which have a\r\ndynamic structure that evolves into
              something interesting in order to\r\nreduce the probability of escalating
              conflicts. It is desirable that\r\nusers depend upon each other for
              social/cooperative reasons, but it is\r\nalso desirable that they themselves
              choose which subset of the\r\npopulation they depend upon.\r\n\r\n>
              Anna Smith's chapter in Kollock (I think?) may be a good angle to take
              on at\r\n> least part of the politics/governance issue.\r\n\r\nYes,
              it is in \"Communities in cyberspace\".  The only chapter I found\r\ninteresting
              and relevant was the Smith one.  I think it is valuable even\r\nif such
              writings rarely (almost never) provide anything that will\r\ndirectly
              affect a design or implementation.  It is valuable because it\r\nis
              a way to provide us with insights into potentially relevant fields,\r\nand
              issues which have proved interesting in those fields.\r\n\r\n[nice poem
              about building man, not only the building]\r\n\r\n> That's pretty much
              my philosophy, or my vision for where online worlds can\r\n> take us.
              \ If it's all ultimately about more and different ways to hack\r\n>
              things up, then it's going to prove to be a mighty shallow pool indeed.\r\n\r\nBut
              what do you do in order to get closer to that vision???\r\n\r\nIn the
              physical world we build exhaust heavens where people live close\r\nto
              people they don't share anything with, except space, and whose music\r\nthey
              grow to hate. :)  Or look at the modern american cities where you\r\nhave
              endless suburbs, an endless chessboard of dull \"no trespassing\"\r\ngrounds.
              \ Evolution doesn't make the world an interesting place for\r\nhumans,
              unless you make \"personal growth\" your selection criterion. \r\nHumans
              fail to go beyond their personal local perspective in their\r\ndecision
              making, and thus are largely incapable of changing their own\r\nsituation
              as a group.  The consequence is that capital and large scale\r\nfashion
              (\"democracy\"/manipulation/marketing) becomes the \"unifying\"\r\nforce
              in the larger perspective. In the end, human development depends\r\non
              lonely idealist and their ability to generate interest in things that\r\nmatters.
              (Jesus etc).\r\n\r\nThe successful 4all worlds are no doubt primarily
              being developed by\r\nlarger teams paid by larger entities. They have
              the resources, but will\r\nthey ever get beyond building the limited
              vision which aims at\r\nenthralling/satisfying the average customer?
              I don't think satisfaction\r\nis enough for a personal growth vision
              that addresses recreational\r\nspaces... So, maybe I am getting more
              sceptical about Farmer's \"we are\r\nfacilitators\" position. \r\n\r\n>
              as a group would go forward in the most basic of ways.  The problem
              we have\r\n> in MUDs is that we have no context for how people may want
              to go forward in\r\n> less chaotic lumps than they're in now, and have
              given them precious few\r\n> tools for figuring this out themselves.\r\n\r\n>
              Saying people will want to vote is important, for example, but\r\n>
              there are secondary aspects to this that should help prevent abuse,
              thrash,\r\n> burnout, and eventually people opting out altogether.\r\n\r\nIsn't
              consumer polls comparable to voting? Is there a mental difference?\r\nDo
              users want to vote if they primarily view themselves as customers? \r\nDemocracy
              in consumer markets is, well, interesting: buy your dinner\r\nfirst,
              then vote for fish or meat and see what the majority gets you.\r\n\r\nI
              am not an expert, but I think people vote because they either view it\r\nas
              a duty (social contract or whatever) or they vote to influence\r\ndecisions
              that really matters. Will designers allow users to make\r\ndefinitive
              decisions on things that really matters, regardless of the\r\nconsequences?
              :)\r\n\r\nI don't think the guild voting mechanism in Meridian59 was
              used all that\r\nmuch, but I can't say for sure. I doubt it was used
              in well functioning\r\ngroups. Voting in that context is most useful
              for getting rid of a\r\nperson that has abused trust, but I wonder if
              a typical group will\r\nsurvive that.  Still, the presence of a voting
              mechanism may of course\r\nhave an effect even if it is never used.
              Maybe we can find better\r\nsolutions to control in the virtual space
              given the fact that we fully\r\ncontrol the state space (the structure).\r\n\r\n>
              learn from them.  (Besides, both the Plymouth Compact and the Frame
              of\r\n> Government are pretty short and easy to read -- though there
              is voluminous\r\n\r\nAnyone know if they are available online, project
              Gutenberg perhaps?\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: Ola Fosheim Gr��stad <olag@ifi.uio.no>'
                    name: From
                    value: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Sun, 16 Jan 2000 01:20:30 +0100'
                    name: Date
                    value: Sun, 16 Jan 2000 01:20:30 +0100
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: player politics (was RE: [MUD-Dev] An introduction...)'
                    name: Subject
                    value: 'Re: player politics (was RE: [MUD-Dev] An introduction...)'
                  mbox_from: 
                body: "\"Sellers, Michael\" wrote:\r\n> Can you explain what you mean
                  here?  Do you think that MUD-players are\r\n> ill-equipped to deal
                  with conflict and conflict resolution?\r\n\r\nHeh...  My understanding
                  of Smith's paper is that there should be\r\nmediators available/involved
                  at an early stage, before the conflict is\r\napparent, in order
                  to achieve good results...\r\n\r\nWhat _I_ think is another issue.
                  \ I think the basic problem is that you\r\ntypically have a fixed
                  structural situation, thus conflicts emerge which\r\nmight have
                  been avoided if you allowed a more dynamic structure. IRC is\r\nobviously
                  a welcome example of a very simple system. It is my opinion\r\nthat
                  we need to solve the problem of creating systems which have a\r\ndynamic
                  structure that evolves into something interesting in order to\r\nreduce
                  the probability of escalating conflicts. It is desirable that\r\nusers
                  depend upon each other for social/cooperative reasons, but it is\r\nalso
                  desirable that they themselves choose which subset of the\r\npopulation
                  they depend upon.\r\n\r\n> Anna Smith's chapter in Kollock (I think?)
                  may be a good angle to take on at\r\n> least part of the politics/governance
                  issue.\r\n\r\nYes, it is in \"Communities in cyberspace\".  The
                  only chapter I found\r\ninteresting and relevant was the Smith one.
                  \ I think it is valuable even\r\nif such writings rarely (almost
                  never) provide anything that will\r\ndirectly affect a design or
                  implementation.  It is valuable because it\r\nis a way to provide
                  us with insights into potentially relevant fields,\r\nand issues
                  which have proved interesting in those fields.\r\n\r\n[nice poem
                  about building man, not only the building]\r\n\r\n> That's pretty
                  much my philosophy, or my vision for where online worlds can\r\n>
                  take us.  If it's all ultimately about more and different ways to
                  hack\r\n> things up, then it's going to prove to be a mighty shallow
                  pool indeed.\r\n\r\nBut what do you do in order to get closer to
                  that vision???\r\n\r\nIn the physical world we build exhaust heavens
                  where people live close\r\nto people they don't share anything with,
                  except space, and whose music\r\nthey grow to hate. :)  Or look
                  at the modern american cities where you\r\nhave endless suburbs,
                  an endless chessboard of dull \"no trespassing\"\r\ngrounds.  Evolution
                  doesn't make the world an interesting place for\r\nhumans, unless
                  you make \"personal growth\" your selection criterion. \r\nHumans
                  fail to go beyond their personal local perspective in their\r\ndecision
                  making, and thus are largely incapable of changing their own\r\nsituation
                  as a group.  The consequence is that capital and large scale\r\nfashion
                  (\"democracy\"/manipulation/marketing) becomes the \"unifying\"\r\nforce
                  in the larger perspective. In the end, human development depends\r\non
                  lonely idealist and their ability to generate interest in things
                  that\r\nmatters. (Jesus etc).\r\n\r\nThe successful 4all worlds
                  are no doubt primarily being developed by\r\nlarger teams paid by
                  larger entities. They have the resources, but will\r\nthey ever
                  get beyond building the limited vision which aims at\r\nenthralling/satisfying
                  the average customer? I don't think satisfaction\r\nis enough for
                  a personal growth vision that addresses recreational\r\nspaces...
                  So, maybe I am getting more sceptical about Farmer's \"we are\r\nfacilitators\"
                  position. \r\n\r\n> as a group would go forward in the most basic
                  of ways.  The problem we have\r\n> in MUDs is that we have no context
                  for how people may want to go forward in\r\n> less chaotic lumps
                  than they're in now, and have given them precious few\r\n> tools
                  for figuring this out themselves.\r\n\r\n> Saying people will want
                  to vote is important, for example, but\r\n> there are secondary
                  aspects to this that should help prevent abuse, thrash,\r\n> burnout,
                  and eventually people opting out altogether.\r\n\r\nIsn't consumer
                  polls comparable to voting? Is there a mental difference?\r\nDo
                  users want to vote if they primarily view themselves as customers?
                  \r\nDemocracy in consumer markets is, well, interesting: buy your
                  dinner\r\nfirst, then vote for fish or meat and see what the majority
                  gets you.\r\n\r\nI am not an expert, but I think people vote because
                  they either view it\r\nas a duty (social contract or whatever) or
                  they vote to influence\r\ndecisions that really matters. Will designers
                  allow users to make\r\ndefinitive decisions on things that really
                  matters, regardless of the\r\nconsequences? :)\r\n\r\nI don't think
                  the guild voting mechanism in Meridian59 was used all that\r\nmuch,
                  but I can't say for sure. I doubt it was used in well functioning\r\ngroups.
                  Voting in that context is most useful for getting rid of a\r\nperson
                  that has abused trust, but I wonder if a typical group will\r\nsurvive
                  that.  Still, the presence of a voting mechanism may of course\r\nhave
                  an effect even if it is never used. Maybe we can find better\r\nsolutions
                  to control in the virtual space given the fact that we fully\r\ncontrol
                  the state space (the structure).\r\n\r\n> learn from them.  (Besides,
                  both the Plymouth Compact and the Frame of\r\n> Government are pretty
                  short and easy to read -- though there is voluminous\r\n\r\nAnyone
                  know if they are available online, project Gutenberg perhaps?\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: player politics (was RE: [MUD-Dev] An introduction...)'
            from: Ola Fosheim Gr��stad <olag@ifi.uio.no>
            references: []
            date: 2000-01-16 00:20:30.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: JzUMQxBQ
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *305
        parent: &310 !ruby/object:MessageContainer
          key: &306 !ruby/object:MessageId
            raw: JzBbo9js@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: \"Sellers, Michael\" <MSellers@maxis.com>\nDate: Mon, 10
                Jan 2000 15:23:53 -0800\nSubject: RE: player politics (was RE: [MUD-Dev]
                An introduction...)\n\nOla wrote:\n> \"Sellers, Michael\" wrote:\n>
                > paper has yet to be written.  There have been some good, if limited,\n>
                > analyses of player politics on LambdaMOO and from a few MUDs that
                have\ntried\n> > this, but (IMO) the implementation and/or prior state
                of the game has\nalways\n> > gotten in the way.\n> \n> There's the
                Anna duval Smith bookchapter on conflict management (the\n> link can
                be found in the kanga.nu library), which also provide\n> references
                to conflict management litterature. I have yet to look up\n> those
                though... (the conlifct management angle does, I think, suggest\n>
                that the political game will fail, and that you will need a mediator)\n\nCan
                you explain what you mean here?  Do you think that MUD-players are\nill-equipped
                to deal with conflict and conflict resolution?  \n\nAnna Smith's chapter
                in Kollock (I think?) may be a good angle to take on at\nleast part
                of the politics/governance issue.  \n\n> \n> Maybe it just isn't sensible
                to make large 4all moneymaking \n> machines...\n> If one care about
                the human personal growth perspective?\n\nI hope not.  Here's a little
                poem I keep taped to my wall:\n\nWe are all blind until we see\nThat
                in the human plan\nNothing is worth the building\nThat does not build
                the man.\n\nWhy build these cities glorious\nIf man unbuilded goes.\nIn
                vain we build the world\nUnless the builder also grows.\n    -- Edwin
                Markham\n\n(Where I take the builder to be the player, not the designer,
                and of course\nyou'll have to allow for the gender exclusivity of
                the language if that sort\nof thing bugs you.)  \n\nThat's pretty
                much my philosophy, or my vision for where online worlds can\ntake
                us.  If it's all ultimately about more and different ways to hack\nthings
                up, then it's going to prove to be a mighty shallow pool indeed.  \n\n\n>
                > My own research has led me right back to the basics: for example,
                the\n> > creation of the Magna Carta, the Plymouth Compact, and Penn's
                Frame of\n> > Government.\n> \n> Why? What? Explain?\n\nBriefly, these
                documents stand out as crystalizations of times when people\ncame
                together under more or less onerous circumstances and decided how
                they\nas a group would go forward in the most basic of ways.  The
                problem we have\nin MUDs is that we have no context for how people
                may want to go forward in\nless chaotic lumps than they're in now,
                and have given them precious few\ntools for figuring this out themselves.
                \ Looking at documents like those I\nreferenced has helped me abstract
                out what issues tend to be the ones that\nget people most upset, and
                how other groups have chosen to deal with them in\nthe past.  Saying
                people will want to vote is important, for example, but\nthere are
                secondary aspects to this that should help prevent abuse, thrash,\nburnout,
                and eventually people opting out altogether.  Real groups have had\nto
                address these sorts of issues before, and I think it's helpful to
                try to\nlearn from them.  (Besides, both the Plymouth Compact and
                the Frame of\nGovernment are pretty short and easy to read -- though
                there is voluminous\ncommentary on both.)  \n\n\nMike Sellers\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: "Sellers, Michael" <MSellers@maxis.com>'
                      name: From
                      value: '"Sellers, Michael" <MSellers@maxis.com>'
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Mon, 10 Jan 2000 15:23:53 -0800'
                      name: Date
                      value: Mon, 10 Jan 2000 15:23:53 -0800
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: RE: player politics (was RE: [MUD-Dev] An introduction...)'
                      name: Subject
                      value: 'RE: player politics (was RE: [MUD-Dev] An introduction...)'
                    mbox_from: 
                  body: "Ola wrote:\n> \"Sellers, Michael\" wrote:\n> > paper has
                    yet to be written.  There have been some good, if limited,\n>
                    > analyses of player politics on LambdaMOO and from a few MUDs
                    that have\ntried\n> > this, but (IMO) the implementation and/or
                    prior state of the game has\nalways\n> > gotten in the way.\n>
                    \n> There's the Anna duval Smith bookchapter on conflict management
                    (the\n> link can be found in the kanga.nu library), which also
                    provide\n> references to conflict management litterature. I have
                    yet to look up\n> those though... (the conlifct management angle
                    does, I think, suggest\n> that the political game will fail, and
                    that you will need a mediator)\n\nCan you explain what you mean
                    here?  Do you think that MUD-players are\nill-equipped to deal
                    with conflict and conflict resolution?  \n\nAnna Smith's chapter
                    in Kollock (I think?) may be a good angle to take on at\nleast
                    part of the politics/governance issue.  \n\n> \n> Maybe it just
                    isn't sensible to make large 4all moneymaking \n> machines...\n>
                    If one care about the human personal growth perspective?\n\nI
                    hope not.  Here's a little poem I keep taped to my wall:\n\nWe
                    are all blind until we see\nThat in the human plan\nNothing is
                    worth the building\nThat does not build the man.\n\nWhy build
                    these cities glorious\nIf man unbuilded goes.\nIn vain we build
                    the world\nUnless the builder also grows.\n    -- Edwin Markham\n\n(Where
                    I take the builder to be the player, not the designer, and of
                    course\nyou'll have to allow for the gender exclusivity of the
                    language if that sort\nof thing bugs you.)  \n\nThat's pretty
                    much my philosophy, or my vision for where online worlds can\ntake
                    us.  If it's all ultimately about more and different ways to hack\nthings
                    up, then it's going to prove to be a mighty shallow pool indeed.
                    \ \n\n\n> > My own research has led me right back to the basics:
                    for example, the\n> > creation of the Magna Carta, the Plymouth
                    Compact, and Penn's Frame of\n> > Government.\n> \n> Why? What?
                    Explain?\n\nBriefly, these documents stand out as crystalizations
                    of times when people\ncame together under more or less onerous
                    circumstances and decided how they\nas a group would go forward
                    in the most basic of ways.  The problem we have\nin MUDs is that
                    we have no context for how people may want to go forward in\nless
                    chaotic lumps than they're in now, and have given them precious
                    few\ntools for figuring this out themselves.  Looking at documents
                    like those I\nreferenced has helped me abstract out what issues
                    tend to be the ones that\nget people most upset, and how other
                    groups have chosen to deal with them in\nthe past.  Saying people
                    will want to vote is important, for example, but\nthere are secondary
                    aspects to this that should help prevent abuse, thrash,\nburnout,
                    and eventually people opting out altogether.  Real groups have
                    had\nto address these sorts of issues before, and I think it's
                    helpful to try to\nlearn from them.  (Besides, both the Plymouth
                    Compact and the Frame of\nGovernment are pretty short and easy
                    to read -- though there is voluminous\ncommentary on both.)  \n\n\nMike
                    Sellers\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'RE: player politics (was RE: [MUD-Dev] An introduction...)'
              from: Sellers, Michael <MSellers@maxis.com>
              references: []
              date: 2000-01-10 23:23:53.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: JzBbo9js
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *306
          parent: &309 !ruby/object:MessageContainer
            key: &307 !ruby/object:MessageId
              raw: JzBblxKa@generated-message-id.chibrary.org
            value: !ruby/object:Message
              email: !ruby/object:Email
                raw: "From: Ola Fosheim Gr��stad <olag@ifi.uio.no>\nDate: Mon, 10
                  Jan 2000 23:42:52 +0100\nSubject: Re: player politics (was RE: [MUD-Dev]
                  An introduction...)\n\n\"Sellers, Michael\" wrote:\r\n> paper has
                  yet to be written.  There have been some good, if limited,\r\n>
                  analyses of player politics on LambdaMOO and from a few MUDs that
                  have tried\r\n> this, but (IMO) the implementation and/or prior
                  state of the game has always\r\n> gotten in the way.\r\n\r\nThere's
                  the Anna duval Smith bookchapter on conflict management (the\r\nlink
                  can be found in the kanga.nu library), which also provide\r\nreferences
                  to conflict management litterature. I have yet to look up\r\nthose
                  though... (the conlifct management angle does, I think, suggest\r\nthat
                  the political game will fail, and that you will need a mediator)\r\n\r\nThen
                  again, I think it is just as much an issue of which people you\r\ncollect
                  from where, for what reason, what kinds of expectations users\r\nhave,
                  what kind of establishment you have... mud-dev essentially covers\r\nthe
                  same field rec.games.mud.admin, but there seems to be a significant\r\ndifference.
                  Even in how the same people act on the two arenas. (I havent\r\nbeen
                  reading Usenet much in the past five years or so, but...) Of\r\ncourse,
                  there are just a handful of people that make the r.g.m.*\r\nnewsgroups
                  almost unbearable. Unfortunately they choose to stay... ;*)\r\n\r\nMaybe
                  it just isn't sensible to make large 4all moneymaking machines...\r\nIf
                  one care about the human personal growth perspective?\r\n\r\n> I
                  think this is one of a few areas with some pretty\r\n> juicy PhD
                  theses waiting to happen.\r\n\r\nThere'll be lots of _pages_ and
                  entertainment, but I wonder if the\r\nenvironment/premises are stable
                  enough for results to actually be\r\nuseful...\r\n\r\n> My own research
                  has led me right back to the basics: for example, the\r\n> creation
                  of the Magna Carta, the Plymouth Compact, and Penn's Frame of\r\n>
                  Government.\r\n\r\nWhy? What? Explain?\r\n\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                header: !ruby/object:Headers
                  rmail: !ruby/object:RMail::Message
                    header: !ruby/object:RMail::Header
                      fields:
                      - !ruby/object:RMail::Header::Field
                        raw: 'From: Ola Fosheim Gr��stad <olag@ifi.uio.no>'
                        name: From
                        value: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                      - !ruby/object:RMail::Header::Field
                        raw: 'Date: Mon, 10 Jan 2000 23:42:52 +0100'
                        name: Date
                        value: Mon, 10 Jan 2000 23:42:52 +0100
                      - !ruby/object:RMail::Header::Field
                        raw: 'Subject: Re: player politics (was RE: [MUD-Dev] An introduction...)'
                        name: Subject
                        value: 'Re: player politics (was RE: [MUD-Dev] An introduction...)'
                      mbox_from: 
                    body: "\"Sellers, Michael\" wrote:\r\n> paper has yet to be written.
                      \ There have been some good, if limited,\r\n> analyses of player
                      politics on LambdaMOO and from a few MUDs that have tried\r\n>
                      this, but (IMO) the implementation and/or prior state of the
                      game has always\r\n> gotten in the way.\r\n\r\nThere's the Anna
                      duval Smith bookchapter on conflict management (the\r\nlink
                      can be found in the kanga.nu library), which also provide\r\nreferences
                      to conflict management litterature. I have yet to look up\r\nthose
                      though... (the conlifct management angle does, I think, suggest\r\nthat
                      the political game will fail, and that you will need a mediator)\r\n\r\nThen
                      again, I think it is just as much an issue of which people you\r\ncollect
                      from where, for what reason, what kinds of expectations users\r\nhave,
                      what kind of establishment you have... mud-dev essentially covers\r\nthe
                      same field rec.games.mud.admin, but there seems to be a significant\r\ndifference.
                      Even in how the same people act on the two arenas. (I havent\r\nbeen
                      reading Usenet much in the past five years or so, but...) Of\r\ncourse,
                      there are just a handful of people that make the r.g.m.*\r\nnewsgroups
                      almost unbearable. Unfortunately they choose to stay... ;*)\r\n\r\nMaybe
                      it just isn't sensible to make large 4all moneymaking machines...\r\nIf
                      one care about the human personal growth perspective?\r\n\r\n>
                      I think this is one of a few areas with some pretty\r\n> juicy
                      PhD theses waiting to happen.\r\n\r\nThere'll be lots of _pages_
                      and entertainment, but I wonder if the\r\nenvironment/premises
                      are stable enough for results to actually be\r\nuseful...\r\n\r\n>
                      My own research has led me right back to the basics: for example,
                      the\r\n> creation of the Magna Carta, the Plymouth Compact,
                      and Penn's Frame of\r\n> Government.\r\n\r\nWhy? What? Explain?\r\n\r\n\r\nOla.\r\n\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
                    epilogue: 
                    preamble: 
                message_id: !ruby/object:MessageId
                  raw: "[invalid or missing message id]"
                subject: !ruby/object:Subject
                  original: 'Re: player politics (was RE: [MUD-Dev] An introduction...)'
                from: Ola Fosheim Gr��stad <olag@ifi.uio.no>
                references: []
                date: 2000-01-10 22:42:52.000000000 Z
                no_archive: false
              call_number: !ruby/object:CallNumber
                str: JzBblxKa
              source: archive
              list: !ruby/object:List
                slug: mud-dev
                name: 
                description: 
                homepage: 
                footer: 
              message_id: *307
            parent: &440 !ruby/object:MessageContainer
              key: &308 !ruby/object:MessageId
                raw: Jzn75vwe@generated-message-id.chibrary.org
              value: !ruby/object:Message
                email: !ruby/object:Email
                  raw: "From: \"Sellers, Michael\" <MSellers@maxis.com>\nDate: Mon,
                    10 Jan 2000 12:22:57 -0800\nSubject: player politics (was RE:
                    [MUD-Dev] An introduction...)\n\nDave Kennerly wrote:\n> Perhaps
                    some members of the list could point out--to me--some informative\n>
                    no-nonsense writings on player politics: in depth analyses of
                    techniques;\n> not fluffy caricatures.  For good example, the
                    justice paper that was in\n> Game Developer's magazine sometime
                    in the last year (sorry link unfound).\n> For bad example, \"Implementing
                    God\":\n>\nhttp://www.gamasutra.com/features/game_design/19980424/implementing_god.htm\n\nIf
                    you find anything like what you're looking for Dave, please let
                    us all\nknow!  This issue is of perennial interest.  Though frankly,
                    I think such a\npaper has yet to be written.  There have been
                    some good, if limited,\nanalyses of player politics on LambdaMOO
                    and from a few MUDs that have tried\nthis, but (IMO) the implementation
                    and/or prior state of the game has always\ngotten in the way.
                    \ I think this is one of a few areas with some pretty\njuicy PhD
                    theses waiting to happen.  \n\nMy own research has led me right
                    back to the basics: for example, the\ncreation of the Magna Carta,
                    the Plymouth Compact, and Penn's Frame of\nGovernment.  Seeing
                    how even just these came about, what issues people were\nresponding
                    to, how they were handled, and how well they fared, has been very\ninstructive
                    for me.  Of course, I now have an even keener interest in\nJefferson's
                    philosophy than I did before. :)  \n\nAs you say too, a grounding
                    in anthropology and other forms of social\nscience will help a
                    lot.  It's also been helpful for me to think of my task\nin this
                    area as designing the bedrock systems out of which player political\nsystems
                    can grow, rather than trying to design the political systems myself.\nI
                    believe he less central planning we attempt here, the better.
                    \ \n\nMike Sellers\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  header: !ruby/object:Headers
                    rmail: !ruby/object:RMail::Message
                      header: !ruby/object:RMail::Header
                        fields:
                        - !ruby/object:RMail::Header::Field
                          raw: 'From: "Sellers, Michael" <MSellers@maxis.com>'
                          name: From
                          value: '"Sellers, Michael" <MSellers@maxis.com>'
                        - !ruby/object:RMail::Header::Field
                          raw: 'Date: Mon, 10 Jan 2000 12:22:57 -0800'
                          name: Date
                          value: Mon, 10 Jan 2000 12:22:57 -0800
                        - !ruby/object:RMail::Header::Field
                          raw: 'Subject: player politics (was RE: [MUD-Dev] An introduction...)'
                          name: Subject
                          value: 'player politics (was RE: [MUD-Dev] An introduction...)'
                        mbox_from: 
                      body: "Dave Kennerly wrote:\n> Perhaps some members of the list
                        could point out--to me--some informative\n> no-nonsense writings
                        on player politics: in depth analyses of techniques;\n> not
                        fluffy caricatures.  For good example, the justice paper that
                        was in\n> Game Developer's magazine sometime in the last year
                        (sorry link unfound).\n> For bad example, \"Implementing God\":\n>\nhttp://www.gamasutra.com/features/game_design/19980424/implementing_god.htm\n\nIf
                        you find anything like what you're looking for Dave, please
                        let us all\nknow!  This issue is of perennial interest.  Though
                        frankly, I think such a\npaper has yet to be written.  There
                        have been some good, if limited,\nanalyses of player politics
                        on LambdaMOO and from a few MUDs that have tried\nthis, but
                        (IMO) the implementation and/or prior state of the game has
                        always\ngotten in the way.  I think this is one of a few areas
                        with some pretty\njuicy PhD theses waiting to happen.  \n\nMy
                        own research has led me right back to the basics: for example,
                        the\ncreation of the Magna Carta, the Plymouth Compact, and
                        Penn's Frame of\nGovernment.  Seeing how even just these came
                        about, what issues people were\nresponding to, how they were
                        handled, and how well they fared, has been very\ninstructive
                        for me.  Of course, I now have an even keener interest in\nJefferson's
                        philosophy than I did before. :)  \n\nAs you say too, a grounding
                        in anthropology and other forms of social\nscience will help
                        a lot.  It's also been helpful for me to think of my task\nin
                        this area as designing the bedrock systems out of which player
                        political\nsystems can grow, rather than trying to design
                        the political systems myself.\nI believe he less central planning
                        we attempt here, the better.  \n\nMike Sellers\n\n\n\n_______________________________________________\nMUD-Dev
                        maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                      epilogue: 
                      preamble: 
                  message_id: !ruby/object:MessageId
                    raw: "[invalid or missing message id]"
                  subject: !ruby/object:Subject
                    original: 'player politics (was RE: [MUD-Dev] An introduction...)'
                  from: Sellers, Michael <MSellers@maxis.com>
                  references: []
                  date: 2000-01-10 20:22:57.000000000 Z
                  no_archive: false
                call_number: !ruby/object:CallNumber
                  str: Jzn75vwe
                source: archive
                list: !ruby/object:List
                  slug: mud-dev
                  name: 
                  description: 
                  homepage: 
                  footer: 
                message_id: *308
              parent: 
              children:
              - *309
            children:
            - *310
          children:
          - *311
        children:
        - *312
      children:
      - *313
    children: []
  *125: *128
  *117: *314
  *17: *315
  *228: *316
  ? &317 !ruby/object:MessageId
    raw: Jysr6yY4@generated-message-id.chibrary.org
  : &476 !ruby/object:MessageContainer
    key: *317
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: Adam Wiggins <adam@angel.com>\nDate: Mon, 3 Jan 2000 10:12:38
          -0800 (PST)\nSubject: Re: Re[6]: [MUD-Dev] The grass is always greener in
          the other field\n\nOn Mon, 27 Dec 1999, Travis Casey wrote:\n> On Thursday,
          December 23, 1999, Adam Wiggins wrote:\n> > On Thu, 23 Dec 1999, Travis
          Casey wrote:\n> >> Combine multiple values in levels displayed to players.
          \ E.g., a mud\n> >> might internally use a linear system in which attributes
          average 50\n> >> and range up to 200 for some attributes, but range up to
          500 for\n> >> others -- but remap all of them to show 5 as \"average\" to
          players and\n> >> 10 as \"maximum\".\n> \n> > This seems more confusing
          to the implementors than anything else.\n> > I don't see the point in obfuscating
          things at the implementation level.\n> \n> The point of having different
          scales isn't obfuscation; it's simply to\n> reflect the fact that in reality,
          different \"attributes\" have\n> different ranges.  Take strength and size,
          for example.  If we measure\n> both in terms of weight, we'll find that
          the strongest people in the\n> world are about four to five times as strong
          as an average person.\n> However, the heaviest people in the world weigh
          more than 10 times as\n> much as an average person.\n> \n> Thus, if we make
          50 average for all attributes and use a linear scale,\n> the human maximum
          for strength should be in the area of 200 to 250,\n> while the maximum for
          size should be in the area of 500 or so.\n\nAhhhhhhh....okay, that's different.
          \ I was thinking in terms of abstract\nstats like \"wisdom\" or \"constitution\"
          which really have no real world\nequivilents.  In those cases I like to
          use a fixed scale just to make\nlife easy on myself.  In the case of things
          that *do* have real-world\nmeasures, however, I always use those.  For example,
          all the weights on\nmy mud are in grams, including character weight.  Sizes
          (eg, character\nheight, blade length, or armor thickness) are in centimeters.
          \ Ditto\nfor temperature, time, or preasure.\n\nI did go ahead and lump
          \"strength\" with the abstract stats, partially because\nI'm used to that
          in RPGs anyhow, and partially because it's a hard thing\nto measure.  Certainly
          you could say that strength is the maximum number of\nkilograms that the
          character can benchpress or deadlift, but I find this\nto be overly specific,
          so I stick with the abstract method.\n\n> Other examples can be given, but
          the basic idea is that you could use\n> this not only to obfuscate attributes
          some for players, but also to\n> show all attributes to players on, say,
          a 0 to 10 scale with 5 being\n> average while using different scales for
          different attributes\n> internally.\n\nOh, sure.  Rather than saying \"you're
          1.9 meters tall\" you can say\n\"you're very tall\", depending on the relative
          scale of your world.\n\nCertainly, I don't display any values in their real-world
          scales simply\nbecause I don't want to break the mood.  Weights and lengths
          are shown\nin stones and handbredths, respectively (until I can think of
          something\nmore creative).\n\n> In fact, you might want to keep some attributes
          on \"reverse\" scales,\n> with lower values being better -- e.g., a reaction
          time attribute.\n> You could still remap such attributes to show \"normally\"
          to players.)\n\nYes.  The only 'reverse' stat I currently use is fatigue:
          at 0 you are\ncompletely rested, and the number increases as you get more
          tired, with\nno real maximum.\n\nAdam\n\n\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Adam Wiggins <adam@angel.com>'
                name: From
                value: Adam Wiggins <adam@angel.com>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Mon, 3 Jan 2000 10:12:38 -0800 (PST)'
                name: Date
                value: Mon, 3 Jan 2000 10:12:38 -0800 (PST)
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: Re[6]: [MUD-Dev] The grass is always greener in
                  the other field'
                name: Subject
                value: 'Re: Re[6]: [MUD-Dev] The grass is always greener in the other
                  field'
              mbox_from: 
            body: "On Mon, 27 Dec 1999, Travis Casey wrote:\n> On Thursday, December
              23, 1999, Adam Wiggins wrote:\n> > On Thu, 23 Dec 1999, Travis Casey
              wrote:\n> >> Combine multiple values in levels displayed to players.
              \ E.g., a mud\n> >> might internally use a linear system in which attributes
              average 50\n> >> and range up to 200 for some attributes, but range
              up to 500 for\n> >> others -- but remap all of them to show 5 as \"average\"
              to players and\n> >> 10 as \"maximum\".\n> \n> > This seems more confusing
              to the implementors than anything else.\n> > I don't see the point in
              obfuscating things at the implementation level.\n> \n> The point of
              having different scales isn't obfuscation; it's simply to\n> reflect
              the fact that in reality, different \"attributes\" have\n> different
              ranges.  Take strength and size, for example.  If we measure\n> both
              in terms of weight, we'll find that the strongest people in the\n> world
              are about four to five times as strong as an average person.\n> However,
              the heaviest people in the world weigh more than 10 times as\n> much
              as an average person.\n> \n> Thus, if we make 50 average for all attributes
              and use a linear scale,\n> the human maximum for strength should be
              in the area of 200 to 250,\n> while the maximum for size should be in
              the area of 500 or so.\n\nAhhhhhhh....okay, that's different.  I was
              thinking in terms of abstract\nstats like \"wisdom\" or \"constitution\"
              which really have no real world\nequivilents.  In those cases I like
              to use a fixed scale just to make\nlife easy on myself.  In the case
              of things that *do* have real-world\nmeasures, however, I always use
              those.  For example, all the weights on\nmy mud are in grams, including
              character weight.  Sizes (eg, character\nheight, blade length, or armor
              thickness) are in centimeters.  Ditto\nfor temperature, time, or preasure.\n\nI
              did go ahead and lump \"strength\" with the abstract stats, partially
              because\nI'm used to that in RPGs anyhow, and partially because it's
              a hard thing\nto measure.  Certainly you could say that strength is
              the maximum number of\nkilograms that the character can benchpress or
              deadlift, but I find this\nto be overly specific, so I stick with the
              abstract method.\n\n> Other examples can be given, but the basic idea
              is that you could use\n> this not only to obfuscate attributes some
              for players, but also to\n> show all attributes to players on, say,
              a 0 to 10 scale with 5 being\n> average while using different scales
              for different attributes\n> internally.\n\nOh, sure.  Rather than saying
              \"you're 1.9 meters tall\" you can say\n\"you're very tall\", depending
              on the relative scale of your world.\n\nCertainly, I don't display any
              values in their real-world scales simply\nbecause I don't want to break
              the mood.  Weights and lengths are shown\nin stones and handbredths,
              respectively (until I can think of something\nmore creative).\n\n> In
              fact, you might want to keep some attributes on \"reverse\" scales,\n>
              with lower values being better -- e.g., a reaction time attribute.\n>
              You could still remap such attributes to show \"normally\" to players.)\n\nYes.
              \ The only 'reverse' stat I currently use is fatigue: at 0 you are\ncompletely
              rested, and the number increases as you get more tired, with\nno real
              maximum.\n\nAdam\n\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: Re[6]: [MUD-Dev] The grass is always greener in the other
            field'
        from: Adam Wiggins <adam@angel.com>
        references: []
        date: 2000-01-03 18:12:38.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jysr6yY4
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *317
    parent: 
    children: []
  *270: *276
  *280: *282
  *129: *131
  ? &318 !ruby/object:MessageId
    raw: 000Dnso4@generated-message-id.chibrary.org
  : &327 !ruby/object:MessageContainer
    key: *318
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: Richard Woolcock <KaVir@dial.pipex.com>\nDate: Thu, 20 Jan 2000
          00:24:36 -0800\nSubject: Re: [MUD-Dev] Planet/Solar System Generation\n\nWes
          Connell wrote:\n> \n> On Tue, 18 Jan 2000, Nolan Darilek wrote:\n> \n> >
          Not sure how detailed these are, but have you seen the map/world\n> > generation
          tools at http://www.irony.com/webtools.html?\n> \n> I have looked at these.
          While they are good maps they seem to be pre-\n> generated and their cgi's
          simply choose a random map out of the bunch.\n> I assume that their software
          will actually create a new map each time though.\n> \n> btw: Thanks for
          the links guys. If we can get some more maybe we can put\n> them up in the
          kanga library.\n\nYou might also find this one useful:\n\nhttp://www.gamasutra.com/features/19990917/infinite_01.htm\n\nKaVir.\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Richard Woolcock <KaVir@dial.pipex.com>'
                name: From
                value: Richard Woolcock <KaVir@dial.pipex.com>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Thu, 20 Jan 2000 00:24:36 -0800'
                name: Date
                value: Thu, 20 Jan 2000 00:24:36 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: [MUD-Dev] Planet/Solar System Generation'
                name: Subject
                value: 'Re: [MUD-Dev] Planet/Solar System Generation'
              mbox_from: 
            body: "Wes Connell wrote:\n> \n> On Tue, 18 Jan 2000, Nolan Darilek wrote:\n>
              \n> > Not sure how detailed these are, but have you seen the map/world\n>
              > generation tools at http://www.irony.com/webtools.html?\n> \n> I have
              looked at these. While they are good maps they seem to be pre-\n> generated
              and their cgi's simply choose a random map out of the bunch.\n> I assume
              that their software will actually create a new map each time though.\n>
              \n> btw: Thanks for the links guys. If we can get some more maybe we
              can put\n> them up in the kanga library.\n\nYou might also find this
              one useful:\n\nhttp://www.gamasutra.com/features/19990917/infinite_01.htm\n\nKaVir.\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: [MUD-Dev] Planet/Solar System Generation'
        from: Richard Woolcock <KaVir@dial.pipex.com>
        references: []
        date: 2000-01-20 08:24:36.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 000Dnso4
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *318
    parent: &326 !ruby/object:MessageContainer
      key: &319 !ruby/object:MessageId
        raw: 00bj7qLo@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: Wes Connell <wconnell@adhesive.com>\nDate: Wed, 19 Jan 2000
            12:42:37 -0600 (CST)\nSubject: Re: [MUD-Dev] Planet/Solar System Generation\n\nOn
            Tue, 18 Jan 2000, Nolan Darilek wrote:\n\n> Not sure how detailed these
            are, but have you seen the map/world\n> generation tools at http://www.irony.com/webtools.html?\n\nI
            have looked at these. While they are good maps they seem to be pre-\ngenerated
            and their cgi's simply choose a random map out of the bunch.\nI assume
            that their software will actually create a new map each time though.\n\nbtw:
            Thanks for the links guys. If we can get some more maybe we can put \nthem
            up in the kanga library.\n\nWes Connell               wconnell@adhesive.com\nAdhesive
            Software, Inc. - Dynamic Web Site Management Solutions\nhttp://www.adhesive.com
            \       512-647-1200        512-647-1299 Fax\n!07/11 PDP a ni deppart
            m'I  !pleH\n\n\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: Wes Connell <wconnell@adhesive.com>'
                  name: From
                  value: Wes Connell <wconnell@adhesive.com>
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Wed, 19 Jan 2000 12:42:37 -0600 (CST)'
                  name: Date
                  value: Wed, 19 Jan 2000 12:42:37 -0600 (CST)
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] Planet/Solar System Generation'
                  name: Subject
                  value: 'Re: [MUD-Dev] Planet/Solar System Generation'
                mbox_from: 
              body: "On Tue, 18 Jan 2000, Nolan Darilek wrote:\n\n> Not sure how detailed
                these are, but have you seen the map/world\n> generation tools at
                http://www.irony.com/webtools.html?\n\nI have looked at these. While
                they are good maps they seem to be pre-\ngenerated and their cgi's
                simply choose a random map out of the bunch.\nI assume that their
                software will actually create a new map each time though.\n\nbtw:
                Thanks for the links guys. If we can get some more maybe we can put
                \nthem up in the kanga library.\n\nWes Connell               wconnell@adhesive.com\nAdhesive
                Software, Inc. - Dynamic Web Site Management Solutions\nhttp://www.adhesive.com
                \       512-647-1200        512-647-1299 Fax\n!07/11 PDP a ni deppart
                m'I  !pleH\n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] Planet/Solar System Generation'
          from: Wes Connell <wconnell@adhesive.com>
          references: []
          date: 2000-01-19 18:42:37.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: 00bj7qLo
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *319
      parent: &322 !ruby/object:MessageContainer
        key: &320 !ruby/object:MessageId
          raw: JzUMT8VM@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: |
              From: Nolan Darilek <nolan_d@bigfoot.com>
              Date: Tue, 18 Jan 2000 17:19:28 -0600 (CST)
              Subject: [MUD-Dev] Planet/Solar System Generation

              >>>>> "Wes" == Wes Connell <wconnell@adhesive.com> writes:

                  Wes> Does anyone have any good links to some planet/solar system
                  Wes> generation resources? I'm looking for some algorithms or cgis
                  Wes> that will correctly generate a planet. The depth of detail I
                  Wes> am looking for is like size of the planet, distance from its
                  Wes> star, size / temp of its star. At the same time making sure
                  Wes> the planet would be habitable and such. The physics behind
                  Wes> such a task are currently beyond my ability.

              One good resource is
              http://www.clark.net/pub/nyrath/starmap.html. That offers lots of
              information on issues concerning stars and planets, aimed more
              toward game designers, writers, etc. If you're only interested in
              planet generation, check out the links section at the end for cool
              starmap tools.

              Or, if none of that interests you at all, look at
              http://www.accesscom.com/~iburrell/create/accrete.html, which has
              several cool programs which use the Accretion algorithm to generate
              entire star systems. The generated systems include lots of detail on
              each planet, and using a few simple bits of information listed near
              the Accrete link on the first reference, you can calculate which gases
              a planet's gravity can hold. Combine the information generated by
              Accrete with the data in the catalog available from
              http://www.clark.net/pub/nyrath/gliese3.zip, and you can assign your
              ficticious planet to an actual known star. Sorry for the rambling;
              this question managed to land in one of my areas of interest, since
              I'm toying around with a few sci-fi world concepts. :)

              You may also wish to check out
              ftp://ftp.funet.fi/pub/doc/games/roleplay/texts/plangen.txt for an
              alternate system, though I haven't dug too deeply into this one. From
              what little I've read, it seems more inclined to dice throwing and
              randomness, which may not be what you're interested in since you've
              alluded to physics.

                  Wes> Also planet/terrain generation that is geophysically correct
                  Wes> would be great.  Even to go as far as plate movement, mineral
                  Wes> make up, and weather patterns.

              Not sure how detailed these are, but have you seen the map/world
              generation tools at http://www.irony.com/webtools.html?




              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: Nolan Darilek <nolan_d@bigfoot.com>'
                    name: From
                    value: Nolan Darilek <nolan_d@bigfoot.com>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Tue, 18 Jan 2000 17:19:28 -0600 (CST)'
                    name: Date
                    value: Tue, 18 Jan 2000 17:19:28 -0600 (CST)
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: [MUD-Dev] Planet/Solar System Generation'
                    name: Subject
                    value: "[MUD-Dev] Planet/Solar System Generation"
                  mbox_from: 
                body: |
                  >>>>> "Wes" == Wes Connell <wconnell@adhesive.com> writes:

                      Wes> Does anyone have any good links to some planet/solar system
                      Wes> generation resources? I'm looking for some algorithms or cgis
                      Wes> that will correctly generate a planet. The depth of detail I
                      Wes> am looking for is like size of the planet, distance from its
                      Wes> star, size / temp of its star. At the same time making sure
                      Wes> the planet would be habitable and such. The physics behind
                      Wes> such a task are currently beyond my ability.

                  One good resource is
                  http://www.clark.net/pub/nyrath/starmap.html. That offers lots of
                  information on issues concerning stars and planets, aimed more
                  toward game designers, writers, etc. If you're only interested in
                  planet generation, check out the links section at the end for cool
                  starmap tools.

                  Or, if none of that interests you at all, look at
                  http://www.accesscom.com/~iburrell/create/accrete.html, which has
                  several cool programs which use the Accretion algorithm to generate
                  entire star systems. The generated systems include lots of detail on
                  each planet, and using a few simple bits of information listed near
                  the Accrete link on the first reference, you can calculate which gases
                  a planet's gravity can hold. Combine the information generated by
                  Accrete with the data in the catalog available from
                  http://www.clark.net/pub/nyrath/gliese3.zip, and you can assign your
                  ficticious planet to an actual known star. Sorry for the rambling;
                  this question managed to land in one of my areas of interest, since
                  I'm toying around with a few sci-fi world concepts. :)

                  You may also wish to check out
                  ftp://ftp.funet.fi/pub/doc/games/roleplay/texts/plangen.txt for an
                  alternate system, though I haven't dug too deeply into this one. From
                  what little I've read, it seems more inclined to dice throwing and
                  randomness, which may not be what you're interested in since you've
                  alluded to physics.

                      Wes> Also planet/terrain generation that is geophysically correct
                      Wes> would be great.  Even to go as far as plate movement, mineral
                      Wes> make up, and weather patterns.

                  Not sure how detailed these are, but have you seen the map/world
                  generation tools at http://www.irony.com/webtools.html?




                  _______________________________________________
                  MUD-Dev maillist  -  MUD-Dev@kanga.nu
                  http://www.kanga.nu/lists/listinfo/mud-dev
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: "[MUD-Dev] Planet/Solar System Generation"
            from: Nolan Darilek <nolan_d@bigfoot.com>
            references: []
            date: 2000-01-18 23:19:28.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: JzUMT8VM
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *320
        parent: &433 !ruby/object:MessageContainer
          key: &321 !ruby/object:MessageId
            raw: JzBblyO8@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: Wes Connell <wconnell@adhesive.com>\nDate: Tue, 18 Jan 2000
                15:01:05 -0600 (CST)\nSubject: [MUD-Dev] Planet/Solar System Generation\n\nDoes
                anyone have any good links to some planet/solar system generation
                \nresources? I'm looking for some algorithms or cgis that will correctly
                \ngenerate a planet. The depth of detail I am looking for is like
                size of the\nplanet, distance from its star, size / temp of its star.
                At the same time \nmaking sure the planet would be habitable and such.
                The physics behind such\na task are currently beyond my ability.\n\nAlso
                planet/terrain generation that is geophysically correct would be great.\nEven
                to go as far as plate movement, mineral make up, and weather patterns.\n\nAnyone
                know of such resources?\n\nWes Connell               wconnell@adhesive.com\nAdhesive
                Software, Inc. - Dynamic Web Site Management Solutions\nhttp://www.adhesive.com
                \       512-647-1200        512-647-1299 Fax\n!07/11 PDP a ni deppart
                m'I  !pleH\n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: Wes Connell <wconnell@adhesive.com>'
                      name: From
                      value: Wes Connell <wconnell@adhesive.com>
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Tue, 18 Jan 2000 15:01:05 -0600 (CST)'
                      name: Date
                      value: Tue, 18 Jan 2000 15:01:05 -0600 (CST)
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: [MUD-Dev] Planet/Solar System Generation'
                      name: Subject
                      value: "[MUD-Dev] Planet/Solar System Generation"
                    mbox_from: 
                  body: "Does anyone have any good links to some planet/solar system
                    generation \nresources? I'm looking for some algorithms or cgis
                    that will correctly \ngenerate a planet. The depth of detail I
                    am looking for is like size of the\nplanet, distance from its
                    star, size / temp of its star. At the same time \nmaking sure
                    the planet would be habitable and such. The physics behind such\na
                    task are currently beyond my ability.\n\nAlso planet/terrain generation
                    that is geophysically correct would be great.\nEven to go as far
                    as plate movement, mineral make up, and weather patterns.\n\nAnyone
                    know of such resources?\n\nWes Connell               wconnell@adhesive.com\nAdhesive
                    Software, Inc. - Dynamic Web Site Management Solutions\nhttp://www.adhesive.com
                    \       512-647-1200        512-647-1299 Fax\n!07/11 PDP a ni
                    deppart m'I  !pleH\n\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: "[MUD-Dev] Planet/Solar System Generation"
              from: Wes Connell <wconnell@adhesive.com>
              references: []
              date: 2000-01-18 21:01:05.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: JzBblyO8
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *321
          parent: 
          children:
          - *322
        children:
        - &325 !ruby/object:MessageContainer
          key: &323 !ruby/object:MessageId
            raw: 00uTmqCu@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: |
                From: "Christopher Allen" <ChristopherA@skotos.net>
                Date: Thu, 20 Jan 2000 00:17:56 -0800
                Subject: Re: [MUD-Dev] Planet/Solar System Generation

                From: "Wes Connell" <wconnell@adhesive.com>":
                > Does anyone have any good links to some planet/solar system generation
                > resources? I'm looking for some algorithms or cgis that will correctly
                > generate a planet. The depth of detail I am looking for is like size of
                the
                > planet, distance from its star, size / temp of its star. At the same time
                > making sure the planet would be habitable and such. The physics behind
                such
                > a task are currently beyond my ability.
                >
                > Also planet/terrain generation that is geophysically correct would be
                great.
                > Even to go as far as plate movement, mineral make up, and weather
                patterns.
                >
                > Anyone know of such resources?

                Most of my favorite resources in this area are listed at:

                Three-D Starmaps -- <http://www.clark.net/pub/nyrath/starmap.html>
                Wolrd Building -- <http://www.hut.fi/~vesanto/world.build.html>
                How to Build a World --
                <http://www.rz.uni-frankfurt.de/~feist/games/w-build.html>
                CSU WorldBuilders --
                <http://web.calstatela.edu/academic/builders/index.html>
                Alien Design Biblograph -- <http://www.branta.demon.co.uk/alien-design/>
                Principles of Planetary Biology --
                <http://www.planetarybiology.com/principl.htm>
                Application - It's Full of Stars --
                <http://www.geocities.com/CapeCanaveral/7472/ifosweb/index.htm>
                Applications - WorldBuilder 1.6
                <http://www.best.com/~jendave/builder/world/index.html>
                Application - Star Generator
                <http://www.best.com/~jendave/builder/world/index.html>
                Application - Terragen <http://planetside.co.uk/terragen/tginstall.shtml>
                Application - Warp <http://archiginnasio.dsnet.it/max/warp/>
                Web Application - Fractal Worldmap program
                <http://www.lysator.liu.se/~johol/fwmg/fwmg.html>
                Web Application - An applet for synthesising solar systems
                <http://www.geocities.com/Area51/6902/w_accr.html>
                Web Application - Alien Planet Designer

                ------------------------------------------------------------------------
                .. Christopher Allen                                 Skotos Tech Inc. ..
                ..                           1512 Walnut St., Berkeley, CA 94709-1513 ..
                .. <http://www.Skotos.net>               o510/649-4030  f510/649-4034 ..




                _______________________________________________
                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                http://www.kanga.nu/lists/listinfo/mud-dev
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: "Christopher Allen" <ChristopherA@skotos.net>'
                      name: From
                      value: '"Christopher Allen" <ChristopherA@skotos.net>'
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Thu, 20 Jan 2000 00:17:56 -0800'
                      name: Date
                      value: Thu, 20 Jan 2000 00:17:56 -0800
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Planet/Solar System Generation'
                      name: Subject
                      value: 'Re: [MUD-Dev] Planet/Solar System Generation'
                    mbox_from: 
                  body: |
                    From: "Wes Connell" <wconnell@adhesive.com>":
                    > Does anyone have any good links to some planet/solar system generation
                    > resources? I'm looking for some algorithms or cgis that will correctly
                    > generate a planet. The depth of detail I am looking for is like size of
                    the
                    > planet, distance from its star, size / temp of its star. At the same time
                    > making sure the planet would be habitable and such. The physics behind
                    such
                    > a task are currently beyond my ability.
                    >
                    > Also planet/terrain generation that is geophysically correct would be
                    great.
                    > Even to go as far as plate movement, mineral make up, and weather
                    patterns.
                    >
                    > Anyone know of such resources?

                    Most of my favorite resources in this area are listed at:

                    Three-D Starmaps -- <http://www.clark.net/pub/nyrath/starmap.html>
                    Wolrd Building -- <http://www.hut.fi/~vesanto/world.build.html>
                    How to Build a World --
                    <http://www.rz.uni-frankfurt.de/~feist/games/w-build.html>
                    CSU WorldBuilders --
                    <http://web.calstatela.edu/academic/builders/index.html>
                    Alien Design Biblograph -- <http://www.branta.demon.co.uk/alien-design/>
                    Principles of Planetary Biology --
                    <http://www.planetarybiology.com/principl.htm>
                    Application - It's Full of Stars --
                    <http://www.geocities.com/CapeCanaveral/7472/ifosweb/index.htm>
                    Applications - WorldBuilder 1.6
                    <http://www.best.com/~jendave/builder/world/index.html>
                    Application - Star Generator
                    <http://www.best.com/~jendave/builder/world/index.html>
                    Application - Terragen <http://planetside.co.uk/terragen/tginstall.shtml>
                    Application - Warp <http://archiginnasio.dsnet.it/max/warp/>
                    Web Application - Fractal Worldmap program
                    <http://www.lysator.liu.se/~johol/fwmg/fwmg.html>
                    Web Application - An applet for synthesising solar systems
                    <http://www.geocities.com/Area51/6902/w_accr.html>
                    Web Application - Alien Planet Designer

                    ------------------------------------------------------------------------
                    .. Christopher Allen                                 Skotos Tech Inc. ..
                    ..                           1512 Walnut St., Berkeley, CA 94709-1513 ..
                    .. <http://www.Skotos.net>               o510/649-4030  f510/649-4034 ..




                    _______________________________________________
                    MUD-Dev maillist  -  MUD-Dev@kanga.nu
                    http://www.kanga.nu/lists/listinfo/mud-dev
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Planet/Solar System Generation'
              from: Christopher Allen <ChristopherA@skotos.net>
              references: []
              date: 2000-01-20 08:17:56.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: 00uTmqCu
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *323
          parent: *322
          children:
          - &444 !ruby/object:MessageContainer
            key: &324 !ruby/object:MessageId
              raw: 00IySsdc@generated-message-id.chibrary.org
            value: !ruby/object:Message
              email: !ruby/object:Email
                raw: "From: icecube@ihug.co.nz\nDate: Wed, 19 Jan 2000 10:49:54 +1300\nSubject:
                  Re: [MUD-Dev] Planet/Solar System Generation\n\nOn Tue, Jan 18,
                  2000 at 03:01:05PM -0600, Wes Connell wrote:\n> \n> Does anyone
                  have any good links to some planet/solar system generation \n> resources?
                  I'm looking for some algorithms or cgis that will correctly \n>
                  generate a planet. The depth of detail I am looking for is like
                  size of the\n> planet, distance from its star, size / temp of its
                  star. At the same time \n> making sure the planet would be habitable
                  and such. The physics behind such\n> a task are currently beyond
                  my ability.\n\nTry: http://www.compulink.co.uk/~vicarage/planets/\n\nIt's
                  a CGI interface to a star/planet generator:\n\n   Forms allow you
                  to select a pair of starting points from a set of both\n   real
                  stars and planets and those from Science Fiction. It is possible\n
                  \  to design your own worlds. The Sun-Earth-Moon combination can
                  always\n   be chosen for comparison.\n\nIt generates a lot of general
                  information (rotational period, gravity,\nescape velocity, etc)
                  about a star/planet/moon system. Also there's a lot of\nreference
                  information covering the details of the calculations it performs.\n\n--\nOliver
                  Jowett - icecube@ihug.co.nz - http://homepages.ihug.co.nz/~icecube/\nKeyID:
                  1024/679D94C5  Fingerprint: CD94 5270 E2F4 339F 6A90 05C9 9DE4 EECC\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                header: !ruby/object:Headers
                  rmail: !ruby/object:RMail::Message
                    header: !ruby/object:RMail::Header
                      fields:
                      - !ruby/object:RMail::Header::Field
                        raw: 'From: icecube@ihug.co.nz'
                        name: From
                        value: icecube@ihug.co.nz
                      - !ruby/object:RMail::Header::Field
                        raw: 'Date: Wed, 19 Jan 2000 10:49:54 +1300'
                        name: Date
                        value: Wed, 19 Jan 2000 10:49:54 +1300
                      - !ruby/object:RMail::Header::Field
                        raw: 'Subject: Re: [MUD-Dev] Planet/Solar System Generation'
                        name: Subject
                        value: 'Re: [MUD-Dev] Planet/Solar System Generation'
                      mbox_from: 
                    body: "On Tue, Jan 18, 2000 at 03:01:05PM -0600, Wes Connell wrote:\n>
                      \n> Does anyone have any good links to some planet/solar system
                      generation \n> resources? I'm looking for some algorithms or
                      cgis that will correctly \n> generate a planet. The depth of
                      detail I am looking for is like size of the\n> planet, distance
                      from its star, size / temp of its star. At the same time \n>
                      making sure the planet would be habitable and such. The physics
                      behind such\n> a task are currently beyond my ability.\n\nTry:
                      http://www.compulink.co.uk/~vicarage/planets/\n\nIt's a CGI
                      interface to a star/planet generator:\n\n   Forms allow you
                      to select a pair of starting points from a set of both\n   real
                      stars and planets and those from Science Fiction. It is possible\n
                      \  to design your own worlds. The Sun-Earth-Moon combination
                      can always\n   be chosen for comparison.\n\nIt generates a lot
                      of general information (rotational period, gravity,\nescape
                      velocity, etc) about a star/planet/moon system. Also there's
                      a lot of\nreference information covering the details of the
                      calculations it performs.\n\n--\nOliver Jowett - icecube@ihug.co.nz
                      - http://homepages.ihug.co.nz/~icecube/\nKeyID: 1024/679D94C5
                      \ Fingerprint: CD94 5270 E2F4 339F 6A90 05C9 9DE4 EECC\n\n\n\n_______________________________________________\nMUD-Dev
                      maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                    epilogue: 
                    preamble: 
                message_id: !ruby/object:MessageId
                  raw: "[invalid or missing message id]"
                subject: !ruby/object:Subject
                  original: 'Re: [MUD-Dev] Planet/Solar System Generation'
                from: icecube@ihug.co.nz
                references: []
                date: 2000-01-18 21:49:54.000000000 Z
                no_archive: false
              call_number: !ruby/object:CallNumber
                str: 00IySsdc
              source: archive
              list: !ruby/object:List
                slug: mud-dev
                name: 
                description: 
                homepage: 
                footer: 
              message_id: *324
            parent: *325
            children: []
        - *326
      children:
      - *327
      - &394 !ruby/object:MessageContainer
        key: &328 !ruby/object:MessageId
          raw: Jzn75vxQ@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Sun, 30 Jan 2000 16:11:19
              -0800\nSubject: Re: [MUD-Dev] Planet/Solar System Generation\n\nOn Wed,
              19 Jan 2000 12:42:37 -0600 (CST) \nWes Connell <wconnell@adhesive.com>
              wrote:\n\n> btw: Thanks for the links guys. If we can get some more
              maybe we\n> can put them up in the kanga library.\n\nDone.  Tho I wouldn't
              mind at all if y'all did the data entry\ninstead of me...\n\n  http://www.kanga.nu/library.php3?viewCat=145\n\n--\nJ
              C Lawrence                                 Home: claw@kanga.nu\n----------(*)
              \                             Other: coder@kanga.nu\n--=| A man is as
              sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: J C Lawrence <claw@kanga.nu>'
                    name: From
                    value: J C Lawrence <claw@kanga.nu>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Sun, 30 Jan 2000 16:11:19 -0800'
                    name: Date
                    value: Sun, 30 Jan 2000 16:11:19 -0800
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] Planet/Solar System Generation'
                    name: Subject
                    value: 'Re: [MUD-Dev] Planet/Solar System Generation'
                  mbox_from: 
                body: "On Wed, 19 Jan 2000 12:42:37 -0600 (CST) \nWes Connell <wconnell@adhesive.com>
                  wrote:\n\n> btw: Thanks for the links guys. If we can get some more
                  maybe we\n> can put them up in the kanga library.\n\nDone.  Tho
                  I wouldn't mind at all if y'all did the data entry\ninstead of me...\n\n
                  \ http://www.kanga.nu/library.php3?viewCat=145\n\n--\nJ C Lawrence
                  \                                Home: claw@kanga.nu\n----------(*)
                  \                             Other: coder@kanga.nu\n--=| A man
                  is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] Planet/Solar System Generation'
            from: J C Lawrence <claw@kanga.nu>
            references: []
            date: 2000-01-31 00:11:19.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: Jzn75vxQ
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *328
        parent: *326
        children: []
    children: []
  ? &329 !ruby/object:MessageId
    raw: Jzmy0kjo@generated-message-id.chibrary.org
  : &337 !ruby/object:MessageContainer
    key: *329
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: Kevin Littlejohn <darius@connect.com.au>\nDate: Tue, 18 Jan 2000
          13:28:02 +1100\nSubject: Re: [MUD-Dev] Re: Databases\n\n>>> \"Laurent Bossavit\"
          wrote\n> [On databases in general]\n> \n> I wouldn't use MySQL - the fastest
          SQL database around - for a MUD. \n> It's optimized for ultra-frequent fetches
          of small to medium large \n> chunks of information; our databases services
          50 queries/sec and \n\nHrm.  I'd have said that ultra-frequent fetches of
          small to medium chunks\nof info is pretty much exactly where a mud sits.
          \ Of course, that depends\nreally heavily on _what_ you're using a database
          for.  If you're using it\ninstead of file storage for characters, then it
          probably doesn't matter\n_what_ you use.  If you're using it to hold all
          your live game data, then\nthings get a bit trickier...\n\nMySQL seems to
          work out nicely for us - admittedly, I've yet to see a\nstrain on the thing,
          but from what I've seen, I've got no concerns there.\nWhat it _does_ lack,
          however, are transactions, and sub-selects - both of\nwhich would help considerably
          in design ;)\n\nOthers:  gadfly (python-based, if you know the layout of
          your tables it's\nprobably fastest, but equates out to having all data in
          memory at all times),\nmSQL (dunno, haven't looked at it for a long time),
          Oracle (overblown,\nslower than MySQL, but by $DIETY it does everything,
          including 'connected\nby', which would be a _joy_ to use - provides for
          object hierarchies really\nnicely), PostgreSQL (which _does_ look nice,
          and has some nifty tricks that\nmay help on the OO side...  But which I
          couldn't fathom large object/blob\nsupport for, so I gave up early).  The
          list goes on, of course... ;)\n\n> about a quarter of a gigabyte. It all
          fits on one (admittedly beefed \n> up) machine. But I wouldn't use any of
          the \"big\" databases either; \n> they are optimized to scale to terabytes
          of data, with robustness and \n> consistency of the data given much higher
          priority than performance.\n\nAgain, I suspect it depends on what you're
          aiming for.  Transaction support\nunder Oracle would be a godsend - kiss
          locking issues goodbye, pretty much,\nif you plan things out right data
          consistency is a non-issue.  Also, Oracle\ndoes nice distributed database
          tricks - if you're willing to spend the\ndollars for your mud ;)\n\n> Fact
          is, I wouldn't consider using an SQL database for a M* type \n> application;
          it's too much of a pain to map SQL records to the object \n> oriented data
          used in most such software. My wish would be for a \n\nThis, I almost agree
          with ;)  I have a layer set aside in Moebius that\nmaps SQL to OO, and it's
          a right pain.  In addition, the quickest way to do\nsome things is no longer
          the obvious way - when the rest of your\nprogramming world is OO-based,
          to suddenly discover that queries across the\nmud (to find a particular
          type of item, for example) can be done much\nquicker if you acknowledge
          the underlying non-OO-ness of the data store -\nwell, it throws an abstract
          spanner in the abstract works, if that makes\nsense ;)\n\n> native XML data
          store, with the ease of use and top-notch performance \n> of MySQL, and
          a query language as useful and usable as SQL. This \n> would be perfect
          for a MUD, and in fact many other types of \n> applications - with a good
          XML database you don't need SQL, you don't \n> need an OODBMS (XML-Data
          bindings do the OO part, the data store does \n> the dirty work), you don't
          need much of anything. Unfortunately there \n> isn't such a thing out there
          yet.\n\nThere _are_ OO-specific databases out there - Oracle have recently
          (with\n8i, I think) started adding an OO layer to their stuff, so you can
          treat\nthings as 'objects' inside the db, and let oracle work out how to
          map that\nbest.  That's hackish, I suspect, but presumably works into their
          XML\nsupport as well.  Would not the OODBMS's of this world put you a good
          way\ntoward this?\n\nMy attitude is still that databases do some things
          really well - storing\ndata, and for relationals, working out what links
          to what - and while they\nmay not be _ideal_ for muds, the chance of any
          given mud thrashing any\ngiven database is still pretty slim at the moment.
          \ It seems as though db's\nare generally a win over flat text files, so
          even if you use them as a\nstrange sort of disk space, they're a win - let
          alone abstracting and\nplaying with some of the other tricks they'd allow.\n\n>
          \n> Sigh.\n\nWhat he said ;)\n\nKevinL\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Kevin Littlejohn <darius@connect.com.au>'
                name: From
                value: Kevin Littlejohn <darius@connect.com.au>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Tue, 18 Jan 2000 13:28:02 +1100'
                name: Date
                value: Tue, 18 Jan 2000 13:28:02 +1100
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: [MUD-Dev] Re: Databases'
                name: Subject
                value: 'Re: [MUD-Dev] Re: Databases'
              mbox_from: 
            body: ">>> \"Laurent Bossavit\" wrote\n> [On databases in general]\n>
              \n> I wouldn't use MySQL - the fastest SQL database around - for a MUD.
              \n> It's optimized for ultra-frequent fetches of small to medium large
              \n> chunks of information; our databases services 50 queries/sec and
              \n\nHrm.  I'd have said that ultra-frequent fetches of small to medium
              chunks\nof info is pretty much exactly where a mud sits.  Of course,
              that depends\nreally heavily on _what_ you're using a database for.
              \ If you're using it\ninstead of file storage for characters, then it
              probably doesn't matter\n_what_ you use.  If you're using it to hold
              all your live game data, then\nthings get a bit trickier...\n\nMySQL
              seems to work out nicely for us - admittedly, I've yet to see a\nstrain
              on the thing, but from what I've seen, I've got no concerns there.\nWhat
              it _does_ lack, however, are transactions, and sub-selects - both of\nwhich
              would help considerably in design ;)\n\nOthers:  gadfly (python-based,
              if you know the layout of your tables it's\nprobably fastest, but equates
              out to having all data in memory at all times),\nmSQL (dunno, haven't
              looked at it for a long time), Oracle (overblown,\nslower than MySQL,
              but by $DIETY it does everything, including 'connected\nby', which would
              be a _joy_ to use - provides for object hierarchies really\nnicely),
              PostgreSQL (which _does_ look nice, and has some nifty tricks that\nmay
              help on the OO side...  But which I couldn't fathom large object/blob\nsupport
              for, so I gave up early).  The list goes on, of course... ;)\n\n> about
              a quarter of a gigabyte. It all fits on one (admittedly beefed \n> up)
              machine. But I wouldn't use any of the \"big\" databases either; \n>
              they are optimized to scale to terabytes of data, with robustness and
              \n> consistency of the data given much higher priority than performance.\n\nAgain,
              I suspect it depends on what you're aiming for.  Transaction support\nunder
              Oracle would be a godsend - kiss locking issues goodbye, pretty much,\nif
              you plan things out right data consistency is a non-issue.  Also, Oracle\ndoes
              nice distributed database tricks - if you're willing to spend the\ndollars
              for your mud ;)\n\n> Fact is, I wouldn't consider using an SQL database
              for a M* type \n> application; it's too much of a pain to map SQL records
              to the object \n> oriented data used in most such software. My wish
              would be for a \n\nThis, I almost agree with ;)  I have a layer set
              aside in Moebius that\nmaps SQL to OO, and it's a right pain.  In addition,
              the quickest way to do\nsome things is no longer the obvious way - when
              the rest of your\nprogramming world is OO-based, to suddenly discover
              that queries across the\nmud (to find a particular type of item, for
              example) can be done much\nquicker if you acknowledge the underlying
              non-OO-ness of the data store -\nwell, it throws an abstract spanner
              in the abstract works, if that makes\nsense ;)\n\n> native XML data
              store, with the ease of use and top-notch performance \n> of MySQL,
              and a query language as useful and usable as SQL. This \n> would be
              perfect for a MUD, and in fact many other types of \n> applications
              - with a good XML database you don't need SQL, you don't \n> need an
              OODBMS (XML-Data bindings do the OO part, the data store does \n> the
              dirty work), you don't need much of anything. Unfortunately there \n>
              isn't such a thing out there yet.\n\nThere _are_ OO-specific databases
              out there - Oracle have recently (with\n8i, I think) started adding
              an OO layer to their stuff, so you can treat\nthings as 'objects' inside
              the db, and let oracle work out how to map that\nbest.  That's hackish,
              I suspect, but presumably works into their XML\nsupport as well.  Would
              not the OODBMS's of this world put you a good way\ntoward this?\n\nMy
              attitude is still that databases do some things really well - storing\ndata,
              and for relationals, working out what links to what - and while they\nmay
              not be _ideal_ for muds, the chance of any given mud thrashing any\ngiven
              database is still pretty slim at the moment.  It seems as though db's\nare
              generally a win over flat text files, so even if you use them as a\nstrange
              sort of disk space, they're a win - let alone abstracting and\nplaying
              with some of the other tricks they'd allow.\n\n> \n> Sigh.\n\nWhat he
              said ;)\n\nKevinL\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: [MUD-Dev] Re: Databases'
        from: Kevin Littlejohn <darius@connect.com.au>
        references: []
        date: 2000-01-18 02:28:02.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jzmy0kjo
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *329
    parent: &335 !ruby/object:MessageContainer
      key: &330 !ruby/object:MessageId
        raw: 00uTmp7o@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: \"Laurent Bossavit\" <bossavit@cybercable.fr>\nDate: Tue, 18
            Jan 2000 00:15:09 +0100\nSubject: Re: [MUD-Dev] Re: Databases\n\n[On databases
            in general]\n\nI wouldn't use MySQL - the fastest SQL database around
            - for a MUD. \nIt's optimized for ultra-frequent fetches of small to medium
            large \nchunks of information; our databases services 50 queries/sec and
            \nabout a quarter of a gigabyte. It all fits on one (admittedly beefed
            \nup) machine. But I wouldn't use any of the \"big\" databases either;
            \nthey are optimized to scale to terabytes of data, with robustness and
            \nconsistency of the data given much higher priority than performance.\n\nFact
            is, I wouldn't consider using an SQL database for a M* type \napplication;
            it's too much of a pain to map SQL records to the object \noriented data
            used in most such software. My wish would be for a \nnative XML data store,
            with the ease of use and top-notch performance \nof MySQL, and a query
            language as useful and usable as SQL. This \nwould be perfect for a MUD,
            and in fact many other types of \napplications - with a good XML database
            you don't need SQL, you don't \nneed an OODBMS (XML-Data bindings do the
            OO part, the data store does \nthe dirty work), you don't need much of
            anything. Unfortunately there \nisn't such a thing out there yet.\n\nSigh.\n\n\n-[Morendil]-\nDisk
            crash in progress - tagline service interrupted.\n\n\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: "Laurent Bossavit" <bossavit@cybercable.fr>'
                  name: From
                  value: '"Laurent Bossavit" <bossavit@cybercable.fr>'
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Tue, 18 Jan 2000 00:15:09 +0100'
                  name: Date
                  value: Tue, 18 Jan 2000 00:15:09 +0100
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] Re: Databases'
                  name: Subject
                  value: 'Re: [MUD-Dev] Re: Databases'
                mbox_from: 
              body: "[On databases in general]\n\nI wouldn't use MySQL - the fastest
                SQL database around - for a MUD. \nIt's optimized for ultra-frequent
                fetches of small to medium large \nchunks of information; our databases
                services 50 queries/sec and \nabout a quarter of a gigabyte. It all
                fits on one (admittedly beefed \nup) machine. But I wouldn't use any
                of the \"big\" databases either; \nthey are optimized to scale to
                terabytes of data, with robustness and \nconsistency of the data given
                much higher priority than performance.\n\nFact is, I wouldn't consider
                using an SQL database for a M* type \napplication; it's too much of
                a pain to map SQL records to the object \noriented data used in most
                such software. My wish would be for a \nnative XML data store, with
                the ease of use and top-notch performance \nof MySQL, and a query
                language as useful and usable as SQL. This \nwould be perfect for
                a MUD, and in fact many other types of \napplications - with a good
                XML database you don't need SQL, you don't \nneed an OODBMS (XML-Data
                bindings do the OO part, the data store does \nthe dirty work), you
                don't need much of anything. Unfortunately there \nisn't such a thing
                out there yet.\n\nSigh.\n\n\n-[Morendil]-\nDisk crash in progress
                - tagline service interrupted.\n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] Re: Databases'
          from: Laurent Bossavit <bossavit@cybercable.fr>
          references: []
          date: 2000-01-17 23:15:09.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: 00uTmp7o
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *330
      parent: &333 !ruby/object:MessageContainer
        key: &331 !ruby/object:MessageId
          raw: 00uTkdou@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: |
              From: "T. Alexander Popiel" <popiel@wolfskeep.com>
              Date: Sun, 16 Jan 2000 08:38:05 -0800
              Subject: [MUD-Dev] Re: Databases

              >Message-ID: <01BF5F7A.CD766340.charles.hughes@bigfoot.com>
              >From: Charles Hughes <charles.hughes@bigfoot.com>
              >Date: Sat, 15 Jan 2000 17:06:02 -0500

              >At the risk of being slapped by a mackerel, who here really thinks they
              >can do a better database design than those afforded by the likes of the
              >free or commercial databases?  [I'll ask those here who've actually
              >worked on these databases not to chime in. :)]

              For the limited problem set of a MUD world, yes, I think that I can
              design a better database than one of the free or commercial ones.
              There is a simple reason for this: commercial databases want to
              pretend that you are the only person using the database at this time,
              while a MUD wants to glorify the fact that there's a lot of other
              people there that you are (forced into?) interacting with.

              Getting a little more specific, the commercial databases (and
              generally the free ones that I've seen, too) are optimized for
              relatively few large transactions where there is relatively little
              overlap and contention, frequently with rollback as the contention
              handling mechanism.  A MUD world has extremely small transactions
              (open/close of a door, get the contents list of a room) with
              contention being extremely frequent, and rollback is a very
              unsatisfying contention handling mechanism.

              There's also (for the user-programmable MUDs at least) an issue
              of ease-of-use, since many of the people writing code for the
              MUD will _not_ be experienced coders who think through all the
              special cases.  In commercial databases (at least the ones that
              I've seen), you have to make at least token acknowledgement that
              some operation may fail, either by explicitly asserting a lock
              to prevent contention, or by setting up a retry loop to handle
              rollback, or by breaking up your transactions into less contentious
              pieces.  These things _are not obvious_ to the novice coder, and
              thus lead to unsafe code being written, and failures that utterly
              confuse the users.  Even worse, when the novice coders learn of
              some of this, they are likely to try writing retry loops without
              any limiting factors (or other similar fax pass), turning a simple
              failure or deadlock into CPU-eating starvation.

              A good MUD database will make the common operations easy, and
              will protect the user from the obvious mistakes.  This often
              takes the form of making player and mob movement atomic, giving
              easy access to contents lists as a single unit, etc.  The exact
              operations that need to be protected will vary greatly based on
              the physics of your MUD world (the presence or lack of long-range
              effects will greatly effect whether or not you need global
              synchronization of the database, for instance).  Because of this
              variability, I strongly believe that there is no one right solution
              to the MUD database design problem, and moreover that the extant
              commercial and free databases don't come even close to providing
              what most MUDs need.

              - Alex



              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: "T. Alexander Popiel" <popiel@wolfskeep.com>'
                    name: From
                    value: '"T. Alexander Popiel" <popiel@wolfskeep.com>'
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Sun, 16 Jan 2000 08:38:05 -0800'
                    name: Date
                    value: Sun, 16 Jan 2000 08:38:05 -0800
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: [MUD-Dev] Re: Databases'
                    name: Subject
                    value: "[MUD-Dev] Re: Databases"
                  mbox_from: 
                body: |
                  >Message-ID: <01BF5F7A.CD766340.charles.hughes@bigfoot.com>
                  >From: Charles Hughes <charles.hughes@bigfoot.com>
                  >Date: Sat, 15 Jan 2000 17:06:02 -0500

                  >At the risk of being slapped by a mackerel, who here really thinks they
                  >can do a better database design than those afforded by the likes of the
                  >free or commercial databases?  [I'll ask those here who've actually
                  >worked on these databases not to chime in. :)]

                  For the limited problem set of a MUD world, yes, I think that I can
                  design a better database than one of the free or commercial ones.
                  There is a simple reason for this: commercial databases want to
                  pretend that you are the only person using the database at this time,
                  while a MUD wants to glorify the fact that there's a lot of other
                  people there that you are (forced into?) interacting with.

                  Getting a little more specific, the commercial databases (and
                  generally the free ones that I've seen, too) are optimized for
                  relatively few large transactions where there is relatively little
                  overlap and contention, frequently with rollback as the contention
                  handling mechanism.  A MUD world has extremely small transactions
                  (open/close of a door, get the contents list of a room) with
                  contention being extremely frequent, and rollback is a very
                  unsatisfying contention handling mechanism.

                  There's also (for the user-programmable MUDs at least) an issue
                  of ease-of-use, since many of the people writing code for the
                  MUD will _not_ be experienced coders who think through all the
                  special cases.  In commercial databases (at least the ones that
                  I've seen), you have to make at least token acknowledgement that
                  some operation may fail, either by explicitly asserting a lock
                  to prevent contention, or by setting up a retry loop to handle
                  rollback, or by breaking up your transactions into less contentious
                  pieces.  These things _are not obvious_ to the novice coder, and
                  thus lead to unsafe code being written, and failures that utterly
                  confuse the users.  Even worse, when the novice coders learn of
                  some of this, they are likely to try writing retry loops without
                  any limiting factors (or other similar fax pass), turning a simple
                  failure or deadlock into CPU-eating starvation.

                  A good MUD database will make the common operations easy, and
                  will protect the user from the obvious mistakes.  This often
                  takes the form of making player and mob movement atomic, giving
                  easy access to contents lists as a single unit, etc.  The exact
                  operations that need to be protected will vary greatly based on
                  the physics of your MUD world (the presence or lack of long-range
                  effects will greatly effect whether or not you need global
                  synchronization of the database, for instance).  Because of this
                  variability, I strongly believe that there is no one right solution
                  to the MUD database design problem, and moreover that the extant
                  commercial and free databases don't come even close to providing
                  what most MUDs need.

                  - Alex



                  _______________________________________________
                  MUD-Dev maillist  -  MUD-Dev@kanga.nu
                  http://www.kanga.nu/lists/listinfo/mud-dev
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: "[MUD-Dev] Re: Databases"
            from: T. Alexander Popiel <popiel@wolfskeep.com>
            references: []
            date: 2000-01-16 16:38:05.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 00uTkdou
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *331
        parent: 
        children:
        - &402 !ruby/object:MessageContainer
          key: &332 !ruby/object:MessageId
            raw: Jysr9Axc@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: |
                From: "Dream Weaver at home" <windminstrel@home.net>
                Date: Mon, 17 Jan 2000 20:46:42 -0500
                Subject: Re: [MUD-Dev] Re: Databases

                re XML databases:

                have you looked into the M$ XML/SQL interfaces? Though limited in
                performance, they still manage to spit out fairly decent XML...




                _______________________________________________
                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                http://www.kanga.nu/lists/listinfo/mud-dev
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: "Dream Weaver at home" <windminstrel@home.net>'
                      name: From
                      value: '"Dream Weaver at home" <windminstrel@home.net>'
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Mon, 17 Jan 2000 20:46:42 -0500'
                      name: Date
                      value: Mon, 17 Jan 2000 20:46:42 -0500
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Re: Databases'
                      name: Subject
                      value: 'Re: [MUD-Dev] Re: Databases'
                    mbox_from: 
                  body: |
                    re XML databases:

                    have you looked into the M$ XML/SQL interfaces? Though limited in
                    performance, they still manage to spit out fairly decent XML...




                    _______________________________________________
                    MUD-Dev maillist  -  MUD-Dev@kanga.nu
                    http://www.kanga.nu/lists/listinfo/mud-dev
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Re: Databases'
              from: Dream Weaver at home <windminstrel@home.net>
              references: []
              date: 2000-01-18 01:46:42.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: Jysr9Axc
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *332
          parent: *333
          children: []
        - &446 !ruby/object:MessageContainer
          key: &334 !ruby/object:MessageId
            raw: JzBbo9j6@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: Greg Miller <gmiller@classic-games.com>\nDate: Mon, 17 Jan
                2000 16:26:46 -0600\nSubject: Re: [MUD-Dev] Re: Databases\n\n\"Sellers,
                Michael\" wrote:\n> \n> Greg Miller wrote:\n> I don't think this is
                true.  I don't know about Amazon, but I *believe* eBay\n> uses Oracle
                -- and I know for a fact that many very high volume sites do.\n> Oracle
                is about as bullet-proof as you're going to get for large, complex\n>
                apps, and more versatile and applicable than this thread has made
                it seem.\n\nLast I heard they were considering a switch to Oracle
                due to performance\nimprovements in 8i. Whether they actually made
                that switch, I don't\nknow, but they had avoided it up to that point
                for performance reasons.\n--\nhttp://www.classic-games.com/\nHistory
                does not repeat itself, but it does rhyme.\n*** Please limit .sigs
                to four lines and avoid HTML mail or posts. ***\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: Greg Miller <gmiller@classic-games.com>'
                      name: From
                      value: Greg Miller <gmiller@classic-games.com>
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Mon, 17 Jan 2000 16:26:46 -0600'
                      name: Date
                      value: Mon, 17 Jan 2000 16:26:46 -0600
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Re: Databases'
                      name: Subject
                      value: 'Re: [MUD-Dev] Re: Databases'
                    mbox_from: 
                  body: "\"Sellers, Michael\" wrote:\n> \n> Greg Miller wrote:\n>
                    I don't think this is true.  I don't know about Amazon, but I
                    *believe* eBay\n> uses Oracle -- and I know for a fact that many
                    very high volume sites do.\n> Oracle is about as bullet-proof
                    as you're going to get for large, complex\n> apps, and more versatile
                    and applicable than this thread has made it seem.\n\nLast I heard
                    they were considering a switch to Oracle due to performance\nimprovements
                    in 8i. Whether they actually made that switch, I don't\nknow,
                    but they had avoided it up to that point for performance reasons.\n--\nhttp://www.classic-games.com/\nHistory
                    does not repeat itself, but it does rhyme.\n*** Please limit .sigs
                    to four lines and avoid HTML mail or posts. ***\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Re: Databases'
              from: Greg Miller <gmiller@classic-games.com>
              references: []
              date: 2000-01-17 22:26:46.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: JzBbo9j6
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *334
          parent: *333
          children: []
        - *335
        - &469 !ruby/object:MessageContainer
          key: &336 !ruby/object:MessageId
            raw: Jzn787Hs@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: Greg Miller <gmiller@classic-games.com>\nDate: Mon, 17 Jan
                2000 12:15:20 -0600\nSubject: Re: [MUD-Dev] Re: Databases\n\n\"T.
                Alexander Popiel\" wrote:\n> >From: Charles Hughes <charles.hughes@bigfoot.com>\n>
                >At the risk of being slapped by a mackerel, who here really thinks
                they\n> >can do a better database design than those afforded by the
                likes of the\n> >free or commercial databases?  [I'll ask those here
                who've actually\n> >worked on these databases not to chime in. :)]\n>
                \n> For the limited problem set of a MUD world, yes, I think that
                I can\n> design a better database than one of the free or commercial
                ones.\n\nCommercial databases do lots of nice things, but there's
                a reason why\nsites running heavy-duty databases of the likes of eBay
                and Amazon don't\nuse commercial packages.\n\n> contention being extremely
                frequent, and rollback is a very\n> unsatisfying contention handling
                mechanism.\n\nI disagree for reasons that have been discussed heavily
                on this list.\n\n> synchronization of the database, for instance).
                \ Because of this\n> variability, I strongly believe that there is
                no one right solution\n> to the MUD database design problem, and moreover
                that the extant\n> commercial and free databases don't come even close
                to providing\n> what most MUDs need.\n\n[quoted for no other reason
                than the simple fact that I agree]\n--\nhttp://www.classic-games.com/\nHistory
                does not repeat itself, but it does rhyme.\n*** Please limit .sigs
                to four lines and avoid HTML mail or posts. ***\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: Greg Miller <gmiller@classic-games.com>'
                      name: From
                      value: Greg Miller <gmiller@classic-games.com>
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Mon, 17 Jan 2000 12:15:20 -0600'
                      name: Date
                      value: Mon, 17 Jan 2000 12:15:20 -0600
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Re: Databases'
                      name: Subject
                      value: 'Re: [MUD-Dev] Re: Databases'
                    mbox_from: 
                  body: "\"T. Alexander Popiel\" wrote:\n> >From: Charles Hughes <charles.hughes@bigfoot.com>\n>
                    >At the risk of being slapped by a mackerel, who here really thinks
                    they\n> >can do a better database design than those afforded by
                    the likes of the\n> >free or commercial databases?  [I'll ask
                    those here who've actually\n> >worked on these databases not to
                    chime in. :)]\n> \n> For the limited problem set of a MUD world,
                    yes, I think that I can\n> design a better database than one of
                    the free or commercial ones.\n\nCommercial databases do lots of
                    nice things, but there's a reason why\nsites running heavy-duty
                    databases of the likes of eBay and Amazon don't\nuse commercial
                    packages.\n\n> contention being extremely frequent, and rollback
                    is a very\n> unsatisfying contention handling mechanism.\n\nI
                    disagree for reasons that have been discussed heavily on this
                    list.\n\n> synchronization of the database, for instance).  Because
                    of this\n> variability, I strongly believe that there is no one
                    right solution\n> to the MUD database design problem, and moreover
                    that the extant\n> commercial and free databases don't come even
                    close to providing\n> what most MUDs need.\n\n[quoted for no other
                    reason than the simple fact that I agree]\n--\nhttp://www.classic-games.com/\nHistory
                    does not repeat itself, but it does rhyme.\n*** Please limit .sigs
                    to four lines and avoid HTML mail or posts. ***\n\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Re: Databases'
              from: Greg Miller <gmiller@classic-games.com>
              references: []
              date: 2000-01-17 18:15:20.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: Jzn787Hs
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *336
          parent: *333
          children: []
      children:
      - *337
    children:
    - &443 !ruby/object:MessageContainer
      key: &338 !ruby/object:MessageId
        raw: 00bj7rRQ@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Sun, 30 Jan 2000 13:45:40
            -0800\nSubject: Re: [MUD-Dev] Re: Databases\n\nOn Tue, 18 Jan 2000 13:28:02
            +1100 \nKevin Littlejohn <darius@connect.com.au> wrote:\n\n> Others: gadfly
            (python-based, if you know the layout of your\n> tables it's probably
            fastest, but equates out to having all data\n> in memory at all times),
            mSQL (dunno, haven't looked at it for a\n> long time), Oracle (overblown,
            slower than MySQL, but by $DIETY it\n> does everything, including 'connected
            by', which would be a _joy_\n> to use - provides for object hierarchies
            really nicely),\n> PostgreSQL (which _does_ look nice, and has some nifty
            tricks that\n> may help on the OO side...  But which I couldn't fathom
            large\n> object/blob support for, so I gave up early).  The list goes
            on,\n> of course... ;)\n\nFYI there are various links in the Library at
            Kanga.Nu ot DB and\nstorage mechanisms.  The Free DB list is also referenced
            (it's been\nthe food for a variety of threads here for such things as
            persistent\nstores ala Texas, transactional models ala TDBM etc.\n\n>
            There _are_ OO-specific databases out there - Oracle have recently\n>
            (with 8i, I think) started adding an OO layer to their stuff, so\n> you
            can treat things as 'objects' inside the db, and let oracle\n> work out
            how to map that best.  That's hackish, I suspect, but\n> presumably works
            into their XML support as well.  Would not the\n> OODBMS's of this world
            put you a good way toward this?\n\nDirect representation of objects and
            object heriarchies in a DB is\nonly part of the problem, and in my case
            one of the smaller and\nsimpler parts of the problem.  The problem for
            me, and for several\nof the other OO oriented servers on the list, is
            that none of the\nOODMBSes support runtime morphism of the object heirarchy.
            \ Its a\nlarge and non-trivial problem.  I'm aware of efforts being made
            in\nacademia in the area, but nothing that I consider is actually usable\nat
            this point.\n\n> My attitude is still that databases do some things really
            well -\n> storing data, and for relationals, working out what links to
            what\n> - and while they may not be _ideal_ for muds, the chance of any\n>
            given mud thrashing any given database is still pretty slim at the\n>
            moment.  It seems as though db's are generally a win over flat\n> text
            files, so even if you use them as a strange sort of disk\n> space, they're
            a win - let alone abstracting and playing with some\n> of the other tricks
            they'd allow.\n\nI agree.  While an RDBMS ala SQL is arguably not optimal
            for the\nruntime support of a MUD DB, it offers direct and useful advantages\nfor
            world analysis, game balance maintenance, and other back-end\noperations.\n\nConsider
            the advantages from an admin perspective if you could query \nyour MUD
            ala:\n\n  Of those characters that have killed Bubba, what were the most\n
            \ frequent spells and weapons as compared to the most effective\n  used
            in total damage to Bubba?\n\n  How many players have attempted quest XYZ,
            and what was the\n  average distribution of times required for them to
            solve it?\n\n  How many characters encountered object XYZ and then were
            found in\n  location QRS within T time later?\n\n  How does player motion
            in terms of routes across the game world\n  vary by time of day?\n\nGiven
            sufficient logging trails in an RDBMS (and SQL as a well known\nframework
            to access it), you can both answer queries like these, and\nattempt to
            do useful things with the results.\n\n--\nJ C Lawrence                                 Home:
            claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
            A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: J C Lawrence <claw@kanga.nu>'
                  name: From
                  value: J C Lawrence <claw@kanga.nu>
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Sun, 30 Jan 2000 13:45:40 -0800'
                  name: Date
                  value: Sun, 30 Jan 2000 13:45:40 -0800
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] Re: Databases'
                  name: Subject
                  value: 'Re: [MUD-Dev] Re: Databases'
                mbox_from: 
              body: "On Tue, 18 Jan 2000 13:28:02 +1100 \nKevin Littlejohn <darius@connect.com.au>
                wrote:\n\n> Others: gadfly (python-based, if you know the layout of
                your\n> tables it's probably fastest, but equates out to having all
                data\n> in memory at all times), mSQL (dunno, haven't looked at it
                for a\n> long time), Oracle (overblown, slower than MySQL, but by
                $DIETY it\n> does everything, including 'connected by', which would
                be a _joy_\n> to use - provides for object hierarchies really nicely),\n>
                PostgreSQL (which _does_ look nice, and has some nifty tricks that\n>
                may help on the OO side...  But which I couldn't fathom large\n> object/blob
                support for, so I gave up early).  The list goes on,\n> of course...
                ;)\n\nFYI there are various links in the Library at Kanga.Nu ot DB
                and\nstorage mechanisms.  The Free DB list is also referenced (it's
                been\nthe food for a variety of threads here for such things as persistent\nstores
                ala Texas, transactional models ala TDBM etc.\n\n> There _are_ OO-specific
                databases out there - Oracle have recently\n> (with 8i, I think) started
                adding an OO layer to their stuff, so\n> you can treat things as 'objects'
                inside the db, and let oracle\n> work out how to map that best.  That's
                hackish, I suspect, but\n> presumably works into their XML support
                as well.  Would not the\n> OODBMS's of this world put you a good way
                toward this?\n\nDirect representation of objects and object heriarchies
                in a DB is\nonly part of the problem, and in my case one of the smaller
                and\nsimpler parts of the problem.  The problem for me, and for several\nof
                the other OO oriented servers on the list, is that none of the\nOODMBSes
                support runtime morphism of the object heirarchy.  Its a\nlarge and
                non-trivial problem.  I'm aware of efforts being made in\nacademia
                in the area, but nothing that I consider is actually usable\nat this
                point.\n\n> My attitude is still that databases do some things really
                well -\n> storing data, and for relationals, working out what links
                to what\n> - and while they may not be _ideal_ for muds, the chance
                of any\n> given mud thrashing any given database is still pretty slim
                at the\n> moment.  It seems as though db's are generally a win over
                flat\n> text files, so even if you use them as a strange sort of disk\n>
                space, they're a win - let alone abstracting and playing with some\n>
                of the other tricks they'd allow.\n\nI agree.  While an RDBMS ala
                SQL is arguably not optimal for the\nruntime support of a MUD DB,
                it offers direct and useful advantages\nfor world analysis, game balance
                maintenance, and other back-end\noperations.\n\nConsider the advantages
                from an admin perspective if you could query \nyour MUD ala:\n\n  Of
                those characters that have killed Bubba, what were the most\n  frequent
                spells and weapons as compared to the most effective\n  used in total
                damage to Bubba?\n\n  How many players have attempted quest XYZ, and
                what was the\n  average distribution of times required for them to
                solve it?\n\n  How many characters encountered object XYZ and then
                were found in\n  location QRS within T time later?\n\n  How does player
                motion in terms of routes across the game world\n  vary by time of
                day?\n\nGiven sufficient logging trails in an RDBMS (and SQL as a
                well known\nframework to access it), you can both answer queries like
                these, and\nattempt to do useful things with the results.\n\n--\nJ
                C Lawrence                                 Home: claw@kanga.nu\n----------(*)
                \                             Other: coder@kanga.nu\n--=| A man is
                as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] Re: Databases'
          from: J C Lawrence <claw@kanga.nu>
          references: []
          date: 2000-01-30 21:45:40.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: 00bj7rRQ
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *338
      parent: *337
      children: []
  *137: *139
  *63: *339
  *154: *340
  ? &341 !ruby/object:MessageId
    raw: Jysr6yZc@generated-message-id.chibrary.org
  : &477 !ruby/object:MessageContainer
    key: *341
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Mon, 03 Jan 2000 10:12:04
          -0800\nSubject: [MUD-Dev] EQ packet sniffer\n\nhttp://www.angelfire.com/games/showeq/\n\n--<cut>--\nRealtime
          Everquest packet analyzer and interpreter for Linux.\n\n...\n\nFeatures:
          \n- Realtime map view of player showing coords and heading\n- Realtime view
          of all npc/mobs in zone including stats\n- Viewing of invisible players
          / GMS\n- Skill tracking\n- Zone tracking\n- Mapping\n- Color coded mob view\n-
          Item tracking\n- Spell casting tracking\n- etc...\n- Also an auto-item and
          mob database, including cgi utils for viewing\n--<cut>--\n\nCheck out the
          image at the bottom of the page.  Its a rather\nimpressive piece of reverse
          engineering if all it is doing is packet\nsniffing.\n\n--\nJ C Lawrence
          \                                Home: claw@kanga.nu\n----------(*)                              Other:
          coder@kanga.nu\n--=| A man is as sane as he is dangerous to his environment
          |=--\n\n\n_______________________________________________\nMUD-Dev maillist
          \ -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Mon, 03 Jan 2000 10:12:04 -0800'
                name: Date
                value: Mon, 03 Jan 2000 10:12:04 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] EQ packet sniffer'
                name: Subject
                value: "[MUD-Dev] EQ packet sniffer"
              mbox_from: 
            body: "http://www.angelfire.com/games/showeq/\n\n--<cut>--\nRealtime Everquest
              packet analyzer and interpreter for Linux.\n\n...\n\nFeatures: \n- Realtime
              map view of player showing coords and heading\n- Realtime view of all
              npc/mobs in zone including stats\n- Viewing of invisible players / GMS\n-
              Skill tracking\n- Zone tracking\n- Mapping\n- Color coded mob view\n-
              Item tracking\n- Spell casting tracking\n- etc...\n- Also an auto-item
              and mob database, including cgi utils for viewing\n--<cut>--\n\nCheck
              out the image at the bottom of the page.  Its a rather\nimpressive piece
              of reverse engineering if all it is doing is packet\nsniffing.\n\n--\nJ
              C Lawrence                                 Home: claw@kanga.nu\n----------(*)
              \                             Other: coder@kanga.nu\n--=| A man is as
              sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] EQ packet sniffer"
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-03 18:12:04.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jysr6yZc
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *341
    parent: 
    children: []
  *169: *342
  ? &343 !ruby/object:MessageId
    raw: 00bj7rPs@generated-message-id.chibrary.org
  : &345 !ruby/object:MessageContainer
    key: *343
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Tue, 25 Jan 2000 21:30:04
          -0800\nSubject: Re: [MUD-Dev] Business Licenses\n\nOn Thu, 20 Jan 2000 14:26:00
          EST \nCFrancy  <CFrancy@aol.com> wrote:\n\n> Regarding commercial licenses
          - does anyone know where I can find\n> some muds that offer these?  And
          about what price range they run\n> in for the ability to profit from the
          game?\n\nWhat is not be well publicised, is that many (most?) current servers\ncan
          be licensed in a business compatable license for a fee.  Realise\nthat the
          copyright holder may relicense his code under whatever\nlicense he wishes,
          as he wishes.  Thus he may have the code out in\nthe field under the DIKU
          license, but could also license it to you\nfor a fee under a more business-reasonable
          license.The fly that hits\nthe ointment here is that servers which have
          accepted patches from\nvariant sources and which have not required the copyright
          for those\npatches to be expressly turned over to them, may require more
          work\nto get the full set of license permissions.\n\n> Any suggestions or
          website locations for that matter will be\n> greatly appreciated.\n\nIllya
          of the ex-GameCommandos did a survey on the area.  There was\nminimal discussion
          on the area on MUD-Dev, and on rec.games.mud.*.\n\n--\nJ C Lawrence                                 Home:
          claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
          A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Tue, 25 Jan 2000 21:30:04 -0800'
                name: Date
                value: Tue, 25 Jan 2000 21:30:04 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: [MUD-Dev] Business Licenses'
                name: Subject
                value: 'Re: [MUD-Dev] Business Licenses'
              mbox_from: 
            body: "On Thu, 20 Jan 2000 14:26:00 EST \nCFrancy  <CFrancy@aol.com> wrote:\n\n>
              Regarding commercial licenses - does anyone know where I can find\n>
              some muds that offer these?  And about what price range they run\n>
              in for the ability to profit from the game?\n\nWhat is not be well publicised,
              is that many (most?) current servers\ncan be licensed in a business
              compatable license for a fee.  Realise\nthat the copyright holder may
              relicense his code under whatever\nlicense he wishes, as he wishes.
              \ Thus he may have the code out in\nthe field under the DIKU license,
              but could also license it to you\nfor a fee under a more business-reasonable
              license.The fly that hits\nthe ointment here is that servers which have
              accepted patches from\nvariant sources and which have not required the
              copyright for those\npatches to be expressly turned over to them, may
              require more work\nto get the full set of license permissions.\n\n>
              Any suggestions or website locations for that matter will be\n> greatly
              appreciated.\n\nIllya of the ex-GameCommandos did a survey on the area.
              \ There was\nminimal discussion on the area on MUD-Dev, and on rec.games.mud.*.\n\n--\nJ
              C Lawrence                                 Home: claw@kanga.nu\n----------(*)
              \                             Other: coder@kanga.nu\n--=| A man is as
              sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: [MUD-Dev] Business Licenses'
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-26 05:30:04.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00bj7rPs
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *343
    parent: &347 !ruby/object:MessageContainer
      key: &344 !ruby/object:MessageId
        raw: JzUMQxAu@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: CFrancy@aol.com\nDate: Thu, 20 Jan 2000 14:26:00 EST\nSubject:
            [MUD-Dev] Business Licenses\n\nRegarding commercial licenses - does anyone
            know where I can find some muds \nthat offer these?  And about what price
            range they run in for the ability to \nprofit from the game? \n\nThanks
            for any information provided hereafter.\n\nCFrancy@aol.com\n\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: CFrancy@aol.com'
                  name: From
                  value: CFrancy@aol.com
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Thu, 20 Jan 2000 14:26:00 EST'
                  name: Date
                  value: Thu, 20 Jan 2000 14:26:00 EST
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: [MUD-Dev] Business Licenses'
                  name: Subject
                  value: "[MUD-Dev] Business Licenses"
                mbox_from: 
              body: "Regarding commercial licenses - does anyone know where I can
                find some muds \nthat offer these?  And about what price range they
                run in for the ability to \nprofit from the game? \n\nThanks for any
                information provided hereafter.\n\nCFrancy@aol.com\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: "[MUD-Dev] Business Licenses"
          from: CFrancy@aol.com
          references: []
          date: 2000-01-20 19:26:00.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: JzUMQxAu
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *344
      parent: 
      children:
      - *345
      - &409 !ruby/object:MessageContainer
        key: &346 !ruby/object:MessageId
          raw: 00IyQgGu@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: |
              From: "Bruce" <bruce@cubik.org>
              Date: Thu, 20 Jan 2000 14:01:03 -0800
              Subject: Re: [MUD-Dev] Business Licenses

              CFrancy@aol.com wrote:
              > Regarding commercial licenses - does anyone know where I can find some
              muds
              > that offer these?  And about what price range they run in for the ability
              to
              > profit from the game?

              What type of game are you looking to run?  How much development are you
              planning on doing?

              Cold is free for any use (including commercial) but would require a good bit
              of development. (http://www.cold.org/)

              DGD has commercial licenses available through Skotos.

              I've got something that I'm working on, but am not yet ready to announce.
              Contact me off-list about it if you're really interested.

              You might also look through the archives as this topic comes up
              occasionally.

               - Bruce





              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: "Bruce" <bruce@cubik.org>'
                    name: From
                    value: '"Bruce" <bruce@cubik.org>'
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Thu, 20 Jan 2000 14:01:03 -0800'
                    name: Date
                    value: Thu, 20 Jan 2000 14:01:03 -0800
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] Business Licenses'
                    name: Subject
                    value: 'Re: [MUD-Dev] Business Licenses'
                  mbox_from: 
                body: |
                  CFrancy@aol.com wrote:
                  > Regarding commercial licenses - does anyone know where I can find some
                  muds
                  > that offer these?  And about what price range they run in for the ability
                  to
                  > profit from the game?

                  What type of game are you looking to run?  How much development are you
                  planning on doing?

                  Cold is free for any use (including commercial) but would require a good bit
                  of development. (http://www.cold.org/)

                  DGD has commercial licenses available through Skotos.

                  I've got something that I'm working on, but am not yet ready to announce.
                  Contact me off-list about it if you're really interested.

                  You might also look through the archives as this topic comes up
                  occasionally.

                   - Bruce





                  _______________________________________________
                  MUD-Dev maillist  -  MUD-Dev@kanga.nu
                  http://www.kanga.nu/lists/listinfo/mud-dev
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] Business Licenses'
            from: Bruce <bruce@cubik.org>
            references: []
            date: 2000-01-20 22:01:03.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 00IyQgGu
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *346
        parent: *347
        children: []
    children: []
  ? &348 !ruby/object:MessageId
    raw: 00IySrZY@generated-message-id.chibrary.org
  : &478 !ruby/object:MessageContainer
    key: *348
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: |
          From: Matthew Mihaly <diablo@best.com>
          Date: Sun, 23 Jan 2000 01:55:20 -0800 (PST)
          Subject: [MUD-Dev] hoho

          JC may not even let this go through, but for any doubters out there as to
          the immersiveness and potential addictiveness of MMORPGs, one of my
          players just had a baby in real life, and named it after his city in
          Achaea: Ashtan Chase Edwards (the city being Ashtan). I just found this so
          mind-boggling, that I needed to tell someone else.

          --matt




          _______________________________________________
          MUD-Dev maillist  -  MUD-Dev@kanga.nu
          http://www.kanga.nu/lists/listinfo/mud-dev
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Matthew Mihaly <diablo@best.com>'
                name: From
                value: Matthew Mihaly <diablo@best.com>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Sun, 23 Jan 2000 01:55:20 -0800 (PST)'
                name: Date
                value: Sun, 23 Jan 2000 01:55:20 -0800 (PST)
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] hoho'
                name: Subject
                value: "[MUD-Dev] hoho"
              mbox_from: 
            body: |
              JC may not even let this go through, but for any doubters out there as to
              the immersiveness and potential addictiveness of MMORPGs, one of my
              players just had a baby in real life, and named it after his city in
              Achaea: Ashtan Chase Edwards (the city being Ashtan). I just found this so
              mind-boggling, that I needed to tell someone else.

              --matt




              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] hoho"
        from: Matthew Mihaly <diablo@best.com>
        references: []
        date: 2000-01-23 09:55:20.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00IySrZY
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *348
    parent: 
    children: []
  ? &349 !ruby/object:MessageId
    raw: 000DntsO@generated-message-id.chibrary.org
  : &479 !ruby/object:MessageContainer
    key: *349
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: Joel Kelso <joel@ee.uwa.edu.au>\nDate: Sat, 22 Jan 2000 13:04:50
          +0800\nSubject: [MUD-Dev] Starlane test\n\nI'm not sure if this is exactly
          on-topic for this list,\nbut it does concern a multi-player persistent network\ngame,
          so I thought you might be interested.\n\nI'm currently testing out a server
          for my \"Starlane\"\ngame, and I'm looking for a few test players.  Starlane\nis
          a slow-paced intersteller colonisation game, designed\nso that players can
          log in once a day or so and play\nfor a few minutes, and interact with other
          players\nthrough e-mail.  The web page at\n\n\thttp://ciips.ee.uwa.edu.au/~joel/starlane/\n\nhas
          a few more details.\n\nThe client is a Java application, which means installing\nit
          is a little fiddly and requires downloading Java if you\ndon't have it.
          \ If you're interested in trying it out,\ncheck out the \"Arcturus Game\"
          admin page at\n\n\thttp://ciips.ee.uwa.edu.au/~joel/starlane/Arcturus/admin.html\n\nand
          send me some email.  There's only one scenario on offer\nat the moment (\"Earth
          Company\"); you won't start with any units\nbut you will be able to lease
          a factory and borrow resources\nfrom the OECD player (me).\n\nCheers,\n\nJoel
          Kelso\n\n-- joel@ee.uwa.edu.au ------------------------------------------\n\"I
          went to see the pool of wisdom but it was empty.  Someone has\n drained
          the pool of wisdom.\" - Todd Jones\n-- http://ciips.ee.uwa.edu.au/~joel
          ----------------------------\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Joel Kelso <joel@ee.uwa.edu.au>'
                name: From
                value: Joel Kelso <joel@ee.uwa.edu.au>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Sat, 22 Jan 2000 13:04:50 +0800'
                name: Date
                value: Sat, 22 Jan 2000 13:04:50 +0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] Starlane test'
                name: Subject
                value: "[MUD-Dev] Starlane test"
              mbox_from: 
            body: "I'm not sure if this is exactly on-topic for this list,\nbut it
              does concern a multi-player persistent network\ngame, so I thought you
              might be interested.\n\nI'm currently testing out a server for my \"Starlane\"\ngame,
              and I'm looking for a few test players.  Starlane\nis a slow-paced intersteller
              colonisation game, designed\nso that players can log in once a day or
              so and play\nfor a few minutes, and interact with other players\nthrough
              e-mail.  The web page at\n\n\thttp://ciips.ee.uwa.edu.au/~joel/starlane/\n\nhas
              a few more details.\n\nThe client is a Java application, which means
              installing\nit is a little fiddly and requires downloading Java if you\ndon't
              have it.  If you're interested in trying it out,\ncheck out the \"Arcturus
              Game\" admin page at\n\n\thttp://ciips.ee.uwa.edu.au/~joel/starlane/Arcturus/admin.html\n\nand
              send me some email.  There's only one scenario on offer\nat the moment
              (\"Earth Company\"); you won't start with any units\nbut you will be
              able to lease a factory and borrow resources\nfrom the OECD player (me).\n\nCheers,\n\nJoel
              Kelso\n\n-- joel@ee.uwa.edu.au ------------------------------------------\n\"I
              went to see the pool of wisdom but it was empty.  Someone has\n drained
              the pool of wisdom.\" - Todd Jones\n-- http://ciips.ee.uwa.edu.au/~joel
              ----------------------------\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] Starlane test"
        from: Joel Kelso <joel@ee.uwa.edu.au>
        references: []
        date: 2000-01-22 05:04:50.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 000DntsO
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *349
    parent: 
    children: []
  *289: *350
  ? &351 !ruby/object:MessageId
    raw: Jzn75ut6@generated-message-id.chibrary.org
  : &480 !ruby/object:MessageContainer
    key: *351
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: \"Geoffrey A. MacDougall\" <geoffrey@poptronik.com>\nDate: Mon,
          24 Jan 2000 21:57:14 -0500\nSubject: [MUD-Dev] Current Status of Middle
          Earth Online\n\nThis message is in MIME format. Since your mail reader does
          not understand\nthis format, some or all of this message may not be legible.\n\n------_=_NextPart_001_01BF66DF.E29E54E0\nContent-Type:
          text/plain;\n\tcharset=\"iso-8859-1\"\n\nGreetings,\n\nI'm trying to find
          information on the current status of ME Online.  I have\nbeen to mevault
          and sierra's site, but I was wondering if anyone knew of an\narticle or
          two that accurately sums up the entire drama from its\nbeginning...\n\nThanks
          in advance,\n\nGeoffrey\n\n------_=_NextPart_001_01BF66DF.E29E54E0\nContent-Type:
          text/html;\n\tcharset=\"iso-8859-1\"\nContent-Transfer-Encoding: quoted-printable\n\n<!DOCTYPE
          HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=3D\"Content-Type\"
          CONTENT=3D\"text/html; =\ncharset=3Diso-8859-1\">\n<META NAME=3D\"Generator\"
          CONTENT=3D\"MS Exchange Server version =\n5.5.2650.12\">\n<TITLE>Current
          Status of Middle Earth Online</TITLE>\n</HEAD>\n<BODY>\n\n<P><FONT SIZE=3D2>Greetings,</FONT>\n</P>\n\n<P><FONT
          SIZE=3D2>I'm trying to find information on the current status =\nof ME Online.&nbsp;
          I have been to mevault and sierra's site, but I was =\nwondering if anyone
          knew of an article or two that accurately sums up =\nthe entire drama from
          its beginning...</FONT></P>\n\n<P><FONT SIZE=3D2>Thanks in advance,</FONT>\n</P>\n\n<P><FONT
          SIZE=3D2>Geoffrey</FONT>\n</P>\n\n</BODY>\n</HTML>\n------_=_NextPart_001_01BF66DF.E29E54E0--\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: "Geoffrey A. MacDougall" <geoffrey@poptronik.com>'
                name: From
                value: '"Geoffrey A. MacDougall" <geoffrey@poptronik.com>'
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Mon, 24 Jan 2000 21:57:14 -0500'
                name: Date
                value: Mon, 24 Jan 2000 21:57:14 -0500
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] Current Status of Middle Earth Online'
                name: Subject
                value: "[MUD-Dev] Current Status of Middle Earth Online"
              mbox_from: 
            body: "This message is in MIME format. Since your mail reader does not
              understand\nthis format, some or all of this message may not be legible.\n\n------_=_NextPart_001_01BF66DF.E29E54E0\nContent-Type:
              text/plain;\n\tcharset=\"iso-8859-1\"\n\nGreetings,\n\nI'm trying to
              find information on the current status of ME Online.  I have\nbeen to
              mevault and sierra's site, but I was wondering if anyone knew of an\narticle
              or two that accurately sums up the entire drama from its\nbeginning...\n\nThanks
              in advance,\n\nGeoffrey\n\n------_=_NextPart_001_01BF66DF.E29E54E0\nContent-Type:
              text/html;\n\tcharset=\"iso-8859-1\"\nContent-Transfer-Encoding: quoted-printable\n\n<!DOCTYPE
              HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=3D\"Content-Type\"
              CONTENT=3D\"text/html; =\ncharset=3Diso-8859-1\">\n<META NAME=3D\"Generator\"
              CONTENT=3D\"MS Exchange Server version =\n5.5.2650.12\">\n<TITLE>Current
              Status of Middle Earth Online</TITLE>\n</HEAD>\n<BODY>\n\n<P><FONT SIZE=3D2>Greetings,</FONT>\n</P>\n\n<P><FONT
              SIZE=3D2>I'm trying to find information on the current status =\nof
              ME Online.&nbsp; I have been to mevault and sierra's site, but I was
              =\nwondering if anyone knew of an article or two that accurately sums
              up =\nthe entire drama from its beginning...</FONT></P>\n\n<P><FONT
              SIZE=3D2>Thanks in advance,</FONT>\n</P>\n\n<P><FONT SIZE=3D2>Geoffrey</FONT>\n</P>\n\n</BODY>\n</HTML>\n------_=_NextPart_001_01BF66DF.E29E54E0--\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] Current Status of Middle Earth Online"
        from: Geoffrey A. MacDougall <geoffrey@poptronik.com>
        references: []
        date: 2000-01-25 02:57:14.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jzn75ut6
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *351
    parent: 
    children: []
  *248: *352
  *94: *96
  *48: *353
  *171: *173
  ? &354 !ruby/object:MessageId
    raw: 00bj5f3A@generated-message-id.chibrary.org
  : &481 !ruby/object:MessageContainer
    key: *354
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Thu, 20 Jan 2000 22:34:35
          -0800\nSubject: [MUD-Dev] Re: [adv-mud] MUD-Dev vs. adv-mud\n\nOn Fri, 21
          Jan 2000 00:16:34 -0500 \nphlUID  <phluid@mindless.com> wrote:\n\n> J C
          Lawrence wrote:\n>> <<Crossed to MUD-Dev>>\n\nAs is this.\n\n> I've noticed
          that most, if not all, of the traffic that crosses\n> the MUD-Dev list and
          the new adv-mud list is relitively\n> compatible. \n\nTrue.\n\n>   Both
          these lists are becoming incredibly similar.\n\nI'd argue this one a little
          (not too much).  To reference an old\nmeta thread on MUD-Dev: MUD-Dev at
          this point is primarily concerned\nwith being a research establishment.
          \ Adv-MUD conversely I'd rate as\nhaving much more of an educational purpose.
          \ As such, yes, they are\nsimilar, but I see them as more complementary
          than duplicate.\n\nAside: I've been trying in various not-so-subtle ways
          to make a\nresearch/educational split for MUD-Dev for a couple years now.
          \ I've\nnever been able to arrive at a method that wouldn't detract more\nthan
          gained from what we already had however, mostly due to the fact\nthat I'd
          have to start with the same list members for both forums.\nOr to put it
          another way, Adv-MUD *needs* to have a significantly\ndifferent membership
          base than MUD-Dev to fulfill it purpose.\n\n> As far as I can discern, adv-mud
          is geared more towards actual\n> code and implementation in C++, while MUD-Dev
          sticks to design\n> principles because it encompasses the entire mudding
          community.\n\nI'd place it a little differently:\n\n  MUD-Dev's primary
          purpose is to advance the state of the art.\n  This has been made clear
          and frequently publicly stated since the\n  very early days.\n\n  Adv-MUD
          seems to concentrate on teaching and bringing people up to\n  the state
          of the art.\n\nBoth sides are necessary.  If MUD-Dev gets too far ahead
          it will\nsimply leave everybody behind without a trail to follow (a primary\npurpose
          of the archives BTW).  I see Adv-MUD as able to help fill\nand bridge that
          gap and thus help MUD-Dev in its base purpose.\n\n> While I like design
          issues, I also like to get into the nitty\n> gritty of the actual language,
          which is outside of MUD-Dev's\n> general scope because it is language independant.\n\n<shake
          head>  Not quite.  To quote from the MUD-Dev charter:\n\n--<cut>--\nThe
          MUD Development mailing list is not platform, language or game\nspecific,
          but concentrates on discussing the design and\nimplementation of any and
          all MUD servers and systems. Another large\nrelated topic is game design.
          This does not mean that the details of\na specific server or game design
          point can't be discussed in\nexcruciating detail, or even that server or
          game source can't be\nbandied about and picked over, just that the list
          isn't to become a\nreligious stomping ground for your platform, language,
          server, or\nhobby horse of choice. The topic definition is not limited to\ntechnical
          areas: social engineering, cultural considerations,\napplicability of technical
          addresses to \"soft\" problems, and other\nless rigorous avenues of investigation
          are also fair game.\n\nThe goal is high signal, low noise. The MUD Development
          list is NOT\nan email version of the rec.games.mud.* newsgroups.\n--<cut>--\n\nMUD-Dev
          adopts no religion be it language, platform, design\nmethodology, or game
          type.  You can argue and discuss language\nspecifics (as we often do) or
          any other detail, just not on the\nbasis of \"XYZ rules and QRS sucks!\".
          \ A character of mutual respect\nis central to MUD-Dev and such silliness
          doesn't fit.\n\n> Most of my interests lie in both these areas, so I am
          going to\n> make it my policy to carbon copy all my email about design issues\n>
          to both the adv-mud list and the MUD-Dev list, while keeping\n> coding issues
          on the adv-mud list. \n\n<wince>\n\n>   My question is about any policies
          about cross-list email and\n> what kind of format it should take so that
          it is easily\n> understandable to members of one list and not the other.\n\nMy
          request as list owner is that any crosses are clearly labled.\n\n> Obviously,
          most of you have probabily noticed that a lot of\n> material is being forwarded
          to the MUD-Dev list from the adv-mud\n> list.\n\nActually, no.  I periodically
          cross posts from other forums such as\nAdv-MUD that I find interesting.
          \ Sometimes this is for discussion\non MUD-Dev, or (just as often) so that
          they'll be archived under\nMUD-Dev for posterity (EGroup's archives are
          notoriously short lived\nand not terribly useful) and many other forums
          are poorly archived\nif at all.  Adv-MUD happens to have had a few such
          crosses lately.\nRec.games.mud.* also gets a few now and then, as do other
          lists and\nforums.\n\n--\nJ C Lawrence                                 Home:
          claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
          A man is as sane as he is dangerous to his environment |=--\nOn Fri, 21
          Jan 2000 00:16:34 -0500 \nphlUID  <phluid@mindless.com> wrote:\n\n> J C
          Lawrence wrote:\n>> <<Crossed to MUD-Dev>>\n\n>   I've noticed that most,
          if not all, of the traffic that crosses\n> the MUD-Dev list and the new
          adv-mud list is relitively\n> compatible. Mostly I've been sticking to the
          adv-mud list because\n> I just recently joined MUD-Dev, but this brings
          up a point that\n> seems painfully obvious to me:\n\n>   Both these lists
          are becoming incredibly similar.\n\n>   As far as I can discern, adv-mud
          is geared more towards actual\n> code and implementation in C++, while MUD-Dev
          sticks to design\n> principles because it encompasses the entire mudding
          community.\n> While I like design issues, I also like to get into the nitty\n>
          gritty of the actual language, which is outside of MUD-Dev's\n> general
          scope because it is language independant.\n\n>   Most of my interests lie
          in both these areas, so I am going to\n> make it my policy to carbon copy
          all my email about design issues\n> to both the adv-mud list and the MUD-Dev
          list, while keeping\n> coding issues on the adv-mud list. I just wanted
          to announce this\n> so that people won't become confused with cross-list
          email. I'll\n> also try to keep it a bit more organized.  The only problem
          with\n> this is that sometimes my questions about design are answered on\n>
          the adv-mud list and then it becomes awkward to forward associated\n> thread
          over to the MUD-Dev list.\n\n>   My question is about any policies about
          cross-list email and\n> what kind of format it should take so that it is
          easily\n> understandable to members of one list and not the other.\n\n>
          \  Obviously, most of you have probabily noticed that a lot of\n> material
          is being forwarded to the MUD-Dev list from the adv-mud\n> list.\n\n> Amos
          Wetherbee, The Spellbound Project\n\n> ------------------------------------------------------------------------\n>
          For the fastest and easiest way to backup your files and, access\n> them
          from anywhere. Try @backup Free for 30 days.  Click here for\n> a chance
          to win a digital camera.\n> http://click.egroups.com/1/337/3/_/24951/_/948431178/\n\n>
          -- 20 megs of disk space in your group's Document Vault --\n> http://www.egroups.com/docvault/adv-mud/?m=1\n\n\n\n--\nJ
          C Lawrence                                 Home: claw@kanga.nu\n----------(*)
          \                             Other: coder@kanga.nu\n--=| A man is as sane
          as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Thu, 20 Jan 2000 22:34:35 -0800'
                name: Date
                value: Thu, 20 Jan 2000 22:34:35 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] Re: [adv-mud] MUD-Dev vs. adv-mud'
                name: Subject
                value: "[MUD-Dev] Re: [adv-mud] MUD-Dev vs. adv-mud"
              mbox_from: 
            body: "On Fri, 21 Jan 2000 00:16:34 -0500 \nphlUID  <phluid@mindless.com>
              wrote:\n\n> J C Lawrence wrote:\n>> <<Crossed to MUD-Dev>>\n\nAs is
              this.\n\n> I've noticed that most, if not all, of the traffic that crosses\n>
              the MUD-Dev list and the new adv-mud list is relitively\n> compatible.
              \n\nTrue.\n\n>   Both these lists are becoming incredibly similar.\n\nI'd
              argue this one a little (not too much).  To reference an old\nmeta thread
              on MUD-Dev: MUD-Dev at this point is primarily concerned\nwith being
              a research establishment.  Adv-MUD conversely I'd rate as\nhaving much
              more of an educational purpose.  As such, yes, they are\nsimilar, but
              I see them as more complementary than duplicate.\n\nAside: I've been
              trying in various not-so-subtle ways to make a\nresearch/educational
              split for MUD-Dev for a couple years now.  I've\nnever been able to
              arrive at a method that wouldn't detract more\nthan gained from what
              we already had however, mostly due to the fact\nthat I'd have to start
              with the same list members for both forums.\nOr to put it another way,
              Adv-MUD *needs* to have a significantly\ndifferent membership base than
              MUD-Dev to fulfill it purpose.\n\n> As far as I can discern, adv-mud
              is geared more towards actual\n> code and implementation in C++, while
              MUD-Dev sticks to design\n> principles because it encompasses the entire
              mudding community.\n\nI'd place it a little differently:\n\n  MUD-Dev's
              primary purpose is to advance the state of the art.\n  This has been
              made clear and frequently publicly stated since the\n  very early days.\n\n
              \ Adv-MUD seems to concentrate on teaching and bringing people up to\n
              \ the state of the art.\n\nBoth sides are necessary.  If MUD-Dev gets
              too far ahead it will\nsimply leave everybody behind without a trail
              to follow (a primary\npurpose of the archives BTW).  I see Adv-MUD as
              able to help fill\nand bridge that gap and thus help MUD-Dev in its
              base purpose.\n\n> While I like design issues, I also like to get into
              the nitty\n> gritty of the actual language, which is outside of MUD-Dev's\n>
              general scope because it is language independant.\n\n<shake head>  Not
              quite.  To quote from the MUD-Dev charter:\n\n--<cut>--\nThe MUD Development
              mailing list is not platform, language or game\nspecific, but concentrates
              on discussing the design and\nimplementation of any and all MUD servers
              and systems. Another large\nrelated topic is game design. This does
              not mean that the details of\na specific server or game design point
              can't be discussed in\nexcruciating detail, or even that server or game
              source can't be\nbandied about and picked over, just that the list isn't
              to become a\nreligious stomping ground for your platform, language,
              server, or\nhobby horse of choice. The topic definition is not limited
              to\ntechnical areas: social engineering, cultural considerations,\napplicability
              of technical addresses to \"soft\" problems, and other\nless rigorous
              avenues of investigation are also fair game.\n\nThe goal is high signal,
              low noise. The MUD Development list is NOT\nan email version of the
              rec.games.mud.* newsgroups.\n--<cut>--\n\nMUD-Dev adopts no religion
              be it language, platform, design\nmethodology, or game type.  You can
              argue and discuss language\nspecifics (as we often do) or any other
              detail, just not on the\nbasis of \"XYZ rules and QRS sucks!\".  A character
              of mutual respect\nis central to MUD-Dev and such silliness doesn't
              fit.\n\n> Most of my interests lie in both these areas, so I am going
              to\n> make it my policy to carbon copy all my email about design issues\n>
              to both the adv-mud list and the MUD-Dev list, while keeping\n> coding
              issues on the adv-mud list. \n\n<wince>\n\n>   My question is about
              any policies about cross-list email and\n> what kind of format it should
              take so that it is easily\n> understandable to members of one list and
              not the other.\n\nMy request as list owner is that any crosses are clearly
              labled.\n\n> Obviously, most of you have probabily noticed that a lot
              of\n> material is being forwarded to the MUD-Dev list from the adv-mud\n>
              list.\n\nActually, no.  I periodically cross posts from other forums
              such as\nAdv-MUD that I find interesting.  Sometimes this is for discussion\non
              MUD-Dev, or (just as often) so that they'll be archived under\nMUD-Dev
              for posterity (EGroup's archives are notoriously short lived\nand not
              terribly useful) and many other forums are poorly archived\nif at all.
              \ Adv-MUD happens to have had a few such crosses lately.\nRec.games.mud.*
              also gets a few now and then, as do other lists and\nforums.\n\n--\nJ
              C Lawrence                                 Home: claw@kanga.nu\n----------(*)
              \                             Other: coder@kanga.nu\n--=| A man is as
              sane as he is dangerous to his environment |=--\nOn Fri, 21 Jan 2000
              00:16:34 -0500 \nphlUID  <phluid@mindless.com> wrote:\n\n> J C Lawrence
              wrote:\n>> <<Crossed to MUD-Dev>>\n\n>   I've noticed that most, if
              not all, of the traffic that crosses\n> the MUD-Dev list and the new
              adv-mud list is relitively\n> compatible. Mostly I've been sticking
              to the adv-mud list because\n> I just recently joined MUD-Dev, but this
              brings up a point that\n> seems painfully obvious to me:\n\n>   Both
              these lists are becoming incredibly similar.\n\n>   As far as I can
              discern, adv-mud is geared more towards actual\n> code and implementation
              in C++, while MUD-Dev sticks to design\n> principles because it encompasses
              the entire mudding community.\n> While I like design issues, I also
              like to get into the nitty\n> gritty of the actual language, which is
              outside of MUD-Dev's\n> general scope because it is language independant.\n\n>
              \  Most of my interests lie in both these areas, so I am going to\n>
              make it my policy to carbon copy all my email about design issues\n>
              to both the adv-mud list and the MUD-Dev list, while keeping\n> coding
              issues on the adv-mud list. I just wanted to announce this\n> so that
              people won't become confused with cross-list email. I'll\n> also try
              to keep it a bit more organized.  The only problem with\n> this is that
              sometimes my questions about design are answered on\n> the adv-mud list
              and then it becomes awkward to forward associated\n> thread over to
              the MUD-Dev list.\n\n>   My question is about any policies about cross-list
              email and\n> what kind of format it should take so that it is easily\n>
              understandable to members of one list and not the other.\n\n>   Obviously,
              most of you have probabily noticed that a lot of\n> material is being
              forwarded to the MUD-Dev list from the adv-mud\n> list.\n\n> Amos Wetherbee,
              The Spellbound Project\n\n> ------------------------------------------------------------------------\n>
              For the fastest and easiest way to backup your files and, access\n>
              them from anywhere. Try @backup Free for 30 days.  Click here for\n>
              a chance to win a digital camera.\n> http://click.egroups.com/1/337/3/_/24951/_/948431178/\n\n>
              -- 20 megs of disk space in your group's Document Vault --\n> http://www.egroups.com/docvault/adv-mud/?m=1\n\n\n\n--\nJ
              C Lawrence                                 Home: claw@kanga.nu\n----------(*)
              \                             Other: coder@kanga.nu\n--=| A man is as
              sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] Re: [adv-mud] MUD-Dev vs. adv-mud"
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-21 06:34:35.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00bj5f3A
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *354
    parent: 
    children: []
  *119: *355
  *304: *312
  *111: *145
  *146: *148
  *68: *356
  *179: *357
  *67: *69
  ? &358 !ruby/object:MessageId
    raw: 00uTmp8K@generated-message-id.chibrary.org
  : &482 !ruby/object:MessageContainer
    key: *358
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: |
          From: "Justin Rogers" <justin@mlstoday.com>
          Date: Thu, 20 Jan 2000 15:18:35 -0800
          Subject: [MUD-Dev] Multiply oriented interactive worlds...

          Hello,

              I've been reading some of the interesting conversations on keeping
          maintaining
          population state and I've thought that this would be a nice time to
          ask about
          implementations of and possibly submit information for what I call a
          multiply
          oriented system.  In this system we create closed loops of programming
          that work
          well and hopefully never crash and then allow the variable to enter
          into that code
          in a controlled manner.  In my schema someone might implement the
          population
          example using the following structure on NT (other examples for UNIX
          and what
          not would be easy as well)

          ProgramA is a Mob program that works off of world data for your MUD.
          This
          program controls how Mobs interact and try to fight/cohabitate with
          one another.
          We control all programming variables and interactions so that
          inherently this
          closed system can develope, be watched, and will hopefully never crash
          (the program,
          not the operating system)

          ProgramA has a single PIPE open and accepts function calls on this
          pipe.  These function
          calls are well defined and well written so that invalid variables are
          not going to crash
          the program.  Information such as what mobs are in a certain room,
          what those mobs
          are doing, saying, etc..., and also a set of functions to control
          those mobs from the
          remote process.

          ProgramB is the highly interactive module that players connect to that
          works off of
          the same world data as ProgramA.  When a player enters room X,
          ProgramA asks
          ProgramB for information about NPC's / Mobs in that room and the
          information
          is returned.  If player A is fighting Mob B then based on information
          in Mob B
          ProgramB carries out the fight and updates the Mob using functions and
          either kills
          or lets that Mob live (and even gain EXP)...  And ProgramB can
          obviously update
          Player a accordingly.

          Barring system crashes it will be possible for ProgramA to run
          constantly (in theory)
          and since ProgramB is an internet based program taking user
          interaction it is possible
          that ProgramB will be taken down or have to be restarted at some
          interval.  Across the
          drops of ProgramB, ProgramA will still develop at a regular rate and
          will be fully
          functional when ProgramB comes back online.

          Just a thought.

              - Justin Rogers, CEO DigiTec Web Consultants





          _______________________________________________
          MUD-Dev maillist  -  MUD-Dev@kanga.nu
          http://www.kanga.nu/lists/listinfo/mud-dev
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: "Justin Rogers" <justin@mlstoday.com>'
                name: From
                value: '"Justin Rogers" <justin@mlstoday.com>'
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Thu, 20 Jan 2000 15:18:35 -0800'
                name: Date
                value: Thu, 20 Jan 2000 15:18:35 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] Multiply oriented interactive worlds...'
                name: Subject
                value: "[MUD-Dev] Multiply oriented interactive worlds..."
              mbox_from: 
            body: |
              Hello,

                  I've been reading some of the interesting conversations on keeping
              maintaining
              population state and I've thought that this would be a nice time to
              ask about
              implementations of and possibly submit information for what I call a
              multiply
              oriented system.  In this system we create closed loops of programming
              that work
              well and hopefully never crash and then allow the variable to enter
              into that code
              in a controlled manner.  In my schema someone might implement the
              population
              example using the following structure on NT (other examples for UNIX
              and what
              not would be easy as well)

              ProgramA is a Mob program that works off of world data for your MUD.
              This
              program controls how Mobs interact and try to fight/cohabitate with
              one another.
              We control all programming variables and interactions so that
              inherently this
              closed system can develope, be watched, and will hopefully never crash
              (the program,
              not the operating system)

              ProgramA has a single PIPE open and accepts function calls on this
              pipe.  These function
              calls are well defined and well written so that invalid variables are
              not going to crash
              the program.  Information such as what mobs are in a certain room,
              what those mobs
              are doing, saying, etc..., and also a set of functions to control
              those mobs from the
              remote process.

              ProgramB is the highly interactive module that players connect to that
              works off of
              the same world data as ProgramA.  When a player enters room X,
              ProgramA asks
              ProgramB for information about NPC's / Mobs in that room and the
              information
              is returned.  If player A is fighting Mob B then based on information
              in Mob B
              ProgramB carries out the fight and updates the Mob using functions and
              either kills
              or lets that Mob live (and even gain EXP)...  And ProgramB can
              obviously update
              Player a accordingly.

              Barring system crashes it will be possible for ProgramA to run
              constantly (in theory)
              and since ProgramB is an internet based program taking user
              interaction it is possible
              that ProgramB will be taken down or have to be restarted at some
              interval.  Across the
              drops of ProgramB, ProgramA will still develop at a regular rate and
              will be fully
              functional when ProgramB comes back online.

              Just a thought.

                  - Justin Rogers, CEO DigiTec Web Consultants





              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] Multiply oriented interactive worlds..."
        from: Justin Rogers <justin@mlstoday.com>
        references: []
        date: 2000-01-20 23:18:35.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00uTmp8K
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *358
    parent: 
    children: []
  *331: *333
  ? &359 !ruby/object:MessageId
    raw: 00bj7qNM@generated-message-id.chibrary.org
  : &483 !ruby/object:MessageContainer
    key: *359
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: |
          From: J C Lawrence <claw@kanga.nu>
          Date: Sat, 01 Jan 2000 12:51:24 -0800
          Subject: [MUD-Dev] JavaWorld: Build an object database

          In wandering about some Library links I came across this:

            http://www.javaworld.com/javaworld/jw-01-2000/jw-01-step.html

          "Construct a frontend to translate between Java objects and
          relational database records"

          --<cut>--
          In this first of two articles, we look at implementing an object
          database frontend -- that is to say, a database frontend that can
          automatically map between Java objects and records within a
          relational database.  Using this frontend you can, for example,
          store Java User objects in a relational database, where they will be
          automatically and transparently mapped between the native Java
          object representation and, for example, name, age, and gender fields
          within the database backend.  (5,400 words)
          --<cut>--

          --
          J C Lawrence                                 Home: claw@kanga.nu
          ----------(*)                              Other: coder@kanga.nu
          --=| A man is as sane as he is dangerous to his environment |=--


          _______________________________________________
          MUD-Dev maillist  -  MUD-Dev@kanga.nu
          http://www.kanga.nu/lists/listinfo/mud-dev
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Sat, 01 Jan 2000 12:51:24 -0800'
                name: Date
                value: Sat, 01 Jan 2000 12:51:24 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] JavaWorld: Build an object database'
                name: Subject
                value: "[MUD-Dev] JavaWorld: Build an object database"
              mbox_from: 
            body: |
              In wandering about some Library links I came across this:

                http://www.javaworld.com/javaworld/jw-01-2000/jw-01-step.html

              "Construct a frontend to translate between Java objects and
              relational database records"

              --<cut>--
              In this first of two articles, we look at implementing an object
              database frontend -- that is to say, a database frontend that can
              automatically map between Java objects and records within a
              relational database.  Using this frontend you can, for example,
              store Java User objects in a relational database, where they will be
              automatically and transparently mapped between the native Java
              object representation and, for example, name, age, and gender fields
              within the database backend.  (5,400 words)
              --<cut>--

              --
              J C Lawrence                                 Home: claw@kanga.nu
              ----------(*)                              Other: coder@kanga.nu
              --=| A man is as sane as he is dangerous to his environment |=--


              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] JavaWorld: Build an object database"
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-01 20:51:24.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00bj7qNM
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *359
    parent: 
    children: []
  *264: *360
  *77: *80
  *97: *100
  *162: *361
  *273: *362
  ? &363 !ruby/object:MessageId
    raw: 000DntrM@generated-message-id.chibrary.org
  : &365 !ruby/object:MessageContainer
    key: *363
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: Richard Woolcock <KaVir@dial.pipex.com>\nDate: Mon, 17 Jan 2000
          01:02:32 -0800\nSubject: Re: [MUD-Dev] code base inquiry\n\nMatthew Mihaly
          wrote:\n> \n> On Sat, 15 Jan 2000, Richard Woolcock wrote:\n> \n> > Whether
          the codebases had restrictions or not has no baring on the quality\n> >
          of the muds.  If you took away the restrictions we'd *still* have thousands\n>
          > of rubbish stock muds - except they'd all be pay to play.  In turn that\n>
          > would make people even *more* likely to start their own up rather than\n>
          > having to pay to play on someone elses mud.\n> >\n> > At least with the
          restrictions it ensures that the majority of text-based\n> > muds are run
          by hobbiests, while those are just in it for some easy money\n> > are put
          off by the idea of having to create a mud from scratch.  Those few\n> >
          muds which *are* written from scratch for commercial use are then put in
          a\n> > better position to compete.\n> \n> Easy money. Heh. You've either
          not created a lot of commercial text muds,\n> or you are incredibly competent
          and efficient.\n\nYou're not listening to what I said.  What I said was
          that if there were no\nrestrictions on codebases, those people who *wanted*
          to make some easy money\ncould do so - as it stands right now, the restrictions
          ensure that people \neither run the mud for no profit, or else have to put
          in a lot of work.\n\n> It's most certainly not easy money, and if all free
          muds had commercial \n> restrictions removed, it most certainly wouldn't
          be easy money for them \n> either, particularly given that I don't see people
          paying to play 99% of \n> the free muds, given the quality and same-ness
          of them.\n\nJust a point of note - the same-ness has nothing to do with
          whether or not\nthe mud is free.  If you decided to release the code for
          your mud, in a few\nyears time people would refer to it as being a \"crappy
          stock code\".\n\nFurthermore, the most innovative and unique mud designs
          I've ever seen have \nnot been for commercial muds.  I often wonder if the
          main reason that the\nowners of commercial muds strike out against free
          muds is down to jealousy - \nthat someone could (in their spare time) make
          something that is more \nsuccessful than something they themselves have
          put years of hard work into \ncommercially.\n\n> As for the survival of
          those of us with commercial muds written from\n> scratch, I, for one, am
          a believer that a rising tide raises all\n> ships. See my reply to Caliban.\n\nAs
          it stands, the majority of muds fight over who can get the most players.\nIf
          all muds were based around the concept of making money then - quite\nobviously
          - that would be the same objective for everyone who wanted to \nprofit from
          their mud.\n\nWhat about those muds - like my own - who's only objective
          is to be true\nto the vision of their creator?  Those muds who wish to be
          unique and\noriginal in such a specific way that they would only ever cater
          to a very \nsmall niche of the mudding community?  Very little profit to
          be made there, \nI'm afraid.\n\nPersonally I feel that if all muds started
          trying to become profit-making\nventures, there would be no place for the
          truely unusual and unique muds.\nTo attract the best distribution of players,
          your number one priority would \nbe to have all the \"cool\" features rather
          than those you personally felt \nshould be there.\n\nThere is a certain
          freedom in creating a mud, knowing that you can never\nprofit financially
          from it - and therefore never feeling that your designs \nshould be restricted
          by the opinions of others.  That is a freedom I'm not \nsure I would want
          to give up.\n\nKaVir.\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Richard Woolcock <KaVir@dial.pipex.com>'
                name: From
                value: Richard Woolcock <KaVir@dial.pipex.com>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Mon, 17 Jan 2000 01:02:32 -0800'
                name: Date
                value: Mon, 17 Jan 2000 01:02:32 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: [MUD-Dev] code base inquiry'
                name: Subject
                value: 'Re: [MUD-Dev] code base inquiry'
              mbox_from: 
            body: "Matthew Mihaly wrote:\n> \n> On Sat, 15 Jan 2000, Richard Woolcock
              wrote:\n> \n> > Whether the codebases had restrictions or not has no
              baring on the quality\n> > of the muds.  If you took away the restrictions
              we'd *still* have thousands\n> > of rubbish stock muds - except they'd
              all be pay to play.  In turn that\n> > would make people even *more*
              likely to start their own up rather than\n> > having to pay to play
              on someone elses mud.\n> >\n> > At least with the restrictions it ensures
              that the majority of text-based\n> > muds are run by hobbiests, while
              those are just in it for some easy money\n> > are put off by the idea
              of having to create a mud from scratch.  Those few\n> > muds which *are*
              written from scratch for commercial use are then put in a\n> > better
              position to compete.\n> \n> Easy money. Heh. You've either not created
              a lot of commercial text muds,\n> or you are incredibly competent and
              efficient.\n\nYou're not listening to what I said.  What I said was
              that if there were no\nrestrictions on codebases, those people who *wanted*
              to make some easy money\ncould do so - as it stands right now, the restrictions
              ensure that people \neither run the mud for no profit, or else have
              to put in a lot of work.\n\n> It's most certainly not easy money, and
              if all free muds had commercial \n> restrictions removed, it most certainly
              wouldn't be easy money for them \n> either, particularly given that
              I don't see people paying to play 99% of \n> the free muds, given the
              quality and same-ness of them.\n\nJust a point of note - the same-ness
              has nothing to do with whether or not\nthe mud is free.  If you decided
              to release the code for your mud, in a few\nyears time people would
              refer to it as being a \"crappy stock code\".\n\nFurthermore, the most
              innovative and unique mud designs I've ever seen have \nnot been for
              commercial muds.  I often wonder if the main reason that the\nowners
              of commercial muds strike out against free muds is down to jealousy
              - \nthat someone could (in their spare time) make something that is
              more \nsuccessful than something they themselves have put years of hard
              work into \ncommercially.\n\n> As for the survival of those of us with
              commercial muds written from\n> scratch, I, for one, am a believer that
              a rising tide raises all\n> ships. See my reply to Caliban.\n\nAs it
              stands, the majority of muds fight over who can get the most players.\nIf
              all muds were based around the concept of making money then - quite\nobviously
              - that would be the same objective for everyone who wanted to \nprofit
              from their mud.\n\nWhat about those muds - like my own - who's only
              objective is to be true\nto the vision of their creator?  Those muds
              who wish to be unique and\noriginal in such a specific way that they
              would only ever cater to a very \nsmall niche of the mudding community?
              \ Very little profit to be made there, \nI'm afraid.\n\nPersonally I
              feel that if all muds started trying to become profit-making\nventures,
              there would be no place for the truely unusual and unique muds.\nTo
              attract the best distribution of players, your number one priority would
              \nbe to have all the \"cool\" features rather than those you personally
              felt \nshould be there.\n\nThere is a certain freedom in creating a
              mud, knowing that you can never\nprofit financially from it - and therefore
              never feeling that your designs \nshould be restricted by the opinions
              of others.  That is a freedom I'm not \nsure I would want to give up.\n\nKaVir.\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: [MUD-Dev] code base inquiry'
        from: Richard Woolcock <KaVir@dial.pipex.com>
        references: []
        date: 2000-01-17 09:02:32.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 000DntrM
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *363
    parent: 
    children:
    - &367 !ruby/object:MessageContainer
      key: &364 !ruby/object:MessageId
        raw: 00bj7rRA@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: Richard Woolcock <KaVir@dial.pipex.com>\nDate: Mon, 17 Jan 2000
            21:50:03 -0800\nSubject: Re: [MUD-Dev] code base inquiry\n\nMatthew Mihaly
            wrote:\n> \n> On Mon, 17 Jan 2000, Richard Woolcock wrote:\n> \n> > Matthew
            Mihaly wrote:\n> > >\n> > > On Sat, 15 Jan 2000, Richard Woolcock wrote:\n>
            > >\n> > >\n> > > Easy money. Heh. You've either not created a lot of
            commercial text muds,\n> > > or you are incredibly competent and efficient.\n>
            >\n> > You're not listening to what I said.  What I said was that if there
            were no\n> > restrictions on codebases, those people who *wanted* to make
            some easy money\n> > could do so - as it stands right now, the restrictions
            ensure that people\n> > either run the mud for no profit, or else have
            to put in a lot of work.\n> \n> No, I'm listening, I just think you are
            very wrong. I really have no idea\n> what your definition of 'easy money'
            is, but if you honestly think that if\n> all the current free muds started
            charging, most of them would make money\n> (much less easy money) then
            I salute you for your extreme optimism.\n\nI'm not just talking about
            charging to play - what about accepting donations \n(like Medievia or
            Threshold), for example?  Is it so hard to believe that - \nif restrictions
            were removed from existing codebases - most of the successful\nmuds wouldn't
            start offering in-game perks in exchange for monetary donations?\n\nOnce
            a trend had been set, it wouldn't be long before the majority of muds\nwould
            start following the example of their larger brethren.  Given a year or
            \ntwo, it would come to be accepted as the \"norm\" - same stock situation
            as we \nhave today, accept real-life money could be used by players as
            an alternative \nto skill, time and effort.\n\n[snip]\n\n> Money is, pretty
            clearly, one of, if not the, best general motivator ever.\n\nOla has already
            covered this - I agree with his view.  You may be motivated\nto run your
            mud out of money, but I am not.  There are many different reasons\nthat
            people run muds.\n\n> > Furthermore, the most innovative and unique mud
            designs I've ever seen have\n> > not been for commercial muds.  I often
            wonder if the main reason that the\n> > owners of commercial muds strike
            out against free muds is down to jealousy -\n> > that someone could (in
            their spare time) make something that is more\n> > successful than something
            they themselves have put years of hard work into\n> > commercially.\n>
            \n> Can't say I share similar experiences, but I'm willing to grant that
            text\n> muds are able to do some things commercial muds can't. On the
            other hand,\n> commercial muds can do a lot of things text muds can't
            (such as support\n> large user bases. I don't know of any free mud that
            regularly gets over\n> 500 players online at once. Everquest, on the other
            hand, gets 100x that\n> online at once.)\n\nI know that Realms of Despair
            has peaked at over 650 people online at once,\nbut certainly the majority
            of pay muds have larger playerbases than free\nones.  Personally I do
            not judge a mud to be either good or bad simply by\nthe size of its playerbase.
            \ Obviously a commercial mud has the financial\ncapacity to promote and
            advertise itself in ways that a free mud would be\nunlikely to.\n\n> As
            for jealously, I, for one, am not at all jealous of the average mud,\n>
            which is garbage. I see nothing impressive about downloading content and\n>
            running it. Further, I really doubt that the big muds (and they are _all_\n>
            commercial) are spending a lot of nights crying over having captured the\n>
            interests and dollars of more people than will ever even hear of most
            free\n> muds.\n\nWould this would be the same big muds that capture the
            interest of people \nwho don't even know that there is any such thing
            as free muds?  Perhaps\nthe same players who think that a graphical mud
            is like a huge Quake/Diablo\ndeathmatch, except with swords and spells?\n\nI
            lose track of how many people I encounter on free muds who say \"Well,
            I \noriginally started playing such-and-such pay-to-play mud, but then
            someone\nintroduced me to these free ones...\"\n\n> I find it rather funny
            that you think that someone who downloads a stock\n> codebase and puts
            his or her sparetime into it is going to produce\n> something superior
            to, say, UO.\n\nPlease stop putting words into my mouth.  I have never
            said anything even\n*remotely* similar to the above.\n\n> Perhaps we have
            different standards of quality, but I, for one, really \n> like things
            like customer service, which free muds are laughably poor at\n> in general.\n\n
            \ \"So here is a guy running a business who still feels free to act in
            a way \n   that is potentially hurtful to his business, because he feels
            like it. \n   It's his business. Likewise, I'm willing to do that sometimes
            with my \n   commercial game, because, well, I can. My business, my world,
            no public \n   shareholders to answer to\".\n\n   -- Matthew Mihaly, 17th
            Feb 2000\n\nCustomer service on free muds is generally bad, but from what
            I've heard\nfrom pay-to-play players, the customer service on commercial
            muds is rarely \nany better.\n\n> > > As for the survival of those of
            us with commercial muds written from\n> > > scratch, I, for one, am a
            believer that a rising tide raises all\n> > > ships. See my reply to Caliban.\n>
            >\n> > As it stands, the majority of muds fight over who can get the most
            players.\n> > If all muds were based around the concept of making money
            then - quite\n> > obviously - that would be the same objective for everyone
            who wanted to\n> > profit from their mud.\n> \n> Right, so you run your
            mud with an eye towards driving away players,\n> right?\n\nPutting words
            in my mouth again?  In answer to your question, no, I run my\nmud in the
            way I feel it should be run.  I do not back off from players out\nof fear
            that they will leave the mud, nor to I try catering to their every\nneed.
            \ I have my own agenda - I am trying to construct my own \"dream mud\"
            -\nand I will not change that agenda just to make a little extra pocket
            money.\n\n> > What about those muds - like my own - who's only objective
            is to be true\n> > to the vision of their creator?  Those muds who wish
            to be unique and\n> > original in such a specific way that they would
            only ever cater to a very\n> > small niche of the mudding community?  Very
            little profit to be made there,\n> > I'm afraid.\n> \n> Not arguing that,
            and I have no problem with quality free muds. If you\n> want to cater
            to an audience of 100, go for it. Power to you.\n\nActually I am catering
            to an audience of 1.  If anyone else wants to play,\nmore power to them
            - they're welcome to join me.\n\n> > Personally I feel that if all muds
            started trying to become profit-making\n> > ventures, there would be no
            place for the truely unusual and unique muds.\n> > To attract the best
            distribution of players, your number one priority would\n> > be to have
            all the \"cool\" features rather than those you personally felt\n> > should
            be there.\n> \n> I don't recall ever saying that all muds should be profit-making\n>
            ventures.\n\nTrue, but you did state that muds should be free from restrictions.
            \ What\nother restrictions did you have in mind?\n\n> 90% of muds demonstrate
            such a low level of seriousness that they would \n> just fall on their
            faces should they try to turn a profit.\n\nArguing numbers gets us nowhere,
            as this is all a matter of opinion anyway.\nHowever even if only the most
            popular 10% of the muds on the mudconnector\ndecided to start charging,
            that would still be over 150 muds - and there\nare probably that many
            muds again that haven't bothered to register with \nthe mudconnector.\n\n[snip]\n\n>
            It's not as if it's possible to haveone game with all the 'cool'\n> features.
            To some people, a cool feature is unrestricted PK'ing. To\n> others, a
            cool feature is no PK'ing. These are completely incompatible\n> arrangements.\n\nAgreed
            - but you'll usually find a majority of players like a particularly\ncombination
            of features.  For example, you'll probably find that most \ncommercial
            muds have PK in some form or other, because there are a lot of\nplayers
            that like killing each other.  However in most cases the PK will\nbe restricted
            or penalised in some way, because you don't want to turn away \nthose
            players who *don't* want to PK.  Graphical muds, mostly attracting\nthe
            sort of players who are used to Diablo and Quake, would - I imagine -\nlean
            more towards PK than text-based muds.\n\n> > There is a certain freedom
            in creating a mud, knowing that you can never\n> > profit financially
            from it - and therefore never feeling that your designs\n> > should be
            restricted by the opinions of others.  That is a freedom I'm not\n> >
            sure I would want to give up.\n> \n> Exactly how does anything I've said
            require that you give up that freedom?\n\nI believe it comes down to what
            Ola was talking about.\n\n> If codebases had no commercial restrictions,
            nothing would stop you from \n> from running for free. If you can't attract
            any players in that environment, \n> then you have no business running
            a mud. \n\nOnce again you're assuming that the goal of my mud is to attract
            a large \nnumber of players - it's not.  My mud is *not* a commercial
            venture, I do\nnot measure it's success in the form of money or number
            of players.\n\n> My only reasoning for thinking that codebases should
            remove commercial \n> restrictions is that money provides the best motivator\n\nAnd
            this is the root of our disagreement.  I make plenty of money from \nmy
            real life job - creating the mud is my hobby and my escape from the \npressures
            of other people.  You make your money from your mud.\n\nKaVir.\n\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: Richard Woolcock <KaVir@dial.pipex.com>'
                  name: From
                  value: Richard Woolcock <KaVir@dial.pipex.com>
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Mon, 17 Jan 2000 21:50:03 -0800'
                  name: Date
                  value: Mon, 17 Jan 2000 21:50:03 -0800
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] code base inquiry'
                  name: Subject
                  value: 'Re: [MUD-Dev] code base inquiry'
                mbox_from: 
              body: "Matthew Mihaly wrote:\n> \n> On Mon, 17 Jan 2000, Richard Woolcock
                wrote:\n> \n> > Matthew Mihaly wrote:\n> > >\n> > > On Sat, 15 Jan
                2000, Richard Woolcock wrote:\n> > >\n> > >\n> > > Easy money. Heh.
                You've either not created a lot of commercial text muds,\n> > > or
                you are incredibly competent and efficient.\n> >\n> > You're not listening
                to what I said.  What I said was that if there were no\n> > restrictions
                on codebases, those people who *wanted* to make some easy money\n>
                > could do so - as it stands right now, the restrictions ensure that
                people\n> > either run the mud for no profit, or else have to put
                in a lot of work.\n> \n> No, I'm listening, I just think you are very
                wrong. I really have no idea\n> what your definition of 'easy money'
                is, but if you honestly think that if\n> all the current free muds
                started charging, most of them would make money\n> (much less easy
                money) then I salute you for your extreme optimism.\n\nI'm not just
                talking about charging to play - what about accepting donations \n(like
                Medievia or Threshold), for example?  Is it so hard to believe that
                - \nif restrictions were removed from existing codebases - most of
                the successful\nmuds wouldn't start offering in-game perks in exchange
                for monetary donations?\n\nOnce a trend had been set, it wouldn't
                be long before the majority of muds\nwould start following the example
                of their larger brethren.  Given a year or \ntwo, it would come to
                be accepted as the \"norm\" - same stock situation as we \nhave today,
                accept real-life money could be used by players as an alternative
                \nto skill, time and effort.\n\n[snip]\n\n> Money is, pretty clearly,
                one of, if not the, best general motivator ever.\n\nOla has already
                covered this - I agree with his view.  You may be motivated\nto run
                your mud out of money, but I am not.  There are many different reasons\nthat
                people run muds.\n\n> > Furthermore, the most innovative and unique
                mud designs I've ever seen have\n> > not been for commercial muds.
                \ I often wonder if the main reason that the\n> > owners of commercial
                muds strike out against free muds is down to jealousy -\n> > that
                someone could (in their spare time) make something that is more\n>
                > successful than something they themselves have put years of hard
                work into\n> > commercially.\n> \n> Can't say I share similar experiences,
                but I'm willing to grant that text\n> muds are able to do some things
                commercial muds can't. On the other hand,\n> commercial muds can do
                a lot of things text muds can't (such as support\n> large user bases.
                I don't know of any free mud that regularly gets over\n> 500 players
                online at once. Everquest, on the other hand, gets 100x that\n> online
                at once.)\n\nI know that Realms of Despair has peaked at over 650
                people online at once,\nbut certainly the majority of pay muds have
                larger playerbases than free\nones.  Personally I do not judge a mud
                to be either good or bad simply by\nthe size of its playerbase.  Obviously
                a commercial mud has the financial\ncapacity to promote and advertise
                itself in ways that a free mud would be\nunlikely to.\n\n> As for
                jealously, I, for one, am not at all jealous of the average mud,\n>
                which is garbage. I see nothing impressive about downloading content
                and\n> running it. Further, I really doubt that the big muds (and
                they are _all_\n> commercial) are spending a lot of nights crying
                over having captured the\n> interests and dollars of more people than
                will ever even hear of most free\n> muds.\n\nWould this would be the
                same big muds that capture the interest of people \nwho don't even
                know that there is any such thing as free muds?  Perhaps\nthe same
                players who think that a graphical mud is like a huge Quake/Diablo\ndeathmatch,
                except with swords and spells?\n\nI lose track of how many people
                I encounter on free muds who say \"Well, I \noriginally started playing
                such-and-such pay-to-play mud, but then someone\nintroduced me to
                these free ones...\"\n\n> I find it rather funny that you think that
                someone who downloads a stock\n> codebase and puts his or her sparetime
                into it is going to produce\n> something superior to, say, UO.\n\nPlease
                stop putting words into my mouth.  I have never said anything even\n*remotely*
                similar to the above.\n\n> Perhaps we have different standards of
                quality, but I, for one, really \n> like things like customer service,
                which free muds are laughably poor at\n> in general.\n\n  \"So here
                is a guy running a business who still feels free to act in a way \n
                \  that is potentially hurtful to his business, because he feels like
                it. \n   It's his business. Likewise, I'm willing to do that sometimes
                with my \n   commercial game, because, well, I can. My business, my
                world, no public \n   shareholders to answer to\".\n\n   -- Matthew
                Mihaly, 17th Feb 2000\n\nCustomer service on free muds is generally
                bad, but from what I've heard\nfrom pay-to-play players, the customer
                service on commercial muds is rarely \nany better.\n\n> > > As for
                the survival of those of us with commercial muds written from\n> >
                > scratch, I, for one, am a believer that a rising tide raises all\n>
                > > ships. See my reply to Caliban.\n> >\n> > As it stands, the majority
                of muds fight over who can get the most players.\n> > If all muds
                were based around the concept of making money then - quite\n> > obviously
                - that would be the same objective for everyone who wanted to\n> >
                profit from their mud.\n> \n> Right, so you run your mud with an eye
                towards driving away players,\n> right?\n\nPutting words in my mouth
                again?  In answer to your question, no, I run my\nmud in the way I
                feel it should be run.  I do not back off from players out\nof fear
                that they will leave the mud, nor to I try catering to their every\nneed.
                \ I have my own agenda - I am trying to construct my own \"dream mud\"
                -\nand I will not change that agenda just to make a little extra pocket
                money.\n\n> > What about those muds - like my own - who's only objective
                is to be true\n> > to the vision of their creator?  Those muds who
                wish to be unique and\n> > original in such a specific way that they
                would only ever cater to a very\n> > small niche of the mudding community?
                \ Very little profit to be made there,\n> > I'm afraid.\n> \n> Not
                arguing that, and I have no problem with quality free muds. If you\n>
                want to cater to an audience of 100, go for it. Power to you.\n\nActually
                I am catering to an audience of 1.  If anyone else wants to play,\nmore
                power to them - they're welcome to join me.\n\n> > Personally I feel
                that if all muds started trying to become profit-making\n> > ventures,
                there would be no place for the truely unusual and unique muds.\n>
                > To attract the best distribution of players, your number one priority
                would\n> > be to have all the \"cool\" features rather than those
                you personally felt\n> > should be there.\n> \n> I don't recall ever
                saying that all muds should be profit-making\n> ventures.\n\nTrue,
                but you did state that muds should be free from restrictions.  What\nother
                restrictions did you have in mind?\n\n> 90% of muds demonstrate such
                a low level of seriousness that they would \n> just fall on their
                faces should they try to turn a profit.\n\nArguing numbers gets us
                nowhere, as this is all a matter of opinion anyway.\nHowever even
                if only the most popular 10% of the muds on the mudconnector\ndecided
                to start charging, that would still be over 150 muds - and there\nare
                probably that many muds again that haven't bothered to register with
                \nthe mudconnector.\n\n[snip]\n\n> It's not as if it's possible to
                haveone game with all the 'cool'\n> features. To some people, a cool
                feature is unrestricted PK'ing. To\n> others, a cool feature is no
                PK'ing. These are completely incompatible\n> arrangements.\n\nAgreed
                - but you'll usually find a majority of players like a particularly\ncombination
                of features.  For example, you'll probably find that most \ncommercial
                muds have PK in some form or other, because there are a lot of\nplayers
                that like killing each other.  However in most cases the PK will\nbe
                restricted or penalised in some way, because you don't want to turn
                away \nthose players who *don't* want to PK.  Graphical muds, mostly
                attracting\nthe sort of players who are used to Diablo and Quake,
                would - I imagine -\nlean more towards PK than text-based muds.\n\n>
                > There is a certain freedom in creating a mud, knowing that you can
                never\n> > profit financially from it - and therefore never feeling
                that your designs\n> > should be restricted by the opinions of others.
                \ That is a freedom I'm not\n> > sure I would want to give up.\n>
                \n> Exactly how does anything I've said require that you give up that
                freedom?\n\nI believe it comes down to what Ola was talking about.\n\n>
                If codebases had no commercial restrictions, nothing would stop you
                from \n> from running for free. If you can't attract any players in
                that environment, \n> then you have no business running a mud. \n\nOnce
                again you're assuming that the goal of my mud is to attract a large
                \nnumber of players - it's not.  My mud is *not* a commercial venture,
                I do\nnot measure it's success in the form of money or number of players.\n\n>
                My only reasoning for thinking that codebases should remove commercial
                \n> restrictions is that money provides the best motivator\n\nAnd
                this is the root of our disagreement.  I make plenty of money from
                \nmy real life job - creating the mud is my hobby and my escape from
                the \npressures of other people.  You make your money from your mud.\n\nKaVir.\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] code base inquiry'
          from: Richard Woolcock <KaVir@dial.pipex.com>
          references: []
          date: 2000-01-18 05:50:03.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: 00bj7rRA
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *364
      parent: *365
      children:
      - &377 !ruby/object:MessageContainer
        key: &366 !ruby/object:MessageId
          raw: Jzn75vyC@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: Richard Woolcock <KaVir@dial.pipex.com>\nDate: Tue, 18 Jan
              2000 20:07:40 -0800\nSubject: Re: [MUD-Dev] code base inquiry\n\nMatthew
              Mihaly wrote:\n> \n\nThe majority of this discussion between you and
              myself has been snipped, \nbecause it's starting to get repetitive.
              \ I can see where you're coming\nfrom and don't disagree with it - but
              I don't think we'll ever share the\nsame views as our motivations are
              completely different.\n\n> it sometimes ticks off the players, who would
              prefer we spend more time \n> doing exactly what they want. I'd get
              too bored running Achaea that way, \n> however. I have to remain amused
              as well as the players. That, to me, is \n> the great thing about running
              a small commercial world. As long as you \n> can maintain a certain
              level of quality, you can make money and still have \n> reasonable freedom
              to do what you want with it (of course, this assumes \n> that some segment
              of the mudding population shares your idea of what is \n> fun, but that
              is not unlikely I would say).\n\nSo basically you're a half-way-house
              between purely hobby and purely\ncommercial?\n\n> > > Not arguing that,
              and I have no problem with quality free muds. If you\n> > > want to
              cater to an audience of 100, go for it. Power to you.\n> >\n> > Actually
              I am catering to an audience of 1.  If anyone else wants to play,\n>
              > more power to them - they're welcome to join me.\n> \n> Ok, fair enough,
              but I guess to me, muds are about community, with most of\n> the content
              being provided by the players. You just need to provide them\n> with
              constructive ways to provide interesting content. I know that Achaea,\n>
              for instnace, would be deathly boring with only 1 person.\n\nI cater
              to an audience of 1 - but that doesn't mean my mud only has one\nplayer.
              \ Certainly if that were the case it would lose out on the main\npurpose
              of a MUD - to be Multi-User.  The difference is that the players\nwho
              come to my mud do so because they playing within my definition of what\nmakes
              a good mud - not because I've tried to lure them in by making the\nmud
              follow their own definition.\n\n> > > My only reasoning for thinking
              that codebases should remove commercial\n> > > restrictions is that
              money provides the best motivator\n> >\n> > And this is the root of
              our disagreement.  I make plenty of money from\n> > my real life job
              - creating the mud is my hobby and my escape from the\n> > pressures
              of other people.  You make your money from your mud.\n> \n> Right, you
              have a job. You can't spend 50 hours a week and employ other\n> people
              to work 50 hours a week on your mud. Chances are, if you were\n> independently
              wealthy, you'd still not spend 50 hours a week working on\n> your mud.
              I don't know what you do, but if you were independently wealthy,\n>
              do you really think you'd work as hard, as regularly, and as steadily
              at\n> your job as you do now?\n\nI'd probably put the same about of
              time into my hobbies - one of which\nis building my mud.\n\nKaVir.\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: Richard Woolcock <KaVir@dial.pipex.com>'
                    name: From
                    value: Richard Woolcock <KaVir@dial.pipex.com>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Tue, 18 Jan 2000 20:07:40 -0800'
                    name: Date
                    value: Tue, 18 Jan 2000 20:07:40 -0800
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] code base inquiry'
                    name: Subject
                    value: 'Re: [MUD-Dev] code base inquiry'
                  mbox_from: 
                body: "Matthew Mihaly wrote:\n> \n\nThe majority of this discussion
                  between you and myself has been snipped, \nbecause it's starting
                  to get repetitive.  I can see where you're coming\nfrom and don't
                  disagree with it - but I don't think we'll ever share the\nsame
                  views as our motivations are completely different.\n\n> it sometimes
                  ticks off the players, who would prefer we spend more time \n> doing
                  exactly what they want. I'd get too bored running Achaea that way,
                  \n> however. I have to remain amused as well as the players. That,
                  to me, is \n> the great thing about running a small commercial world.
                  As long as you \n> can maintain a certain level of quality, you
                  can make money and still have \n> reasonable freedom to do what
                  you want with it (of course, this assumes \n> that some segment
                  of the mudding population shares your idea of what is \n> fun, but
                  that is not unlikely I would say).\n\nSo basically you're a half-way-house
                  between purely hobby and purely\ncommercial?\n\n> > > Not arguing
                  that, and I have no problem with quality free muds. If you\n> >
                  > want to cater to an audience of 100, go for it. Power to you.\n>
                  >\n> > Actually I am catering to an audience of 1.  If anyone else
                  wants to play,\n> > more power to them - they're welcome to join
                  me.\n> \n> Ok, fair enough, but I guess to me, muds are about community,
                  with most of\n> the content being provided by the players. You just
                  need to provide them\n> with constructive ways to provide interesting
                  content. I know that Achaea,\n> for instnace, would be deathly boring
                  with only 1 person.\n\nI cater to an audience of 1 - but that doesn't
                  mean my mud only has one\nplayer.  Certainly if that were the case
                  it would lose out on the main\npurpose of a MUD - to be Multi-User.
                  \ The difference is that the players\nwho come to my mud do so because
                  they playing within my definition of what\nmakes a good mud - not
                  because I've tried to lure them in by making the\nmud follow their
                  own definition.\n\n> > > My only reasoning for thinking that codebases
                  should remove commercial\n> > > restrictions is that money provides
                  the best motivator\n> >\n> > And this is the root of our disagreement.
                  \ I make plenty of money from\n> > my real life job - creating the
                  mud is my hobby and my escape from the\n> > pressures of other people.
                  \ You make your money from your mud.\n> \n> Right, you have a job.
                  You can't spend 50 hours a week and employ other\n> people to work
                  50 hours a week on your mud. Chances are, if you were\n> independently
                  wealthy, you'd still not spend 50 hours a week working on\n> your
                  mud. I don't know what you do, but if you were independently wealthy,\n>
                  do you really think you'd work as hard, as regularly, and as steadily
                  at\n> your job as you do now?\n\nI'd probably put the same about
                  of time into my hobbies - one of which\nis building my mud.\n\nKaVir.\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] code base inquiry'
            from: Richard Woolcock <KaVir@dial.pipex.com>
            references: []
            date: 2000-01-19 04:07:40.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: Jzn75vyC
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *366
        parent: *367
        children: []
      - &382 !ruby/object:MessageContainer
        key: &368 !ruby/object:MessageId
          raw: 00uTmp96@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: Richard Woolcock <KaVir@dial.pipex.com>\nDate: Mon, 17 Jan
              2000 22:12:57 -0800\nSubject: Re: [MUD-Dev] code base inquiry\n\nBen
              Greear wrote:\n> \n> Richard Woolcock wrote:\n> >\n\n[snip]\n\n> > You're
              not listening to what I said.  What I said was that if there were no\n>
              > restrictions on codebases, those people who *wanted* to make some
              easy money\n> > could do so - as it stands right now, the restrictions
              ensure that people\n> > either run the mud for no profit, or else have
              to put in a lot of work.\n> \n> I don't agree with that last bit.  There
              are free mud servers out there,\n> free from commercial restraints (GPL
              and all that.)  One that I'm familiar\n> with is Scry. \n\nMy apologies,
              Ben - I was under the mistaken belief that your codebase had\nbeen released
              for running non-profit muds only.\n\n> It may not be the best MUD server
              in the world, but it's at least on par \n> with most of the DIKU/MERC
              clones (IMHO).\n\nTo be honest I cannot comment, having never taken
              the time to look at your\ncodebase.  Having read about some of the features,
              however, I would agree\nthat it is probably more advanced than any of
              the Diku codebases (with the\nonly possible exception being Smaug, which
              - like your codebase - is very\nfeature rich).\n\nUnfortunately it suffers
              from one big (dis)advantage - it's not based on\nDiku.  You're going
              to have to bring up a whole new generation of mudders\non your codebase
              - a generation that *haven't* grown up on Diku - before \nyou'll be
              able to gain the popularity enjoyed by most Diku codebases.  As\nI'm
              sure you know, most mudders hate change - and generally stick to \nwhichever
              codebase they learned to mud on.\n\nStill, you've got your mud up and
              running - over time, your old players \nwill slowly trickle away and
              new ones will join.  Some of those who leave\nwill do so because they
              disagree with things you've changed or not changed\nand/or because they
              think they can do a better job themselves - and so\nmore and more ScryMUDs
              will start up.\n\nSo maybe in a year or two Matthew's wish will come
              true.\n\n> In order for there to be easy money, you have to have a differentiated\n>
              product.  In a 'market' as saturated as MUDs, where admins/coders/builders\n>
              try hard just to get players for free, it requires a lot more than the\n>
              lack of a restrictive license to give someone something worth charging
              for.\n\nAgreed.  Sort of.  If you build up a large number of regular
              players and \nstart offering them special perks in return for small
              amounts of money, one\nor two of them will be bound to take you up on
              the offer (so that they can\nget an edge over the others) - particularly
              if your mud is a very competative\none.  Other players who have put
              a lot of time and effort into their \ncharacters, not wanting to fall
              behind, will follow suit.  Keep upping the\nmoney and the perks and
              before long you'll have a nice little bit of extra\ncash flowing in.
              \ I know of muds that have done this and got away with it.\n\nHowever,
              in order to reach that point you have to have something good enough\nto
              attract - and keep - a reasonably sized playerbase.\n\nKaVir.\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: Richard Woolcock <KaVir@dial.pipex.com>'
                    name: From
                    value: Richard Woolcock <KaVir@dial.pipex.com>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Mon, 17 Jan 2000 22:12:57 -0800'
                    name: Date
                    value: Mon, 17 Jan 2000 22:12:57 -0800
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] code base inquiry'
                    name: Subject
                    value: 'Re: [MUD-Dev] code base inquiry'
                  mbox_from: 
                body: "Ben Greear wrote:\n> \n> Richard Woolcock wrote:\n> >\n\n[snip]\n\n>
                  > You're not listening to what I said.  What I said was that if
                  there were no\n> > restrictions on codebases, those people who *wanted*
                  to make some easy money\n> > could do so - as it stands right now,
                  the restrictions ensure that people\n> > either run the mud for
                  no profit, or else have to put in a lot of work.\n> \n> I don't
                  agree with that last bit.  There are free mud servers out there,\n>
                  free from commercial restraints (GPL and all that.)  One that I'm
                  familiar\n> with is Scry. \n\nMy apologies, Ben - I was under the
                  mistaken belief that your codebase had\nbeen released for running
                  non-profit muds only.\n\n> It may not be the best MUD server in
                  the world, but it's at least on par \n> with most of the DIKU/MERC
                  clones (IMHO).\n\nTo be honest I cannot comment, having never taken
                  the time to look at your\ncodebase.  Having read about some of the
                  features, however, I would agree\nthat it is probably more advanced
                  than any of the Diku codebases (with the\nonly possible exception
                  being Smaug, which - like your codebase - is very\nfeature rich).\n\nUnfortunately
                  it suffers from one big (dis)advantage - it's not based on\nDiku.
                  \ You're going to have to bring up a whole new generation of mudders\non
                  your codebase - a generation that *haven't* grown up on Diku - before
                  \nyou'll be able to gain the popularity enjoyed by most Diku codebases.
                  \ As\nI'm sure you know, most mudders hate change - and generally
                  stick to \nwhichever codebase they learned to mud on.\n\nStill,
                  you've got your mud up and running - over time, your old players
                  \nwill slowly trickle away and new ones will join.  Some of those
                  who leave\nwill do so because they disagree with things you've changed
                  or not changed\nand/or because they think they can do a better job
                  themselves - and so\nmore and more ScryMUDs will start up.\n\nSo
                  maybe in a year or two Matthew's wish will come true.\n\n> In order
                  for there to be easy money, you have to have a differentiated\n>
                  product.  In a 'market' as saturated as MUDs, where admins/coders/builders\n>
                  try hard just to get players for free, it requires a lot more than
                  the\n> lack of a restrictive license to give someone something worth
                  charging for.\n\nAgreed.  Sort of.  If you build up a large number
                  of regular players and \nstart offering them special perks in return
                  for small amounts of money, one\nor two of them will be bound to
                  take you up on the offer (so that they can\nget an edge over the
                  others) - particularly if your mud is a very competative\none.  Other
                  players who have put a lot of time and effort into their \ncharacters,
                  not wanting to fall behind, will follow suit.  Keep upping the\nmoney
                  and the perks and before long you'll have a nice little bit of extra\ncash
                  flowing in.  I know of muds that have done this and got away with
                  it.\n\nHowever, in order to reach that point you have to have something
                  good enough\nto attract - and keep - a reasonably sized playerbase.\n\nKaVir.\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] code base inquiry'
            from: Richard Woolcock <KaVir@dial.pipex.com>
            references: []
            date: 2000-01-18 06:12:57.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 00uTmp96
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *368
        parent: *367
        children: []
      - &400 !ruby/object:MessageContainer
        key: &369 !ruby/object:MessageId
          raw: 00IySraa@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: Richard Woolcock <KaVir@dial.pipex.com>\nDate: Sat, 15 Jan
              2000 21:20:02 -0800\nSubject: Re: [MUD-Dev] code base inquiry\n\nMatthew
              Mihaly wrote:\n> \n> On Tue, 16 Nov 1999, Colin Coghill wrote:\n> \n>
              > On Mon, Nov 15, 1999 at 04:48:01PM -0800, Ilya, Game Commandos wrote:\n>
              > >\n> > > I plan to strongly espouse that the hobbyist community dump
              all of\n> > > the restricted code bases (the DIKU line, nearly all the
              LPC line,\n> > > and just about everybody else actually!)\n> > > and
              to find one that could be used commercially\n> >\n> > Some of us (including
              me) feel that the \"restricted\" ones you mention\n> > are a *good*
              thing for the community.\n> \n> How are they good for the community?
              As far as I can tell, all they do is\n> ensure that the community is
              full of a bunch of crappy, generic muds that\n> are essentially paint-by-numbers
              copies of each other.\n\nWhether the codebases had restrictions or not
              has no baring on the quality\nof the muds.  If you took away the restrictions
              we'd *still* have thousands\nof rubbish stock muds - except they'd all
              be pay to play.  In turn that \nwould make people even *more* likely
              to start their own up rather than \nhaving to pay to play on someone
              elses mud.\n\nAt least with the restrictions it ensures that the majority
              of text-based\nmuds are run by hobbiests, while those are just in it
              for some easy money \nare put off by the idea of having to create a
              mud from scratch.  Those few\nmuds which *are* written from scratch
              for commercial use are then put in a\nbetter position to compete.\n\nKaVir.\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: Richard Woolcock <KaVir@dial.pipex.com>'
                    name: From
                    value: Richard Woolcock <KaVir@dial.pipex.com>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Sat, 15 Jan 2000 21:20:02 -0800'
                    name: Date
                    value: Sat, 15 Jan 2000 21:20:02 -0800
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: Re: [MUD-Dev] code base inquiry'
                    name: Subject
                    value: 'Re: [MUD-Dev] code base inquiry'
                  mbox_from: 
                body: "Matthew Mihaly wrote:\n> \n> On Tue, 16 Nov 1999, Colin Coghill
                  wrote:\n> \n> > On Mon, Nov 15, 1999 at 04:48:01PM -0800, Ilya,
                  Game Commandos wrote:\n> > >\n> > > I plan to strongly espouse that
                  the hobbyist community dump all of\n> > > the restricted code bases
                  (the DIKU line, nearly all the LPC line,\n> > > and just about everybody
                  else actually!)\n> > > and to find one that could be used commercially\n>
                  >\n> > Some of us (including me) feel that the \"restricted\" ones
                  you mention\n> > are a *good* thing for the community.\n> \n> How
                  are they good for the community? As far as I can tell, all they
                  do is\n> ensure that the community is full of a bunch of crappy,
                  generic muds that\n> are essentially paint-by-numbers copies of
                  each other.\n\nWhether the codebases had restrictions or not has
                  no baring on the quality\nof the muds.  If you took away the restrictions
                  we'd *still* have thousands\nof rubbish stock muds - except they'd
                  all be pay to play.  In turn that \nwould make people even *more*
                  likely to start their own up rather than \nhaving to pay to play
                  on someone elses mud.\n\nAt least with the restrictions it ensures
                  that the majority of text-based\nmuds are run by hobbiests, while
                  those are just in it for some easy money \nare put off by the idea
                  of having to create a mud from scratch.  Those few\nmuds which *are*
                  written from scratch for commercial use are then put in a\nbetter
                  position to compete.\n\nKaVir.\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: 'Re: [MUD-Dev] code base inquiry'
            from: Richard Woolcock <KaVir@dial.pipex.com>
            references: []
            date: 2000-01-16 05:20:02.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 00IySraa
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *369
        parent: *367
        children: []
  *120: *370
  ? &371 !ruby/object:MessageId
    raw: Jzn75utM@generated-message-id.chibrary.org
  : &484 !ruby/object:MessageContainer
    key: *371
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: |
          From: "phlUID" <phluid@mindless.com>
          Date: Fri, 21 Jan 2000 00:16:34 -0500
          Subject: [MUD-Dev] MUD-Dev vs. adv-mud

          J C Lawrence wrote:
          > <<Crossed to MUD-Dev>>

            I've noticed that most, if not all, of the traffic that
          crosses the MUD-Dev list and the new adv-mud list is relitively
          compatible. Mostly I've been sticking to the adv-mud list because
          I just recently joined MUD-Dev, but this brings up a point that
          seems painfully obvious to me:

            Both these lists are becoming incredibly similar.

            As far as I can discern, adv-mud is geared more towards actual
          code and implementation in C++, while MUD-Dev sticks to design
          principles because it encompasses the entire mudding community.
          While I like design issues, I also like to get into the nitty
          gritty of the actual language, which is outside of MUD-Dev's
          general scope because it is language independant.

            Most of my interests lie in both these areas, so I am going
          to make it my policy to carbon copy all my email about design
          issues to both the adv-mud list and the MUD-Dev list, while
          keeping coding issues on the adv-mud list. I just wanted to
          announce this so that people won't become confused with
          cross-list email. I'll also try to keep it a bit more organized.
          The only problem with this is that sometimes my questions about
          design are answered on the adv-mud list and then it becomes
          awkward to forward associated thread over to the MUD-Dev list.

            My question is about any policies about cross-list email
          and what kind of format it should take so that it is easily
          understandable to members of one list and not the other.

            Obviously, most of you have probabily noticed that a lot of
          material is being forwarded to the MUD-Dev list from the
          adv-mud list.

          Amos Wetherbee,
          The Spellbound Project



          _______________________________________________
          MUD-Dev maillist  -  MUD-Dev@kanga.nu
          http://www.kanga.nu/lists/listinfo/mud-dev
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: "phlUID" <phluid@mindless.com>'
                name: From
                value: '"phlUID" <phluid@mindless.com>'
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Fri, 21 Jan 2000 00:16:34 -0500'
                name: Date
                value: Fri, 21 Jan 2000 00:16:34 -0500
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] MUD-Dev vs. adv-mud'
                name: Subject
                value: "[MUD-Dev] MUD-Dev vs. adv-mud"
              mbox_from: 
            body: |
              J C Lawrence wrote:
              > <<Crossed to MUD-Dev>>

                I've noticed that most, if not all, of the traffic that
              crosses the MUD-Dev list and the new adv-mud list is relitively
              compatible. Mostly I've been sticking to the adv-mud list because
              I just recently joined MUD-Dev, but this brings up a point that
              seems painfully obvious to me:

                Both these lists are becoming incredibly similar.

                As far as I can discern, adv-mud is geared more towards actual
              code and implementation in C++, while MUD-Dev sticks to design
              principles because it encompasses the entire mudding community.
              While I like design issues, I also like to get into the nitty
              gritty of the actual language, which is outside of MUD-Dev's
              general scope because it is language independant.

                Most of my interests lie in both these areas, so I am going
              to make it my policy to carbon copy all my email about design
              issues to both the adv-mud list and the MUD-Dev list, while
              keeping coding issues on the adv-mud list. I just wanted to
              announce this so that people won't become confused with
              cross-list email. I'll also try to keep it a bit more organized.
              The only problem with this is that sometimes my questions about
              design are answered on the adv-mud list and then it becomes
              awkward to forward associated thread over to the MUD-Dev list.

                My question is about any policies about cross-list email
              and what kind of format it should take so that it is easily
              understandable to members of one list and not the other.

                Obviously, most of you have probabily noticed that a lot of
              material is being forwarded to the MUD-Dev list from the
              adv-mud list.

              Amos Wetherbee,
              The Spellbound Project



              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] MUD-Dev vs. adv-mud"
        from: phlUID <phluid@mindless.com>
        references: []
        date: 2000-01-21 05:16:34.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jzn75utM
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *371
    parent: 
    children: []
  *2: *5
  *8: *11
  *121: *372
  *227: *229
  *106: *373
  *218: *220
  *37: *40
  *110: *196
  ? &374 !ruby/object:MessageId
    raw: 00IySraK@generated-message-id.chibrary.org
  : &485 !ruby/object:MessageContainer
    key: *374
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: Ashran <ashran@mcb.at>\nDate: Wed, 05 Jan 2000 05:25:22 +0100\nSubject:
          [MUD-Dev] ShowEQ\n\nGreetings\n\nWell, *hacking* EverQuest wasnt as hard
          as UO, since they mostly used\nallready existing code for the engine.\nStandard
          CRC32 for checksums, zLib for s3d files and an old 3d engine for\nthe world-view
          :)\n\nSince the world is broken up into different zones, the server does
          not\nbother making in-range checks \nfor NPC updates.\nEvery time you zone
          you get all the NPC's in the zone, their level (thought\nthe /con is done
          by the server), class / race.\n\nThe autor of ShowEQ for Linux was (he resigned
          a few days ago due to\nreallife isues :( ) a HackersQuest member.\nThere
          is also a windows version of it, which works a little different, but\nits
          not that hard.\nSoon I hope to have the time to build in a 3D view of the
          zone with all the\nmonsters :).\n\nRight now Verant is moving many checks
          away from the client to the server\n(trading NO-DROP items was fixed a month
          ago).\nBut still, you can change items you wear and its visible to everyone.\nYYY
          -> Server    ..... May I inspect XXXXX\nServer -> XXXXX  ..... What do you
          wear?\nXXXXX  -> Server ..... A surpassingly accurate silver halberd of\nvanquishing
          \ ;)\nServer -> YYY    ..... XXXXX wears ......\n\nIf you have any specific
          questions on how ShowEQ works, or how it was done.\nFeel free to ask.\n\n\nNight\n-----\nGod
          does not play dice. - Einstein\nNot only does God play dice, he sometimes
          throws them where they can't be\nseen. - Hawking\n--- Dont tell me what
          games I play! -- Ashran\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Ashran <ashran@mcb.at>'
                name: From
                value: Ashran <ashran@mcb.at>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Wed, 05 Jan 2000 05:25:22 +0100'
                name: Date
                value: Wed, 05 Jan 2000 05:25:22 +0100
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] ShowEQ'
                name: Subject
                value: "[MUD-Dev] ShowEQ"
              mbox_from: 
            body: "Greetings\n\nWell, *hacking* EverQuest wasnt as hard as UO, since
              they mostly used\nallready existing code for the engine.\nStandard CRC32
              for checksums, zLib for s3d files and an old 3d engine for\nthe world-view
              :)\n\nSince the world is broken up into different zones, the server
              does not\nbother making in-range checks \nfor NPC updates.\nEvery time
              you zone you get all the NPC's in the zone, their level (thought\nthe
              /con is done by the server), class / race.\n\nThe autor of ShowEQ for
              Linux was (he resigned a few days ago due to\nreallife isues :( ) a
              HackersQuest member.\nThere is also a windows version of it, which works
              a little different, but\nits not that hard.\nSoon I hope to have the
              time to build in a 3D view of the zone with all the\nmonsters :).\n\nRight
              now Verant is moving many checks away from the client to the server\n(trading
              NO-DROP items was fixed a month ago).\nBut still, you can change items
              you wear and its visible to everyone.\nYYY -> Server    ..... May I
              inspect XXXXX\nServer -> XXXXX  ..... What do you wear?\nXXXXX  -> Server
              ..... A surpassingly accurate silver halberd of\nvanquishing  ;)\nServer
              -> YYY    ..... XXXXX wears ......\n\nIf you have any specific questions
              on how ShowEQ works, or how it was done.\nFeel free to ask.\n\n\nNight\n-----\nGod
              does not play dice. - Einstein\nNot only does God play dice, he sometimes
              throws them where they can't be\nseen. - Hawking\n--- Dont tell me what
              games I play! -- Ashran\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] ShowEQ"
        from: Ashran <ashran@mcb.at>
        references: []
        date: 2000-01-05 04:25:22.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00IySraK
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *374
    parent: 
    children: []
  ? &375 !ruby/object:MessageId
    raw: 000DlhTM@generated-message-id.chibrary.org
  : &486 !ruby/object:MessageContainer
    key: *375
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: |
          From: J C Lawrence <claw@kanga.nu>
          Date: Sat, 01 Jan 2000 17:22:08 -0800
          Subject: [MUD-Dev] New link support

          While adding a few new references to the library I also added the
          ability to see what links have been added recently (today, this
          week, this month, or "flagged" meaning recently enough to get a
          "NEW!" flag (last three days).  See the navigation bar at the bottom
          of every Library page.

            http://www.kanga.nu/library.php3

          --
          J C Lawrence                                 Home: claw@kanga.nu
          ----------(*)                              Other: coder@kanga.nu
          --=| A man is as sane as he is dangerous to his environment |=--


          _______________________________________________
          MUD-Dev maillist  -  MUD-Dev@kanga.nu
          http://www.kanga.nu/lists/listinfo/mud-dev
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Sat, 01 Jan 2000 17:22:08 -0800'
                name: Date
                value: Sat, 01 Jan 2000 17:22:08 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] New link support'
                name: Subject
                value: "[MUD-Dev] New link support"
              mbox_from: 
            body: |
              While adding a few new references to the library I also added the
              ability to see what links have been added recently (today, this
              week, this month, or "flagged" meaning recently enough to get a
              "NEW!" flag (last three days).  See the navigation bar at the bottom
              of every Library page.

                http://www.kanga.nu/library.php3

              --
              J C Lawrence                                 Home: claw@kanga.nu
              ----------(*)                              Other: coder@kanga.nu
              --=| A man is as sane as he is dangerous to his environment |=--


              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] New link support"
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-02 01:22:08.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 000DlhTM
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *375
    parent: 
    children: []
  *207: *376
  *366: *377
  *164: *167
  *103: *105
  *22: *378
  *122: *124
  ? &379 !ruby/object:MessageId
    raw: Jysr9AwK@generated-message-id.chibrary.org
  : &381 !ruby/object:MessageContainer
    key: *379
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Fri, 14 Jan 2000 20:29:15
          -0800\nSubject: [MUD-Dev] Re: Commercial-use Restrictions on Code Bases
          (was: help me find 100% fre (fwd)\n\n------- Forwarded Message\nFrom: mk270@cam.ac.uk
          (Martin Keegan)\nNewsgroups: rec.games.mud.admin\nSubject: Re: Commercial-use
          Restrictions on Code Bases (was: help me find 100%  free  graphical mud)\nDate:
          3 Dec 1999 17:30:37 GMT\n\nIn article <384714F6.62949986@spam.free.gamecommandos.com>,
          Ilya wrote:\n>Martin Keegan wrote:\n\n>> single one they want. By no coincidence
          whatsoever I have been writing\n>> a component of just such a system ...
          :) and shall probably be releasing\n>> it (the networking code) this weekend.\n>\n>I
          love it!  What other components are envisaged, exactly, and who\n>is to
          be working on them?  Or shall we use the power of the site\n>and this usenet
          group to promote and recruit that as well?\n \nAssuming the code actually
          works, there is a gang of people here at\nCambridge threatening to write
          all the other bits. The division we see\nis roughly: socket code, database/memory
          management, parser, game mechanics.\nI expect the game mechanics stuff not
          to be under the LGPL, unlike the\nother bits. What's more important than
          the bits themselves is the\ninterface between them. In particular, I think
          the best approach would be\nto see what can be taken OUT of a mud (socket
          stuff, database management)\nand separating that, rather than imposing some
          a priori design structure\non the whole thing and then finding that it doesn't
          work (e.g., the way\nsomeone might want to implement an internal MUD language
          might cut\nacross both parser and game mechanics...))\n\nThe point is that
          a coder should be constrained by existing code as\nlittle as possible.\n\nThe
          only sane way to do that seems to be modularity that works. Having\na system
          not crippled by ancient licensing mistakes will prevent\nDiku style fragmentation
          - there'd be no way to fork off separate codebases\npermanently: either
          your mud would sit on its changes, or it'd distribute\nthem and they'd get
          folded into the main development tree.\n\n>We'd love to!  What would you
          suggest?  I've been working on an article,\n>elusively wandering around
          95% complete after three rewrites in the\n>last week, which at least espouses
          moving towards the commercial-use-ok\n>code bases.  I still hope to have
          it done very very soon.  The words\n>are all there I think, but there is
          still something feeling incomplete.\n\nCan I see a copy of this article?
          Sounds interesting.\n\nMk\n------- End of Forwarded Message\n\n\n--\nJ C
          Lawrence                                 Home: claw@kanga.nu\n----------(*)
          \                             Other: coder@kanga.nu\n--=| A man is as sane
          as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Fri, 14 Jan 2000 20:29:15 -0800'
                name: Date
                value: Fri, 14 Jan 2000 20:29:15 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] Re: Commercial-use Restrictions on Code Bases
                  (was: help me find 100% fre (fwd)'
                name: Subject
                value: "[MUD-Dev] Re: Commercial-use Restrictions on Code Bases (was:
                  help me find 100% fre (fwd)"
              mbox_from: 
            body: "------- Forwarded Message\nFrom: mk270@cam.ac.uk (Martin Keegan)\nNewsgroups:
              rec.games.mud.admin\nSubject: Re: Commercial-use Restrictions on Code
              Bases (was: help me find 100%  free  graphical mud)\nDate: 3 Dec 1999
              17:30:37 GMT\n\nIn article <384714F6.62949986@spam.free.gamecommandos.com>,
              Ilya wrote:\n>Martin Keegan wrote:\n\n>> single one they want. By no
              coincidence whatsoever I have been writing\n>> a component of just such
              a system ... :) and shall probably be releasing\n>> it (the networking
              code) this weekend.\n>\n>I love it!  What other components are envisaged,
              exactly, and who\n>is to be working on them?  Or shall we use the power
              of the site\n>and this usenet group to promote and recruit that as well?\n
              \nAssuming the code actually works, there is a gang of people here at\nCambridge
              threatening to write all the other bits. The division we see\nis roughly:
              socket code, database/memory management, parser, game mechanics.\nI
              expect the game mechanics stuff not to be under the LGPL, unlike the\nother
              bits. What's more important than the bits themselves is the\ninterface
              between them. In particular, I think the best approach would be\nto
              see what can be taken OUT of a mud (socket stuff, database management)\nand
              separating that, rather than imposing some a priori design structure\non
              the whole thing and then finding that it doesn't work (e.g., the way\nsomeone
              might want to implement an internal MUD language might cut\nacross both
              parser and game mechanics...))\n\nThe point is that a coder should be
              constrained by existing code as\nlittle as possible.\n\nThe only sane
              way to do that seems to be modularity that works. Having\na system not
              crippled by ancient licensing mistakes will prevent\nDiku style fragmentation
              - there'd be no way to fork off separate codebases\npermanently: either
              your mud would sit on its changes, or it'd distribute\nthem and they'd
              get folded into the main development tree.\n\n>We'd love to!  What would
              you suggest?  I've been working on an article,\n>elusively wandering
              around 95% complete after three rewrites in the\n>last week, which at
              least espouses moving towards the commercial-use-ok\n>code bases.  I
              still hope to have it done very very soon.  The words\n>are all there
              I think, but there is still something feeling incomplete.\n\nCan I see
              a copy of this article? Sounds interesting.\n\nMk\n------- End of Forwarded
              Message\n\n\n--\nJ C Lawrence                                 Home:
              claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
              A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] Re: Commercial-use Restrictions on Code Bases (was:
            help me find 100% fre (fwd)"
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-15 04:29:15.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jysr9AwK
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *379
    parent: 
    children:
    - &423 !ruby/object:MessageContainer
      key: &380 !ruby/object:MessageId
        raw: JzUDNyMK@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Fri, 14 Jan 2000 20:31:51
            -0800\nSubject: [MUD-Dev] Re: Commercial-use Restrictions on Code Bases
            (was: help me find 100% fre (fwd)\n\n------- Forwarded Message\nFrom:
            mk270@cam.ac.uk (Martin Keegan)\nNewsgroups: rec.games.mud.admin\nSubject:
            Re: Commercial-use Restrictions on Code Bases (was: help me find 100%
            free  graphical mud)\nDate: 2 Dec 1999 23:56:35 GMT\n\nIn article <383EC091.F94E9912@spam.free.gamecommandos.com>,
            Ilya wrote:\n\n>>I think that a mud will take care of itself.  If a mud
            is\n>>run correctly, there will be people that play there.  If the\n>>mud
            is a piece of crap, people might visit, but won't stay\n>>long.\n>\n>True
            enough.  But I'm not worried about the player base or\n\nJust for the
            record I must dispute the \"but won't stay there long\"\nline and its
            blind acceptance, but that's not why I'm posting.\n\n>Too many of our
            most creative and productive minds in the\n>mudding world are finally
            forced by economic concerns to\n>abandon it in search of activities which
            can provide at\n>least a minimal reward.  If more code bases were out
            there\n>and were promoted which allowed for commercial use, then\n\nNow
            the Linux \"counterexample\" raised against you actually comes back\nto
            help; since the Linux kernel, OS and operating environment are all\nlargely
            under free licences, it is possible, paradoxicly, for the\nsystem to be
            exploited commercially. I'm sure we couldn't do this\nwith Minix.\n\nSo
            too mud server codebases. Geneticly we have various groupings of\nserver
            codebases which are related to one another by derivation or \ninspiration.
            More important, however, is the typological distinction\nalong a sort
            of hack'n'slash <-----> RPG <-----> MOO <-----> talker\ncontinuum. What
            we find is that there are almost two separate communities,\nthe Diku/AberMUD
            crowd of D&D-style games (and I stress the word \"games\"),\nand most
            of the other types of mud on the other side of the divide.\nThe Diku mob
            doesn't know or care about the existence of MOO/MUSH/LP, etc,\nand the
            MOO/MUSH mob look down scornfully on the Diku people (to whom\nthey should
            be grateful for attracting losers and troublemakers away\nfrom their own
            systems).\n\nNone of these communities (however you count them) is significantly\ncommunally
            aware of the issues familiar to the Free Software/Open Source\nmovement,
            and it shows. One interesting cultural artefact demonstrating\nthis is
            the way mud adverts will use the word 'code' as a count-noun\n\"We use
            a SMAUG code\" (which to an OpenSourcer is not a valid sentence,\n\"We
            use SMAUG code\" being the only option), implying that there is little\ncommunication
            between these groups. If there were greater overlap, there'd\nbe more
            opposition to the use of non-free mud servers, not only for the\nideological
            bigotry satisfaction reasons of the Free Software juggernaut,\nbut also
            because these people would be able to put forward strong practical\narguments
            against things like the Diku licence.\n\nElsewhere in this thread which
            I have been watching with interest, Matt\nChatterly identified three different
            types of reason someone might start\na not-so-new mud: coolness / powertrip,
            etc ; breakaway / disaffection ;\nactual desire for originality. He said
            that the first two of these three\nought to be taken out and shot. A while
            ago I should certainly have agreed.\nHowever, I have recently read a post
            [*] by Travis Casey on the MUD-Dev\nmailing list in which it was argued
            that most of these StockMUDs about\nthere should be considered analogous
            to people running their own RPGs\non pencil and paper and someone wanting
            to be DM. Should the DM have to\ninvent his/her OWN regular polygon to
            get original dice? Of course not.\n\nThe analysis of the StockMUD phenomenon
            has fallen victim to a category\nerror. When I was compiling The Mud Tree,
            I counted as a single mud\nvariety all muds which derived from the same
            source (e.g., Diku, Circle,\nSMAUG, MOO, Dirt, Mordor), but, not having
            the benefit of the insights\nof Mr Casey or of Eric Raymond's Cathedral
            and Bazaar essay (which I\nlargely disagree with, but which would have
            proven useful), failed\nto see that a lot of these people just wanted
            to run their own game,\nrather than create their own unique virtual world
            (partially because of\nthe assumed orthodoxy (namely that all mud administrators
            should want to\nbe mud creators and innovators)).\n\nThe first and second
            groups (the harmless DM wannabes and the splitters)\nought to be considered
            separately from the innovators, even though they\nare doing roughly the
            same thing in the same environment. The conditions\nof this environment
            are that players don't communicate with a significant\nproportion of the
            mudding community and there is a strongly defined notion\nof acceptable
            variation. Players will tolerate changes in races, classes,\netc, but
            will strongly reject muds which have a different set of basic\ncommands
            or fundamentally different combat system. The \"norming\" effect\nwhereby
            GPLed code in free software projects ensures that forks and splits\ndon't
            occur too damagingly by all the useful changes being merged into\na central
            tree has its counterpart in the mudding world: popular innovations\nwithin
            the permitted scope will propagate from mud to mud slowly through\nthe
            word of mouth transmission mechanism of a fragmented community. There's\ncertainly
            no central Diku clearing house for ideas, but there might as\nwell be.\n\nSo,
            why do all three groups choose the same old code? The first two groups\nobviously
            want to attract players, and familiarity sells mud time. The\nthird group
            may (separately from the familiarity to the players issue)\nalso select
            a familiar codebase because it will be easier to modify to their\ntastes,
            or because there is a particular set of desired features offered\nby the
            codebase. I submit that the most desired feature is mud socket code:\nit's
            the thing which constitutes a real barrier to entry for aspiring mud\ndesigners.
            The easy way out is to use someone else's code ...\n\nWhat this has led
            to is using not only stock socket code but a whole stock\nmud, probably
            due to the difficulty of separating the two. For the want of\nsome socket
            code, the game mechanics and interface of an entire mud are\ncopied.\n\nI
            think it would be quite beneficial (irrespective of the accuracy or\notherwise
            of my ever-haughty and possibly self-serving analysis) to have\na framework
            of LGPLed components (socket code, parser, game mechanics,\n\"database\"
            (Ok, so the middle two are interdependent)) making up a mud\nsystem, allowing
            coders to take only the bits they want, forcing them\nonly to conform
            to a particular set of interfaces between these components,\nrather than
            forcing them to accept all the components just to get the\nsingle one
            they want. By no coincidence whatsoever I have been writing\na component
            of just such a system ... :) and shall probably be releasing\nit (the
            networking code) this weekend.\n\n>perhaps we would have saved more of
            these creative/productive\n>minds for the hobby/art and this would have
            been a good thing.\n\nPerhaps as the maintainer of such a high profile
            site as gamecommandos\nyou are in a good position to promote things like
            this ...\n\nMk\n\n[*] http://www.kanga.nu/archives/MUD-Dev-L/1999Q4/msg00467.html\n-------
            End of Forwarded Message\n\n--\nJ C Lawrence                                 Home:
            claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
            A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: J C Lawrence <claw@kanga.nu>'
                  name: From
                  value: J C Lawrence <claw@kanga.nu>
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Fri, 14 Jan 2000 20:31:51 -0800'
                  name: Date
                  value: Fri, 14 Jan 2000 20:31:51 -0800
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: [MUD-Dev] Re: Commercial-use Restrictions on Code
                    Bases (was: help me find 100% fre (fwd)'
                  name: Subject
                  value: "[MUD-Dev] Re: Commercial-use Restrictions on Code Bases
                    (was: help me find 100% fre (fwd)"
                mbox_from: 
              body: "------- Forwarded Message\nFrom: mk270@cam.ac.uk (Martin Keegan)\nNewsgroups:
                rec.games.mud.admin\nSubject: Re: Commercial-use Restrictions on Code
                Bases (was: help me find 100% free  graphical mud)\nDate: 2 Dec 1999
                23:56:35 GMT\n\nIn article <383EC091.F94E9912@spam.free.gamecommandos.com>,
                Ilya wrote:\n\n>>I think that a mud will take care of itself.  If
                a mud is\n>>run correctly, there will be people that play there.  If
                the\n>>mud is a piece of crap, people might visit, but won't stay\n>>long.\n>\n>True
                enough.  But I'm not worried about the player base or\n\nJust for
                the record I must dispute the \"but won't stay there long\"\nline
                and its blind acceptance, but that's not why I'm posting.\n\n>Too
                many of our most creative and productive minds in the\n>mudding world
                are finally forced by economic concerns to\n>abandon it in search
                of activities which can provide at\n>least a minimal reward.  If more
                code bases were out there\n>and were promoted which allowed for commercial
                use, then\n\nNow the Linux \"counterexample\" raised against you actually
                comes back\nto help; since the Linux kernel, OS and operating environment
                are all\nlargely under free licences, it is possible, paradoxicly,
                for the\nsystem to be exploited commercially. I'm sure we couldn't
                do this\nwith Minix.\n\nSo too mud server codebases. Geneticly we
                have various groupings of\nserver codebases which are related to one
                another by derivation or \ninspiration. More important, however, is
                the typological distinction\nalong a sort of hack'n'slash <----->
                RPG <-----> MOO <-----> talker\ncontinuum. What we find is that there
                are almost two separate communities,\nthe Diku/AberMUD crowd of D&D-style
                games (and I stress the word \"games\"),\nand most of the other types
                of mud on the other side of the divide.\nThe Diku mob doesn't know
                or care about the existence of MOO/MUSH/LP, etc,\nand the MOO/MUSH
                mob look down scornfully on the Diku people (to whom\nthey should
                be grateful for attracting losers and troublemakers away\nfrom their
                own systems).\n\nNone of these communities (however you count them)
                is significantly\ncommunally aware of the issues familiar to the Free
                Software/Open Source\nmovement, and it shows. One interesting cultural
                artefact demonstrating\nthis is the way mud adverts will use the word
                'code' as a count-noun\n\"We use a SMAUG code\" (which to an OpenSourcer
                is not a valid sentence,\n\"We use SMAUG code\" being the only option),
                implying that there is little\ncommunication between these groups.
                If there were greater overlap, there'd\nbe more opposition to the
                use of non-free mud servers, not only for the\nideological bigotry
                satisfaction reasons of the Free Software juggernaut,\nbut also because
                these people would be able to put forward strong practical\narguments
                against things like the Diku licence.\n\nElsewhere in this thread
                which I have been watching with interest, Matt\nChatterly identified
                three different types of reason someone might start\na not-so-new
                mud: coolness / powertrip, etc ; breakaway / disaffection ;\nactual
                desire for originality. He said that the first two of these three\nought
                to be taken out and shot. A while ago I should certainly have agreed.\nHowever,
                I have recently read a post [*] by Travis Casey on the MUD-Dev\nmailing
                list in which it was argued that most of these StockMUDs about\nthere
                should be considered analogous to people running their own RPGs\non
                pencil and paper and someone wanting to be DM. Should the DM have
                to\ninvent his/her OWN regular polygon to get original dice? Of course
                not.\n\nThe analysis of the StockMUD phenomenon has fallen victim
                to a category\nerror. When I was compiling The Mud Tree, I counted
                as a single mud\nvariety all muds which derived from the same source
                (e.g., Diku, Circle,\nSMAUG, MOO, Dirt, Mordor), but, not having the
                benefit of the insights\nof Mr Casey or of Eric Raymond's Cathedral
                and Bazaar essay (which I\nlargely disagree with, but which would
                have proven useful), failed\nto see that a lot of these people just
                wanted to run their own game,\nrather than create their own unique
                virtual world (partially because of\nthe assumed orthodoxy (namely
                that all mud administrators should want to\nbe mud creators and innovators)).\n\nThe
                first and second groups (the harmless DM wannabes and the splitters)\nought
                to be considered separately from the innovators, even though they\nare
                doing roughly the same thing in the same environment. The conditions\nof
                this environment are that players don't communicate with a significant\nproportion
                of the mudding community and there is a strongly defined notion\nof
                acceptable variation. Players will tolerate changes in races, classes,\netc,
                but will strongly reject muds which have a different set of basic\ncommands
                or fundamentally different combat system. The \"norming\" effect\nwhereby
                GPLed code in free software projects ensures that forks and splits\ndon't
                occur too damagingly by all the useful changes being merged into\na
                central tree has its counterpart in the mudding world: popular innovations\nwithin
                the permitted scope will propagate from mud to mud slowly through\nthe
                word of mouth transmission mechanism of a fragmented community. There's\ncertainly
                no central Diku clearing house for ideas, but there might as\nwell
                be.\n\nSo, why do all three groups choose the same old code? The first
                two groups\nobviously want to attract players, and familiarity sells
                mud time. The\nthird group may (separately from the familiarity to
                the players issue)\nalso select a familiar codebase because it will
                be easier to modify to their\ntastes, or because there is a particular
                set of desired features offered\nby the codebase. I submit that the
                most desired feature is mud socket code:\nit's the thing which constitutes
                a real barrier to entry for aspiring mud\ndesigners. The easy way
                out is to use someone else's code ...\n\nWhat this has led to is using
                not only stock socket code but a whole stock\nmud, probably due to
                the difficulty of separating the two. For the want of\nsome socket
                code, the game mechanics and interface of an entire mud are\ncopied.\n\nI
                think it would be quite beneficial (irrespective of the accuracy or\notherwise
                of my ever-haughty and possibly self-serving analysis) to have\na
                framework of LGPLed components (socket code, parser, game mechanics,\n\"database\"
                (Ok, so the middle two are interdependent)) making up a mud\nsystem,
                allowing coders to take only the bits they want, forcing them\nonly
                to conform to a particular set of interfaces between these components,\nrather
                than forcing them to accept all the components just to get the\nsingle
                one they want. By no coincidence whatsoever I have been writing\na
                component of just such a system ... :) and shall probably be releasing\nit
                (the networking code) this weekend.\n\n>perhaps we would have saved
                more of these creative/productive\n>minds for the hobby/art and this
                would have been a good thing.\n\nPerhaps as the maintainer of such
                a high profile site as gamecommandos\nyou are in a good position to
                promote things like this ...\n\nMk\n\n[*] http://www.kanga.nu/archives/MUD-Dev-L/1999Q4/msg00467.html\n-------
                End of Forwarded Message\n\n--\nJ C Lawrence                                 Home:
                claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
                A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: "[MUD-Dev] Re: Commercial-use Restrictions on Code Bases (was:
              help me find 100% fre (fwd)"
          from: J C Lawrence <claw@kanga.nu>
          references: []
          date: 2000-01-15 04:31:51.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: JzUDNyMK
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *380
      parent: *381
      children: []
  *368: *382
  *294: *296
  *133: *383
  *163: *165
  *168: *170
  ? &384 !ruby/object:MessageId
    raw: 00IyQfCK@generated-message-id.chibrary.org
  : &487 !ruby/object:MessageContainer
    key: *384
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: |
          From: "Scott Clitheroe" <sclitheroe@home.com>
          Date: Tue, 4 Jan 2000 14:06:52 -0700
          Subject: [MUD-Dev] RFC: Worldforge project

          Hello all,

          This is my first post to the MUD-Dev list ever, although I have been reading
          for some time now.

          I was recently looking at the Worldforge project's web site
          (www.worldforge.org), and I was curious if anyone on this list could comment
          on the project.  I tried searching the kanga.nu archives, but found little
          mention of it.

          I'm a little bewildered by Worldforge simply because there seems to be so
          many servers/clients/world models.  I'm curious if anyone has ever gotten an
          end-to-end connection running, and if so, what their experiences were.

          Thanks in advance,
          Scott Clitheroe





          _______________________________________________
          MUD-Dev maillist  -  MUD-Dev@kanga.nu
          http://www.kanga.nu/lists/listinfo/mud-dev
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: "Scott Clitheroe" <sclitheroe@home.com>'
                name: From
                value: '"Scott Clitheroe" <sclitheroe@home.com>'
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Tue, 4 Jan 2000 14:06:52 -0700'
                name: Date
                value: Tue, 4 Jan 2000 14:06:52 -0700
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] RFC: Worldforge project'
                name: Subject
                value: "[MUD-Dev] RFC: Worldforge project"
              mbox_from: 
            body: |
              Hello all,

              This is my first post to the MUD-Dev list ever, although I have been reading
              for some time now.

              I was recently looking at the Worldforge project's web site
              (www.worldforge.org), and I was curious if anyone on this list could comment
              on the project.  I tried searching the kanga.nu archives, but found little
              mention of it.

              I'm a little bewildered by Worldforge simply because there seems to be so
              many servers/clients/world models.  I'm curious if anyone has ever gotten an
              end-to-end connection running, and if so, what their experiences were.

              Thanks in advance,
              Scott Clitheroe





              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] RFC: Worldforge project"
        from: Scott Clitheroe <sclitheroe@home.com>
        references: []
        date: 2000-01-04 21:06:52.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00IyQfCK
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *384
    parent: 
    children: []
  ? &385 !ruby/object:MessageId
    raw: 000DlhUe@generated-message-id.chibrary.org
  : &488 !ruby/object:MessageContainer
    key: *385
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: |
          From: "Hal Bonnin" <triangle@iglobal.net>
          Date: Mon, 24 Jan 2000 09:43:30 -0600
          Subject: Re: [MUD-Dev] Matching and Maximizing: How players choose between activities

          i enjoyed reading this. hope you have more comine :)

          Hal Bonnin




          _______________________________________________
          MUD-Dev mailing list
          MUD-Dev@kanga.nu
          http://www.kanga.nu/lists/listinfo/mud-dev
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: "Hal Bonnin" <triangle@iglobal.net>'
                name: From
                value: '"Hal Bonnin" <triangle@iglobal.net>'
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Mon, 24 Jan 2000 09:43:30 -0600'
                name: Date
                value: Mon, 24 Jan 2000 09:43:30 -0600
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: [MUD-Dev] Matching and Maximizing: How players
                  choose between activities'
                name: Subject
                value: 'Re: [MUD-Dev] Matching and Maximizing: How players choose
                  between activities'
              mbox_from: 
            body: |
              i enjoyed reading this. hope you have more comine :)

              Hal Bonnin




              _______________________________________________
              MUD-Dev mailing list
              MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: [MUD-Dev] Matching and Maximizing: How players choose between
            activities'
        from: Hal Bonnin <triangle@iglobal.net>
        references: []
        date: 2000-01-24 15:43:30.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 000DlhUe
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *385
    parent: 
    children: []
  *262: *265
  *132: *386
  *85: *87
  ? &387 !ruby/object:MessageId
    raw: 00IyQgGe@generated-message-id.chibrary.org
  : &489 !ruby/object:MessageContainer
    key: *387
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: claw@kanga.nu\nDate: Sat, 22 Jan 2000 10:52:54 -0800\nSubject:
          [MUD-Dev] (fwd) Re: Avatarism and Role-Playing Game Design\n\n-- forwarded
          message --\r\nFrom: \"Ian Millington\" <ian@agon.com>\r\nNewsgroups: rec.games.design\r\nSubject:
          Re: Avatarism and Role-Playing Game Design\r\nDate: Fri, 21 Jan 2000 00:41:42
          -0000\r\n\r\nSimon,\r\n\r\n> I realy don't follow your logic here. It is
          entirely possible for all\r\n> the players in an RPG to enjoy avatarism
          within the same game. This\r\n> is a 'win' for everyone.\r\n\r\nI think
          you are confusing avatarism and role-playing. My mistake,\r\nundoubtedly.\r\n\r\nRole-playing
          is the taking on and playing out of a role. A player who is\r\nonly interested
          in role-playing (an extreme for illustration) will not care\r\nif their
          character succeeds or fails, they are interested in role-playing.\r\nThis
          doesn't mean social, verbal, or any other specific set of actions, a\r\nrole-player
          likes playing the role: deciding what the character would do and\r\ntrying
          to do it. The action fails, the enjoyment stays the same because the\r\nenjoyment
          came of generating the intent.\r\n\r\nAvatarism is the assumption of a role
          as the extension of the player. A\r\nplayer who is only interested in this
          (another extreme) will not care about\r\nthe character's intents and desires
          - they are an extension of the player. A\r\ncharacter suceeds then the player
          suceeds; fails and the player fails. The\r\nactions of the character are
          the actions that the player would like to carry\r\nout in the world. The
          thrill comes from being more or differently able than\r\nthe player and
          hence able to do more or different things in that world.\r\n\r\nNo real
          player inhabits either extreme, of course.\r\n\r\n> Are you saying that
          people enjoy\r\n> roleplaying games regardless of whether their characters
          are successful\r\n> in their goals within the game world?\r\nYes, very much
          so. I am one of those players, a long way from\r\navatarism-motivated (although
          not entirely removed from it and still able to\r\ngain ejoyment from it).
          If one of my characters fails, this is not a bad\r\nthing - in fact often
          it gives more opportunity for interesting\r\nrole-playing; considering their
          reactions. It is no wonder that most novels\r\nwith literary and human merit
          (and that excludes 99% of genre writing) are\r\nabout the problems of people
          that aren't solved by their own skills. People\r\nsucceeding are less psychologically
          interesting that people failing.\r\n\r\n> This is muddled thinking.\r\n:-)\r\n\r\n>
          Players\r\n> do get enjoyment from their characters succeeding in the game
          world\r\n> and all the players in the game can achieve this - surely a win
          for\r\n> everyone again.\r\nNo, only if the game is the worst sort of trivial
          boredom. Some characters\r\nhave to fail, if they didn't they wouldn't have
          the chance of failing, thus\r\nno tension in the game and in fact no game.
          When a character fails the true\r\navatarist fails and looses. Most people
          have at least a grain of\r\nrole-playing passion, so they might still enjoy
          the failure. Folks who are\r\nstongly avataristic will enjoy a failure very
          much less than a success,\r\nfolks who are weakly avataristic will enjoy
          it only a little less than a\r\nsuccess. My essay implies that folks belonging
          to the first category are\r\ndeluded and would be better off leaving the
          hobby. This, of course, is pure\r\nhyperbole.\r\n\r\n> This is true, but
          not important. [snip] In computer\r\n> games players (or rather avatars
          I suppose) fail often, but the\r\n> player can reload the game. In deathmatch
          games failiure=death of\r\n> the avatar, yet players do enjoy such games
          even if they lose\r\n> more often than they win.\r\nThere were two distinct
          arguments in my essay, one following from the other.\r\nI think you are
          confusing the two here. You first sentence indicates that\r\nyou think the
          second argument is irrelevant. Compared to the first I agree,\r\nbut that
          doesn't make it invalid.\r\n\r\nLet me clarify with summaries:\r\n\r\nArgument
          one: role-playing contains avatarism, computer games even more so.\r\nThe
          vast majority of role-players were primarily interested in avatarism, so\r\nthey
          left role-playing for computer games. Those who remain are less\r\navataristic.
          Therefore role-playing should facilitate lower avatarism too.\r\nIt hasn't
          moved in this way.\r\n\r\nArgument two: when ever you have avatarism then
          players can loose. This is\r\ndefinitely true of computer games but has
          been denied in role-playing games.\r\nAs long as role-playing games are
          designed to promote avatarism (as almost a\r\nll current games are by virtue
          of their paradigm) they allow players to\r\nloose. I make no comment on
          whether this is a good or bad thing, only that\r\nit is true and that RPGs
          have gone out of their way to deny it.\r\n\r\n> Thus enjoying avaratism
          does not\r\n> mean that the avatar absolutely must succeed.\r\nNo, you are
          exactly right. In fact, as you point out the opposite is true.\r\nTo really
          enjoy avatarism you need to have at least the possibility of\r\nfailure.
          Playing any computer game in God-mode from the start is less\r\nfulfilling
          that playing a RPG knowing that your character will always\r\nsucceed. Why?
          Because avatarism is stronger in computer games.\r\n\r\nHope this clarifies
          things a little.\r\n\r\nIan.\r\n\r\n-- end of forwarded message --\r\n\r\n\r\n--\r\nJ
          C Lawrence                                 Home: claw@kanga.nu\r\n----------(*)
          \                             Other: coder@kanga.nu\r\n--=| A man is as
          sane as he is dangerous to his environment |=--\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: claw@kanga.nu'
                name: From
                value: claw@kanga.nu
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Sat, 22 Jan 2000 10:52:54 -0800'
                name: Date
                value: Sat, 22 Jan 2000 10:52:54 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] (fwd) Re: Avatarism and Role-Playing Game
                  Design'
                name: Subject
                value: "[MUD-Dev] (fwd) Re: Avatarism and Role-Playing Game Design"
              mbox_from: 
            body: "-- forwarded message --\r\nFrom: \"Ian Millington\" <ian@agon.com>\r\nNewsgroups:
              rec.games.design\r\nSubject: Re: Avatarism and Role-Playing Game Design\r\nDate:
              Fri, 21 Jan 2000 00:41:42 -0000\r\n\r\nSimon,\r\n\r\n> I realy don't
              follow your logic here. It is entirely possible for all\r\n> the players
              in an RPG to enjoy avatarism within the same game. This\r\n> is a 'win'
              for everyone.\r\n\r\nI think you are confusing avatarism and role-playing.
              My mistake,\r\nundoubtedly.\r\n\r\nRole-playing is the taking on and
              playing out of a role. A player who is\r\nonly interested in role-playing
              (an extreme for illustration) will not care\r\nif their character succeeds
              or fails, they are interested in role-playing.\r\nThis doesn't mean
              social, verbal, or any other specific set of actions, a\r\nrole-player
              likes playing the role: deciding what the character would do and\r\ntrying
              to do it. The action fails, the enjoyment stays the same because the\r\nenjoyment
              came of generating the intent.\r\n\r\nAvatarism is the assumption of
              a role as the extension of the player. A\r\nplayer who is only interested
              in this (another extreme) will not care about\r\nthe character's intents
              and desires - they are an extension of the player. A\r\ncharacter suceeds
              then the player suceeds; fails and the player fails. The\r\nactions
              of the character are the actions that the player would like to carry\r\nout
              in the world. The thrill comes from being more or differently able than\r\nthe
              player and hence able to do more or different things in that world.\r\n\r\nNo
              real player inhabits either extreme, of course.\r\n\r\n> Are you saying
              that people enjoy\r\n> roleplaying games regardless of whether their
              characters are successful\r\n> in their goals within the game world?\r\nYes,
              very much so. I am one of those players, a long way from\r\navatarism-motivated
              (although not entirely removed from it and still able to\r\ngain ejoyment
              from it). If one of my characters fails, this is not a bad\r\nthing
              - in fact often it gives more opportunity for interesting\r\nrole-playing;
              considering their reactions. It is no wonder that most novels\r\nwith
              literary and human merit (and that excludes 99% of genre writing) are\r\nabout
              the problems of people that aren't solved by their own skills. People\r\nsucceeding
              are less psychologically interesting that people failing.\r\n\r\n> This
              is muddled thinking.\r\n:-)\r\n\r\n> Players\r\n> do get enjoyment from
              their characters succeeding in the game world\r\n> and all the players
              in the game can achieve this - surely a win for\r\n> everyone again.\r\nNo,
              only if the game is the worst sort of trivial boredom. Some characters\r\nhave
              to fail, if they didn't they wouldn't have the chance of failing, thus\r\nno
              tension in the game and in fact no game. When a character fails the
              true\r\navatarist fails and looses. Most people have at least a grain
              of\r\nrole-playing passion, so they might still enjoy the failure. Folks
              who are\r\nstongly avataristic will enjoy a failure very much less than
              a success,\r\nfolks who are weakly avataristic will enjoy it only a
              little less than a\r\nsuccess. My essay implies that folks belonging
              to the first category are\r\ndeluded and would be better off leaving
              the hobby. This, of course, is pure\r\nhyperbole.\r\n\r\n> This is true,
              but not important. [snip] In computer\r\n> games players (or rather
              avatars I suppose) fail often, but the\r\n> player can reload the game.
              In deathmatch games failiure=death of\r\n> the avatar, yet players do
              enjoy such games even if they lose\r\n> more often than they win.\r\nThere
              were two distinct arguments in my essay, one following from the other.\r\nI
              think you are confusing the two here. You first sentence indicates that\r\nyou
              think the second argument is irrelevant. Compared to the first I agree,\r\nbut
              that doesn't make it invalid.\r\n\r\nLet me clarify with summaries:\r\n\r\nArgument
              one: role-playing contains avatarism, computer games even more so.\r\nThe
              vast majority of role-players were primarily interested in avatarism,
              so\r\nthey left role-playing for computer games. Those who remain are
              less\r\navataristic. Therefore role-playing should facilitate lower
              avatarism too.\r\nIt hasn't moved in this way.\r\n\r\nArgument two:
              when ever you have avatarism then players can loose. This is\r\ndefinitely
              true of computer games but has been denied in role-playing games.\r\nAs
              long as role-playing games are designed to promote avatarism (as almost
              a\r\nll current games are by virtue of their paradigm) they allow players
              to\r\nloose. I make no comment on whether this is a good or bad thing,
              only that\r\nit is true and that RPGs have gone out of their way to
              deny it.\r\n\r\n> Thus enjoying avaratism does not\r\n> mean that the
              avatar absolutely must succeed.\r\nNo, you are exactly right. In fact,
              as you point out the opposite is true.\r\nTo really enjoy avatarism
              you need to have at least the possibility of\r\nfailure. Playing any
              computer game in God-mode from the start is less\r\nfulfilling that
              playing a RPG knowing that your character will always\r\nsucceed. Why?
              Because avatarism is stronger in computer games.\r\n\r\nHope this clarifies
              things a little.\r\n\r\nIan.\r\n\r\n-- end of forwarded message --\r\n\r\n\r\n--\r\nJ
              C Lawrence                                 Home: claw@kanga.nu\r\n----------(*)
              \                             Other: coder@kanga.nu\r\n--=| A man is
              as sane as he is dangerous to his environment |=--\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] (fwd) Re: Avatarism and Role-Playing Game Design"
        from: claw@kanga.nu
        references: []
        date: 2000-01-22 18:52:54.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00IyQgGe
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *387
    parent: 
    children: []
  *127: *388
  *24: *389
  ? &390 !ruby/object:MessageId
    raw: 000DnsnI@generated-message-id.chibrary.org
  : &392 !ruby/object:MessageContainer
    key: *390
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: \"Geoffrey A. MacDougall\" <geoffrey@poptronik.com>\nDate: Thu,
          6 Jan 2000 18:07:21 -0500\nSubject: [MUD-Dev] An introduction...\n\nThis
          message is in MIME format. Since your mail reader does not understand\nthis
          format, some or all of this message may not be legible.\n\n------_=_NextPart_001_01BF589A.CA945C90\nContent-Type:
          text/plain;\n\tcharset=\"iso-8859-1\"\n\nGreetings,\n\nI'm new to this list,
          and have been lurking for a few days, now.  So, I\nthought I'd introduce
          myself...\n\nRandy Farmer stated - \n>I believe that to be on a list, I
          should be a contributor as well as an\nobserver.\n\nWhile I agree wholeheartedly,
          I also believe it's important to acclimatize\nto an environment before engaging
          with its occupants.  So, with that in\nmind, following my introductions,
          I plan on lurking for a while longer.  :)\n\nwww.intangibleproductions.com\n\nAt
          the risk of gooing, let me just state that as a student conducting my\ngraduate
          research into the political-sociology of virtual worlds, and as an\naspiring
          game designer, I'm a little star-struck to be on a list with the\nauthors
          (and subjects, for that matter) of many of the papers I have been\nreading
          over the last year and a half.\n\nBut I don't doubt that this feeling will
          pass quite quickly, when I realize\nthat you're actually a bunch of hacks.
          \ :)\n\nNever the less, I look forward to reading what you have to write,
          and\nhopefully contributing my own ideas to the discussion.\n\nCheers,\n\nGeoffrey
          MacDougall\ngeoffrey@poptronik.com\n\n\n------_=_NextPart_001_01BF589A.CA945C90\nContent-Type:
          text/html;\n\tcharset=\"iso-8859-1\"\nContent-Transfer-Encoding: quoted-printable\n\n<!DOCTYPE
          HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=3D\"Content-Type\"
          CONTENT=3D\"text/html; =\ncharset=3Diso-8859-1\">\n<META NAME=3D\"Generator\"
          CONTENT=3D\"MS Exchange Server version =\n5.5.2650.12\">\n<TITLE>An introduction...</TITLE>\n</HEAD>\n<BODY>\n\n<P><FONT
          SIZE=3D2>Greetings,</FONT>\n</P>\n\n<P><FONT SIZE=3D2>I'm new to this list,
          and have been lurking for a few =\ndays, now.&nbsp; So, I thought I'd introduce
          myself...</FONT>\n</P>\n\n<P><FONT SIZE=3D2>Randy Farmer stated - </FONT>\n<BR><FONT
          SIZE=3D2>&gt;I believe that to be on a list, I should be a =\ncontributor
          as well as an</FONT>\n<BR><FONT SIZE=3D2>observer.</FONT>\n</P>\n\n<P><FONT
          SIZE=3D2>While I agree wholeheartedly, I also believe it's =\nimportant
          to acclimatize to an environment before engaging with its =\noccupants.&nbsp;
          So, with that in mind, following my introductions, I =\nplan on lurking
          for a while longer.&nbsp; :)</FONT></P>\n\n<P><FONT SIZE=3D2>www.intangibleproductions.com</FONT>\n</P>\n\n<P><FONT
          SIZE=3D2>At the risk of gooing, let me just state that as a =\nstudent conducting
          my graduate research into the political-sociology of =\nvirtual worlds,
          and as an aspiring game designer, I'm a little =\nstar-struck to be on a
          list with the authors (and subjects, for that =\nmatter) of many of the
          papers I have been reading over the last year =\nand a half.</FONT></P>\n\n<P><FONT
          SIZE=3D2>But I don't doubt that this feeling will pass quite =\nquickly,
          when I realize that you're actually a bunch of hacks.&nbsp; =\n:)</FONT>\n</P>\n\n<P><FONT
          SIZE=3D2>Never the less, I look forward to reading what you =\nhave to write,
          and hopefully contributing my own ideas to the =\ndiscussion.</FONT></P>\n\n<P><FONT
          SIZE=3D2>Cheers,</FONT>\n</P>\n\n<P><FONT SIZE=3D2>Geoffrey MacDougall</FONT>\n<BR><FONT
          SIZE=3D2>geoffrey@poptronik.com</FONT>\n</P>\n\n</BODY>\n</HTML>\n------_=_NextPart_001_01BF589A.CA945C90--\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: "Geoffrey A. MacDougall" <geoffrey@poptronik.com>'
                name: From
                value: '"Geoffrey A. MacDougall" <geoffrey@poptronik.com>'
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Thu, 6 Jan 2000 18:07:21 -0500'
                name: Date
                value: Thu, 6 Jan 2000 18:07:21 -0500
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] An introduction...'
                name: Subject
                value: "[MUD-Dev] An introduction..."
              mbox_from: 
            body: "This message is in MIME format. Since your mail reader does not
              understand\nthis format, some or all of this message may not be legible.\n\n------_=_NextPart_001_01BF589A.CA945C90\nContent-Type:
              text/plain;\n\tcharset=\"iso-8859-1\"\n\nGreetings,\n\nI'm new to this
              list, and have been lurking for a few days, now.  So, I\nthought I'd
              introduce myself...\n\nRandy Farmer stated - \n>I believe that to be
              on a list, I should be a contributor as well as an\nobserver.\n\nWhile
              I agree wholeheartedly, I also believe it's important to acclimatize\nto
              an environment before engaging with its occupants.  So, with that in\nmind,
              following my introductions, I plan on lurking for a while longer.  :)\n\nwww.intangibleproductions.com\n\nAt
              the risk of gooing, let me just state that as a student conducting my\ngraduate
              research into the political-sociology of virtual worlds, and as an\naspiring
              game designer, I'm a little star-struck to be on a list with the\nauthors
              (and subjects, for that matter) of many of the papers I have been\nreading
              over the last year and a half.\n\nBut I don't doubt that this feeling
              will pass quite quickly, when I realize\nthat you're actually a bunch
              of hacks.  :)\n\nNever the less, I look forward to reading what you
              have to write, and\nhopefully contributing my own ideas to the discussion.\n\nCheers,\n\nGeoffrey
              MacDougall\ngeoffrey@poptronik.com\n\n\n------_=_NextPart_001_01BF589A.CA945C90\nContent-Type:
              text/html;\n\tcharset=\"iso-8859-1\"\nContent-Transfer-Encoding: quoted-printable\n\n<!DOCTYPE
              HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=3D\"Content-Type\"
              CONTENT=3D\"text/html; =\ncharset=3Diso-8859-1\">\n<META NAME=3D\"Generator\"
              CONTENT=3D\"MS Exchange Server version =\n5.5.2650.12\">\n<TITLE>An
              introduction...</TITLE>\n</HEAD>\n<BODY>\n\n<P><FONT SIZE=3D2>Greetings,</FONT>\n</P>\n\n<P><FONT
              SIZE=3D2>I'm new to this list, and have been lurking for a few =\ndays,
              now.&nbsp; So, I thought I'd introduce myself...</FONT>\n</P>\n\n<P><FONT
              SIZE=3D2>Randy Farmer stated - </FONT>\n<BR><FONT SIZE=3D2>&gt;I believe
              that to be on a list, I should be a =\ncontributor as well as an</FONT>\n<BR><FONT
              SIZE=3D2>observer.</FONT>\n</P>\n\n<P><FONT SIZE=3D2>While I agree wholeheartedly,
              I also believe it's =\nimportant to acclimatize to an environment before
              engaging with its =\noccupants.&nbsp; So, with that in mind, following
              my introductions, I =\nplan on lurking for a while longer.&nbsp; :)</FONT></P>\n\n<P><FONT
              SIZE=3D2>www.intangibleproductions.com</FONT>\n</P>\n\n<P><FONT SIZE=3D2>At
              the risk of gooing, let me just state that as a =\nstudent conducting
              my graduate research into the political-sociology of =\nvirtual worlds,
              and as an aspiring game designer, I'm a little =\nstar-struck to be
              on a list with the authors (and subjects, for that =\nmatter) of many
              of the papers I have been reading over the last year =\nand a half.</FONT></P>\n\n<P><FONT
              SIZE=3D2>But I don't doubt that this feeling will pass quite =\nquickly,
              when I realize that you're actually a bunch of hacks.&nbsp; =\n:)</FONT>\n</P>\n\n<P><FONT
              SIZE=3D2>Never the less, I look forward to reading what you =\nhave
              to write, and hopefully contributing my own ideas to the =\ndiscussion.</FONT></P>\n\n<P><FONT
              SIZE=3D2>Cheers,</FONT>\n</P>\n\n<P><FONT SIZE=3D2>Geoffrey MacDougall</FONT>\n<BR><FONT
              SIZE=3D2>geoffrey@poptronik.com</FONT>\n</P>\n\n</BODY>\n</HTML>\n------_=_NextPart_001_01BF589A.CA945C90--\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] An introduction..."
        from: Geoffrey A. MacDougall <geoffrey@poptronik.com>
        references: []
        date: 2000-01-06 23:07:21.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 000DnsnI
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *390
    parent: 
    children:
    - &407 !ruby/object:MessageContainer
      key: &391 !ruby/object:MessageId
        raw: 00bj7rQ8@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: |
            From: "Lovecraft" <dave@darkages.com>
            Date: Fri, 7 Jan 2000 23:09:55 -0800
            Subject: Re: [MUD-Dev] An introduction...

            Geoffrey MacDougall :

            > At the risk of gooing, let me just state that as a student conducting my
            graduate

            > research into the political-sociology of virtual worlds,

            Perhaps some members of the list could point out--to me--some informative
            no-nonsense writings on player politics: in depth analyses of techniques;
            not fluffy caricatures.  For good example, the justice paper that was in
            Game Developer's magazine sometime in the last year (sorry link unfound).
            For bad example, "Implementing God":
            http://www.gamasutra.com/features/game_design/19980424/implementing_god.htm

            Geoffrey's background reminded me, but the topic is motivated by a need,
            both for purpose of simulation and entertainment, to better understand MUD
            player politics, and useful political mechanics.

            I've designed a few online RPG political systems, most recently Dark Ages',
            with very limited resources (mine, not the politicians'...).  I want to
            study the art and advance the art.  I've found anthropology and a little bit
            of real-world social science to be directly helpful, but I feel a gap that I
            believe a good analysis will fill.

            Dave Kennerly
            Game Director
            www.darkages.com




            _______________________________________________
            MUD-Dev maillist  -  MUD-Dev@kanga.nu
            http://www.kanga.nu/lists/listinfo/mud-dev
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: "Lovecraft" <dave@darkages.com>'
                  name: From
                  value: '"Lovecraft" <dave@darkages.com>'
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Fri, 7 Jan 2000 23:09:55 -0800'
                  name: Date
                  value: Fri, 7 Jan 2000 23:09:55 -0800
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] An introduction...'
                  name: Subject
                  value: 'Re: [MUD-Dev] An introduction...'
                mbox_from: 
              body: |
                Geoffrey MacDougall :

                > At the risk of gooing, let me just state that as a student conducting my
                graduate

                > research into the political-sociology of virtual worlds,

                Perhaps some members of the list could point out--to me--some informative
                no-nonsense writings on player politics: in depth analyses of techniques;
                not fluffy caricatures.  For good example, the justice paper that was in
                Game Developer's magazine sometime in the last year (sorry link unfound).
                For bad example, "Implementing God":
                http://www.gamasutra.com/features/game_design/19980424/implementing_god.htm

                Geoffrey's background reminded me, but the topic is motivated by a need,
                both for purpose of simulation and entertainment, to better understand MUD
                player politics, and useful political mechanics.

                I've designed a few online RPG political systems, most recently Dark Ages',
                with very limited resources (mine, not the politicians'...).  I want to
                study the art and advance the art.  I've found anthropology and a little bit
                of real-world social science to be directly helpful, but I feel a gap that I
                believe a good analysis will fill.

                Dave Kennerly
                Game Director
                www.darkages.com




                _______________________________________________
                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                http://www.kanga.nu/lists/listinfo/mud-dev
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] An introduction...'
          from: Lovecraft <dave@darkages.com>
          references: []
          date: 2000-01-08 07:09:55.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: 00bj7rQ8
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *391
      parent: *392
      children: []
  *166: *393
  *27: *30
  *328: *394
  *271: *275
  *247: *249
  *114: *136
  *272: *274
  *281: *284
  *223: *225
  *160: *395
  *62: *64
  ? &396 !ruby/object:MessageId
    raw: 00uTkclM@generated-message-id.chibrary.org
  : &398 !ruby/object:MessageContainer
    key: *396
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Thu, 20 Jan 2000 20:39:29
          -0800\nSubject: [MUD-Dev] [adv-mud] Spellbound Hierarchy and Keys (fwd)\n\n-------
          Forwarded Message\n\nFrom: \"phlUID\" <phluid@mindless.com>\nTo: \"Advanced
          Mud Listserv\" <adv-mud@egroups.com>\nDate: Thu, 20 Jan 2000 22:31:48 -0500\n\n
          \  I would like to share something small I've been working on\n  and see
          if anyone has any opinions on perhaps a better way to\n  go about doing
          this:\n\n   On Spellbound, every object in the game is given it's own\n
          \ database number. Help files, races, spells, objects, rooms,\n  mobiles,
          exits, worlds, areas, classes, populations, etc.\n  There are generically
          two types of database numbers: Pure,\n  which is just a simple unique number
          given to every object,\n  and Hybrid, which is used in the case of Object's
          and\n  Mobs. For example, a room is object #43, while the sword\n  in my
          inventory is #45:1 and the same type of sword in\n  my friend's inventory
          is #45:2. The second number is\n  referred to as an Entity ID because they
          refer to specific\n  Entity's instead of Entries. There is an Entry class
          for\n  #45 called ObjectEntry, and there is an associated Entity\n  class
          for ObjectEntry called Object. This concept is the\n  same as DIKU's use
          of OBJ_INDEX_DATA and OBJ_DATA.\n\n  Both Entities and Entries are inheriting
          from the Savable\n  class. Everything in the game is Savable more or less,\n
          \ allowing for the game to remain persistent even across\n  reboots. Anything
          that is Savable can be editted in OLC\n  by using the special attribute
          manipulation commands built\n  into the server. Every savable has Attributes,
          such as\n  Name, Size, Weight, Owner, and these attributes have\n  a table
          of rules that define valid ranges for setting the\n  actual variables underneath.\n\n
          \ The overall hierarchy looks something like this:\n\n                              Streamable\n
          \                                 |  |\n   HIERARCHY OF SPELLBOUND        |
          \ +---------------------+\n (Inheritence Relationships)      |           Eventable
          \   |\n                                  |             | | |      |\n             Savable-------------
          |  +----------+ | +----+ |\n             |                   \\|  |         System
          \   | |\n       +--Entry--+            +--Entity-+                | |\n
          \      | | | | | |            | | |  |  |          Descriptor\n    +--+
          | | | | +---*Room----+ | |  |  +--+\n    |    | | | +-----*Area------+ |
          \ |     |\n    | +--+ | +-------*Exit--------+  +--+  |\n    | |    +------------+
          \              |  |\n    | +-*ObjectEntry    |     #Object---+  |\n    +---*CharacterEntry
          |     #Character---+\n                        |         |\n       * - Perminent
          \   +-----*Player\n       # - Persistent\n\n  The Streamable class is how
          general communication is done\n  between objects, such as sending text to
          a player or echoing\n  text to a room. The code just does something like
          this:\n\n  PlayerBob << \"{RDon't Panic{x\\n\\r\" << flushl;\n\n  The flushl
          is detected and a subsequent flush( ) is called\n  on the Streamable class,
          which flushes the stream buffer.\n  The actual flush( ) must be defined
          to make Streamable no\n  longer an abstract class. The flush( ) for player's
          empies\n  out the text to their descriptors (any entity may have\n  multiple
          descriptors, ala MUSH.)\n\n  I've been using this hierarchy for quite a
          while, and I've\n  never had any problems with it.\n\n  Anyways.\n\n  One
          day I was coding and thinking about a generic MUD coding\n  problem:\n\n
          \ Currently, Spellbound uses pointers directly to objects\n  like normal
          DIKU mud. A room has pointers to the people\n  that are in the room. An
          event has a pointer to it's\n  target. A descriptor has a pointer to it's
          Incarnation\n  (Entity). What started to irk me was the fact that these\n
          \ pointers require a lot of messy cleanup procedures for\n  when you are
          destroying the object that they are all\n  pointing too. This is made worse
          by the object orientness\n  of C++, so I began to think of alternate ways
          of storing\n  pointers.\n\n  The first thing that I wanted to be able to
          do is validate\n  pointers. This way I can leave it up to the code that\n
          \ references these pointers to deal with invalid objects.\n  Example time.\n\n
          \ Bob is in a room. Joe is attacking bob, and has a pointer\n  to him as
          a victim. Fred is casting 'Poop Breath' on\n  Bob. There is an event in
          the room that is about to make\n  Bob explode. There is also three mobs
          using pathfinding\n  throughout the world to find Bob and hunt him down.
          However,\n  Bob somehow upset the admins and they suddenly decide to\n  @nuke
          him (destroy him). Now, it is possible for the code\n  to inform the ENTIRE
          game that Bob is no longer in existence,\n  but this would be the most bloatedly
          laggy thing I can think\n  of, expessially when we are dealing with objects
          that are\n  very temporary, such as Spell Affects.\n\n  To give a little
          more backround, my database saving routine\n  has a method of converting
          pointer's into their Database\n  Numbers and optional Entity IDs so that
          loading and saving\n  does not become a problem. The database saving/loading\n
          \ mechanism also has 4 stages, in which it loads plaintext\n  data first,
          pointer data next, entity plaintext data, and\n  then entity pointer data.
          This is so that the world can\n  be reassembled without worrying about object's
          that don't\n  exist when you are trying to get pointers to them.\n\n  This
          started my thinking into the idea that it would be\n  possible to replicate
          this system to make sure that what\n  I am referencing is actually there.
          My database uses\n  a regular array to return pointer's to DB numbers, so\n
          \ there is no CPU time involved looking through tables or\n  linked lists.
          If I want object #43, I just call \n  Database.getEntry( 43 ) and it returns
          a pointer to\n  that entry.\n\n  At this point I made the Key object. A
          Key is a very\n  small class that stores 3 number's about the pointer we\n
          \ want to save. Instead of using a raw pointer to what\n  I need, I just
          store the database number, the entity ID,\n  and a unique identifier. Every
          savable in the game needs\n  to have a unique identifier to make sure that
          we are\n  actually talking about the right object. This identifier\n  consists
          of a count of exactly how many nano or milliseconds\n  from the epoch. Assuming
          that no two object's can be created\n  at the exact same time, this gives
          each object ever created\n  a unique identifier.\n\n  Lets say I am Fred
          and I'm attacking Bob. Now, instead of\n  having a pointer directly to Bob,
          I have a Key which is\n  holding Bob's database number, entity ID, and time
          identifier.\n  Lets say this is #23, 0, and 48942809324932723. Whenever
          I\n  need to get the pointer to Bob to send a message or do\n  damage, I
          just ask the database to get me Entity #23:0. I\n  then need to compare
          my time identifier with his, because\n  it is possible that #23 was destroyed
          and then recreated\n  as a Fruit Cake, and I'll suddenly be attacking a
          Fruit Cake\n  instead of Bob. After a quick validation that our time\n  identifiers
          are still the same, I know that my pointer is\n  valid and I can safely
          attack Bob.\n\n  If the database couldn't find #23, entity 0, or the time\n
          \ identifier was wrong, I would end up with a NULL pointer,\n  which will
          just stop my action and inform Fred that Bob\n  is no longer there. Simple,
          effecient error control.\n\n  The neat thing about this is that it is also
          very simple.\n\n  The only real question that I had is if anyone can see\n
          \ ways to improve this process. On the technical side, I\n  need a way of
          grabbing the time( ) in an extremely\n  precise manner, so that even if
          I create 100 object's in\n  the same cpu cycle I will end up with unique
          identifiers\n  for every object ever created.\n\nAmos Wetherbee,\nThe Spellbound
          Project\n\n------- End of Forwarded Message\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Thu, 20 Jan 2000 20:39:29 -0800'
                name: Date
                value: Thu, 20 Jan 2000 20:39:29 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] [adv-mud] Spellbound Hierarchy and Keys (fwd)'
                name: Subject
                value: "[MUD-Dev] [adv-mud] Spellbound Hierarchy and Keys (fwd)"
              mbox_from: 
            body: "------- Forwarded Message\n\nFrom: \"phlUID\" <phluid@mindless.com>\nTo:
              \"Advanced Mud Listserv\" <adv-mud@egroups.com>\nDate: Thu, 20 Jan 2000
              22:31:48 -0500\n\n   I would like to share something small I've been
              working on\n  and see if anyone has any opinions on perhaps a better
              way to\n  go about doing this:\n\n   On Spellbound, every object in
              the game is given it's own\n  database number. Help files, races, spells,
              objects, rooms,\n  mobiles, exits, worlds, areas, classes, populations,
              etc.\n  There are generically two types of database numbers: Pure,\n
              \ which is just a simple unique number given to every object,\n  and
              Hybrid, which is used in the case of Object's and\n  Mobs. For example,
              a room is object #43, while the sword\n  in my inventory is #45:1 and
              the same type of sword in\n  my friend's inventory is #45:2. The second
              number is\n  referred to as an Entity ID because they refer to specific\n
              \ Entity's instead of Entries. There is an Entry class for\n  #45 called
              ObjectEntry, and there is an associated Entity\n  class for ObjectEntry
              called Object. This concept is the\n  same as DIKU's use of OBJ_INDEX_DATA
              and OBJ_DATA.\n\n  Both Entities and Entries are inheriting from the
              Savable\n  class. Everything in the game is Savable more or less,\n
              \ allowing for the game to remain persistent even across\n  reboots.
              Anything that is Savable can be editted in OLC\n  by using the special
              attribute manipulation commands built\n  into the server. Every savable
              has Attributes, such as\n  Name, Size, Weight, Owner, and these attributes
              have\n  a table of rules that define valid ranges for setting the\n
              \ actual variables underneath.\n\n  The overall hierarchy looks something
              like this:\n\n                              Streamable\n                                  |
              \ |\n   HIERARCHY OF SPELLBOUND        |  +---------------------+\n
              (Inheritence Relationships)      |           Eventable    |\n                                  |
              \            | | |      |\n             Savable------------- |  +----------+
              | +----+ |\n             |                   \\|  |         System    |
              |\n       +--Entry--+            +--Entity-+                | |\n       |
              | | | | |            | | |  |  |          Descriptor\n    +--+ | | |
              | +---*Room----+ | |  |  +--+\n    |    | | | +-----*Area------+ |  |
              \    |\n    | +--+ | +-------*Exit--------+  +--+  |\n    | |    +------------+
              \              |  |\n    | +-*ObjectEntry    |     #Object---+  |\n
              \   +---*CharacterEntry |     #Character---+\n                        |
              \        |\n       * - Perminent    +-----*Player\n       # - Persistent\n\n
              \ The Streamable class is how general communication is done\n  between
              objects, such as sending text to a player or echoing\n  text to a room.
              The code just does something like this:\n\n  PlayerBob << \"{RDon't
              Panic{x\\n\\r\" << flushl;\n\n  The flushl is detected and a subsequent
              flush( ) is called\n  on the Streamable class, which flushes the stream
              buffer.\n  The actual flush( ) must be defined to make Streamable no\n
              \ longer an abstract class. The flush( ) for player's empies\n  out
              the text to their descriptors (any entity may have\n  multiple descriptors,
              ala MUSH.)\n\n  I've been using this hierarchy for quite a while, and
              I've\n  never had any problems with it.\n\n  Anyways.\n\n  One day I
              was coding and thinking about a generic MUD coding\n  problem:\n\n  Currently,
              Spellbound uses pointers directly to objects\n  like normal DIKU mud.
              A room has pointers to the people\n  that are in the room. An event
              has a pointer to it's\n  target. A descriptor has a pointer to it's
              Incarnation\n  (Entity). What started to irk me was the fact that these\n
              \ pointers require a lot of messy cleanup procedures for\n  when you
              are destroying the object that they are all\n  pointing too. This is
              made worse by the object orientness\n  of C++, so I began to think of
              alternate ways of storing\n  pointers.\n\n  The first thing that I wanted
              to be able to do is validate\n  pointers. This way I can leave it up
              to the code that\n  references these pointers to deal with invalid objects.\n
              \ Example time.\n\n  Bob is in a room. Joe is attacking bob, and has
              a pointer\n  to him as a victim. Fred is casting 'Poop Breath' on\n
              \ Bob. There is an event in the room that is about to make\n  Bob explode.
              There is also three mobs using pathfinding\n  throughout the world to
              find Bob and hunt him down. However,\n  Bob somehow upset the admins
              and they suddenly decide to\n  @nuke him (destroy him). Now, it is possible
              for the code\n  to inform the ENTIRE game that Bob is no longer in existence,\n
              \ but this would be the most bloatedly laggy thing I can think\n  of,
              expessially when we are dealing with objects that are\n  very temporary,
              such as Spell Affects.\n\n  To give a little more backround, my database
              saving routine\n  has a method of converting pointer's into their Database\n
              \ Numbers and optional Entity IDs so that loading and saving\n  does
              not become a problem. The database saving/loading\n  mechanism also
              has 4 stages, in which it loads plaintext\n  data first, pointer data
              next, entity plaintext data, and\n  then entity pointer data. This is
              so that the world can\n  be reassembled without worrying about object's
              that don't\n  exist when you are trying to get pointers to them.\n\n
              \ This started my thinking into the idea that it would be\n  possible
              to replicate this system to make sure that what\n  I am referencing
              is actually there. My database uses\n  a regular array to return pointer's
              to DB numbers, so\n  there is no CPU time involved looking through tables
              or\n  linked lists. If I want object #43, I just call \n  Database.getEntry(
              43 ) and it returns a pointer to\n  that entry.\n\n  At this point I
              made the Key object. A Key is a very\n  small class that stores 3 number's
              about the pointer we\n  want to save. Instead of using a raw pointer
              to what\n  I need, I just store the database number, the entity ID,\n
              \ and a unique identifier. Every savable in the game needs\n  to have
              a unique identifier to make sure that we are\n  actually talking about
              the right object. This identifier\n  consists of a count of exactly
              how many nano or milliseconds\n  from the epoch. Assuming that no two
              object's can be created\n  at the exact same time, this gives each object
              ever created\n  a unique identifier.\n\n  Lets say I am Fred and I'm
              attacking Bob. Now, instead of\n  having a pointer directly to Bob,
              I have a Key which is\n  holding Bob's database number, entity ID, and
              time identifier.\n  Lets say this is #23, 0, and 48942809324932723.
              Whenever I\n  need to get the pointer to Bob to send a message or do\n
              \ damage, I just ask the database to get me Entity #23:0. I\n  then
              need to compare my time identifier with his, because\n  it is possible
              that #23 was destroyed and then recreated\n  as a Fruit Cake, and I'll
              suddenly be attacking a Fruit Cake\n  instead of Bob. After a quick
              validation that our time\n  identifiers are still the same, I know that
              my pointer is\n  valid and I can safely attack Bob.\n\n  If the database
              couldn't find #23, entity 0, or the time\n  identifier was wrong, I
              would end up with a NULL pointer,\n  which will just stop my action
              and inform Fred that Bob\n  is no longer there. Simple, effecient error
              control.\n\n  The neat thing about this is that it is also very simple.\n\n
              \ The only real question that I had is if anyone can see\n  ways to
              improve this process. On the technical side, I\n  need a way of grabbing
              the time( ) in an extremely\n  precise manner, so that even if I create
              100 object's in\n  the same cpu cycle I will end up with unique identifiers\n
              \ for every object ever created.\n\nAmos Wetherbee,\nThe Spellbound
              Project\n\n------- End of Forwarded Message\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] [adv-mud] Spellbound Hierarchy and Keys (fwd)"
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-21 04:39:29.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00uTkclM
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *396
    parent: 
    children:
    - &439 !ruby/object:MessageContainer
      key: &397 !ruby/object:MessageId
        raw: Jzn75vwu@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Sat, 29 Jan 2000 12:46:15
            -0800\nSubject: Re: [MUD-Dev] [adv-mud] Spellbound Hierarchy and Keys
            (fwd)\n\n> From: \"phlUID\" <phluid@mindless.com> \n\n> On Spellbound,
            every object in the game is given it's own database\n> number. Help files,
            races, spells, objects, rooms, mobiles, exits,\n> worlds, areas, classes,
            populations, etc.  There are generically\n> two types of database numbers:
            Pure, which is just a simple unique\n> number given to every object, and
            Hybrid, which is used in the\n> case of Object's and Mobs. For example,
            a room is object #43,\n> while the sword in my inventory is #45:1 and
            the same type of\n> sword in my friend's inventory is #45:2. The second
            number is\n> referred to as an Entity ID because they refer to specific\n>
            Entity's instead of Entries. There is an Entry class for #45\n> called
            ObjectEntry, and there is an associated Entity class for\n> ObjectEntry
            called Object. This concept is the same as DIKU's use\n> of OBJ_INDEX_DATA
            and OBJ_DATA.\n\nTranslation:\n\n  You have ObjectIDs which are synonymous
            with their (single)\ninstance, and you have InstanceIDs which are synonymous
            with an\ninstance of a referenced ObjectID.  An ObjectID may have multiple\nInstanceIDs
            referring to it as each one marks a duplicate object.\n\n> Currently,
            Spellbound uses pointers directly to objects like\n> normal DIKU mud.\n...various
            complaints about pointer tracking...\n> This is made worse by the object
            orientness of C++, so I began to\n> think of alternate ways of storing
            pointers.\n\nMy first thought is using either an auto_ptr or some sort
            of simple\nreference counting scheme.\n\n> The first thing that I wanted
            to be able to do is validate\n> pointers. \n\nReference counting with
            a flag would work fine.  Put a reference\ncount on your object class,
            and add an internal object_deleted flag\nthat is checked on every reference.
            \ That way you just delete the\nobject, the flag gets set, and at that
            point when its reference\ncount falls to zero you call the destructor.\n\nThere's
            actually a rather nicely written grim_reaper class floating\nabout the
            net that handles this elegantly as a base class.\n\n> This started my
            thinking into the idea that it would be possible\n> to replicate this
            system to make sure that what I am referencing\n> is actually there. My
            database uses a regular array to return\n> pointer's to DB numbers, so
            there is no CPU time involved looking\n> through tables or linked lists.
            If I want object #43, I just call\n> Database.getEntry( 43 ) and it returns
            a pointer to that entry.\n\nYou might like to hit the archives for discussion
            of my ObjectID\nformat, and how it supports re-use and collision detection.\n\n>
            This identifier consists of a count of exactly how many nano or\n> milliseconds
            from the epoch. \n\nRemember that the high resolution timer on non-hard
            realtime systems\n(and not even most of those) is _not_ reliable or accurate.\nFurhter,
            you are relying on general clock accuracy.  Consider the\nsimple case
            where you have something like an NTP client or a SysAdm\nresetting the
            system clock: there is a definite chance for two timer\ncalls to return
            the same value as the system clock passes the same\nvalue twice.\n\n>
            Assuming that no two object's can be created at the exact same\n> time,
            this gives each object ever created a unique identifier.\n\nObject A created
            at time X.\n\nSystem clock set back by NTP client to time X-Y.\n\nY time
            later Object B created at time X.\n\nBoth get the same ID.\n\n> If the
            database couldn't find #23, entity 0, or the time\n> identifier was wrong,
            I would end up with a NULL pointer, which\n> will just stop my action
            and inform Fred that Bob is no longer\n> there. Simple, effecient error
            control.\n\nI tend to be a big fan of exceptions (you might notice that
            my\ninitial internal language used exceptions for all call returns, with\na
            normal non-error return merely being a flavour of exception that\ndefaulted
            to always being caught by the caller).\n\nWhy use exceptions here?  With
            your scheme ever piece of code that\nhas to reference an object has to
            be prepared to find it\nnon-existent.  This is both a lot of duplication
            of effort and puts\nthe load on the programmer for a task that the system
            can generally\ntake care of instead (in the general case you just want
            events to\nfail that reference deleted objects, not try to manage the
            error).\n\n> The only real question that I had is if anyone can see ways
            to\n> improve this process. \n\nAs above.  For what you're doing (runtime
            checks only with no\nstorage collision requirements) a refernece count
            etc seems cheaper\nand simpler.\n\n> On the technical side, I need a way
            of grabbing the time() in an\n> extremely precise manner...\n\nThe syscall
            required tends to vary by OS: setitimer()/getitimer()\nare typical.\n\n--\nJ
            C Lawrence                                 Home: claw@kanga.nu\n----------(*)
            \                             Other: coder@kanga.nu\n--=| A man is as
            sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: J C Lawrence <claw@kanga.nu>'
                  name: From
                  value: J C Lawrence <claw@kanga.nu>
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Sat, 29 Jan 2000 12:46:15 -0800'
                  name: Date
                  value: Sat, 29 Jan 2000 12:46:15 -0800
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] [adv-mud] Spellbound Hierarchy and
                    Keys (fwd)'
                  name: Subject
                  value: 'Re: [MUD-Dev] [adv-mud] Spellbound Hierarchy and Keys (fwd)'
                mbox_from: 
              body: "> From: \"phlUID\" <phluid@mindless.com> \n\n> On Spellbound,
                every object in the game is given it's own database\n> number. Help
                files, races, spells, objects, rooms, mobiles, exits,\n> worlds, areas,
                classes, populations, etc.  There are generically\n> two types of
                database numbers: Pure, which is just a simple unique\n> number given
                to every object, and Hybrid, which is used in the\n> case of Object's
                and Mobs. For example, a room is object #43,\n> while the sword in
                my inventory is #45:1 and the same type of\n> sword in my friend's
                inventory is #45:2. The second number is\n> referred to as an Entity
                ID because they refer to specific\n> Entity's instead of Entries.
                There is an Entry class for #45\n> called ObjectEntry, and there is
                an associated Entity class for\n> ObjectEntry called Object. This
                concept is the same as DIKU's use\n> of OBJ_INDEX_DATA and OBJ_DATA.\n\nTranslation:\n\n
                \ You have ObjectIDs which are synonymous with their (single)\ninstance,
                and you have InstanceIDs which are synonymous with an\ninstance of
                a referenced ObjectID.  An ObjectID may have multiple\nInstanceIDs
                referring to it as each one marks a duplicate object.\n\n> Currently,
                Spellbound uses pointers directly to objects like\n> normal DIKU mud.\n...various
                complaints about pointer tracking...\n> This is made worse by the
                object orientness of C++, so I began to\n> think of alternate ways
                of storing pointers.\n\nMy first thought is using either an auto_ptr
                or some sort of simple\nreference counting scheme.\n\n> The first
                thing that I wanted to be able to do is validate\n> pointers. \n\nReference
                counting with a flag would work fine.  Put a reference\ncount on your
                object class, and add an internal object_deleted flag\nthat is checked
                on every reference.  That way you just delete the\nobject, the flag
                gets set, and at that point when its reference\ncount falls to zero
                you call the destructor.\n\nThere's actually a rather nicely written
                grim_reaper class floating\nabout the net that handles this elegantly
                as a base class.\n\n> This started my thinking into the idea that
                it would be possible\n> to replicate this system to make sure that
                what I am referencing\n> is actually there. My database uses a regular
                array to return\n> pointer's to DB numbers, so there is no CPU time
                involved looking\n> through tables or linked lists. If I want object
                #43, I just call\n> Database.getEntry( 43 ) and it returns a pointer
                to that entry.\n\nYou might like to hit the archives for discussion
                of my ObjectID\nformat, and how it supports re-use and collision detection.\n\n>
                This identifier consists of a count of exactly how many nano or\n>
                milliseconds from the epoch. \n\nRemember that the high resolution
                timer on non-hard realtime systems\n(and not even most of those) is
                _not_ reliable or accurate.\nFurhter, you are relying on general clock
                accuracy.  Consider the\nsimple case where you have something like
                an NTP client or a SysAdm\nresetting the system clock: there is a
                definite chance for two timer\ncalls to return the same value as the
                system clock passes the same\nvalue twice.\n\n> Assuming that no two
                object's can be created at the exact same\n> time, this gives each
                object ever created a unique identifier.\n\nObject A created at time
                X.\n\nSystem clock set back by NTP client to time X-Y.\n\nY time later
                Object B created at time X.\n\nBoth get the same ID.\n\n> If the database
                couldn't find #23, entity 0, or the time\n> identifier was wrong,
                I would end up with a NULL pointer, which\n> will just stop my action
                and inform Fred that Bob is no longer\n> there. Simple, effecient
                error control.\n\nI tend to be a big fan of exceptions (you might
                notice that my\ninitial internal language used exceptions for all
                call returns, with\na normal non-error return merely being a flavour
                of exception that\ndefaulted to always being caught by the caller).\n\nWhy
                use exceptions here?  With your scheme ever piece of code that\nhas
                to reference an object has to be prepared to find it\nnon-existent.
                \ This is both a lot of duplication of effort and puts\nthe load on
                the programmer for a task that the system can generally\ntake care
                of instead (in the general case you just want events to\nfail that
                reference deleted objects, not try to manage the error).\n\n> The
                only real question that I had is if anyone can see ways to\n> improve
                this process. \n\nAs above.  For what you're doing (runtime checks
                only with no\nstorage collision requirements) a refernece count etc
                seems cheaper\nand simpler.\n\n> On the technical side, I need a way
                of grabbing the time() in an\n> extremely precise manner...\n\nThe
                syscall required tends to vary by OS: setitimer()/getitimer()\nare
                typical.\n\n--\nJ C Lawrence                                 Home:
                claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
                A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] [adv-mud] Spellbound Hierarchy and Keys (fwd)'
          from: J C Lawrence <claw@kanga.nu>
          references: []
          date: 2000-01-29 20:46:15.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: Jzn75vwu
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *397
      parent: *398
      children: []
  *193: *399
  *369: *400
  *149: *152
  *31: *401
  *238: *241
  *332: *402
  *208: *403
  ? &404 !ruby/object:MessageId
    raw: Jysi40nI@generated-message-id.chibrary.org
  : &490 !ruby/object:MessageContainer
    key: *404
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: Ben Greear <greearb@candelatech.com>\nDate: Sat, 29 Jan 2000 20:39:17
          -0700\nSubject: [MUD-Dev] ScryMUD 2.0.10 released.\n\nNow includes 5 fully
          functional zones, instead of one like I had\npreviously been releasing.
          \ This means a server with a playable\n(though small) world right out of
          the box.  With OLC you can always\nadd your own unique content of course
          :)\n\nThe normal assortment of fixes and tweaks is also included of\ncourse...\n\nClick
          the downloads link from:  http://scry.wanfear.com\nif you are interested...\n\nThanks,\nBen\n\n--\nBen
          Greear (greearb@candelatech.com)  http://scry.wanfear.com/~greear \nAuthor
          of ScryMUD:  scry.wanfear.com 4444        (Released under GPL)\nhttp://scry.wanfear.com\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Ben Greear <greearb@candelatech.com>'
                name: From
                value: Ben Greear <greearb@candelatech.com>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Sat, 29 Jan 2000 20:39:17 -0700'
                name: Date
                value: Sat, 29 Jan 2000 20:39:17 -0700
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] ScryMUD 2.0.10 released.'
                name: Subject
                value: "[MUD-Dev] ScryMUD 2.0.10 released."
              mbox_from: 
            body: "Now includes 5 fully functional zones, instead of one like I had\npreviously
              been releasing.  This means a server with a playable\n(though small)
              world right out of the box.  With OLC you can always\nadd your own unique
              content of course :)\n\nThe normal assortment of fixes and tweaks is
              also included of\ncourse...\n\nClick the downloads link from:  http://scry.wanfear.com\nif
              you are interested...\n\nThanks,\nBen\n\n--\nBen Greear (greearb@candelatech.com)
              \ http://scry.wanfear.com/~greear \nAuthor of ScryMUD:  scry.wanfear.com
              4444        (Released under GPL)\nhttp://scry.wanfear.com\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] ScryMUD 2.0.10 released."
        from: Ben Greear <greearb@candelatech.com>
        references: []
        date: 2000-01-30 03:39:17.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jysi40nI
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *404
    parent: 
    children: []
  *295: *298
  *134: *405
  *140: *406
  *391: *407
  ? &408 !ruby/object:MessageId
    raw: 00bj5f1s@generated-message-id.chibrary.org
  : &491 !ruby/object:MessageContainer
    key: *408
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: Marian Griffith <gryphon@iaehv.nl>\nDate: Sun, 16 Jan 2000 14:37:43
          +0000 (GMT)\nSubject: [MUD-Dev] Mud-Dev FAQ part II\n\n                        Mud-Dev
          FAQ\n                          part II\n                        -----------\n\n\n\nLast
          modified:   20 September 1999\n                 14 November  1999\n                 16
          Januari   2000\n\n 1. Introduction\n 2. Frequently Asked Questions\n 3.
          Previous Topics\n 4. Scenarios\n*5. Resources\n*6. Glossary\n*7. Changes,
          To Do & Acknowledgements\n\n(* chapters found in this part of the FAQ)\n\nA
          web based version of this FAQ can be found at:\n<URL:http://www.kanga.nu/FAQs/MUD-Dev-L/>\n\nPlease
          email any corrections, suggestions or constructive criticisms\nto Marian
          Griffith at gryphon@iaehv.nl\n\n\nRecent Changes:\n16-01-2000\n    Resouces:
          Added Asheron's Call, Everquest, Legends of Futures Past,\n              Terris,
          Treshold and Sojourn to the list of muds.\n              Changed the address
          of The Eternal City.\n              Added mudwords.com, mudconnector, mudlinks
          and gamecommandos\n              to the mud resources\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t\t5.
          Resources\n\n\n\nAnything notable and mud related that should be read/investigated.\n\n\n
          \ Mud-Dev site\n   <URL:http://www.kanga.nu/lists/listinfo/mud-dev/>\n   <URL:http://www.kanga.nu/library.php3>\n
          \  Especially the searchable archives and the library. There is a\n   much
          larger collection of design related web articles there than\n   can be included
          in this faq.\n\nWebpages:\n\n  A Rape in Cyberspace\n    <URL:http://www.apocalypse.org/pub/u/lpb/muddex/vv.html>\n
          \   The infamous article by Julian Dibbell.\n\n  How it really happened...\n
          \   <URL:http://www.apocalypse.org/pub/u/lpb/muddex/bartle.txt>\n    Richard
          Bartle's early history of MUDs.\n\n  Imaginary Realities\n    <URL:http://imaginaryrealities.imaginary.com>\n
          \   Online mud orientated magazine.\n\n  Killers Have More Fun\n    <URL:http://www.wired.com/wired/6.05/ultima.html>\n
          \   An article by Amy Jo Kim.\n\n  Lucasfilm's Habitat\n    <URL:http://www.communities.com/company/papers/lessons.html>\n
          \   <URL:http://race-server.race.u-tokyo.ac.jp/RACE/TGM/Mud/habitat.html>\n
          \   <URL:http://www.communities.com/people/crock/habitat.html>\n    <URL:http://beta.communities.com/>\n
          \   Detailed documents about an ambitious graphical mud. [JCL]\n\n  Lydia
          Leong's MUD resource collection\n    <URL:http://www.godlike.com/muds/>\n
          \   [Raph K]\n\n  Marian Griffith's !Overlord project\n    <URL:http://www.iaehv.nl/users/gryphon>\n
          \   Full of information useful to mud designer/admins.\n\n  MUDDex\n    <URL:http://www.apocalypse.org/pub/u/lpb/muddex/>\n
          \   A collection of documents including Bartle's, Dibbell's mentioned\n
          \   above. [Raph K]\n\n  Raph Koster's Website, Gaming Section\n    <URL:http://mud.sig.net/raph/gaming/>\n
          \   <URL:http://mud.sig.net/raph/gaming/links.html>\n    Lead designer on
          Ultima Online, plenty of snippets on muds, particularly\n    those pertaining
          UO itself.  Many of the above sites are index in the\n    links section.
          \ Raph's Laws of Online World Design can also be found\n    here.\n\n\nMud
          Finders:\n  Mudwords\n    <URL:http://www.mudwords.com/>\n\n  Mudconnector\n
          \   <URL:http://www.mudconnector.com/>\n    I think this site took over
          when Doran's mudlist stopped due to an\n    overwhelming number of muds
          that made it impossible for a single\n    person to keep up.\n\n  Mudlinks\n
          \   <URL:http://www.mudlinks.com/>\n\n  Game commandos\n    <URL:http://www.gamecommandos.com>\n
          \   Mud connector and peering review of muds.\n\nMuds:\n\n  AlphaWorld:
          <URL:http://www.cs.cuc.edu/~sopwith/aw/>\n    Anyone care to comment?\n\n
          \ AmigaMUD: <URL:telnet://mud.myrias.com:23>\n    Chris Gray's custom mud.
          \ Moving site. [Jun 1998]\n\n  Armageddon: <URL:telnet://ginka.armageddon.org:4050>\n
          \   To my knowledge the ONLY truly successful full-bore RP environment\n
          \   based on a Diku-style server with full combat and the like. Often\n
          \   cited as such at any rate. [Raph K]\n\n  Asheron's Call: <URL: telnet://??:??>\n
          \   If I recall correctly this is one of the first first-person graphical\n
          \   commercial muds.\n\n  Aturion Dynasty: <URL:http://aturion.com:4444>\n
          \   Almost all the muds done by Owen Emlen have interesting design \n    features
          to them too. [Raph K]\n    [See also EmlenMud II]\n\n  Avalon: <URL:http://www.avalon-rpg.com>\n
          \   Commercial text muds. Avalon has an interesting newbie tutorial\n    mode,
          and room description generation code that is nifty\n    too. [Raph K]\n\n
          \ Cold: <URL:telnet://ice.cold.org:1138>\n    A branch off the ColdMUD (below)
          using the Genesis driver, sometimes\n    referred to as Cold/Genesis or
          ColdX/Genesis.\n\n  ColdMUD: <ftp://ftp.kanga.nu/pub/MUD/Servers/ColdMUD/>\n
          \   ColdMUD is for all intents and purposes dead.  Greg Hudson officially\n
          \   stopped development of it back in 1994, and I just 'branched' the\n
          \   ColdX/Genesis from it, rather than making an issue with people and\n
          \   continuing to call my development of it 'ColdMUD'. [Brandon Gillespie]\n\n
          \ CoolMUD: <URL:http://csclub.uwaterloo.ca/u/sfwhite/coolftp>\n    Incredibly
          elegant server design. [JCL]\n\n  Dark Sun Online: <URL:http://www.ssionline.com>\n
          \   Commercial graphical mud with turn-based combat in a real-time\n    environment.
          [Raph K]\n\n  DartMUD: <URL:telnet://dartmud.com:2525>\n    A very ambitious
          LP mud with lots of good ideas which never seemed\n    to have gelled together
          correctly.  Plenty of bugs.  A sequel is\n    being worked on.\n\n  DragonRealms
          (Gemstone): <URL:http://dragonrealms.net>\n    Gemstone was and probably
          still is the most popular mud in the\n    world, period. It evolved into
          DragonRealms. [Raph K]\n\n  Duris: <URL:telnet://duris.org:6666>\n    A
          pk mud with economy?! [Down? Jul 1998]\n    Changed name to Duris: Land
          of Bloodlust, <URL:http://www.duris.org>\n\n  Eternal City, The: <URL:http://www.eternal-city.com/>\n
          \   Commercial mud using the Cold server.\n\n  EmlenMud II: <URL:http://degu.cs.indiana.edu:6669/em2.html>\n
          \   Looks like Owen Emlen is in the process of making a new mud.\n\n  Everquest:
          <URL:telnet://??:??>\n    A commercial graphical mud\n\n  Furcadia: <URL:http://www.realtime.net/furcadia/>\n
          \   A commercial graphical mud by Dr. Cat.\n\n  LambdaMOO: <URL:http://vesta.physics.ucla.edu/~smolin/lambda/>\n
          \   One of the pages for this MOO.\n\n  LegendMUD: <URL:telnet://mud.aus.sig.net:9999>\n
          \   The first classless mud, strange diku/LP hybrid.  See Raph\n    Koster's
          bio.\n\n  Legends of Futures Past <URL:telnet://??:??>\n    An excellent
          commercial text based mud [Ilya]\n\n  Medievia: <URL:telnet://medievia.intersphere.com:4000>\n
          \   The most popular free gaming mud I know of. Pioneered the use of\n    things
          like in-game spam ads for themselves and lack of due credit\n    given for
          code (:P) but also has things like ASCII map terrain,\n    large algorithmically
          generated areas, etc. [Raph K] \n\n  M59: <URL:http://www.3do/meridian>\n
          \   Ask Mike S.\n\n  Mortal Conquest: <URL:telnet://199.74.98.37:9999>\n
          \   That game I can't remember with the whities and the darkies. [JCL]\n
          \   By Own Emlen. [Down, 1st March]\n\n  MUD2: <URL:telnet://mud2.com:23>\n
          \       <URL:http://www.mud2.com>\n    A licensed copy run by Bartle.\n\n
          \ MUQ: <URL:http://www5.biostr.washington.edu/~jsp/muq.html>\n\n  Northern
          Lights:\n    <URL:http://www.ludd.luth.se/mud/aber/northern_lights.html>\n
          \   <URL:telnet://aber.ludd.luth.se:6715>\n\n  Realms, The: <URL:http://www.realmserver.com>\n
          \   Realms is a commercial graphical mud from Sierra.\n\n  Shades: <URL:telnet://games.world.co.uk:23>\n
          \   TODO - get Bartle's comment here.\n\n  Sojourn: <URL:telnet://toril.org:9999>
          <URL:http://www.torilmud.com>\n    Predecessor and sister game to Duris.
          A strongly PK oriented mud\n\n  Terris: <URL:telnet://??:??>\n    A text-based
          mud only accessible to AOL subscribers [Ilya]\n\n  Toril: <URL:telnet://torilmud.com:9999>\n
          \   One of two offshoots of Sojourn (other being Duris).\n\n  Treshhold:\n
          \   TODO: Ask Ilya about this one.\n\n  Trash: <URL:http://games.world.co.uk>\n
          \   Somewhere in the webpage with Shades.  [Down, Sept 1998]\n\n  Tron:
          <URL:telnet://polaris.king.ac.uk:3000>\n    An out and out pk mud, more
          of an arcade game using ASCII maps than\n    a mud in the conventional sense.
          \ Not one for the faint hearted.\n    Should you want a game but can't find
          anyone, drop me a bell.\n    Start learning with disc or spider.  Be prepared
          to break your\n    keyboard. [Ling]\n\n  UOL: <URL:http://www.ultimaonline.com>\n
          \   Ask Raph K.\n\n  VR1 Crossroads\n    TODO: Ask Ilya about this one\n\n
          \ Worlds of Carnage: <URL:telnet//carnage.labs.emich.edu:4000>\n    The
          first Diku mud with an internal scripting language, called\n    \"easyacts.\"
          This code formed the basis of the MobProgs put into\n    Merc 2.2. LegendMUD
          is a spiritual offshoot of Carnage, and Cythera is\n    a literal offshoot.
          \ (Interestingly, Damion Schubert, a designer on\n    M59, was also a Carnage
          immort alum). Imperium Gothique's scripting\n    was derived from either
          mobprogs or Carnage, not sure which. Carnage\n    definitely had a lot of
          influence on the world of Dikudom. [Raph K]\n\n\nNotable muds yet to be
          found:\n\n  IOWA Project, The:\n    TODO - dig up references in Bartle's
          MUD survey, browse LambdaMOO\n           ftp site and MUDDev.\n\t   Keywords:
          MirrorWorld, Gods, Pippin (\"Pip\") Caudry.\n\n  Island:\n    Did this not
          die some time back?  [Thouhg Keegan may yet resurrect it]\n\n  MUD1:\n    Although
          MUD2 is up above.\n\n\nNot so mud related webpages.\n\n  ANSI and VT terminal
          codes in general:\n    <URL:http://www.cs.utk.edu/~shuford/terminal_index.html>\n\n
          \ And in case you wanted to know more about VT-### in particular:\n    <URL:http://www.sdsu.edu/doc/texi/screen_10.html>\n
          \   <URL:http://www.mhri.edu.au/~pdb/dataformats/vt100.html>\n\n  Or ANSI
          terminals:\n    <URL:http://www.mhri.edu.au/~pdb/dataformats/ansi.html>\n\n
          \ AI Nodes/ANN:\n    <URL:http://206.107.246.21/packhste/5/>\n\n  Amit's
          Games Programming Page:\n    <URL:http://www-cs-students.stanford.edu/~amitp/gameprog.html>\n\n
          \ Anti-Mac interface:\n    <URL:http://www.acm.org/cacm/AUG96/antimac.htm>\n\n
          \ BSP trees:\n    <URL:http://reality.sgi.com/bspfaq/index.shtml>\n\n  Image
          formats (esp PPM):\n    <URL:http://www.dcs.ed.ac.uk/~mxr/gfx/2d-lo.html>\n\n
          \ R-Trees:\n    <URL:http://www.cs.cuhk.hk/~drsam/methods.html>\n\n  VR
          programming tutorial:\n    <URL:http://www.cs.virginia.edu/~rg3h/networkVR/paper.html>\n\n\nProgramming
          references to get the budding scratch mud coder started:\n\n  BSD Sockets:
          A Quick And Dirty Primer\n    <URL:http://world.std.com/~jimf/papers/sockets/sockets.html>\n\n
          \ With other relevant papers pointed to by:\n    <URL:http://www-users.cs.umn.edu/%7ebentlema/unix/>\n\n
          \ Vic Metcalfe's (vic@brutus.tlug.org) unix-socket FAQ can be found at\n
          \   Text version:\n \n<URL:http://unlser1.unl.csi.cuny.edu/faqs/sock-faq/usenet/unix-socket-faq.us\nenet>\n
          \   <URL:http://www.ibrado.com/sock-faq/usenet/unix-socket-faq.usenet>\n
          \   HTML version:\n \n<URL:http://unlser1.unl.csi.cuny.edu/faqs/sock-faq/html/unix-socket-faq.html\n>\n
          \   <URL:http://www.ibrado.com/sock-faq/html/unix-socket-faq.html>\n\n  There's
          a nice leader page for the FAQ with other related pointers at:\n \n<URL:http://unlser1.unl.csi.cuny.edu/faqs/sock-faq/html/unix-socket-faq-1.ht\nml>\n
          \   <URL:http://www.ibrado.com/sock-faq/>\n\n  The TCP/IP applications FAQ
          can be found at (of course):\n \n<URL:http://www.faqs.org/faqs/internet/tcp-ip/applications-FAQ/index.html>\n\n
          \ The TCP/IP FAQ from comp.protocols.tcp-ip (probably also on news.answers\n
          \ etc) can be found at:\n    <URL:http://www.dc.net/ilazar/tcpipfaq/default.htm>\n\n
          \ The raw IP networking FAQ (most interesting to those of use doing\n  custom
          clients or server inter-connects) can be found at:\n    <URL:http://www.whitefang.com/rin/>\n\n
          \ The TCP/IP resources list has all sorts of useful pointers:\n    <URL:http://www.faqs.org/faqs/internet/tcp-ip/resource-list/index.html>\n\n
          \ Including the various BSD socket programming tutorials:\n    <URL:http://ftp.std.com/homepages/jimf/sockets.html>\n
          \   <URL:http://ccnga.uwaterloo.ca/~mvlioy/stuff/ipc_intro_tut.txt>\n    <URL:http://ccnga.uwaterloo.ca/~mvlioy/stuff/ipc_adv_tut.txt
          >\n\n  The Unix Refence desk is another good reference:\n    <URL:http://www.geek-girl.com/unix.html>\n\n
          \ As is Unix Guru Universe:\n    <URL:http://www.ugu.com/>\n\n  And of course,
          W R Steven's page:\n    <URL:http://www.kohala.com/~rstevens/>\n\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t
          \ 6. Glossary of Terms\n\n\n\nThe list has managed to come up with its own
          jargon.  Here are some of\nthe current buzzwords:\n\n\nCooperative role-playing:
          Refers to a specific kind of RP where each\n  player's personal 'storyline'
          is paramount.  All players are aware\n  of, and sensitive to, the needs
          of each player for their story, and\n  all actions are completely consensual.
          \ This is a type of play often\n  found on MUSHes.\n\n\nEvent: A system
          design alternative to polling loops.  Objects generate\n  events, which
          are processed in their proper order by the event\n  handler.  This is frequently
          clearer and far more efficient,\n  especially with large numbers of objects.
          \ Examples are a torch\n  generating an event to burn out in two hours,
          or a spell generating\n  an event for an earthquake to occur in four seconds.\n\n
          \ The following is a compilable example of generic event-handling code in\n
          \ C courtesy of Adam Wiggins.\n\n---<begin code>---\n\n#include <stdio.h>\n\ntypedef
          float Tick;\t\t\t/* Time counter type */\n\n/* Defines for event types */\n#define
          EVENT_ALPHA\t\t0\n#define EVENT_BETA\t\t1\n#define EVENT_GAMMA\t\t2\n\n#define
          NUM_EVENTS\t\t(EVENT_GAMMA + 1)\n\n/* The event structure itself */\ntypedef
          struct SEvent\n{\n\tint Type;\t\t\t\t/* EVENT_x */\n\tTick RipenTime;\t\t\t/*
          time at which event ripens */\n\tvoid *Data;\t\t\t\t/* any extra data to
          be\npassed to the callback function */\n\tstruct SEvent *Next;\n} Event;\n\n/*
          Defininiton for the callback function type */\ntypedef void (*EventCallback)(void
          *);\n#define EVENT(x)\tvoid (x)(void *)\n\n/* Event function prototypes
          - these should be defined somewhere else, like\nso:\n\n   EVENT(EventAlpha)\n
          \  {\n      code to execute on event completion;\n   }\n*/\nEVENT(EventAlpha);\nEVENT(EventBeta);\nEVENT(EventGamma);\n\n/*
          Master list of event callbacks, by type */\nEventCallback EventCallBacks[NUM_EVENTS]
          =\n{ EventAlpha, EventBeta, EventGamma };\n\nEvent *EventList = NULL;\t\t/*
          Master event list */\nTick GameTick = 0;\t\t\t\t/* Current game time */\n\n/*
          Call this to add an event \"time\" ticks into the future */\nvoid AddEvent(int
          type, Tick time, void *data)\n{\n\tEvent *newEvent, *e, *prev;\n\n\t/* Sanity
          checking */\n\tif (time <= 0)\n\t\treturn;\n\n\t/* Create the event */\n\tnewEvent
          = (Event *)malloc(sizeof(Event));\n\tnewEvent->Type = type;\n\tnewEvent->RipenTime
          = GameTick + time;\n\tnewEvent->Data = data;\n\n\t/* Descend the list until
          a later event is found */\n\tfor (e = EventList; e && e->RipenTime < newEvent->RipenTime;
          e =\ne->Next)\n\t\tprev = e;\n\n\t// Insert the new event before that event\n\tnewEvent->Next
          = e;\n\tif (prev)\n\t\tprev->Next = newEvent;\n\telse\n\t\tEventList = newEvent;\n}\n\n/*
          Call the function below during your update loop */\n/* The parameter is
          how many game ticks have passed since the last update */\nvoid EventUpdate(Tick
          ticks)\n{\n\tEvent *e, *next;\n\tint update = 0;\n\n\tGameTick += ticks;\n\n\t/*
          Execute each event that is due to ripen */\n\tfor (e = EventList; e && e->RipenTime
          <= GameTick; e = e->Next)\n\t{\n\t\t(*EventCallBacks[e->Type])(e->Data);\n\t\tupdate
          = 1;\n\t}\n\n\t/* Second pass, delete all ripened events */\n\t/* This part
          is done in a seperate pass in case one of the event\ncallbacks\n\t   adds
          a new event, to avoid munging up the event linked list */\n\tif (update)\n\t{\n\t\tfor
          (e = EventList; e && e->RipenTime <= GameTick; e = next)\n\t\t{\n\t\t\tnext
          = e->Next;\n\t\t\tfree(e);\n\t\t}\n\n\t\tEventList = e;\n\t}\n}\n\n---<end
          code>---\n\n\nFaucet->Drain economy: A virtual economic system wherein there
          is an\n  ongoing influx of new items into the game (usually via a reset
          model)\n  and a hopefully corresponding outflow, usually accomplished through\n
          \ object attrition involving equipment damage, rent fees, etc. It is worth\n
          \ noting that traditionally, designers have been unable to easily come up\n
          \ with a big enough drain to handle all the 'water.' This is as opposed
          to\n  a \"Closed economy\" in which an attempt is made to close the loop,\n
          \ creating new objects only when old ones are used up. [Raph K]\n\n\nFixed
          random seeding: Using a fixed value (such as a character's\n  unique ID,
          or the character's position in XYZ space) to seed the\n  random number generator,
          assuring that the same random number will\n  always be rolled if the circumstances
          are exactly the same, but\n  requiring no storage.  This allows parts of
          the world or its\n  behaviour to be dynamically generated from the seed
          value as\n  needed, and yet to have each \"new copy\" be the same as all
          the\n  others because the seed value hasn't changed.\n\n\nFluidity of Identity:
          Referring to the difficulty of positively identifying\n  a single person
          who takes many guises in a game world.  Any particular\n  action against
          one of those guises is fairly ineffective; they choose\n  another and continue.
          \ This makes it very difficult to pin down\n  trouble makers.  ATtempts
          at identifying people based on their hostname\n  (site deny/allow), e-mail
          address (email registration), credit card number\n  (for commercial ventures),
          or just asking really, really nicely are all\n  easily circumvented, especially
          when it is easy to create new characters\nor\n  accounts (that is, the process
          is short and automated).  This frequently\n  makes it difficult to implement
          'real world' solutions to in-game problems\n  such as psychotic killing
          sprees.  Once you catch someone and lock them\naway\n  or put them to death
          in RL, they are gone.  When you do this on most muds,\n  they just log on
          two seconds later with another character.\n\n\nFull world reset, aka \"groundhog
          day\" muds: Muds wherein resets occur\n  globally, simultaneously (sf reset
          and repop). [RaphK]\n\n\nFunctional roleplaying: A kind of gaming, whilst
          GoP motivated, is heavily\n  tailored to the in-game reality.  There's no
          thee's or thou's, or even\n  pretension of IC/OOC separation, but an awful
          lot of attention is spent\n  by the player in working his character thru
          the game realities rules as\n  it controls and affects his character.  Examples
          would include\n  negotiation of reputation and influence systems, votes,
          political systems,\n  clans and guilds and other similar structures, etc.
          \ Appearance is not\n  the key.  Function is. [JCL]\n\n\nGlobal namespace:
          Referring to the fact that most muds rely on characters\n  (and sometimes
          other objects) are given a single and unique name.\n  Typing 'who' on most
          muds gives you a list of these; if you see\n  someone named Bob you know
          that he is the only Bob in the world, and\n  can't be confused with anyone
          else.  This is as compared to a system\n  of generated descriptions to which
          players can attach proper names\n  as they please, which may or may not
          overlap or match up with the\n  names assigned by other players.\n\n\nGoP:
          Short for 'game-oriented play' or possible 'goal-oriented play'.\n  This
          is usually a competitive style of play usually oriented around\n  the accumulation
          of various resources (money, power, combat ability).\n\n\nLevels: For the
          purpose of keeping discussions generic, this term may be\n  used as an abstract
          measurement of a character's ability, skill or\n  expertise whether the
          game system is level-based or skill-based.\n  Eg: \"If a low level character
          tries XXX a high level character...\"\n  The precise details are not of
          interest as opposed to the impact and\n  result of the undefined imbalance.\n\n\nLockless
          server or DB:\n\n  Events request objects from the DB.\n\n  If the object
          is not in the cache, the DB loads the object.\n\n  The DB replies to the
          event with a read-only shared reference to the\n    object.\n    \n  The
          event is added to the \"interested parties\" list for the object.\n\n  If
          the event attempts to modify the object, a new local, event-specific\n    copy
          of the object is made, and the changes are made to that.  A copy\n    of
          the original reference however is still kept.\n\n  The event (loosely) attempts
          to keep track of what members of the\n    object it referenced.\n\n  During
          the execution of an event. all external IO is buffered and held.\n\n  Upon
          the event terminating it compares its copy of the original object\n    (the
          local reference) with the object that's actually in the DB (may\n    have
          been changed by events committing during the current event's\n    execution).
          \ Some intelligence is attempted here to only compare those\n    values
          etc which were referenced by the event.\n\n  Should the original copy and
          the current-in-DB copy compare OK, then\n    the event commits, the IO is
          released, and all its changes in its\n    written-to copies are committed
          atomically.  This is the\n    Compare&Commit, or C&C.\n\n  If the C&C fails,
          the event is thrown away, all the copies are released,\n    the IO is discarded,
          and the event is rescheduled to try again.\n\n  There is also some background
          intelligence here where the DB watches\n    the objects that are affected
          by event's C&C'ing, and will signal the\n    other events that are members
          of those object's interested party list\n    that they may be invalidated
          by the other event's C&C and so should\n    kill themselves and reschedule.\n
          \   \n                                  ref: DEMOS and the DOME project
          (JCL)\n\n\nMarkup language: An internal set of codes used by a server to
          generate\n  semi-dynamic messages.  An example is \"%c dives %I %o\" which
          might result\n  in \"Bubba dives behind the wall\", \"A woman dives into
          the pool\", or\n  any number of other strings.\n\n\nmud or MUD: It is not
          an acronym.  It is a collective term for all the\n  types of games discussed
          on this list, including both RP and GoP.\n  [NB: Another description may
          be found at the list's homepage\n       <URL:http://www.kanga.nu/lists/listinfo/mud-dev/>
          ]\n\n\nMule: Character created on goal-orientated muds those sole purpose
          is to\n  supplement a player's primary character by supplying services such
          as\n  equipment repair.  Mules usually have skills that cannot be obtained\n
          \ without creating a new character but are perceived to be undesirable to\n
          \ play.  For example, an alchemist class could be considered unenjoyable\n
          \ to play but due to their special ability to repair equipment, the regular\n
          \ players create mule alchemists just to access that ability.\n\n\nObject:
          Because most of the servers discussed here are\n  object-oriented, the word
          object is being used in its general\n  programming sense to include characters,
          locations, inanimate items,\n  and so forth, rather than referring to only
          inanimate items as is\n  typical in some mud servers.\n\n\nPK, player-killing:
          The intentional killing of a player character by\n  another player, with
          or without the first player's prior knowledge,\n  agreement, or consent.
          [JCL]\n\n\nPsychological disinhibition: The term for when people act less
          inhibited\n  than normally because of circumstance. All behaviours online
          tend to become\n  less inhibited, and the greater the absence of identity
          cues for the\npeople\n  you are interacting with, the less inhibited the
          behaviours tend to get.\n  [RaphK]\n\n\nRealism: This is not necessarily
          correspondance to the real world, but\n  rather refers to internal consistency.
          \ In many cases using the\n  working of real world systems (physics, for
          example) is a good\n  example for how to build a consistent system for a
          game world.\n  To quote:\n\n  \"This is, of course, partially my invention,
          to suit the gaming world\n   we are working on, and is not intended to mirror
          Real Life - just to\n   borrow enough bits and pieces from it, so that it
          is recognized as\n   somewhat structured (rather than totally whimsical)
          to the player.\"\n\t\t\t\t\t\t\t- Holly Sommer\n\n\nRepop: See Reset.\n\n\nReset:
          Usually a function called in a mud at irregular intervals, the\n  purpose
          of which is to put back the game, or some fragment of the\n  game or game
          world into a known state.  Typically this might mean\n  locking an opened
          door, or resurrecting an NPC that was killed by a\n  player and putting
          him back to guard the door,  Resets and repops\n  are common on games that
          promote repetitive actions for advancement.\n\n\nSkill net: A single layered
          skill web. Skills are directly weighted to\n  each other.  See skill web
          (NY)\n\n\nSkill tree: A skill system where skills have a single parent and\n
          \ several children.  A skills at the bottom of the tree being very\n  specialised.
          \ Skills higher up the tree will affect the value of\n  skills further down.\n\n\nSkill
          web: a non-hierarchical two layered skill system wherein each\n  skill is
          weight-related to an arbitrary number of attributes, and\n  the improvement
          of skills therefore automatically improves related\n  skills. Examples of
          skills might be rowing and flycasting, examples\n  of attributes, strength
          (upper arm) and precision (forearm).\n  \n  [Note: I triple weight my skill
          web, so that there are direct\n  connections to the condition of the character's
          body and mind, and\n  so that the resilience of same are improved by conditioning.
          Nathan Y]\n  \n  [Note 2: The web is modelled after a simple neural net
          design I found in\n  Dr. Dobbs' Journal. Nathan Y]\n\n\nVerb binding: Attaching
          verbs to an object, such as 'fly' to a\n  jetpack.  The command essentially
          does not exist when you don't have\n  the jetpack.\n\n\nVirtual sociopath:
          a player who shows no empathy towards any other players\n  and therefore
          is a willing killer of them) but who is perfectly normal\n  in real life--someone
          whose disassociation from others only occurs in\n  an online setting, because
          of their lack of empathic connections to\n  other players. See \"psychological
          disinhibition.\" [RaphK]\n\n\nWorld state: a mud which saves world state
          is one in which there is\n  persistence not only of characters but also
          of objects other than\n  characters. Worlds which do not save world state
          (such as muds derived\n  from Dikus) only save character data and the world
          itself (other than its\n  static map) is not persistent over reboots. A
          snippet from my website:\n\n  --->\n  The \"middle layer\" referred to is
          the one of the three layers of\n  significance in a virtual world: that
          which is the static database, that\n  which is the play of data on said
          static database, and that which is the\n  dataset of players themselves.
          Depending on the method of state-saving of\n  the mud, they may save one,
          two, or all three of these things. As an\n  example, a classic Diku saves
          only the third layer: players. Ultima Online\n  saves both players and the
          environment. A typical MUSH saves players, the\n  environment, and also
          the actual map and setting which holds the\n  environment, since MUSHes
          allow dynamic alteration of the static data.\nSome\n  early muds did not
          save any of the three, and thus were not truly\n  \"persistent.\" \n  <---\n\n
          \ [RaphK]\n\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t7.
          Changes, To Do & Acknowledgements\n\n\n\n990613 -- Frequently Asked Questions:
          Brought up to date with current\naffairs.\n\n990514 -- Resources: New link
          to Imaginary Realities, a mud magazine.\n\n990417 -- General correction
          of Frequently Asked Questions.  However,\n\t  have not been able to get
          to kanga to verify new addresses.\n\n990321 -- Scenarios: Added two more
          scenarios, The Stamp Collector's Dilemma\n\t\t     by Dr. Cat and The Tailor
          Problem by Marian Griffith.\n\t  Glossary: Appended generic event-handling
          C source code to the\nterm\n\t\t    \"event\" courtesy of Adam Wiggins.\n\t\t
          \   Added new definition, \"mule\".\n\n990112 -- The Members: Whole section
          removed.  Look forward to an HTML\n\t  version to appear on kanga sometime
          soon (this weekend hopefully).\n\n981213 -- The Members: Updated Adam Wiggins'
          bio.  Subjectively stripped\n\t  the bios of members that haven't posted
          recently, includes:\n\t  John Bertogio; Reed Copsey, Jr; Marc Eyrignoux;
          David Love (aka\n\t  Sauron); Katrina McClelan; and Greg Munt.  Expect the
          whole\n\t  section to go in favour of an HTML version in the New Year\n\t
          \ integrating the thread titled \"Current Projects\".\n\n981110 -- Just
          found a long lost email for FAQ alterations.\n\t  FAQ: Changed MUD-Dev links
          from /index.html to /\n          The Members: Minor alterations to JCL's
          bio.\n\t  Resources: Link and brief for original ColdMUD added.\n\t\t     More
          links for Habitat added.\n\t\t     Displaced programmming links with those
          supplied by\nJCL.\n\n980907 -- Resources: All things ansi and telnet related
          added.\n\n980811 -- The Members: Matthew R. Sheahan's bio added.\n\t\t       Greg
          Underwood's bio amended.\n\t  Resources: Amit's Games Programming Page added.\n\t\t
          \    Whole bunch of programming references added.\n\t  Glossary: \"Fluidity
          of Identity\" added.\n\n980708 -- Snipped signatures from members' bios
          suggested by Alex Oren. :(\n\t  Minor typo and adjustments suggested by
          JCL.  Overdue addition\n\t  of MUDDex and Lydia Leong's MUD resource collection
          to Resources.\n\t  \"Faucet->Drain economy\" term for Glossary added.  Stole
          list\n\t  charter from homepage to act as a welcome message of sorts.\n\t
          \ Small reorganisation of sections 1,2,3.  Added Bartle's early\n\t  MUD
          history to web link in Resources.  The Bungle link in\nResources\n\t  disappeared,
          added back in, though different site.  Quietly\ndropped\n\t  Derrick Jones'
          bio (was empty).\n\n980506 -- Moved the changes list to a section in the
          back, only the most\n\t  changes since the last post appear here now.  Appended
          Holly\n\t  Sommer quote to \"realism\" glossary term.  Added \"functional\n\t
          \ roleplaying\" glossary term.  Updated Frequently Asked Questions.\n\t
          \ Added networking tutorial web link to Resources.  Added Bungle\n\t  web
          link to Resources.\n\n980428 -- New scenarios section,a couple more glossary
          terms and more\n\t  member's bios.\n\n980308 -- Mailing list invite.\n\n980301
          -- Even more addresses for the resource section.\n\n980201 -- More bios,
          more addresses for the resource section.\n\n980107 -- Added a few more questions.
          \ Previous topics now has its own\n\t  universe as suggested by Adam Wiggins.
          \ Plonked in a resources\n\t  section.  Took out standard technical terms
          as suggested by Adam\n\t  Wiggins.\n\n971201 -- FAQ created.\n\n\nTo Do:
          \ \n\n  Conventions of example scenarios (Bubba, Boffo, Buffy, etc)\n\n
          \ List of references for specific scenarios/docs (Habitat/Great God GooGoo,\n
          \ Crystalline Tree, recognising Sting in the weapons shop, etc).\n\n  Solutions
          for the scenarios?\n\n  Obtain addresses for the muds in the resource section.\n\n
          \ Statement of topic definition (cf welcome message).\n\n  Update previous
          topics section.\n\n\nAcknowledgments:\n\n  Everyone on the list who contributed
          with a bio, everyone on the\nlist who posts and special thanks to Jon A.
          Lambert, Adam Wiggins,\nNathan Yospe, Raph Koster and lastly but definitely
          not the least,\nJ C Lawrence.\n\n\n\nMore in Part I\n\n--\nYes - at last
          - You. I Choose you. Out of all the world,\nout of all the seeking, I have
          found you, young sister of\nmy heart! You are mine and I am yours - and
          never again\nwill there be loneliness ...\n\nRolan Choosing Talia,\nArrows
          of the Queen, by Mercedes Lackey\n\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Marian Griffith <gryphon@iaehv.nl>'
                name: From
                value: Marian Griffith <gryphon@iaehv.nl>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Sun, 16 Jan 2000 14:37:43 +0000 (GMT)'
                name: Date
                value: Sun, 16 Jan 2000 14:37:43 +0000 (GMT)
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] Mud-Dev FAQ part II'
                name: Subject
                value: "[MUD-Dev] Mud-Dev FAQ part II"
              mbox_from: 
            body: "                        Mud-Dev FAQ\n                          part
              II\n                        -----------\n\n\n\nLast modified:   20 September
              1999\n                 14 November  1999\n                 16 Januari
              \  2000\n\n 1. Introduction\n 2. Frequently Asked Questions\n 3. Previous
              Topics\n 4. Scenarios\n*5. Resources\n*6. Glossary\n*7. Changes, To
              Do & Acknowledgements\n\n(* chapters found in this part of the FAQ)\n\nA
              web based version of this FAQ can be found at:\n<URL:http://www.kanga.nu/FAQs/MUD-Dev-L/>\n\nPlease
              email any corrections, suggestions or constructive criticisms\nto Marian
              Griffith at gryphon@iaehv.nl\n\n\nRecent Changes:\n16-01-2000\n    Resouces:
              Added Asheron's Call, Everquest, Legends of Futures Past,\n              Terris,
              Treshold and Sojourn to the list of muds.\n              Changed the
              address of The Eternal City.\n              Added mudwords.com, mudconnector,
              mudlinks and gamecommandos\n              to the mud resources\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t\t5.
              Resources\n\n\n\nAnything notable and mud related that should be read/investigated.\n\n\n
              \ Mud-Dev site\n   <URL:http://www.kanga.nu/lists/listinfo/mud-dev/>\n
              \  <URL:http://www.kanga.nu/library.php3>\n   Especially the searchable
              archives and the library. There is a\n   much larger collection of design
              related web articles there than\n   can be included in this faq.\n\nWebpages:\n\n
              \ A Rape in Cyberspace\n    <URL:http://www.apocalypse.org/pub/u/lpb/muddex/vv.html>\n
              \   The infamous article by Julian Dibbell.\n\n  How it really happened...\n
              \   <URL:http://www.apocalypse.org/pub/u/lpb/muddex/bartle.txt>\n    Richard
              Bartle's early history of MUDs.\n\n  Imaginary Realities\n    <URL:http://imaginaryrealities.imaginary.com>\n
              \   Online mud orientated magazine.\n\n  Killers Have More Fun\n    <URL:http://www.wired.com/wired/6.05/ultima.html>\n
              \   An article by Amy Jo Kim.\n\n  Lucasfilm's Habitat\n    <URL:http://www.communities.com/company/papers/lessons.html>\n
              \   <URL:http://race-server.race.u-tokyo.ac.jp/RACE/TGM/Mud/habitat.html>\n
              \   <URL:http://www.communities.com/people/crock/habitat.html>\n    <URL:http://beta.communities.com/>\n
              \   Detailed documents about an ambitious graphical mud. [JCL]\n\n  Lydia
              Leong's MUD resource collection\n    <URL:http://www.godlike.com/muds/>\n
              \   [Raph K]\n\n  Marian Griffith's !Overlord project\n    <URL:http://www.iaehv.nl/users/gryphon>\n
              \   Full of information useful to mud designer/admins.\n\n  MUDDex\n
              \   <URL:http://www.apocalypse.org/pub/u/lpb/muddex/>\n    A collection
              of documents including Bartle's, Dibbell's mentioned\n    above. [Raph
              K]\n\n  Raph Koster's Website, Gaming Section\n    <URL:http://mud.sig.net/raph/gaming/>\n
              \   <URL:http://mud.sig.net/raph/gaming/links.html>\n    Lead designer
              on Ultima Online, plenty of snippets on muds, particularly\n    those
              pertaining UO itself.  Many of the above sites are index in the\n    links
              section.  Raph's Laws of Online World Design can also be found\n    here.\n\n\nMud
              Finders:\n  Mudwords\n    <URL:http://www.mudwords.com/>\n\n  Mudconnector\n
              \   <URL:http://www.mudconnector.com/>\n    I think this site took over
              when Doran's mudlist stopped due to an\n    overwhelming number of muds
              that made it impossible for a single\n    person to keep up.\n\n  Mudlinks\n
              \   <URL:http://www.mudlinks.com/>\n\n  Game commandos\n    <URL:http://www.gamecommandos.com>\n
              \   Mud connector and peering review of muds.\n\nMuds:\n\n  AlphaWorld:
              <URL:http://www.cs.cuc.edu/~sopwith/aw/>\n    Anyone care to comment?\n\n
              \ AmigaMUD: <URL:telnet://mud.myrias.com:23>\n    Chris Gray's custom
              mud.  Moving site. [Jun 1998]\n\n  Armageddon: <URL:telnet://ginka.armageddon.org:4050>\n
              \   To my knowledge the ONLY truly successful full-bore RP environment\n
              \   based on a Diku-style server with full combat and the like. Often\n
              \   cited as such at any rate. [Raph K]\n\n  Asheron's Call: <URL: telnet://??:??>\n
              \   If I recall correctly this is one of the first first-person graphical\n
              \   commercial muds.\n\n  Aturion Dynasty: <URL:http://aturion.com:4444>\n
              \   Almost all the muds done by Owen Emlen have interesting design \n
              \   features to them too. [Raph K]\n    [See also EmlenMud II]\n\n  Avalon:
              <URL:http://www.avalon-rpg.com>\n    Commercial text muds. Avalon has
              an interesting newbie tutorial\n    mode, and room description generation
              code that is nifty\n    too. [Raph K]\n\n  Cold: <URL:telnet://ice.cold.org:1138>\n
              \   A branch off the ColdMUD (below) using the Genesis driver, sometimes\n
              \   referred to as Cold/Genesis or ColdX/Genesis.\n\n  ColdMUD: <ftp://ftp.kanga.nu/pub/MUD/Servers/ColdMUD/>\n
              \   ColdMUD is for all intents and purposes dead.  Greg Hudson officially\n
              \   stopped development of it back in 1994, and I just 'branched' the\n
              \   ColdX/Genesis from it, rather than making an issue with people and\n
              \   continuing to call my development of it 'ColdMUD'. [Brandon Gillespie]\n\n
              \ CoolMUD: <URL:http://csclub.uwaterloo.ca/u/sfwhite/coolftp>\n    Incredibly
              elegant server design. [JCL]\n\n  Dark Sun Online: <URL:http://www.ssionline.com>\n
              \   Commercial graphical mud with turn-based combat in a real-time\n
              \   environment. [Raph K]\n\n  DartMUD: <URL:telnet://dartmud.com:2525>\n
              \   A very ambitious LP mud with lots of good ideas which never seemed\n
              \   to have gelled together correctly.  Plenty of bugs.  A sequel is\n
              \   being worked on.\n\n  DragonRealms (Gemstone): <URL:http://dragonrealms.net>\n
              \   Gemstone was and probably still is the most popular mud in the\n
              \   world, period. It evolved into DragonRealms. [Raph K]\n\n  Duris:
              <URL:telnet://duris.org:6666>\n    A pk mud with economy?! [Down? Jul
              1998]\n    Changed name to Duris: Land of Bloodlust, <URL:http://www.duris.org>\n\n
              \ Eternal City, The: <URL:http://www.eternal-city.com/>\n    Commercial
              mud using the Cold server.\n\n  EmlenMud II: <URL:http://degu.cs.indiana.edu:6669/em2.html>\n
              \   Looks like Owen Emlen is in the process of making a new mud.\n\n
              \ Everquest: <URL:telnet://??:??>\n    A commercial graphical mud\n\n
              \ Furcadia: <URL:http://www.realtime.net/furcadia/>\n    A commercial
              graphical mud by Dr. Cat.\n\n  LambdaMOO: <URL:http://vesta.physics.ucla.edu/~smolin/lambda/>\n
              \   One of the pages for this MOO.\n\n  LegendMUD: <URL:telnet://mud.aus.sig.net:9999>\n
              \   The first classless mud, strange diku/LP hybrid.  See Raph\n    Koster's
              bio.\n\n  Legends of Futures Past <URL:telnet://??:??>\n    An excellent
              commercial text based mud [Ilya]\n\n  Medievia: <URL:telnet://medievia.intersphere.com:4000>\n
              \   The most popular free gaming mud I know of. Pioneered the use of\n
              \   things like in-game spam ads for themselves and lack of due credit\n
              \   given for code (:P) but also has things like ASCII map terrain,\n
              \   large algorithmically generated areas, etc. [Raph K] \n\n  M59:
              <URL:http://www.3do/meridian>\n    Ask Mike S.\n\n  Mortal Conquest:
              <URL:telnet://199.74.98.37:9999>\n    That game I can't remember with
              the whities and the darkies. [JCL]\n    By Own Emlen. [Down, 1st March]\n\n
              \ MUD2: <URL:telnet://mud2.com:23>\n        <URL:http://www.mud2.com>\n
              \   A licensed copy run by Bartle.\n\n  MUQ: <URL:http://www5.biostr.washington.edu/~jsp/muq.html>\n\n
              \ Northern Lights:\n    <URL:http://www.ludd.luth.se/mud/aber/northern_lights.html>\n
              \   <URL:telnet://aber.ludd.luth.se:6715>\n\n  Realms, The: <URL:http://www.realmserver.com>\n
              \   Realms is a commercial graphical mud from Sierra.\n\n  Shades: <URL:telnet://games.world.co.uk:23>\n
              \   TODO - get Bartle's comment here.\n\n  Sojourn: <URL:telnet://toril.org:9999>
              <URL:http://www.torilmud.com>\n    Predecessor and sister game to Duris.
              A strongly PK oriented mud\n\n  Terris: <URL:telnet://??:??>\n    A
              text-based mud only accessible to AOL subscribers [Ilya]\n\n  Toril:
              <URL:telnet://torilmud.com:9999>\n    One of two offshoots of Sojourn
              (other being Duris).\n\n  Treshhold:\n    TODO: Ask Ilya about this
              one.\n\n  Trash: <URL:http://games.world.co.uk>\n    Somewhere in the
              webpage with Shades.  [Down, Sept 1998]\n\n  Tron: <URL:telnet://polaris.king.ac.uk:3000>\n
              \   An out and out pk mud, more of an arcade game using ASCII maps than\n
              \   a mud in the conventional sense.  Not one for the faint hearted.\n
              \   Should you want a game but can't find anyone, drop me a bell.\n
              \   Start learning with disc or spider.  Be prepared to break your\n
              \   keyboard. [Ling]\n\n  UOL: <URL:http://www.ultimaonline.com>\n    Ask
              Raph K.\n\n  VR1 Crossroads\n    TODO: Ask Ilya about this one\n\n  Worlds
              of Carnage: <URL:telnet//carnage.labs.emich.edu:4000>\n    The first
              Diku mud with an internal scripting language, called\n    \"easyacts.\"
              This code formed the basis of the MobProgs put into\n    Merc 2.2. LegendMUD
              is a spiritual offshoot of Carnage, and Cythera is\n    a literal offshoot.
              \ (Interestingly, Damion Schubert, a designer on\n    M59, was also
              a Carnage immort alum). Imperium Gothique's scripting\n    was derived
              from either mobprogs or Carnage, not sure which. Carnage\n    definitely
              had a lot of influence on the world of Dikudom. [Raph K]\n\n\nNotable
              muds yet to be found:\n\n  IOWA Project, The:\n    TODO - dig up references
              in Bartle's MUD survey, browse LambdaMOO\n           ftp site and MUDDev.\n\t
              \  Keywords: MirrorWorld, Gods, Pippin (\"Pip\") Caudry.\n\n  Island:\n
              \   Did this not die some time back?  [Thouhg Keegan may yet resurrect
              it]\n\n  MUD1:\n    Although MUD2 is up above.\n\n\nNot so mud related
              webpages.\n\n  ANSI and VT terminal codes in general:\n    <URL:http://www.cs.utk.edu/~shuford/terminal_index.html>\n\n
              \ And in case you wanted to know more about VT-### in particular:\n
              \   <URL:http://www.sdsu.edu/doc/texi/screen_10.html>\n    <URL:http://www.mhri.edu.au/~pdb/dataformats/vt100.html>\n\n
              \ Or ANSI terminals:\n    <URL:http://www.mhri.edu.au/~pdb/dataformats/ansi.html>\n\n
              \ AI Nodes/ANN:\n    <URL:http://206.107.246.21/packhste/5/>\n\n  Amit's
              Games Programming Page:\n    <URL:http://www-cs-students.stanford.edu/~amitp/gameprog.html>\n\n
              \ Anti-Mac interface:\n    <URL:http://www.acm.org/cacm/AUG96/antimac.htm>\n\n
              \ BSP trees:\n    <URL:http://reality.sgi.com/bspfaq/index.shtml>\n\n
              \ Image formats (esp PPM):\n    <URL:http://www.dcs.ed.ac.uk/~mxr/gfx/2d-lo.html>\n\n
              \ R-Trees:\n    <URL:http://www.cs.cuhk.hk/~drsam/methods.html>\n\n
              \ VR programming tutorial:\n    <URL:http://www.cs.virginia.edu/~rg3h/networkVR/paper.html>\n\n\nProgramming
              references to get the budding scratch mud coder started:\n\n  BSD Sockets:
              A Quick And Dirty Primer\n    <URL:http://world.std.com/~jimf/papers/sockets/sockets.html>\n\n
              \ With other relevant papers pointed to by:\n    <URL:http://www-users.cs.umn.edu/%7ebentlema/unix/>\n\n
              \ Vic Metcalfe's (vic@brutus.tlug.org) unix-socket FAQ can be found
              at\n    Text version:\n \n<URL:http://unlser1.unl.csi.cuny.edu/faqs/sock-faq/usenet/unix-socket-faq.us\nenet>\n
              \   <URL:http://www.ibrado.com/sock-faq/usenet/unix-socket-faq.usenet>\n
              \   HTML version:\n \n<URL:http://unlser1.unl.csi.cuny.edu/faqs/sock-faq/html/unix-socket-faq.html\n>\n
              \   <URL:http://www.ibrado.com/sock-faq/html/unix-socket-faq.html>\n\n
              \ There's a nice leader page for the FAQ with other related pointers
              at:\n \n<URL:http://unlser1.unl.csi.cuny.edu/faqs/sock-faq/html/unix-socket-faq-1.ht\nml>\n
              \   <URL:http://www.ibrado.com/sock-faq/>\n\n  The TCP/IP applications
              FAQ can be found at (of course):\n \n<URL:http://www.faqs.org/faqs/internet/tcp-ip/applications-FAQ/index.html>\n\n
              \ The TCP/IP FAQ from comp.protocols.tcp-ip (probably also on news.answers\n
              \ etc) can be found at:\n    <URL:http://www.dc.net/ilazar/tcpipfaq/default.htm>\n\n
              \ The raw IP networking FAQ (most interesting to those of use doing\n
              \ custom clients or server inter-connects) can be found at:\n    <URL:http://www.whitefang.com/rin/>\n\n
              \ The TCP/IP resources list has all sorts of useful pointers:\n    <URL:http://www.faqs.org/faqs/internet/tcp-ip/resource-list/index.html>\n\n
              \ Including the various BSD socket programming tutorials:\n    <URL:http://ftp.std.com/homepages/jimf/sockets.html>\n
              \   <URL:http://ccnga.uwaterloo.ca/~mvlioy/stuff/ipc_intro_tut.txt>\n
              \   <URL:http://ccnga.uwaterloo.ca/~mvlioy/stuff/ipc_adv_tut.txt >\n\n
              \ The Unix Refence desk is another good reference:\n    <URL:http://www.geek-girl.com/unix.html>\n\n
              \ As is Unix Guru Universe:\n    <URL:http://www.ugu.com/>\n\n  And
              of course, W R Steven's page:\n    <URL:http://www.kohala.com/~rstevens/>\n\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t
              \ 6. Glossary of Terms\n\n\n\nThe list has managed to come up with its
              own jargon.  Here are some of\nthe current buzzwords:\n\n\nCooperative
              role-playing: Refers to a specific kind of RP where each\n  player's
              personal 'storyline' is paramount.  All players are aware\n  of, and
              sensitive to, the needs of each player for their story, and\n  all actions
              are completely consensual.  This is a type of play often\n  found on
              MUSHes.\n\n\nEvent: A system design alternative to polling loops.  Objects
              generate\n  events, which are processed in their proper order by the
              event\n  handler.  This is frequently clearer and far more efficient,\n
              \ especially with large numbers of objects.  Examples are a torch\n
              \ generating an event to burn out in two hours, or a spell generating\n
              \ an event for an earthquake to occur in four seconds.\n\n  The following
              is a compilable example of generic event-handling code in\n  C courtesy
              of Adam Wiggins.\n\n---<begin code>---\n\n#include <stdio.h>\n\ntypedef
              float Tick;\t\t\t/* Time counter type */\n\n/* Defines for event types
              */\n#define EVENT_ALPHA\t\t0\n#define EVENT_BETA\t\t1\n#define EVENT_GAMMA\t\t2\n\n#define
              NUM_EVENTS\t\t(EVENT_GAMMA + 1)\n\n/* The event structure itself */\ntypedef
              struct SEvent\n{\n\tint Type;\t\t\t\t/* EVENT_x */\n\tTick RipenTime;\t\t\t/*
              time at which event ripens */\n\tvoid *Data;\t\t\t\t/* any extra data
              to be\npassed to the callback function */\n\tstruct SEvent *Next;\n}
              Event;\n\n/* Defininiton for the callback function type */\ntypedef
              void (*EventCallback)(void *);\n#define EVENT(x)\tvoid (x)(void *)\n\n/*
              Event function prototypes - these should be defined somewhere else,
              like\nso:\n\n   EVENT(EventAlpha)\n   {\n      code to execute on event
              completion;\n   }\n*/\nEVENT(EventAlpha);\nEVENT(EventBeta);\nEVENT(EventGamma);\n\n/*
              Master list of event callbacks, by type */\nEventCallback EventCallBacks[NUM_EVENTS]
              =\n{ EventAlpha, EventBeta, EventGamma };\n\nEvent *EventList = NULL;\t\t/*
              Master event list */\nTick GameTick = 0;\t\t\t\t/* Current game time
              */\n\n/* Call this to add an event \"time\" ticks into the future */\nvoid
              AddEvent(int type, Tick time, void *data)\n{\n\tEvent *newEvent, *e,
              *prev;\n\n\t/* Sanity checking */\n\tif (time <= 0)\n\t\treturn;\n\n\t/*
              Create the event */\n\tnewEvent = (Event *)malloc(sizeof(Event));\n\tnewEvent->Type
              = type;\n\tnewEvent->RipenTime = GameTick + time;\n\tnewEvent->Data
              = data;\n\n\t/* Descend the list until a later event is found */\n\tfor
              (e = EventList; e && e->RipenTime < newEvent->RipenTime; e =\ne->Next)\n\t\tprev
              = e;\n\n\t// Insert the new event before that event\n\tnewEvent->Next
              = e;\n\tif (prev)\n\t\tprev->Next = newEvent;\n\telse\n\t\tEventList
              = newEvent;\n}\n\n/* Call the function below during your update loop
              */\n/* The parameter is how many game ticks have passed since the last
              update */\nvoid EventUpdate(Tick ticks)\n{\n\tEvent *e, *next;\n\tint
              update = 0;\n\n\tGameTick += ticks;\n\n\t/* Execute each event that
              is due to ripen */\n\tfor (e = EventList; e && e->RipenTime <= GameTick;
              e = e->Next)\n\t{\n\t\t(*EventCallBacks[e->Type])(e->Data);\n\t\tupdate
              = 1;\n\t}\n\n\t/* Second pass, delete all ripened events */\n\t/* This
              part is done in a seperate pass in case one of the event\ncallbacks\n\t
              \  adds a new event, to avoid munging up the event linked list */\n\tif
              (update)\n\t{\n\t\tfor (e = EventList; e && e->RipenTime <= GameTick;
              e = next)\n\t\t{\n\t\t\tnext = e->Next;\n\t\t\tfree(e);\n\t\t}\n\n\t\tEventList
              = e;\n\t}\n}\n\n---<end code>---\n\n\nFaucet->Drain economy: A virtual
              economic system wherein there is an\n  ongoing influx of new items into
              the game (usually via a reset model)\n  and a hopefully corresponding
              outflow, usually accomplished through\n  object attrition involving
              equipment damage, rent fees, etc. It is worth\n  noting that traditionally,
              designers have been unable to easily come up\n  with a big enough drain
              to handle all the 'water.' This is as opposed to\n  a \"Closed economy\"
              in which an attempt is made to close the loop,\n  creating new objects
              only when old ones are used up. [Raph K]\n\n\nFixed random seeding:
              Using a fixed value (such as a character's\n  unique ID, or the character's
              position in XYZ space) to seed the\n  random number generator, assuring
              that the same random number will\n  always be rolled if the circumstances
              are exactly the same, but\n  requiring no storage.  This allows parts
              of the world or its\n  behaviour to be dynamically generated from the
              seed value as\n  needed, and yet to have each \"new copy\" be the same
              as all the\n  others because the seed value hasn't changed.\n\n\nFluidity
              of Identity: Referring to the difficulty of positively identifying\n
              \ a single person who takes many guises in a game world.  Any particular\n
              \ action against one of those guises is fairly ineffective; they choose\n
              \ another and continue.  This makes it very difficult to pin down\n
              \ trouble makers.  ATtempts at identifying people based on their hostname\n
              \ (site deny/allow), e-mail address (email registration), credit card
              number\n  (for commercial ventures), or just asking really, really nicely
              are all\n  easily circumvented, especially when it is easy to create
              new characters\nor\n  accounts (that is, the process is short and automated).
              \ This frequently\n  makes it difficult to implement 'real world' solutions
              to in-game problems\n  such as psychotic killing sprees.  Once you catch
              someone and lock them\naway\n  or put them to death in RL, they are
              gone.  When you do this on most muds,\n  they just log on two seconds
              later with another character.\n\n\nFull world reset, aka \"groundhog
              day\" muds: Muds wherein resets occur\n  globally, simultaneously (sf
              reset and repop). [RaphK]\n\n\nFunctional roleplaying: A kind of gaming,
              whilst GoP motivated, is heavily\n  tailored to the in-game reality.
              \ There's no thee's or thou's, or even\n  pretension of IC/OOC separation,
              but an awful lot of attention is spent\n  by the player in working his
              character thru the game realities rules as\n  it controls and affects
              his character.  Examples would include\n  negotiation of reputation
              and influence systems, votes, political systems,\n  clans and guilds
              and other similar structures, etc.  Appearance is not\n  the key.  Function
              is. [JCL]\n\n\nGlobal namespace: Referring to the fact that most muds
              rely on characters\n  (and sometimes other objects) are given a single
              and unique name.\n  Typing 'who' on most muds gives you a list of these;
              if you see\n  someone named Bob you know that he is the only Bob in
              the world, and\n  can't be confused with anyone else.  This is as compared
              to a system\n  of generated descriptions to which players can attach
              proper names\n  as they please, which may or may not overlap or match
              up with the\n  names assigned by other players.\n\n\nGoP: Short for
              'game-oriented play' or possible 'goal-oriented play'.\n  This is usually
              a competitive style of play usually oriented around\n  the accumulation
              of various resources (money, power, combat ability).\n\n\nLevels: For
              the purpose of keeping discussions generic, this term may be\n  used
              as an abstract measurement of a character's ability, skill or\n  expertise
              whether the game system is level-based or skill-based.\n  Eg: \"If a
              low level character tries XXX a high level character...\"\n  The precise
              details are not of interest as opposed to the impact and\n  result of
              the undefined imbalance.\n\n\nLockless server or DB:\n\n  Events request
              objects from the DB.\n\n  If the object is not in the cache, the DB
              loads the object.\n\n  The DB replies to the event with a read-only
              shared reference to the\n    object.\n    \n  The event is added to
              the \"interested parties\" list for the object.\n\n  If the event attempts
              to modify the object, a new local, event-specific\n    copy of the object
              is made, and the changes are made to that.  A copy\n    of the original
              reference however is still kept.\n\n  The event (loosely) attempts to
              keep track of what members of the\n    object it referenced.\n\n  During
              the execution of an event. all external IO is buffered and held.\n\n
              \ Upon the event terminating it compares its copy of the original object\n
              \   (the local reference) with the object that's actually in the DB
              (may\n    have been changed by events committing during the current
              event's\n    execution).  Some intelligence is attempted here to only
              compare those\n    values etc which were referenced by the event.\n\n
              \ Should the original copy and the current-in-DB copy compare OK, then\n
              \   the event commits, the IO is released, and all its changes in its\n
              \   written-to copies are committed atomically.  This is the\n    Compare&Commit,
              or C&C.\n\n  If the C&C fails, the event is thrown away, all the copies
              are released,\n    the IO is discarded, and the event is rescheduled
              to try again.\n\n  There is also some background intelligence here where
              the DB watches\n    the objects that are affected by event's C&C'ing,
              and will signal the\n    other events that are members of those object's
              interested party list\n    that they may be invalidated by the other
              event's C&C and so should\n    kill themselves and reschedule.\n    \n
              \                                 ref: DEMOS and the DOME project (JCL)\n\n\nMarkup
              language: An internal set of codes used by a server to generate\n  semi-dynamic
              messages.  An example is \"%c dives %I %o\" which might result\n  in
              \"Bubba dives behind the wall\", \"A woman dives into the pool\", or\n
              \ any number of other strings.\n\n\nmud or MUD: It is not an acronym.
              \ It is a collective term for all the\n  types of games discussed on
              this list, including both RP and GoP.\n  [NB: Another description may
              be found at the list's homepage\n       <URL:http://www.kanga.nu/lists/listinfo/mud-dev/>
              ]\n\n\nMule: Character created on goal-orientated muds those sole purpose
              is to\n  supplement a player's primary character by supplying services
              such as\n  equipment repair.  Mules usually have skills that cannot
              be obtained\n  without creating a new character but are perceived to
              be undesirable to\n  play.  For example, an alchemist class could be
              considered unenjoyable\n  to play but due to their special ability to
              repair equipment, the regular\n  players create mule alchemists just
              to access that ability.\n\n\nObject: Because most of the servers discussed
              here are\n  object-oriented, the word object is being used in its general\n
              \ programming sense to include characters, locations, inanimate items,\n
              \ and so forth, rather than referring to only inanimate items as is\n
              \ typical in some mud servers.\n\n\nPK, player-killing: The intentional
              killing of a player character by\n  another player, with or without
              the first player's prior knowledge,\n  agreement, or consent. [JCL]\n\n\nPsychological
              disinhibition: The term for when people act less inhibited\n  than normally
              because of circumstance. All behaviours online tend to become\n  less
              inhibited, and the greater the absence of identity cues for the\npeople\n
              \ you are interacting with, the less inhibited the behaviours tend to
              get.\n  [RaphK]\n\n\nRealism: This is not necessarily correspondance
              to the real world, but\n  rather refers to internal consistency.  In
              many cases using the\n  working of real world systems (physics, for
              example) is a good\n  example for how to build a consistent system for
              a game world.\n  To quote:\n\n  \"This is, of course, partially my invention,
              to suit the gaming world\n   we are working on, and is not intended
              to mirror Real Life - just to\n   borrow enough bits and pieces from
              it, so that it is recognized as\n   somewhat structured (rather than
              totally whimsical) to the player.\"\n\t\t\t\t\t\t\t- Holly Sommer\n\n\nRepop:
              See Reset.\n\n\nReset: Usually a function called in a mud at irregular
              intervals, the\n  purpose of which is to put back the game, or some
              fragment of the\n  game or game world into a known state.  Typically
              this might mean\n  locking an opened door, or resurrecting an NPC that
              was killed by a\n  player and putting him back to guard the door,  Resets
              and repops\n  are common on games that promote repetitive actions for
              advancement.\n\n\nSkill net: A single layered skill web. Skills are
              directly weighted to\n  each other.  See skill web (NY)\n\n\nSkill tree:
              A skill system where skills have a single parent and\n  several children.
              \ A skills at the bottom of the tree being very\n  specialised.  Skills
              higher up the tree will affect the value of\n  skills further down.\n\n\nSkill
              web: a non-hierarchical two layered skill system wherein each\n  skill
              is weight-related to an arbitrary number of attributes, and\n  the improvement
              of skills therefore automatically improves related\n  skills. Examples
              of skills might be rowing and flycasting, examples\n  of attributes,
              strength (upper arm) and precision (forearm).\n  \n  [Note: I triple
              weight my skill web, so that there are direct\n  connections to the
              condition of the character's body and mind, and\n  so that the resilience
              of same are improved by conditioning. Nathan Y]\n  \n  [Note 2: The
              web is modelled after a simple neural net design I found in\n  Dr. Dobbs'
              Journal. Nathan Y]\n\n\nVerb binding: Attaching verbs to an object,
              such as 'fly' to a\n  jetpack.  The command essentially does not exist
              when you don't have\n  the jetpack.\n\n\nVirtual sociopath: a player
              who shows no empathy towards any other players\n  and therefore is a
              willing killer of them) but who is perfectly normal\n  in real life--someone
              whose disassociation from others only occurs in\n  an online setting,
              because of their lack of empathic connections to\n  other players. See
              \"psychological disinhibition.\" [RaphK]\n\n\nWorld state: a mud which
              saves world state is one in which there is\n  persistence not only of
              characters but also of objects other than\n  characters. Worlds which
              do not save world state (such as muds derived\n  from Dikus) only save
              character data and the world itself (other than its\n  static map) is
              not persistent over reboots. A snippet from my website:\n\n  --->\n
              \ The \"middle layer\" referred to is the one of the three layers of\n
              \ significance in a virtual world: that which is the static database,
              that\n  which is the play of data on said static database, and that
              which is the\n  dataset of players themselves. Depending on the method
              of state-saving of\n  the mud, they may save one, two, or all three
              of these things. As an\n  example, a classic Diku saves only the third
              layer: players. Ultima Online\n  saves both players and the environment.
              A typical MUSH saves players, the\n  environment, and also the actual
              map and setting which holds the\n  environment, since MUSHes allow dynamic
              alteration of the static data.\nSome\n  early muds did not save any
              of the three, and thus were not truly\n  \"persistent.\" \n  <---\n\n
              \ [RaphK]\n\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t7.
              Changes, To Do & Acknowledgements\n\n\n\n990613 -- Frequently Asked
              Questions: Brought up to date with current\naffairs.\n\n990514 -- Resources:
              New link to Imaginary Realities, a mud magazine.\n\n990417 -- General
              correction of Frequently Asked Questions.  However,\n\t  have not been
              able to get to kanga to verify new addresses.\n\n990321 -- Scenarios:
              Added two more scenarios, The Stamp Collector's Dilemma\n\t\t     by
              Dr. Cat and The Tailor Problem by Marian Griffith.\n\t  Glossary: Appended
              generic event-handling C source code to the\nterm\n\t\t    \"event\"
              courtesy of Adam Wiggins.\n\t\t    Added new definition, \"mule\".\n\n990112
              -- The Members: Whole section removed.  Look forward to an HTML\n\t
              \ version to appear on kanga sometime soon (this weekend hopefully).\n\n981213
              -- The Members: Updated Adam Wiggins' bio.  Subjectively stripped\n\t
              \ the bios of members that haven't posted recently, includes:\n\t  John
              Bertogio; Reed Copsey, Jr; Marc Eyrignoux; David Love (aka\n\t  Sauron);
              Katrina McClelan; and Greg Munt.  Expect the whole\n\t  section to go
              in favour of an HTML version in the New Year\n\t  integrating the thread
              titled \"Current Projects\".\n\n981110 -- Just found a long lost email
              for FAQ alterations.\n\t  FAQ: Changed MUD-Dev links from /index.html
              to /\n          The Members: Minor alterations to JCL's bio.\n\t  Resources:
              Link and brief for original ColdMUD added.\n\t\t     More links for
              Habitat added.\n\t\t     Displaced programmming links with those supplied
              by\nJCL.\n\n980907 -- Resources: All things ansi and telnet related
              added.\n\n980811 -- The Members: Matthew R. Sheahan's bio added.\n\t\t
              \      Greg Underwood's bio amended.\n\t  Resources: Amit's Games Programming
              Page added.\n\t\t     Whole bunch of programming references added.\n\t
              \ Glossary: \"Fluidity of Identity\" added.\n\n980708 -- Snipped signatures
              from members' bios suggested by Alex Oren. :(\n\t  Minor typo and adjustments
              suggested by JCL.  Overdue addition\n\t  of MUDDex and Lydia Leong's
              MUD resource collection to Resources.\n\t  \"Faucet->Drain economy\"
              term for Glossary added.  Stole list\n\t  charter from homepage to act
              as a welcome message of sorts.\n\t  Small reorganisation of sections
              1,2,3.  Added Bartle's early\n\t  MUD history to web link in Resources.
              \ The Bungle link in\nResources\n\t  disappeared, added back in, though
              different site.  Quietly\ndropped\n\t  Derrick Jones' bio (was empty).\n\n980506
              -- Moved the changes list to a section in the back, only the most\n\t
              \ changes since the last post appear here now.  Appended Holly\n\t  Sommer
              quote to \"realism\" glossary term.  Added \"functional\n\t  roleplaying\"
              glossary term.  Updated Frequently Asked Questions.\n\t  Added networking
              tutorial web link to Resources.  Added Bungle\n\t  web link to Resources.\n\n980428
              -- New scenarios section,a couple more glossary terms and more\n\t  member's
              bios.\n\n980308 -- Mailing list invite.\n\n980301 -- Even more addresses
              for the resource section.\n\n980201 -- More bios, more addresses for
              the resource section.\n\n980107 -- Added a few more questions.  Previous
              topics now has its own\n\t  universe as suggested by Adam Wiggins.  Plonked
              in a resources\n\t  section.  Took out standard technical terms as suggested
              by Adam\n\t  Wiggins.\n\n971201 -- FAQ created.\n\n\nTo Do:  \n\n  Conventions
              of example scenarios (Bubba, Boffo, Buffy, etc)\n\n  List of references
              for specific scenarios/docs (Habitat/Great God GooGoo,\n  Crystalline
              Tree, recognising Sting in the weapons shop, etc).\n\n  Solutions for
              the scenarios?\n\n  Obtain addresses for the muds in the resource section.\n\n
              \ Statement of topic definition (cf welcome message).\n\n  Update previous
              topics section.\n\n\nAcknowledgments:\n\n  Everyone on the list who
              contributed with a bio, everyone on the\nlist who posts and special
              thanks to Jon A. Lambert, Adam Wiggins,\nNathan Yospe, Raph Koster and
              lastly but definitely not the least,\nJ C Lawrence.\n\n\n\nMore in Part
              I\n\n--\nYes - at last - You. I Choose you. Out of all the world,\nout
              of all the seeking, I have found you, young sister of\nmy heart! You
              are mine and I am yours - and never again\nwill there be loneliness
              ...\n\nRolan Choosing Talia,\nArrows of the Queen, by Mercedes Lackey\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] Mud-Dev FAQ part II"
        from: Marian Griffith <gryphon@iaehv.nl>
        references: []
        date: 2000-01-16 14:37:43.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00bj5f1s
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *408
    parent: 
    children: []
  *181: *183
  *346: *409
  *201: *410
  *242: *411
  ? &412 !ruby/object:MessageId
    raw: 000Dnsno@generated-message-id.chibrary.org
  : &419 !ruby/object:MessageContainer
    key: *412
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: \"Jon A. Lambert\" <jlsysinc@ix.netcom.com>\nDate: Mon, 17 Jan
          2000 16:37:36 -0500\nSubject: Re: [MUD-Dev] Databases (was Re: Commercial-use
          Restrictions on Code Bases)\n\nJon A. Lambert wrote:\n>as Alexander Popeil
          stated, \"large grain transactions\".  \n\n\nSorry, I've have misquoted
          him.  I have no idea where I got the \nabove.     \nHe actually said they
          were \"optimized for relatively few large transactions.\" \n\n--\n--*     Jon
          A. Lambert - TychoMUD Email: jlsysinc@nospam.ix.netcom.com     *--\n--*
          \    Mud Server Developer's Page <http://jlsysinc.home.netcom.com>      *--\n--*
          \"No Free man shall ever be debarred the use of arms.\" Thomas Jefferson
          *--\n\n\n\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: "Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                name: From
                value: '"Jon A. Lambert" <jlsysinc@ix.netcom.com>'
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Mon, 17 Jan 2000 16:37:36 -0500'
                name: Date
                value: Mon, 17 Jan 2000 16:37:36 -0500
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: Re: [MUD-Dev] Databases (was Re: Commercial-use Restrictions
                  on Code Bases)'
                name: Subject
                value: 'Re: [MUD-Dev] Databases (was Re: Commercial-use Restrictions
                  on Code Bases)'
              mbox_from: 
            body: "Jon A. Lambert wrote:\n>as Alexander Popeil stated, \"large grain
              transactions\".  \n\n\nSorry, I've have misquoted him.  I have no idea
              where I got the \nabove.     \nHe actually said they were \"optimized
              for relatively few large transactions.\" \n\n--\n--*     Jon A. Lambert
              - TychoMUD Email: jlsysinc@nospam.ix.netcom.com     *--\n--*     Mud
              Server Developer's Page <http://jlsysinc.home.netcom.com>      *--\n--*
              \"No Free man shall ever be debarred the use of arms.\" Thomas Jefferson
              *--\n\n\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'Re: [MUD-Dev] Databases (was Re: Commercial-use Restrictions
            on Code Bases)'
        from: Jon A. Lambert <jlsysinc@ix.netcom.com>
        references: []
        date: 2000-01-17 21:37:36.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 000Dnsno
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *412
    parent: &418 !ruby/object:MessageContainer
      key: &413 !ruby/object:MessageId
        raw: 00bj7qM4@generated-message-id.chibrary.org
      value: !ruby/object:Message
        email: !ruby/object:Email
          raw: "From: \"Jon A. Lambert\" <jlsysinc@ix.netcom.com>\nDate: Mon, 17 Jan
            2000 05:17:20 -0500\nSubject: Re: [MUD-Dev] Databases (was Re: Commercial-use
            Restrictions on Code Bases)\n\nCharles Hughes wrote:\n>\n>At the risk
            of being slapped by a mackerel, who here really thinks they\n>can do a
            better database design than those afforded by the likes of the\n>free
            or commercial databases?  [I'll ask those here who've actually\n>worked
            on these databases not to chime in. :)]\n>\n>It seems to me that segregating
            the database issues and then simply using\n>a database is far better than
            creating a new one.  This would change\n>the \"databases/memory management\"
            division above into two divisions -\n>database usage, memory management.\n>\n>Yes?
            No?\n\n\nIt depends on what you mean by \"database\".   If you mean relational
            \ndatabases  (RDBMSs), then yes we can and do a lot better in terms of\nperformance
            in implementing our own mud databases.    RDMSs work \nbetter with batch-access
            patterns or operations on \"sets\" of data, or \nas Alexander Popeil stated,
            \"large grain transactions\".  \nFor instance many existing muds' database
            access patterns are already \noptimized for the constructs:\n  \n    select
            * from MUD_DB where id = \"#162\";\n    update MUD_DB set name = \"troll\"
            where id = \"#162\";\n    insert object_data into MUD_DB;\n\nand will
            almost always outperform an RDMS (barring some really\nshoddy construction).
            \ \n\nOn the other hand set operations like,  \n    select * from MUD_DB
            where type = \"sword\";\n    update MUD_DB set damage = \"2d6\" \n             where
            type = \"sword\" and material = \"steel\";\n    \nwill be done very well
            in an RDMS.  However set operations like this\nare not often done in existing
            mud designs.  \n\nI agree generally with your comments about partitioning
            a server.   \nHowever, I view database and memory management as a single
            \nsub-system, rather than making an arbitrary distinction between where\nthe
            data or objects reside. I suppose it depends on how one chooses\nto implement
            persistence. \n\n--\n--*     Jon A. Lambert - TychoMUD Email: jlsysinc@nospam.ix.netcom.com
            \    *--\n--*     Mud Server Developer's Page <http://jlsysinc.home.netcom.com>
            \     *--\n--* \"No Free man shall ever be debarred the use of arms.\"
            Thomas Jefferson *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
            maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
          header: !ruby/object:Headers
            rmail: !ruby/object:RMail::Message
              header: !ruby/object:RMail::Header
                fields:
                - !ruby/object:RMail::Header::Field
                  raw: 'From: "Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                  name: From
                  value: '"Jon A. Lambert" <jlsysinc@ix.netcom.com>'
                - !ruby/object:RMail::Header::Field
                  raw: 'Date: Mon, 17 Jan 2000 05:17:20 -0500'
                  name: Date
                  value: Mon, 17 Jan 2000 05:17:20 -0500
                - !ruby/object:RMail::Header::Field
                  raw: 'Subject: Re: [MUD-Dev] Databases (was Re: Commercial-use Restrictions
                    on Code Bases)'
                  name: Subject
                  value: 'Re: [MUD-Dev] Databases (was Re: Commercial-use Restrictions
                    on Code Bases)'
                mbox_from: 
              body: "Charles Hughes wrote:\n>\n>At the risk of being slapped by a
                mackerel, who here really thinks they\n>can do a better database design
                than those afforded by the likes of the\n>free or commercial databases?
                \ [I'll ask those here who've actually\n>worked on these databases
                not to chime in. :)]\n>\n>It seems to me that segregating the database
                issues and then simply using\n>a database is far better than creating
                a new one.  This would change\n>the \"databases/memory management\"
                division above into two divisions -\n>database usage, memory management.\n>\n>Yes?
                No?\n\n\nIt depends on what you mean by \"database\".   If you mean
                relational \ndatabases  (RDBMSs), then yes we can and do a lot better
                in terms of\nperformance in implementing our own mud databases.    RDMSs
                work \nbetter with batch-access patterns or operations on \"sets\"
                of data, or \nas Alexander Popeil stated, \"large grain transactions\".
                \ \nFor instance many existing muds' database access patterns are
                already \noptimized for the constructs:\n  \n    select * from MUD_DB
                where id = \"#162\";\n    update MUD_DB set name = \"troll\" where
                id = \"#162\";\n    insert object_data into MUD_DB;\n\nand will almost
                always outperform an RDMS (barring some really\nshoddy construction).
                \ \n\nOn the other hand set operations like,  \n    select * from
                MUD_DB where type = \"sword\";\n    update MUD_DB set damage = \"2d6\"
                \n             where type = \"sword\" and material = \"steel\";\n
                \   \nwill be done very well in an RDMS.  However set operations like
                this\nare not often done in existing mud designs.  \n\nI agree generally
                with your comments about partitioning a server.   \nHowever, I view
                database and memory management as a single \nsub-system, rather than
                making an arbitrary distinction between where\nthe data or objects
                reside. I suppose it depends on how one chooses\nto implement persistence.
                \n\n--\n--*     Jon A. Lambert - TychoMUD Email: jlsysinc@nospam.ix.netcom.com
                \    *--\n--*     Mud Server Developer's Page <http://jlsysinc.home.netcom.com>
                \     *--\n--* \"No Free man shall ever be debarred the use of arms.\"
                Thomas Jefferson *--\n\n\n\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              epilogue: 
              preamble: 
          message_id: !ruby/object:MessageId
            raw: "[invalid or missing message id]"
          subject: !ruby/object:Subject
            original: 'Re: [MUD-Dev] Databases (was Re: Commercial-use Restrictions
              on Code Bases)'
          from: Jon A. Lambert <jlsysinc@ix.netcom.com>
          references: []
          date: 2000-01-17 10:17:20.000000000 Z
          no_archive: false
        call_number: !ruby/object:CallNumber
          str: 00bj7qM4
        source: archive
        list: !ruby/object:List
          slug: mud-dev
          name: 
          description: 
          homepage: 
          footer: 
        message_id: *413
      parent: &416 !ruby/object:MessageContainer
        key: &414 !ruby/object:MessageId
          raw: 00uTmqDA@generated-message-id.chibrary.org
        value: !ruby/object:Message
          email: !ruby/object:Email
            raw: "From: Charles Hughes <charles.hughes@bigfoot.com>\nDate: Sat, 15
              Jan 2000 17:06:02 -0500\nSubject: [MUD-Dev] Databases (was Re: Commercial-use
              Restrictions on Code Bases)\n\nOn Friday, January 14, 2000 11:29 PM,
              J C Lawrence [SMTP:claw@kanga.nu] \nwrote:\n> Assuming the code actually
              works, there is a gang of people here at\n> Cambridge threatening to
              write all the other bits. The division we see\n> is roughly: socket
              code, database/memory management, parser, game\n> mechanics.\n> I expect
              the game mechanics stuff not to be under the LGPL, unlike the\n> other
              bits. What's more important than the bits themselves is the\n> interface
              between them. In particular, I think the best approach would be\n> to
              see what can be taken OUT of a mud (socket stuff, database management)\n>
              and separating that, rather than imposing some a priori design structure\n>
              on the whole thing and then finding that it doesn't work (e.g., the
              way\n> someone might want to implement an internal MUD language might
              cut\n> across both parser and game mechanics...))\n\nAt the risk of
              being slapped by a mackerel, who here really thinks they\ncan do a better
              database design than those afforded by the likes of the\nfree or commercial
              databases?  [I'll ask those here who've actually\nworked on these databases
              not to chime in. :)]\n\nIt seems to me that segregating the database
              issues and then simply using\na database is far better than creating
              a new one.  This would change\nthe \"databases/memory management\" division
              above into two divisions -\ndatabase usage, memory management.\n\nYes?
              No?\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            header: !ruby/object:Headers
              rmail: !ruby/object:RMail::Message
                header: !ruby/object:RMail::Header
                  fields:
                  - !ruby/object:RMail::Header::Field
                    raw: 'From: Charles Hughes <charles.hughes@bigfoot.com>'
                    name: From
                    value: Charles Hughes <charles.hughes@bigfoot.com>
                  - !ruby/object:RMail::Header::Field
                    raw: 'Date: Sat, 15 Jan 2000 17:06:02 -0500'
                    name: Date
                    value: Sat, 15 Jan 2000 17:06:02 -0500
                  - !ruby/object:RMail::Header::Field
                    raw: 'Subject: [MUD-Dev] Databases (was Re: Commercial-use Restrictions
                      on Code Bases)'
                    name: Subject
                    value: "[MUD-Dev] Databases (was Re: Commercial-use Restrictions
                      on Code Bases)"
                  mbox_from: 
                body: "On Friday, January 14, 2000 11:29 PM, J C Lawrence [SMTP:claw@kanga.nu]
                  \nwrote:\n> Assuming the code actually works, there is a gang of
                  people here at\n> Cambridge threatening to write all the other bits.
                  The division we see\n> is roughly: socket code, database/memory
                  management, parser, game\n> mechanics.\n> I expect the game mechanics
                  stuff not to be under the LGPL, unlike the\n> other bits. What's
                  more important than the bits themselves is the\n> interface between
                  them. In particular, I think the best approach would be\n> to see
                  what can be taken OUT of a mud (socket stuff, database management)\n>
                  and separating that, rather than imposing some a priori design structure\n>
                  on the whole thing and then finding that it doesn't work (e.g.,
                  the way\n> someone might want to implement an internal MUD language
                  might cut\n> across both parser and game mechanics...))\n\nAt the
                  risk of being slapped by a mackerel, who here really thinks they\ncan
                  do a better database design than those afforded by the likes of
                  the\nfree or commercial databases?  [I'll ask those here who've
                  actually\nworked on these databases not to chime in. :)]\n\nIt seems
                  to me that segregating the database issues and then simply using\na
                  database is far better than creating a new one.  This would change\nthe
                  \"databases/memory management\" division above into two divisions
                  -\ndatabase usage, memory management.\n\nYes? No?\n\n\n\n\n_______________________________________________\nMUD-Dev
                  maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                epilogue: 
                preamble: 
            message_id: !ruby/object:MessageId
              raw: "[invalid or missing message id]"
            subject: !ruby/object:Subject
              original: "[MUD-Dev] Databases (was Re: Commercial-use Restrictions
                on Code Bases)"
            from: Charles Hughes <charles.hughes@bigfoot.com>
            references: []
            date: 2000-01-15 22:06:02.000000000 Z
            no_archive: false
          call_number: !ruby/object:CallNumber
            str: 00uTmqDA
          source: archive
          list: !ruby/object:List
            slug: mud-dev
            name: 
            description: 
            homepage: 
            footer: 
          message_id: *414
        parent: 
        children:
        - &420 !ruby/object:MessageContainer
          key: &415 !ruby/object:MessageId
            raw: 000DlgQK@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Sun, 30 Jan 2000 13:21:42
                -0800\nSubject: Re: [MUD-Dev] Databases (was Re: Commercial-use Restrictions
                on Code Bases)\n\nOn Sat, 15 Jan 2000 17:06:02 -0500 \nCharles Hughes
                <charles.hughes@bigfoot.com> wrote:\n\n> At the risk of being slapped
                by a mackerel, who here really thinks\n> they can do a better database
                design than those afforded by the\n> likes of the free or commercial
                databases?   \n\nNarrow the question to:\n\n  \"Who here thinks they
                can do a better database for their\napplication than those afforded
                by the likes of the free or\ncommercial databases?\"\n\nand you have
                a very different question as of a sudden you are\nbringing the areas
                of purpose and loading into the question.\n\nMUDs often (depending
                on design) make unusual demands on their\nbacking stores.  As a very
                simple case in point, if you are running\na runtime morphic system,
                there are ___NO___ commercial, OpenSource,\nor CloseSource DB's which
                really even attempt to handle this area as\na DB.\n\nThere's also
                a seperate question that comes in here:  \n\n  What is your purpose
                and goal in writing your server/DB?\n\nFor me a large part of the
                process is the educational and test case\nopportunities it avails.
                \ Others are have different goals, and\ndifferent trade-offs they
                are willing to accept.\n\n> It seems to me that segregating the database
                issues and then\n> simply using a database is far better than creating
                a new one.\n\nThis really depends onw hat you are trying to do.  Murkle,
                in its\nmore recent forms, was an investigation of multi-threading
                issues\nand an entertaining chance to teach myself the area.  As far
                as the\nDB is concerned, Murkle is a proof-of-concept for the lockless
                DB\nconcept, as well as an implementation base for various OO ideas
                I\nwant to play with and how to represent and manipulate them in the\nDB.\n\n>
                This would change the \"databases/memory management\" division above\n>
                into two divisions - database usage, memory management.\n\nFor many
                cases, especially giving the cacheing and predictive\nalgorithms that
                many DB's implement, the distinction between Db and\nmemory is rather
                artificial.  \n\nConsider the case where your DB cache is as large
                or larger than\nyour DB...IS there really any distinction any more
                at all, or merely\na lot of extra overhead and processing for something
                that is not\nneeded...\n\n--\nJ C Lawrence                                 Home:
                claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
                A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
                maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: J C Lawrence <claw@kanga.nu>'
                      name: From
                      value: J C Lawrence <claw@kanga.nu>
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Sun, 30 Jan 2000 13:21:42 -0800'
                      name: Date
                      value: Sun, 30 Jan 2000 13:21:42 -0800
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Databases (was Re: Commercial-use
                        Restrictions on Code Bases)'
                      name: Subject
                      value: 'Re: [MUD-Dev] Databases (was Re: Commercial-use Restrictions
                        on Code Bases)'
                    mbox_from: 
                  body: "On Sat, 15 Jan 2000 17:06:02 -0500 \nCharles Hughes <charles.hughes@bigfoot.com>
                    wrote:\n\n> At the risk of being slapped by a mackerel, who here
                    really thinks\n> they can do a better database design than those
                    afforded by the\n> likes of the free or commercial databases?
                    \  \n\nNarrow the question to:\n\n  \"Who here thinks they can
                    do a better database for their\napplication than those afforded
                    by the likes of the free or\ncommercial databases?\"\n\nand you
                    have a very different question as of a sudden you are\nbringing
                    the areas of purpose and loading into the question.\n\nMUDs often
                    (depending on design) make unusual demands on their\nbacking stores.
                    \ As a very simple case in point, if you are running\na runtime
                    morphic system, there are ___NO___ commercial, OpenSource,\nor
                    CloseSource DB's which really even attempt to handle this area
                    as\na DB.\n\nThere's also a seperate question that comes in here:
                    \ \n\n  What is your purpose and goal in writing your server/DB?\n\nFor
                    me a large part of the process is the educational and test case\nopportunities
                    it avails.  Others are have different goals, and\ndifferent trade-offs
                    they are willing to accept.\n\n> It seems to me that segregating
                    the database issues and then\n> simply using a database is far
                    better than creating a new one.\n\nThis really depends onw hat
                    you are trying to do.  Murkle, in its\nmore recent forms, was
                    an investigation of multi-threading issues\nand an entertaining
                    chance to teach myself the area.  As far as the\nDB is concerned,
                    Murkle is a proof-of-concept for the lockless DB\nconcept, as
                    well as an implementation base for various OO ideas I\nwant to
                    play with and how to represent and manipulate them in the\nDB.\n\n>
                    This would change the \"databases/memory management\" division
                    above\n> into two divisions - database usage, memory management.\n\nFor
                    many cases, especially giving the cacheing and predictive\nalgorithms
                    that many DB's implement, the distinction between Db and\nmemory
                    is rather artificial.  \n\nConsider the case where your DB cache
                    is as large or larger than\nyour DB...IS there really any distinction
                    any more at all, or merely\na lot of extra overhead and processing
                    for something that is not\nneeded...\n\n--\nJ C Lawrence                                 Home:
                    claw@kanga.nu\n----------(*)                              Other:
                    coder@kanga.nu\n--=| A man is as sane as he is dangerous to his
                    environment |=--\n\n\n_______________________________________________\nMUD-Dev
                    maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Databases (was Re: Commercial-use Restrictions
                  on Code Bases)'
              from: J C Lawrence <claw@kanga.nu>
              references: []
              date: 2000-01-30 21:21:42.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: 000DlgQK
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *415
          parent: *416
          children: []
        - &437 !ruby/object:MessageContainer
          key: &417 !ruby/object:MessageId
            raw: 00IySra4@generated-message-id.chibrary.org
          value: !ruby/object:Message
            email: !ruby/object:Email
              raw: |
                From: cg@ami-cg.GraySage.Edmonton.AB.CA
                Date: Sun, 16 Jan 2000 10:04:48 -0700
                Subject: Re: [MUD-Dev] Databases (was Re: Commercial-use Restrictions on Code Bases)

                [Charles Hughes:]

                > At the risk of being slapped by a mackerel, who here really thinks they
                > can do a better database design than those afforded by the likes of the
                > free or commercial databases?  [I'll ask those here who've actually
                > worked on these databases not to chime in. :)]
                >
                > It seems to me that segregating the database issues and then simply using
                > a database is far better than creating a new one.  This would change
                > the "databases/memory management" division above into two divisions -
                > database usage, memory management.
                >
                > Yes? No?

                You are ignoring the issue of the appropriateness of commerical or other
                standard databases. Calling the persistence back-end of MUD system its
                "database" is handy, in that it describes it in one word that has a lot
                of the right meaning. That does not mean, however, that the way that
                backend works is anything like the ways a normal database works.

                This was discussed not that long ago, I believe. The inappropriateness
                of standard databases is one reason many MUD authors create their own.
                For example, my "database" has no concept of "tables" or "rows". It
                simply associates a hunk of saved data with a key, and provides automatic
                means for saving/restoring such data, and provides an efficient caching
                mechanism for the hunks of saved data. Some of the hunks are strings,
                some are arrays of integers, some are compessed hash tables, etc. They
                vary wildly in length and in internal structure. I have no idea how to
                use a standard database to store such things anywhere near as efficiently
                as my custom "database" does. From the other direction, the nice indexing
                and searching facilities of normal databases are of very little use to
                my MUD system.

                There has been discussion of using normal databases as MUD backends, but,
                to me, it seems a lot like working very hard to use a hammer and pliers to
                work with screws.

                --
                Don't design inefficiency in - it'll happen in the implementation.

                Chris Gray     cg@ami-cg.GraySage.Edmonton.AB.CA
                               http://www.GraySage.Edmonton.AB.CA/cg/



                _______________________________________________
                MUD-Dev maillist  -  MUD-Dev@kanga.nu
                http://www.kanga.nu/lists/listinfo/mud-dev
              header: !ruby/object:Headers
                rmail: !ruby/object:RMail::Message
                  header: !ruby/object:RMail::Header
                    fields:
                    - !ruby/object:RMail::Header::Field
                      raw: 'From: cg@ami-cg.GraySage.Edmonton.AB.CA'
                      name: From
                      value: cg@ami-cg.GraySage.Edmonton.AB.CA
                    - !ruby/object:RMail::Header::Field
                      raw: 'Date: Sun, 16 Jan 2000 10:04:48 -0700'
                      name: Date
                      value: Sun, 16 Jan 2000 10:04:48 -0700
                    - !ruby/object:RMail::Header::Field
                      raw: 'Subject: Re: [MUD-Dev] Databases (was Re: Commercial-use
                        Restrictions on Code Bases)'
                      name: Subject
                      value: 'Re: [MUD-Dev] Databases (was Re: Commercial-use Restrictions
                        on Code Bases)'
                    mbox_from: 
                  body: |
                    [Charles Hughes:]

                    > At the risk of being slapped by a mackerel, who here really thinks they
                    > can do a better database design than those afforded by the likes of the
                    > free or commercial databases?  [I'll ask those here who've actually
                    > worked on these databases not to chime in. :)]
                    >
                    > It seems to me that segregating the database issues and then simply using
                    > a database is far better than creating a new one.  This would change
                    > the "databases/memory management" division above into two divisions -
                    > database usage, memory management.
                    >
                    > Yes? No?

                    You are ignoring the issue of the appropriateness of commerical or other
                    standard databases. Calling the persistence back-end of MUD system its
                    "database" is handy, in that it describes it in one word that has a lot
                    of the right meaning. That does not mean, however, that the way that
                    backend works is anything like the ways a normal database works.

                    This was discussed not that long ago, I believe. The inappropriateness
                    of standard databases is one reason many MUD authors create their own.
                    For example, my "database" has no concept of "tables" or "rows". It
                    simply associates a hunk of saved data with a key, and provides automatic
                    means for saving/restoring such data, and provides an efficient caching
                    mechanism for the hunks of saved data. Some of the hunks are strings,
                    some are arrays of integers, some are compessed hash tables, etc. They
                    vary wildly in length and in internal structure. I have no idea how to
                    use a standard database to store such things anywhere near as efficiently
                    as my custom "database" does. From the other direction, the nice indexing
                    and searching facilities of normal databases are of very little use to
                    my MUD system.

                    There has been discussion of using normal databases as MUD backends, but,
                    to me, it seems a lot like working very hard to use a hammer and pliers to
                    work with screws.

                    --
                    Don't design inefficiency in - it'll happen in the implementation.

                    Chris Gray     cg@ami-cg.GraySage.Edmonton.AB.CA
                                   http://www.GraySage.Edmonton.AB.CA/cg/



                    _______________________________________________
                    MUD-Dev maillist  -  MUD-Dev@kanga.nu
                    http://www.kanga.nu/lists/listinfo/mud-dev
                  epilogue: 
                  preamble: 
              message_id: !ruby/object:MessageId
                raw: "[invalid or missing message id]"
              subject: !ruby/object:Subject
                original: 'Re: [MUD-Dev] Databases (was Re: Commercial-use Restrictions
                  on Code Bases)'
              from: cg@ami-cg.GraySage.Edmonton.AB.CA
              references: []
              date: 2000-01-16 17:04:48.000000000 Z
              no_archive: false
            call_number: !ruby/object:CallNumber
              str: 00IySra4
            source: archive
            list: !ruby/object:List
              slug: mud-dev
              name: 
              description: 
              homepage: 
              footer: 
            message_id: *417
          parent: *416
          children: []
        - *418
      children:
      - *419
    children: []
  *415: *420
  ? &421 !ruby/object:MessageId
    raw: 000DlgOm@generated-message-id.chibrary.org
  : &492 !ruby/object:MessageContainer
    key: *421
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Sun, 09 Jan 2000 11:40:48
          -0800\nSubject: [MUD-Dev] Re: Ok, got some brand new core dumps.\n\nOn Sun,
          09 Jan 2000 13:26:11 EST \nDamen K <damenk@hotmail.com> wrote:\n\n> Yes,
          I do indeed have 18 possible exits per room.\n> n,s,e,w,u,d,nu,nd,su,sd,eu,ed,wd,wu,nw,ne,se,sw\n\nThis
          is one of the reasons that I like contextual exits so much in\naddition
          to the base compass directions (where they apply).  Just\nname something
          the character can see (or knows) is in some\ndirection, and he will move
          in that direction.  eg If he's in a\nstreet and there's a pub in one side
          amd a store on the other, \"pub\"\ntakes him one way, and \"store\" the
          other.\n\nFurther, it also makes it easier to add various forms of\ndisorientation.
          \ The character is in a new area, is under a\ndisorientation spell, or is
          carrying a large lodestone with him?  He\nhas no idea of compass directions
          and any attempt to navigate by\ncompass directionw will result in random
          motion (or at least\narbitrary).\n\nOne of the implicit advantages of this
          is that it allows you to\nlater extend your directional command matrix if
          you decide to make\nmore interesting spaces (such as non-euclidien) that
          need their own\nmovement commands as different from the others.  It also
          makes it\nvery easy to extend to orientation support ala \"forward\", \"back\",\n\"left\",
          \"right\", etc, or say given orbital mechanics, \"in\", \"out\"\n\"retro\",
          etc.\n\n--\nJ C Lawrence                                 Home: claw@kanga.nu\n----------(*)
          \                             Other: coder@kanga.nu\n--=| A man is as sane
          as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Sun, 09 Jan 2000 11:40:48 -0800'
                name: Date
                value: Sun, 09 Jan 2000 11:40:48 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] Re: Ok, got some brand new core dumps.'
                name: Subject
                value: "[MUD-Dev] Re: Ok, got some brand new core dumps."
              mbox_from: 
            body: "On Sun, 09 Jan 2000 13:26:11 EST \nDamen K <damenk@hotmail.com>
              wrote:\n\n> Yes, I do indeed have 18 possible exits per room.\n> n,s,e,w,u,d,nu,nd,su,sd,eu,ed,wd,wu,nw,ne,se,sw\n\nThis
              is one of the reasons that I like contextual exits so much in\naddition
              to the base compass directions (where they apply).  Just\nname something
              the character can see (or knows) is in some\ndirection, and he will
              move in that direction.  eg If he's in a\nstreet and there's a pub in
              one side amd a store on the other, \"pub\"\ntakes him one way, and \"store\"
              the other.\n\nFurther, it also makes it easier to add various forms
              of\ndisorientation.  The character is in a new area, is under a\ndisorientation
              spell, or is carrying a large lodestone with him?  He\nhas no idea of
              compass directions and any attempt to navigate by\ncompass directionw
              will result in random motion (or at least\narbitrary).\n\nOne of the
              implicit advantages of this is that it allows you to\nlater extend your
              directional command matrix if you decide to make\nmore interesting spaces
              (such as non-euclidien) that need their own\nmovement commands as different
              from the others.  It also makes it\nvery easy to extend to orientation
              support ala \"forward\", \"back\",\n\"left\", \"right\", etc, or say
              given orbital mechanics, \"in\", \"out\"\n\"retro\", etc.\n\n--\nJ C
              Lawrence                                 Home: claw@kanga.nu\n----------(*)
              \                             Other: coder@kanga.nu\n--=| A man is as
              sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] Re: Ok, got some brand new core dumps."
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-09 19:40:48.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 000DlgOm
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *421
    parent: 
    children: []
  *72: *422
  *380: *423
  *10: *13
  ? &424 !ruby/object:MessageId
    raw: JzBblxKq@generated-message-id.chibrary.org
  : &493 !ruby/object:MessageContainer
    key: *424
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: |
          From: "Ian Macintosh" <iman@issystems.co.nz>
          Date: Tue, 11 Jan 2000 07:06:29 +1300
          Subject: RE: [MUD-Dev] Optimized Object Storage

          > J C Lawrence wrote:
          > Sent: Saturday, December 18, 1999 12:37 PM

          > > Firstly, my opinions.  Let's you know what probably influences me
          > > in certain directions.  I strongly dislike OOC solutions, or
          > > transparently artificial solutions.  Object decay fits both of
          > > those to my mind, so I dislike it.  That's the philosopical
          > > viewpoint.
          >
          > I'm curious as to what you think of my mana based decay strategies
          > as regards your artificiality concerns?
          >
          >   Loosely: All objects consume mana at some rate.  Magical or
          > magically enhanced objects consume mana at higher than normal rates.
          > (There are various flavours of mana, and objects require feeding of
          > different percentages of the different mana types, but this can be
          > ignored).  If an object is unable to satisfy its appetites they
          > decay at a rate proportional to their demand for mana.  Ergo, a
          > magical object with a high mana feed requirement will decay very
          > rapidly should it find itself starved, possibly falling to dust in a
          > matter of seconds for a very high mana object.
          >
          > What's more amusing about this is that carrying many objects,
          > particularly several high magic objects, at the same time becomes an
          > intense problem.  How to keep them all fed with mana at the same
          > time such that none of them decay?  The typical result is the rapid
          > destruction of all high magic objects once they are in proximity
          > (they starve each other).
          >
          > A few messages I ran across while digging the archives on this area
          > that you might find interesting:
          >
            http://www.kanga.nu/archives/MUD-Dev-L/1997Q1/msg00158.html
            http://www.kanga.nu/archives/MUD-Dev-L/1997Q2/msg00095.html
            http://www.kanga.nu/archives/MUD-Dev-L/1997Q2/msg00431.html
            http://www.kanga.nu/archives/MUD-Dev-L/1997Q3/msg00480.html
            http://www.kanga.nu/archives/MUD-Dev-L/1998Q2/msg00479.html
            http://www.kanga.nu/archives/MUD-Dev-L/1998Q3/msg01325.html

          Hi JC.

          Sorry for the slow reply.  Holiday season now over :(

          I like the idea, because it provides a plausable reason for what happens,
          rather than a somewhat inexplicable generic decay that leaves the player
          with a "well, that's just how it works, don't ask me why".

          I thought it might be a bit harsh though the way it is described.  Perhaps a
          lower consumption rate per item.  That was just my feeling reading it.

          Regards,

          Ian.




          _______________________________________________
          MUD-Dev maillist  -  MUD-Dev@kanga.nu
          http://www.kanga.nu/lists/listinfo/mud-dev
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: "Ian Macintosh" <iman@issystems.co.nz>'
                name: From
                value: '"Ian Macintosh" <iman@issystems.co.nz>'
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Tue, 11 Jan 2000 07:06:29 +1300'
                name: Date
                value: Tue, 11 Jan 2000 07:06:29 +1300
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: RE: [MUD-Dev] Optimized Object Storage'
                name: Subject
                value: 'RE: [MUD-Dev] Optimized Object Storage'
              mbox_from: 
            body: |
              > J C Lawrence wrote:
              > Sent: Saturday, December 18, 1999 12:37 PM

              > > Firstly, my opinions.  Let's you know what probably influences me
              > > in certain directions.  I strongly dislike OOC solutions, or
              > > transparently artificial solutions.  Object decay fits both of
              > > those to my mind, so I dislike it.  That's the philosopical
              > > viewpoint.
              >
              > I'm curious as to what you think of my mana based decay strategies
              > as regards your artificiality concerns?
              >
              >   Loosely: All objects consume mana at some rate.  Magical or
              > magically enhanced objects consume mana at higher than normal rates.
              > (There are various flavours of mana, and objects require feeding of
              > different percentages of the different mana types, but this can be
              > ignored).  If an object is unable to satisfy its appetites they
              > decay at a rate proportional to their demand for mana.  Ergo, a
              > magical object with a high mana feed requirement will decay very
              > rapidly should it find itself starved, possibly falling to dust in a
              > matter of seconds for a very high mana object.
              >
              > What's more amusing about this is that carrying many objects,
              > particularly several high magic objects, at the same time becomes an
              > intense problem.  How to keep them all fed with mana at the same
              > time such that none of them decay?  The typical result is the rapid
              > destruction of all high magic objects once they are in proximity
              > (they starve each other).
              >
              > A few messages I ran across while digging the archives on this area
              > that you might find interesting:
              >
                http://www.kanga.nu/archives/MUD-Dev-L/1997Q1/msg00158.html
                http://www.kanga.nu/archives/MUD-Dev-L/1997Q2/msg00095.html
                http://www.kanga.nu/archives/MUD-Dev-L/1997Q2/msg00431.html
                http://www.kanga.nu/archives/MUD-Dev-L/1997Q3/msg00480.html
                http://www.kanga.nu/archives/MUD-Dev-L/1998Q2/msg00479.html
                http://www.kanga.nu/archives/MUD-Dev-L/1998Q3/msg01325.html

              Hi JC.

              Sorry for the slow reply.  Holiday season now over :(

              I like the idea, because it provides a plausable reason for what happens,
              rather than a somewhat inexplicable generic decay that leaves the player
              with a "well, that's just how it works, don't ask me why".

              I thought it might be a bit harsh though the way it is described.  Perhaps a
              lower consumption rate per item.  That was just my feeling reading it.

              Regards,

              Ian.




              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'RE: [MUD-Dev] Optimized Object Storage'
        from: Ian Macintosh <iman@issystems.co.nz>
        references: []
        date: 2000-01-10 18:06:29.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: JzBblxKq
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *424
    parent: 
    children: []
  *18: *425
  ? &426 !ruby/object:MessageId
    raw: 00uTkdoe@generated-message-id.chibrary.org
  : &494 !ruby/object:MessageContainer
    key: *426
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: |
          From: J C Lawrence <claw@cp.net>
          Date: Thu, 06 Jan 2000 12:07:51 -0800
          Subject: [MUD-Dev] Y2K archives

          Writing as list owner:

            As was recently pointed out to me (thanks!) the list archives for
          this year didn't gen properly.  (Obviously I spent too much time
          fixing Y2K bugs in other people's code and not my own).  Its now
          fixed and this year's archives are now online and indexed.  Enjoy.

          --
          J C Lawrence                              Internet: claw@kanga.nu
          ----------(*)                            Internet: coder@kanga.nu
          ...Honorary Member of Clan McFud -- Teamer's Avenging Monolith...


          _______________________________________________
          MUD-Dev maillist  -  MUD-Dev@kanga.nu
          http://www.kanga.nu/lists/listinfo/mud-dev
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@cp.net>'
                name: From
                value: J C Lawrence <claw@cp.net>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Thu, 06 Jan 2000 12:07:51 -0800'
                name: Date
                value: Thu, 06 Jan 2000 12:07:51 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] Y2K archives'
                name: Subject
                value: "[MUD-Dev] Y2K archives"
              mbox_from: 
            body: |
              Writing as list owner:

                As was recently pointed out to me (thanks!) the list archives for
              this year didn't gen properly.  (Obviously I spent too much time
              fixing Y2K bugs in other people's code and not my own).  Its now
              fixed and this year's archives are now online and indexed.  Enjoy.

              --
              J C Lawrence                              Internet: claw@kanga.nu
              ----------(*)                            Internet: coder@kanga.nu
              ...Honorary Member of Clan McFud -- Teamer's Avenging Monolith...


              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] Y2K archives"
        from: J C Lawrence <claw@cp.net>
        references: []
        date: 2000-01-06 20:07:51.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00uTkdoe
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *426
    parent: 
    children: []
  *142: *427
  *99: *102
  *279: *285
  *283: *428
  *184: *429
  ? &430 !ruby/object:MessageId
    raw: 000Dnsn2@generated-message-id.chibrary.org
  : &495 !ruby/object:MessageContainer
    key: *430
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: Marian Griffith <gryphon@iaehv.nl>\nDate: Sun, 16 Jan 2000 14:36:50
          +0000 (GMT)\nSubject: [MUD-Dev] Mud-Dev FAQ part I\n\n                        Mud-Dev
          FAQ\n                          part I\n                        -----------\n\n\n\nLast
          modified:   20 September 1999\n                 14 November  1999\n                 16
          Januari   2000\n\n*1. Introduction\n*2. Frequently Asked Questions\n*3.
          Previous Topics\n*4. Scenarios\n 5. Resources\n 6. Glossary\n 7. Changes,
          To Do & Acknowledgements\n(* chapters found in this part of the FAQ)\n\nA
          web based version of this FAQ can be found at:\n<URL:http://www.kanga.nu/FAQs/MUD-Dev-L/>\n\nPlease
          email any corrections, suggestions or constructive criticisms\nto Marian
          Griffith at gryphon@iaehv.nl\n\nRecent Changes:\n\n16-01-2000 -- Faq split
          in two for size (chapters 1 to 4 and 5 to 7)\n              Resources: Added
          several new muds\n              Made some minor spelling corrections\n991114
          -- New moderator (Marian Griffith)\n990920 -- Resources: Added Raph Koster's
          website, gaming section.\n\t  Glossary: New terms include full world reset,
          PK, psychological\n\t\t    disinhibition, world state and virtual sociopath.\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t1.
          Introduction\n\n\n\nThe following may also be found at the list's homepage
          straddled at\n<URL:http://www.kanga.nu/lists/listinfo/mud-dev/>.\n\n--<cut>--\n\nList
          charter \n\nThe MUD Development mailing list is not platform, language or
          game specific,\nbut concentrates on discussing the design and implementation
          of any and all\nMUD servers and systems.  Another large related topic is
          game design.  This\ndoes not mean that the details of a specific server
          or game design point\ncan't be discussed in excruciating detail, or even
          that server or game\nsource can't be bandied about and picked over, just
          that the list isn't to\nbecome a religious stomping ground for your platform,
          language, server, or\nhobby horse of choice.  The topic definition is not
          limited to technical\nareas: social engineering, cultural considerations,
          applicability of\ntechnical addresses to \"soft\" problems, and other less
          rigorous avenues of\ninvestigation are also fair game. \n\nThe goal is high
          signal, low noise. The MUD Development list is NOT an\nemail version of
          the rec.games.mud.* newsgroups.\n\n--<cut>--\n\n\nAlso from the same page
          is a message for the commercially orientated amongst\nus:\n\n--<cut>--\nNote
          from the list owner \n\nThe list has a number of members who work professionally
          in the field. Their\npresence raises certain concerns for intellectual property,
          trade secrets,\ncopyrights, etc for the list and for list postings. The
          below should give an\noverview of this area, what I expect of list members,
          commercially\naffiliated or otherwise, as well as the intended character
          of the list.\n\nAs list owner I expect all list members to be responsible
          for what they\npost.\nThe rules are obvious: If there is something your
          company or affiliations\ndoes not want publicised, then don't post it to
          the list. If you see one of\nyour commercial or other partners post something
          to the list that shouldn't\nhave been, then don't bring it up on the list
          -- take it to direct email.\nRaising such issues on the list will be used
          as an excuse for removing\nmembership. \n\nPlease do not use this as an
          alibi to start adding disclaimers to your\nposts. You are the members on
          this list, not your companies. If it isn't\nyour opinion don't write it.
          If you are reporting someone else's opinion,\nstate it as such.\n\nIf a
          post is written as a representative of your company or affiliation,\nthen
          identify it as such. Adding a signature which identifies your\naffiliation
          is not enough. That can be too easily automated and is not\nan explicit
          statement of representation.  A leading paragraph identifying\nthe source
          or representation placed above all the textual body including\nthe attributions,
          will do (keep it short).\n\nCommercial grandstanding, advertisements, chest
          puffing, or other forms of\npromotion are not appreciated on the list and
          will be rewarded with removal\nof membership. The list is an expressly non-commercial
          venue. It is intended\nas an intelligent and free discussion by peers in
          the field, both hobbyist\nand professional.\n\nMembership of the list is
          not a right. You are here as my guests. This is a\nprivate list run as a
          personal contribution to the field. I trust the list's\nmembership to behave
          accordingly.\n\nPosting to the list may be considered analagous to having
          a conversation in\nmy living room using bull horns while the windows are
          open and everyone has\ntape recorders. There is no secrecy, or control of
          the dissemination of data\nonce it is posted.\n\nAnd on a final note: Attempting
          to invalidate or discourage a discussion or\navenue of investigation on
          the list because it strays too close to a\ncommercial project's field or
          other such interest will be deemed an\nintentional personal insult and due
          cause for permanent removal from the\nlist along with all associates.\n\nThank
          you.\n\nJ C Lawrence, MUD-Dev list owner.\n\n--<cut>--\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t2.
          Frequently Asked Questions\n\n\n\n1. What should I do now I have joined?\n\nIf
          you have not already, please read the rec.games.mud.* FAQs to\nfamiliarise
          yourself with all the different sorts of muds out there, see\n<URL:http://www.cs.okstate.edu/~jds/mudfaqs.html>.
          \ Take some time to\nbrowse through the list's webpage.  It may be found
          at\n<URL:http://www.kanga.nu/lists/listinfo/mud-dev/>.\n\n\n2. How do I
          post?\n\nPosting on the list is a privilege which may be obtained from the
          list\nowner (who resides at mud-dev-owner@kanga.nu).  It is suggested you
          lurk for\na while to get a gist of how things work on the list.  When you
          do approach\nthe list owner for posting privileges, attach your intended
          posting.\n\n\n3. What is the accepted standard for posting?\n\nIn short:
          No more than 80 columns wide, and only use 7bit ASCII.  If\nyou are posting
          from a country/language which uses \"special\"\ncharacters, such as with
          umlauts or other diacritical marks, then\nplease ensure that your mailer
          properly MIME wraps them.  Most modern\nmailers will do this properly.\n\nMIME,
          HTML, RichText and similar are discouraged.  This includes\n\"vcard\" attachments
          from NetScape mail and similar.  Small MIME\nattachments, such as a graphic
          used to illustrate a point discussed in\nthe text of a message are acceptable.
          \ The guiding rule is that the\nbrunt of the value of a message must always
          be in the text.\n\nA reply to another posting must have at least the name
          of the original\nauthor if your mailer does not automatically supply one,
          eg:\n\n  [Bubba]\n  >On  4 Jan 98 at 22:20, Boffo wrote:\n  >> Buffy <Buffy@players-r-us.com>
          wrote:\n  >>> I just found a cool mud at <URL:http://web.mud.com>\n  >>\n
          \ >> Golly Gosh!  Cover me in eggs and flour and bake me for 40 minutes!\n\nThese
          are commonly referred to on the list as \"attributions\".\n\nWeb pages are
          usually referenced in angled brackets as above.  \n\nWhen quoting a log
          from a game, put at least two spaces at the start\nof each line so that
          when it is quoted it does not become confused\nwith other conversation text:\n\n--<example>--\nI
          have a maze in my game:\n\n  > look\n  You are in a maze of twisty little
          passages, all alike.\n\nIsn't it neat?\n--<example>--\n\nWill be quoted
          as:\n\n--<example>--\n>I have a maze in my game:\n>\n>  > look\n>  You are
          in a maze of twisty little passages, all alike.\n>\n>Isn't it neat?\n--<example>--\n\nUse
          a bit of common sense when quoting.  Include enough of the\noriginal message
          to make sense; no more or less.  Avoid quoting an\nentire post with a one
          line reply (btw, one line replies are bad :).\n\nAlso, don't be afraid to
          change the subject heading to something more\nrelevant if the topic has
          strayed somewhat (usually happens to most\nthreads).  \n\nOh yeah, and a
          sensibly sized signature.\n\n\n4. What is meant by high signal to noise
          ratio?\n\nThe noisy postings include messages which essentially say \"I
          agree!\"\nand add no extra value, or those that do not relate to the purpose
          of\nthe list (like what you had for dinner, how your codebase/driver is\nclearly
          superior to all others in existence and why language such and\nsuch is better
          than such and such).  Try to keep on topic and you\nwon't go wrong.  However,
          the list is infamous for long postings which\nstart with one topic and end
          up rambling on about something else\ncompletely different towards the end.
          \ But so long as it is regarding\nmuds...\n\n\n5. I just made a post about
          such and such but no one responded to it!\n\nThere could be several reasons
          why no one has answered to your\nposting.  If it was to start a new thread,
          it could have been that the\ntopic has just recently been discussed.  Try
          waiting a while before\nbring it back up again.  If it was in answer to
          a current thread,\nother list members will have read it but just might not
          have anything\nto say on that point right then.  \n\n\n6. What's all this
          Bubba business?\n\nBubba, Boffo, Buffy and friends are all typical mud players
          bred for\ntest scenarios devised by various list members.  Originally procreated\nby
          J C Lawrence (how, I don't wish to know), they have since come into\nwidespread
          use amongst the mud usenet groups (much to J C's amusement).\n\n\n7. Aaargh!
          \ The traffic is too much!\n\nPerhaps switching to the daily digest mode
          would help?\n\nGo to <URL:http://www.kanga.nu/lists/listinfo/mud-dev/>,
          enter your\nsubscribed email address at the bottom, and then edit your subscription\noptions
          as appropriate.\n\n\n8. How do I access the archives?\n\nList traffic is
          archived daily and housed at:\n<URL:http://www.kanga.nu/archives/MUD-Dev-L/>\n\n\n9.
          How do I turn off the list while I'm on holiday?\n\nGo to <URL:http://www.kanga.nu/lists/listinfo/mud-dev/>,
          enter your\nsubscribed email address at the bottom, and then edit your subscription\noptions
          as appropriate.\n\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t3.
          Previous Topics\n\n\n\nHere's a list of practically all the topics discussed
          since the list's\ncreation up to the end of Dec 98 (early traffic may be
          missing):\n\nServer design:\n Affects vs. spoofs\n Security concerns of
          spoofs\n Component based bodies vs. aggregate bodies vs. atomic bodies\n
          Rooms vs. coordinate spaces vs. mixed forms of the two\n Methods of handling
          coordinate spaces: neighbourhoods, tree forms\n R-Trees, R*-Trees, 3d arrays,
          Quad/Oct trees \n Automated population containers\n Event models\n Internal
          process models\n Security models\n Multi-threaded server design [conflicts
          resolution?]\n Database design for a server\n Use of transactional databases
          in a MUD server\n How to avoid resets\n Parsing systems, and language development
          tools\n Design of internal MUD languages\n Variations on event-driven design\n
          Disk vs. memory based designs for MUD servers\n IO Socket efficiencies.\n
          Telnet protocol and terminal emulation\n Design of Object IDs and Object
          ID recycling\n Artificial probability systems\n Virtual rooms, virtual objects,
          virtual mobiles\n Sending mail from within a mud server\n String handling
          and memory\n Verb handling - global vs. local vs. mixed\n Generic objects\n
          Object assemblies\n Collision detection\n Client scripting and scripting
          prevention\n Graphical interfaces\n Must have books for programmers\n Web
          vs. Telnet\n\nGame design:\n Classes of players and what they want from
          a game\n Levels vs. level-less vs. abstracted levels vs. level-comparatives\n
          Keeping a goal progression without levels\n Handling of character inventory
          and representation of inventory\n Families and their impacts on clans, multi-charring,
          and tactics\n Character senses, representation and extension\n Re-usable
          quests or plotlines\n Generic quest creation systems\n Rumour systems, handling
          rumour propagation, and rumour decay\n Races\n Placement of characters in
          the MUD-world predator totem-pole\n Handling of character death as an in-game
          event\n Perma-death vs. resurrection\n Economic systems (and lessons learnt
          by prior experiments)\n Energy-style ecologies and economies\n Ecologies
          for MUD worlds\n Inter-player communication systems\n Perceived danger levels
          for characters\n NPC AI, goal-oriented NPCs, intelligently automating NPCs\n
          Player characters as NPCs/monsters\n Nutrition\n Wounds and trauma systems\n
          Combat systems (round based, no rounds, interactive, etc.)\n Combat messages\n
          Combat scripting and action\n Dynamic descriptions and perception\n Views
          on the \"undead\"\n User command interface design\n All about bows, longbows,
          crossbows, etc.\n Festivals and in-game mud games\n Supporting both RPers
          and GOPers\n Virtual chemistry/alchemy\n In-game political and social structures
          \n Implementing mundane professions (or Nation of Shopkeepers)\n Methods
          of integrating PK (coexistence with non-PK)\n Handling poison and disease\n
          Inebriation and drugs\n Dragons - a number of viewpoints\n Spoken and written
          languages  \n Food - interesting or irritating\n Starting characters or
          creating characters\n Amalgamud specification document\n Alignment vs. reputation
          \n Character positions and rank point system\n Automatic name generation\n
          Learning and skill progression  \n Classless systems and profession-based
          systems\n Physics and the mud universe\n Hard sci-fi vs. science fantasy\n
          Character places of their own\n Character henchmen and servants \n Thieves
          - ideas  \n Allowing players to affect the world\n Group play and group
          dynamics\n Spells and spell-casting systems \n Characters - heroes, nobodies,
          or prey species\n Game balance\n Hive minds\n Traps and riddle lists\n Representing
          character stats - numeric, descriptive and graphic\n Settings for mud worlds\n
          List members' inspirational fantasy and sci-fi books\n Handling and building
          of large trackless areas\n Gods and deity systems\n\nMud Administration/Philosophy\n
          Lorry's document on wizarding\n The morality of logging and snooping\n Problems
          with socializers\n Social control and engineering\n Dealing with \"problem\"
          players\n Is the virtual world real?\n Gender issues\n Bartle's mud papers\n
          The purpose of mudding\n Motivating builders and coders\n Role-play vs.
          Game-Only Play discussion\n PK vs. Non-PK discussions\n The infamous rape
          discussion \n Habitat papers and anecdotes\n Overriding players' control
          of the character \n\n\nThe following is a list of topics that appeared on
          the MudDev list in \n1998...\n\n\n  Server Design:\n\n  Event handling\t\t\t
          \ Socket programming\n  Task parsing\t\t\t\t  Byte code\n  Java and Javascript\t\t\t
          \ Dynamic module loading\n  DBs and Events\t\t\t  Java threading\n  Let's
          build a compiler\t\t  Version control\n  Intermud communication\t\t  Nested
          coordinate spaces\n  Persistent storage\t\t\t  Transport layer UDP vs TCP\n
          \ Atomic functions\t\t\t  Algorithms for storing free space\n  Mapping -
          creating bitmaps\t\t  Using SQL databases\n  Mapping data into RDBMs\t\t
          \ DevMUD project\n\n  Game Design:\n\n  Mud economy\t\t\t\t  Vast areas
          in muds\n  Time travel and logging\t\t  Unique items\n  Gods and worshippers\t\t\t
          \ Senses\n  Terrain rendering\t\t\t  Simulating future history\n  Ultima
          Online's reputation system\n  Bad game designs (What we hate about muds)\n
          \ Handling log out\t\t\t  There can be only one\n  GRUMPS\t\t\t\t  Character
          development\n  Teleportation code\t\t\t  Avatars\n  Leaving characters in
          the game\t  Mud school\n  Regulating player created objects\t  In game bulletin
          boards\n  Level-less muds\t\t\t  Describe concept\n  World persistence\t\t\t
          \ Random numbers\n  Charm\t\t\t\t\t  Combat intelligence\n  Darkness visibility\t\t\t
          \ Thoughts on languages\n  Recursive look\t\t\t  Equipment fitting\n  Implementing
          god\t\t\t  Marian's tailor problem\n  Room descriptions\t\t\t  Prescience
          rules/handling telepathy\n  Map-making programs\t\t\t  Stack-based NPC AI\n
          \ Multiple currencies\t\t\t  Command parsing\n  Affordances and Social method\t\t
          \ Fun vs. realism\n\n  Client Design:\n\n  Netscape Clients\t\t\t  Netscape
          Gecko\n  CORBA, RMI, DCOM\t\t\t  Graphical Mud perspective\n  3D perspective\t\t\t
          \ Net protocols for mudding\n  Client side caching\t\t\t  Using HTML in
          muds\n  Trusting the client/ security\t\t  DIS - client/server protocol\n\n
          \ Mud Administration/Philosophy:\n\n  Administrative Responsibility\t\t
          \ Impact of the Web on muds\n  PK debate summary\t\t\t  The MLI project\n
          \ XShipwars\t\t\t\t  The Darkhole tests\n  Wired on Ultima Online\t\t  CGDC
          summary\n  Golgotha\t\t\t\t  Laws of Online worlds\n  Analysis and specification\t\t
          \ Mud web sites\n  What is a mud?\t\t\t  Storytelling vs. Simulation\n\n[courtesy
          of Jon A. Lambert]\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t\t4.
          Scenarios\n\n\n\nStandard scenarios used to demonstrate various mechanisms.\n\n\nDragon's
          Dinner\t\t\t\t- Alexander Weidt\n~~~~~~~~~~~~~~~\n\n            /(o__.       _____|
          \ \\                     |OcO|\n ---------/|-/|-(  ,__)-------|    |   |--------+++++++++/|_|
          - |_\n-----------\n       /\\/ |/ |/ _ \\++++++C+O+M+P+L|E+X+I+T+Y+++++O+F+++/f|
          \ `-'  |\n    |\\/         / \\/      \"++++++D+|+S+T+R+I+B+U+T+E+D+( u|
          \      |\n ___| . .____. /______________|\n\"|++++++S+Y+S+T+E+M+S+\\n|_)___(_/-----------\n
          \ _| /| |_  || |_             |____|   |        \"++++++++\\| | | | \\\n
          /__/LL__,) LL__,)                 |  /                    (__|__) \\\n\nPretty
          picture depicting the famous `` Dragon's Dinner'' problem, by\nJutta Degener.
          \n\nThe Dragon's dinner problem\n---------------------------\n\nOne of the
          original goals for the DOME project was to provide a\nparallel/distributed
          execution environment for an LPmud game\ndriver. LPmud is programmed in
          a language called LPC, which is derived\nfrom C and enriched with constructs
          to enable object oriented\nprogramming, complex data types such as associative
          arrays and lambda\nclosures. This is interpreted by the game driver which
          provides single\nthreaded execution semantics.  Items in the game are represented
          by\nLPC objects which provide methods specifying how they interact with\nother
          objects in the game.\n\nConsider the following problem (dubbed \"Dragon's
          Dinner\"). Assume, in\nan asynchronous distributed system, that there are
          two room objects\n(r1, r2) and a door object (d) that connects them. R1
          contains a\nhungry dragon (hd) and r2 contains an adventurer (a). The door
          is\ncurrently open, the adventurer has just fled from r1 and is about to\nclose
          the door. The dragon, on the other hand, wants to go after the\nadventurer.
          Code for the dragon is something like:\n\n        if (d->is_open())\n                hd->move_to(r2);\n\nAnd
          the code for closing the door is something like:\n\n        d->close();\n\nNow
          what if the following happens: The thread that executes the\ndragon's action
          has checked that the door is indeed open, while the\nother thread which
          is concurrently executing on a different processor,\ncloses the door. This
          succeeds and the adventurer sees the door\nclosing. However, when control
          returns to the dragon's thread, it\nstill believes that the door is open
          and steps through it, much to the\nsurprise of the adventurer who sees the
          dragon walking through a\nclosed door, before being devoured by the dragon.\n\nNaturally
          this is merely a race-condition dictated by the asynchronous\nexecution
          of two data-dependent threads. The main goal of the DOME\nproject is to
          provide a system where the component objects can be\nprogrammed in a sequential
          fashion, but have the run-time support\nresolve such race-conditions (in
          a deadlock free manner) so that\nparallel execution can be achieved.\n\nAlexander
          Weidt [June 1995] \n\n\n\nUncertainty model\t\t\t- JC Lawrence\n~~~~~~~~~~~~~~~~~\n\nUncertainty
          model: A representation model for a MUD world or objects based\non the following
          principles:\n\n  There are three types of objects in the world:\n\n    1)
          objects which have an uncertain state\n\n    2) objects which have a certain
          state.\n\n    3) objects which don't exist but retain a certain state.\n\nThe
          state in question about an object can be its exact identity (eg, not\njust
          a key but the key to Castle Krak, not just a worn out sword but The\nSword
          of the Great God Goo Goo, etc), or the exact state of that\nidentified object
          (a gun vs a loaded gun vs a toy gun vs broken gun etc).\n\nThe terms:\n\n
          \ -- All objects are indeterminate (unidentified) until identified (see\n#1).
          \ Such objects are referred to as \"ur-objects\", or occasionally\n\"meta-objects\".
          \ \n\n  -- Upon identification ur-objects are \"realised\" and become\n\"normal-objects\".\n\n
          \ -- Objects that have been lost and are thus candidates for becoming\nur-objects
          again, or otherwise torn down are termed \"lost-objects\" or\n\"limbo-objects\".\n\nThe
          underlying concept is that the resolution of the identity of an\nobject
          is done at the last possible minute.  All ur-objects have the same\ninnate
          possibilities of being any matching normal-object.  The decision on\nwhether
          any particular ur-object is actually any particular normal-object\nis done
          only at the moment of successful identification (eg an ur-key\nsuccessfully
          opens Castle Krak).\n\n\n\nThe Stamp Collector's Dilemma\t\t- Dr. Cat\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLots
          of people might like stamp collecting in your virtual\nworld. But those
          who do will never play with those who like other\nfeatures. Should you have
          stamp collecting in your world?\" We know\nthat there are a wide range of
          features that people find enjoyable\nin online worlds. We also know that
          some of these features are in\nconflict with one another. Given the above,
          we don't yet know if it\nis possible to have a successful world that incorporates
          all the\nfeatures, or whether the design must choose to exclude some of
          them\nin order to keep the players happy.\n\n\n\nThe Tailor Problem\t\t\t-
          Marian Griffith\n~~~~~~~~~~~~~~~~~~\n\nSuppose Marian is (role)playing a
          tailor and in the game that is\na feasible profession. She learns the requisite
          skills and enjoys\nher work, designing clothing for other players, and the
          opportunity\nit provides to talk with many other players.\n\nAlong comes
          Boffo who doesn't like Marian, Tailors in general or is\njust in a bad mood.
          He attacks, and kills, Marian, loots her shop\nand leaves her to pick up
          the pieces.\n\nThe question now is: who should protect Marian from this?
          Marian\nherself, being a tailor, has neither the skill nor the interest\nin
          learning to fight and should arguably not be bothered with it.\n\n\n\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMore
          in part II                                             (Marian)\n--\nYes
          - at last - You. I Choose you. Out of all the world,\nout of all the seeking,
          I have found you, young sister of\nmy heart! You are mine and I am yours
          - and never again\nwill there be loneliness ...\n\nRolan Choosing Talia,\nArrows
          of the Queen, by Mercedes Lackey\n\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Marian Griffith <gryphon@iaehv.nl>'
                name: From
                value: Marian Griffith <gryphon@iaehv.nl>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Sun, 16 Jan 2000 14:36:50 +0000 (GMT)'
                name: Date
                value: Sun, 16 Jan 2000 14:36:50 +0000 (GMT)
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] Mud-Dev FAQ part I'
                name: Subject
                value: "[MUD-Dev] Mud-Dev FAQ part I"
              mbox_from: 
            body: "                        Mud-Dev FAQ\n                          part
              I\n                        -----------\n\n\n\nLast modified:   20 September
              1999\n                 14 November  1999\n                 16 Januari
              \  2000\n\n*1. Introduction\n*2. Frequently Asked Questions\n*3. Previous
              Topics\n*4. Scenarios\n 5. Resources\n 6. Glossary\n 7. Changes, To
              Do & Acknowledgements\n(* chapters found in this part of the FAQ)\n\nA
              web based version of this FAQ can be found at:\n<URL:http://www.kanga.nu/FAQs/MUD-Dev-L/>\n\nPlease
              email any corrections, suggestions or constructive criticisms\nto Marian
              Griffith at gryphon@iaehv.nl\n\nRecent Changes:\n\n16-01-2000 -- Faq
              split in two for size (chapters 1 to 4 and 5 to 7)\n              Resources:
              Added several new muds\n              Made some minor spelling corrections\n991114
              -- New moderator (Marian Griffith)\n990920 -- Resources: Added Raph
              Koster's website, gaming section.\n\t  Glossary: New terms include full
              world reset, PK, psychological\n\t\t    disinhibition, world state and
              virtual sociopath.\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t1.
              Introduction\n\n\n\nThe following may also be found at the list's homepage
              straddled at\n<URL:http://www.kanga.nu/lists/listinfo/mud-dev/>.\n\n--<cut>--\n\nList
              charter \n\nThe MUD Development mailing list is not platform, language
              or game specific,\nbut concentrates on discussing the design and implementation
              of any and all\nMUD servers and systems.  Another large related topic
              is game design.  This\ndoes not mean that the details of a specific
              server or game design point\ncan't be discussed in excruciating detail,
              or even that server or game\nsource can't be bandied about and picked
              over, just that the list isn't to\nbecome a religious stomping ground
              for your platform, language, server, or\nhobby horse of choice.  The
              topic definition is not limited to technical\nareas: social engineering,
              cultural considerations, applicability of\ntechnical addresses to \"soft\"
              problems, and other less rigorous avenues of\ninvestigation are also
              fair game. \n\nThe goal is high signal, low noise. The MUD Development
              list is NOT an\nemail version of the rec.games.mud.* newsgroups.\n\n--<cut>--\n\n\nAlso
              from the same page is a message for the commercially orientated amongst\nus:\n\n--<cut>--\nNote
              from the list owner \n\nThe list has a number of members who work professionally
              in the field. Their\npresence raises certain concerns for intellectual
              property, trade secrets,\ncopyrights, etc for the list and for list
              postings. The below should give an\noverview of this area, what I expect
              of list members, commercially\naffiliated or otherwise, as well as the
              intended character of the list.\n\nAs list owner I expect all list members
              to be responsible for what they\npost.\nThe rules are obvious: If there
              is something your company or affiliations\ndoes not want publicised,
              then don't post it to the list. If you see one of\nyour commercial or
              other partners post something to the list that shouldn't\nhave been,
              then don't bring it up on the list -- take it to direct email.\nRaising
              such issues on the list will be used as an excuse for removing\nmembership.
              \n\nPlease do not use this as an alibi to start adding disclaimers to
              your\nposts. You are the members on this list, not your companies. If
              it isn't\nyour opinion don't write it. If you are reporting someone
              else's opinion,\nstate it as such.\n\nIf a post is written as a representative
              of your company or affiliation,\nthen identify it as such. Adding a
              signature which identifies your\naffiliation is not enough. That can
              be too easily automated and is not\nan explicit statement of representation.
              \ A leading paragraph identifying\nthe source or representation placed
              above all the textual body including\nthe attributions, will do (keep
              it short).\n\nCommercial grandstanding, advertisements, chest puffing,
              or other forms of\npromotion are not appreciated on the list and will
              be rewarded with removal\nof membership. The list is an expressly non-commercial
              venue. It is intended\nas an intelligent and free discussion by peers
              in the field, both hobbyist\nand professional.\n\nMembership of the
              list is not a right. You are here as my guests. This is a\nprivate list
              run as a personal contribution to the field. I trust the list's\nmembership
              to behave accordingly.\n\nPosting to the list may be considered analagous
              to having a conversation in\nmy living room using bull horns while the
              windows are open and everyone has\ntape recorders. There is no secrecy,
              or control of the dissemination of data\nonce it is posted.\n\nAnd on
              a final note: Attempting to invalidate or discourage a discussion or\navenue
              of investigation on the list because it strays too close to a\ncommercial
              project's field or other such interest will be deemed an\nintentional
              personal insult and due cause for permanent removal from the\nlist along
              with all associates.\n\nThank you.\n\nJ C Lawrence, MUD-Dev list owner.\n\n--<cut>--\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t2.
              Frequently Asked Questions\n\n\n\n1. What should I do now I have joined?\n\nIf
              you have not already, please read the rec.games.mud.* FAQs to\nfamiliarise
              yourself with all the different sorts of muds out there, see\n<URL:http://www.cs.okstate.edu/~jds/mudfaqs.html>.
              \ Take some time to\nbrowse through the list's webpage.  It may be found
              at\n<URL:http://www.kanga.nu/lists/listinfo/mud-dev/>.\n\n\n2. How do
              I post?\n\nPosting on the list is a privilege which may be obtained
              from the list\nowner (who resides at mud-dev-owner@kanga.nu).  It is
              suggested you lurk for\na while to get a gist of how things work on
              the list.  When you do approach\nthe list owner for posting privileges,
              attach your intended posting.\n\n\n3. What is the accepted standard
              for posting?\n\nIn short: No more than 80 columns wide, and only use
              7bit ASCII.  If\nyou are posting from a country/language which uses
              \"special\"\ncharacters, such as with umlauts or other diacritical marks,
              then\nplease ensure that your mailer properly MIME wraps them.  Most
              modern\nmailers will do this properly.\n\nMIME, HTML, RichText and similar
              are discouraged.  This includes\n\"vcard\" attachments from NetScape
              mail and similar.  Small MIME\nattachments, such as a graphic used to
              illustrate a point discussed in\nthe text of a message are acceptable.
              \ The guiding rule is that the\nbrunt of the value of a message must
              always be in the text.\n\nA reply to another posting must have at least
              the name of the original\nauthor if your mailer does not automatically
              supply one, eg:\n\n  [Bubba]\n  >On  4 Jan 98 at 22:20, Boffo wrote:\n
              \ >> Buffy <Buffy@players-r-us.com> wrote:\n  >>> I just found a cool
              mud at <URL:http://web.mud.com>\n  >>\n  >> Golly Gosh!  Cover me in
              eggs and flour and bake me for 40 minutes!\n\nThese are commonly referred
              to on the list as \"attributions\".\n\nWeb pages are usually referenced
              in angled brackets as above.  \n\nWhen quoting a log from a game, put
              at least two spaces at the start\nof each line so that when it is quoted
              it does not become confused\nwith other conversation text:\n\n--<example>--\nI
              have a maze in my game:\n\n  > look\n  You are in a maze of twisty little
              passages, all alike.\n\nIsn't it neat?\n--<example>--\n\nWill be quoted
              as:\n\n--<example>--\n>I have a maze in my game:\n>\n>  > look\n>  You
              are in a maze of twisty little passages, all alike.\n>\n>Isn't it neat?\n--<example>--\n\nUse
              a bit of common sense when quoting.  Include enough of the\noriginal
              message to make sense; no more or less.  Avoid quoting an\nentire post
              with a one line reply (btw, one line replies are bad :).\n\nAlso, don't
              be afraid to change the subject heading to something more\nrelevant
              if the topic has strayed somewhat (usually happens to most\nthreads).
              \ \n\nOh yeah, and a sensibly sized signature.\n\n\n4. What is meant
              by high signal to noise ratio?\n\nThe noisy postings include messages
              which essentially say \"I agree!\"\nand add no extra value, or those
              that do not relate to the purpose of\nthe list (like what you had for
              dinner, how your codebase/driver is\nclearly superior to all others
              in existence and why language such and\nsuch is better than such and
              such).  Try to keep on topic and you\nwon't go wrong.  However, the
              list is infamous for long postings which\nstart with one topic and end
              up rambling on about something else\ncompletely different towards the
              end.  But so long as it is regarding\nmuds...\n\n\n5. I just made a
              post about such and such but no one responded to it!\n\nThere could
              be several reasons why no one has answered to your\nposting.  If it
              was to start a new thread, it could have been that the\ntopic has just
              recently been discussed.  Try waiting a while before\nbring it back
              up again.  If it was in answer to a current thread,\nother list members
              will have read it but just might not have anything\nto say on that point
              right then.  \n\n\n6. What's all this Bubba business?\n\nBubba, Boffo,
              Buffy and friends are all typical mud players bred for\ntest scenarios
              devised by various list members.  Originally procreated\nby J C Lawrence
              (how, I don't wish to know), they have since come into\nwidespread use
              amongst the mud usenet groups (much to J C's amusement).\n\n\n7. Aaargh!
              \ The traffic is too much!\n\nPerhaps switching to the daily digest
              mode would help?\n\nGo to <URL:http://www.kanga.nu/lists/listinfo/mud-dev/>,
              enter your\nsubscribed email address at the bottom, and then edit your
              subscription\noptions as appropriate.\n\n\n8. How do I access the archives?\n\nList
              traffic is archived daily and housed at:\n<URL:http://www.kanga.nu/archives/MUD-Dev-L/>\n\n\n9.
              How do I turn off the list while I'm on holiday?\n\nGo to <URL:http://www.kanga.nu/lists/listinfo/mud-dev/>,
              enter your\nsubscribed email address at the bottom, and then edit your
              subscription\noptions as appropriate.\n\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t3.
              Previous Topics\n\n\n\nHere's a list of practically all the topics discussed
              since the list's\ncreation up to the end of Dec 98 (early traffic may
              be missing):\n\nServer design:\n Affects vs. spoofs\n Security concerns
              of spoofs\n Component based bodies vs. aggregate bodies vs. atomic bodies\n
              Rooms vs. coordinate spaces vs. mixed forms of the two\n Methods of
              handling coordinate spaces: neighbourhoods, tree forms\n R-Trees, R*-Trees,
              3d arrays, Quad/Oct trees \n Automated population containers\n Event
              models\n Internal process models\n Security models\n Multi-threaded
              server design [conflicts resolution?]\n Database design for a server\n
              Use of transactional databases in a MUD server\n How to avoid resets\n
              Parsing systems, and language development tools\n Design of internal
              MUD languages\n Variations on event-driven design\n Disk vs. memory
              based designs for MUD servers\n IO Socket efficiencies.\n Telnet protocol
              and terminal emulation\n Design of Object IDs and Object ID recycling\n
              Artificial probability systems\n Virtual rooms, virtual objects, virtual
              mobiles\n Sending mail from within a mud server\n String handling and
              memory\n Verb handling - global vs. local vs. mixed\n Generic objects\n
              Object assemblies\n Collision detection\n Client scripting and scripting
              prevention\n Graphical interfaces\n Must have books for programmers\n
              Web vs. Telnet\n\nGame design:\n Classes of players and what they want
              from a game\n Levels vs. level-less vs. abstracted levels vs. level-comparatives\n
              Keeping a goal progression without levels\n Handling of character inventory
              and representation of inventory\n Families and their impacts on clans,
              multi-charring, and tactics\n Character senses, representation and extension\n
              Re-usable quests or plotlines\n Generic quest creation systems\n Rumour
              systems, handling rumour propagation, and rumour decay\n Races\n Placement
              of characters in the MUD-world predator totem-pole\n Handling of character
              death as an in-game event\n Perma-death vs. resurrection\n Economic
              systems (and lessons learnt by prior experiments)\n Energy-style ecologies
              and economies\n Ecologies for MUD worlds\n Inter-player communication
              systems\n Perceived danger levels for characters\n NPC AI, goal-oriented
              NPCs, intelligently automating NPCs\n Player characters as NPCs/monsters\n
              Nutrition\n Wounds and trauma systems\n Combat systems (round based,
              no rounds, interactive, etc.)\n Combat messages\n Combat scripting and
              action\n Dynamic descriptions and perception\n Views on the \"undead\"\n
              User command interface design\n All about bows, longbows, crossbows,
              etc.\n Festivals and in-game mud games\n Supporting both RPers and GOPers\n
              Virtual chemistry/alchemy\n In-game political and social structures
              \n Implementing mundane professions (or Nation of Shopkeepers)\n Methods
              of integrating PK (coexistence with non-PK)\n Handling poison and disease\n
              Inebriation and drugs\n Dragons - a number of viewpoints\n Spoken and
              written languages  \n Food - interesting or irritating\n Starting characters
              or creating characters\n Amalgamud specification document\n Alignment
              vs. reputation \n Character positions and rank point system\n Automatic
              name generation\n Learning and skill progression  \n Classless systems
              and profession-based systems\n Physics and the mud universe\n Hard sci-fi
              vs. science fantasy\n Character places of their own\n Character henchmen
              and servants \n Thieves - ideas  \n Allowing players to affect the world\n
              Group play and group dynamics\n Spells and spell-casting systems \n
              Characters - heroes, nobodies, or prey species\n Game balance\n Hive
              minds\n Traps and riddle lists\n Representing character stats - numeric,
              descriptive and graphic\n Settings for mud worlds\n List members' inspirational
              fantasy and sci-fi books\n Handling and building of large trackless
              areas\n Gods and deity systems\n\nMud Administration/Philosophy\n Lorry's
              document on wizarding\n The morality of logging and snooping\n Problems
              with socializers\n Social control and engineering\n Dealing with \"problem\"
              players\n Is the virtual world real?\n Gender issues\n Bartle's mud
              papers\n The purpose of mudding\n Motivating builders and coders\n Role-play
              vs. Game-Only Play discussion\n PK vs. Non-PK discussions\n The infamous
              rape discussion \n Habitat papers and anecdotes\n Overriding players'
              control of the character \n\n\nThe following is a list of topics that
              appeared on the MudDev list in \n1998...\n\n\n  Server Design:\n\n  Event
              handling\t\t\t  Socket programming\n  Task parsing\t\t\t\t  Byte code\n
              \ Java and Javascript\t\t\t  Dynamic module loading\n  DBs and Events\t\t\t
              \ Java threading\n  Let's build a compiler\t\t  Version control\n  Intermud
              communication\t\t  Nested coordinate spaces\n  Persistent storage\t\t\t
              \ Transport layer UDP vs TCP\n  Atomic functions\t\t\t  Algorithms for
              storing free space\n  Mapping - creating bitmaps\t\t  Using SQL databases\n
              \ Mapping data into RDBMs\t\t  DevMUD project\n\n  Game Design:\n\n
              \ Mud economy\t\t\t\t  Vast areas in muds\n  Time travel and logging\t\t
              \ Unique items\n  Gods and worshippers\t\t\t  Senses\n  Terrain rendering\t\t\t
              \ Simulating future history\n  Ultima Online's reputation system\n  Bad
              game designs (What we hate about muds)\n  Handling log out\t\t\t  There
              can be only one\n  GRUMPS\t\t\t\t  Character development\n  Teleportation
              code\t\t\t  Avatars\n  Leaving characters in the game\t  Mud school\n
              \ Regulating player created objects\t  In game bulletin boards\n  Level-less
              muds\t\t\t  Describe concept\n  World persistence\t\t\t  Random numbers\n
              \ Charm\t\t\t\t\t  Combat intelligence\n  Darkness visibility\t\t\t
              \ Thoughts on languages\n  Recursive look\t\t\t  Equipment fitting\n
              \ Implementing god\t\t\t  Marian's tailor problem\n  Room descriptions\t\t\t
              \ Prescience rules/handling telepathy\n  Map-making programs\t\t\t  Stack-based
              NPC AI\n  Multiple currencies\t\t\t  Command parsing\n  Affordances
              and Social method\t\t  Fun vs. realism\n\n  Client Design:\n\n  Netscape
              Clients\t\t\t  Netscape Gecko\n  CORBA, RMI, DCOM\t\t\t  Graphical Mud
              perspective\n  3D perspective\t\t\t  Net protocols for mudding\n  Client
              side caching\t\t\t  Using HTML in muds\n  Trusting the client/ security\t\t
              \ DIS - client/server protocol\n\n  Mud Administration/Philosophy:\n\n
              \ Administrative Responsibility\t\t  Impact of the Web on muds\n  PK
              debate summary\t\t\t  The MLI project\n  XShipwars\t\t\t\t  The Darkhole
              tests\n  Wired on Ultima Online\t\t  CGDC summary\n  Golgotha\t\t\t\t
              \ Laws of Online worlds\n  Analysis and specification\t\t  Mud web sites\n
              \ What is a mud?\t\t\t  Storytelling vs. Simulation\n\n[courtesy of
              Jon A. Lambert]\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t\t4.
              Scenarios\n\n\n\nStandard scenarios used to demonstrate various mechanisms.\n\n\nDragon's
              Dinner\t\t\t\t- Alexander Weidt\n~~~~~~~~~~~~~~~\n\n            /(o__.
              \      _____|  \\                     |OcO|\n ---------/|-/|-(  ,__)-------|
              \   |   |--------+++++++++/|_| - |_\n-----------\n       /\\/ |/ |/
              _ \\++++++C+O+M+P+L|E+X+I+T+Y+++++O+F+++/f|  `-'  |\n    |\\/         /
              \\/      \"++++++D+|+S+T+R+I+B+U+T+E+D+( u|       |\n ___| . .____.
              /______________|\n\"|++++++S+Y+S+T+E+M+S+\\n|_)___(_/-----------\n  _|
              /| |_  || |_             |____|   |        \"++++++++\\| | | | \\\n
              /__/LL__,) LL__,)                 |  /                    (__|__) \\\n\nPretty
              picture depicting the famous `` Dragon's Dinner'' problem, by\nJutta
              Degener. \n\nThe Dragon's dinner problem\n---------------------------\n\nOne
              of the original goals for the DOME project was to provide a\nparallel/distributed
              execution environment for an LPmud game\ndriver. LPmud is programmed
              in a language called LPC, which is derived\nfrom C and enriched with
              constructs to enable object oriented\nprogramming, complex data types
              such as associative arrays and lambda\nclosures. This is interpreted
              by the game driver which provides single\nthreaded execution semantics.
              \ Items in the game are represented by\nLPC objects which provide methods
              specifying how they interact with\nother objects in the game.\n\nConsider
              the following problem (dubbed \"Dragon's Dinner\"). Assume, in\nan asynchronous
              distributed system, that there are two room objects\n(r1, r2) and a
              door object (d) that connects them. R1 contains a\nhungry dragon (hd)
              and r2 contains an adventurer (a). The door is\ncurrently open, the
              adventurer has just fled from r1 and is about to\nclose the door. The
              dragon, on the other hand, wants to go after the\nadventurer. Code for
              the dragon is something like:\n\n        if (d->is_open())\n                hd->move_to(r2);\n\nAnd
              the code for closing the door is something like:\n\n        d->close();\n\nNow
              what if the following happens: The thread that executes the\ndragon's
              action has checked that the door is indeed open, while the\nother thread
              which is concurrently executing on a different processor,\ncloses the
              door. This succeeds and the adventurer sees the door\nclosing. However,
              when control returns to the dragon's thread, it\nstill believes that
              the door is open and steps through it, much to the\nsurprise of the
              adventurer who sees the dragon walking through a\nclosed door, before
              being devoured by the dragon.\n\nNaturally this is merely a race-condition
              dictated by the asynchronous\nexecution of two data-dependent threads.
              The main goal of the DOME\nproject is to provide a system where the
              component objects can be\nprogrammed in a sequential fashion, but have
              the run-time support\nresolve such race-conditions (in a deadlock free
              manner) so that\nparallel execution can be achieved.\n\nAlexander Weidt
              [June 1995] \n\n\n\nUncertainty model\t\t\t- JC Lawrence\n~~~~~~~~~~~~~~~~~\n\nUncertainty
              model: A representation model for a MUD world or objects based\non the
              following principles:\n\n  There are three types of objects in the world:\n\n
              \   1) objects which have an uncertain state\n\n    2) objects which
              have a certain state.\n\n    3) objects which don't exist but retain
              a certain state.\n\nThe state in question about an object can be its
              exact identity (eg, not\njust a key but the key to Castle Krak, not
              just a worn out sword but The\nSword of the Great God Goo Goo, etc),
              or the exact state of that\nidentified object (a gun vs a loaded gun
              vs a toy gun vs broken gun etc).\n\nThe terms:\n\n  -- All objects are
              indeterminate (unidentified) until identified (see\n#1).  Such objects
              are referred to as \"ur-objects\", or occasionally\n\"meta-objects\".
              \ \n\n  -- Upon identification ur-objects are \"realised\" and become\n\"normal-objects\".\n\n
              \ -- Objects that have been lost and are thus candidates for becoming\nur-objects
              again, or otherwise torn down are termed \"lost-objects\" or\n\"limbo-objects\".\n\nThe
              underlying concept is that the resolution of the identity of an\nobject
              is done at the last possible minute.  All ur-objects have the same\ninnate
              possibilities of being any matching normal-object.  The decision on\nwhether
              any particular ur-object is actually any particular normal-object\nis
              done only at the moment of successful identification (eg an ur-key\nsuccessfully
              opens Castle Krak).\n\n\n\nThe Stamp Collector's Dilemma\t\t- Dr. Cat\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLots
              of people might like stamp collecting in your virtual\nworld. But those
              who do will never play with those who like other\nfeatures. Should you
              have stamp collecting in your world?\" We know\nthat there are a wide
              range of features that people find enjoyable\nin online worlds. We also
              know that some of these features are in\nconflict with one another.
              Given the above, we don't yet know if it\nis possible to have a successful
              world that incorporates all the\nfeatures, or whether the design must
              choose to exclude some of them\nin order to keep the players happy.\n\n\n\nThe
              Tailor Problem\t\t\t- Marian Griffith\n~~~~~~~~~~~~~~~~~~\n\nSuppose
              Marian is (role)playing a tailor and in the game that is\na feasible
              profession. She learns the requisite skills and enjoys\nher work, designing
              clothing for other players, and the opportunity\nit provides to talk
              with many other players.\n\nAlong comes Boffo who doesn't like Marian,
              Tailors in general or is\njust in a bad mood. He attacks, and kills,
              Marian, loots her shop\nand leaves her to pick up the pieces.\n\nThe
              question now is: who should protect Marian from this? Marian\nherself,
              being a tailor, has neither the skill nor the interest\nin learning
              to fight and should arguably not be bothered with it.\n\n\n\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMore
              in part II                                             (Marian)\n--\nYes
              - at last - You. I Choose you. Out of all the world,\nout of all the
              seeking, I have found you, young sister of\nmy heart! You are mine and
              I am yours - and never again\nwill there be loneliness ...\n\nRolan
              Choosing Talia,\nArrows of the Queen, by Mercedes Lackey\n\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] Mud-Dev FAQ part I"
        from: Marian Griffith <gryphon@iaehv.nl>
        references: []
        date: 2000-01-16 14:36:50.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 000Dnsn2
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *430
    parent: 
    children: []
  *186: *431
  *84: *88
  *46: *49
  *187: *432
  *104: *107
  *306: *310
  *321: *433
  ? &434 !ruby/object:MessageId
    raw: Jysr9C0u@generated-message-id.chibrary.org
  : &496 !ruby/object:MessageContainer
    key: *434
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: |
          From: J C Lawrence <claw@kanga.nu>
          Date: Mon, 03 Jan 2000 13:42:09 -0800
          Subject: [MUD-Dev] Microthreads for Python

          While Python already supports threads, its not really a fully
          scalable model.  The following addresses some of that:

            http://world.std.com/%7ewware/uthread.html

          --<cut>--
          It would be nice to use Python for programs involving huge numbers
          of very light-weight threads. This would make it easy to simulate
          large swarms of interacting agents, which sounds like fun.

          Python functions are compiled to a bytecode, which runs on a virtual
          machine, defined in Python/ceval.c in the eval_code2
          function. Python uses frame objects to administer information
          involved in nested function calls. In ceval.c, the frame stack is
          implicitly embedded in the C stack, because eval_code2 calls itself
          recursively when one Python function calls another.

          Microthreads are implemented with a modified version of the code in
          Python/ceval.c, which is Python's bytecode interpreter. Each thread
          maintains an explicit frame stack, whereas normally frames are kept
          on the C stack via recursive calls to eval_code2. My version of
          eval_code2 can be stepped for a number of steps, unlike the normal
          version which runs in an infinite loop until the outermost function
          returns.

          I've defined several objects in C: a "working" object (which is a
          placeholder like the normal "None" object), a "uthread" object, a
          "semaphore" object (also known as a mutex), and a "queue"
          object. The semaphore and queue are microthread-safe. There is also
          a microthread-safe version of the whrandom random number generator.

          uthread.thread() creates a microthread. As arguments, it takes a
          function, and any arguments that the function expects. For instance
          to create a thread that computes f(x,y,z), you would write something
          like 'mythread = uthread.thread(f,x,y,z)'.

          Every thread has a step method (mythread.step()) which will step the
          microthread for a finite number of opcodes. It returns the thread's
          return value, if the thread has finished, or if the thread has not
          yet finished, it returns uthread.working (the "working" placeholder
          object). If you attempt to step a thread which has already finished,
          an error will result.

          uthread.semaphore() creates a semaphore object. It takes an optional
          integer argument (default value is 1) telling how many instances of
          the semaphore may be outstanding at any moment. A semaphore has the
          following methods: claim() will claim one instance of a semaphore,
          or block until an instance becomes available. qclaim() is a
          non-blocking version of claim, which returns a boolean telling
          whether the claim was successful. release() will release an instance
          of the semaphore.

          uthread.queue() creates a queue object, and takes an integer
          argument, specifying a number of stages.  Each stage in the queue is
          a normal list. A queue has the following methods: put(x) will append
          x to the list at the rear of the queue, get() will remove and return
          the first object from the list at the front of the queue (None if
          the front queue is empty), and step() will advance the lists one
          step toward the front of the queue, concatenating the front two
          lists to become the new front list.

          There is much similarity between this project and Stackless Python
          by Christian Tismer, as several people on the Python newsgroup have
          pointed out. Eventually it will probably make sense to merge
          microthreads into Stackless Python, but it's not my most immediate
          priority.

          Some of the applications that interest me for microthreads are
          amorphous computing and computational economics. Microthreads could
          also be used to write agents in a game, such as robot tanks or
          PacMan monsters
          --<cut>--

          The Stackless Python referenced above can be found at:

            http://www.pns.cc/stackless/stackless.htm

          but currently that site is note accepting connections.

          --
          J C Lawrence                                 Home: claw@kanga.nu
          ----------(*)                              Other: coder@kanga.nu
          --=| A man is as sane as he is dangerous to his environment |=--


          _______________________________________________
          MUD-Dev maillist  -  MUD-Dev@kanga.nu
          http://www.kanga.nu/lists/listinfo/mud-dev
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Mon, 03 Jan 2000 13:42:09 -0800'
                name: Date
                value: Mon, 03 Jan 2000 13:42:09 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] Microthreads for Python'
                name: Subject
                value: "[MUD-Dev] Microthreads for Python"
              mbox_from: 
            body: |
              While Python already supports threads, its not really a fully
              scalable model.  The following addresses some of that:

                http://world.std.com/%7ewware/uthread.html

              --<cut>--
              It would be nice to use Python for programs involving huge numbers
              of very light-weight threads. This would make it easy to simulate
              large swarms of interacting agents, which sounds like fun.

              Python functions are compiled to a bytecode, which runs on a virtual
              machine, defined in Python/ceval.c in the eval_code2
              function. Python uses frame objects to administer information
              involved in nested function calls. In ceval.c, the frame stack is
              implicitly embedded in the C stack, because eval_code2 calls itself
              recursively when one Python function calls another.

              Microthreads are implemented with a modified version of the code in
              Python/ceval.c, which is Python's bytecode interpreter. Each thread
              maintains an explicit frame stack, whereas normally frames are kept
              on the C stack via recursive calls to eval_code2. My version of
              eval_code2 can be stepped for a number of steps, unlike the normal
              version which runs in an infinite loop until the outermost function
              returns.

              I've defined several objects in C: a "working" object (which is a
              placeholder like the normal "None" object), a "uthread" object, a
              "semaphore" object (also known as a mutex), and a "queue"
              object. The semaphore and queue are microthread-safe. There is also
              a microthread-safe version of the whrandom random number generator.

              uthread.thread() creates a microthread. As arguments, it takes a
              function, and any arguments that the function expects. For instance
              to create a thread that computes f(x,y,z), you would write something
              like 'mythread = uthread.thread(f,x,y,z)'.

              Every thread has a step method (mythread.step()) which will step the
              microthread for a finite number of opcodes. It returns the thread's
              return value, if the thread has finished, or if the thread has not
              yet finished, it returns uthread.working (the "working" placeholder
              object). If you attempt to step a thread which has already finished,
              an error will result.

              uthread.semaphore() creates a semaphore object. It takes an optional
              integer argument (default value is 1) telling how many instances of
              the semaphore may be outstanding at any moment. A semaphore has the
              following methods: claim() will claim one instance of a semaphore,
              or block until an instance becomes available. qclaim() is a
              non-blocking version of claim, which returns a boolean telling
              whether the claim was successful. release() will release an instance
              of the semaphore.

              uthread.queue() creates a queue object, and takes an integer
              argument, specifying a number of stages.  Each stage in the queue is
              a normal list. A queue has the following methods: put(x) will append
              x to the list at the rear of the queue, get() will remove and return
              the first object from the list at the front of the queue (None if
              the front queue is empty), and step() will advance the lists one
              step toward the front of the queue, concatenating the front two
              lists to become the new front list.

              There is much similarity between this project and Stackless Python
              by Christian Tismer, as several people on the Python newsgroup have
              pointed out. Eventually it will probably make sense to merge
              microthreads into Stackless Python, but it's not my most immediate
              priority.

              Some of the applications that interest me for microthreads are
              amorphous computing and computational economics. Microthreads could
              also be used to write agents in a game, such as robot tanks or
              PacMan monsters
              --<cut>--

              The Stackless Python referenced above can be found at:

                http://www.pns.cc/stackless/stackless.htm

              but currently that site is note accepting connections.

              --
              J C Lawrence                                 Home: claw@kanga.nu
              ----------(*)                              Other: coder@kanga.nu
              --=| A man is as sane as he is dangerous to his environment |=--


              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] Microthreads for Python"
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-03 21:42:09.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jysr9C0u
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *434
    parent: 
    children: []
  *156: *435
  *185: *436
  *198: *200
  *138: *141
  *158: *161
  *417: *437
  *246: *250
  *203: *438
  *397: *439
  *308: *440
  *113: *143
  *299: *441
  ? &442 !ruby/object:MessageId
    raw: JzBSj0e8@generated-message-id.chibrary.org
  : &497 !ruby/object:MessageContainer
    key: *442
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: Cynbe ru Taren <cynbe@muq.org>\nDate: Sat, 1 Jan 2000 14:10:17
          -0600\nSubject: [MUD-Dev] Muq update\n\nOn Wed, 29 Dec 1999 01:03:00 -0800
          \"Joe Kingry\" <jkingry@uwaterloo.ca> wrote:\n\n| Muq seems to have most
          of these except for MUF, I got tired of programming\n| backwards ;).\n\n*grin*\n\nMe
          too, actually!\n\nMuq has \"always\" had the design goal of supporting application
          languages,\nbut in the last couple of releases I've actually started implementing\nthis.\n\nMUF
          (Multi-User Forth) is still the best-developed Muq softcode language, and\nMUL
          (Multi-User Lisp) is still in limbo waiting for user demand, but we now
          have\nMUC (Multi-User C) coming along pretty quickly.\n\nI wrote MUC over
          a weekend or so because I was testing the Muq OpenGL bindings\nand when
          it comes to 3D graphics, I'm too much of a C chauvinist to be willing\nto
          write heaps of OpenGL test code in anything else.\n\nMUC now implements
          all the basic C control structures except 'switch' (which\nI expect to come
          along very shortly) and 'goto' (might take a bit longer).\n\nMUC also provides
          some Perl4 level regular expression syntax and such.\n\nMuq provides lots
          of functionality beyond the basic C model, most of which\nis not yet available
          in MUC.\n\nI expect to add in the needed hooks a few at a time over roughly
          the\nnext year, after which MUC will probably be the primary Muq softcoding\nlanguage.\n\nBut
          never the only one!  I expect and intend Muq to support a wide\nvariety
          of softcoding languages from the conventional and general\n(MUF, MUL, MUC)
          to the specialized (I've barely started SQL) to the\noutre' (APL, Prolog
          and Smalltalk would each be a kick to have\naround for occasional use, in
          their varied ways) to the purely\nexperimental (why not HTML as a source
          syntax for programming?)\n\n\n\nAs long as I'm on the horn here, a quick
          Muq status report:\n\nFirst beta (version 0.0.0) was released 99Dec29 as
          promised about\nyear go:  All future Muq server and library releases will
          be\nupward compatible from here on out.\n\nThe Muq worldkit \"oldmud\" and
          distributed world \"Micronesia\" are\n-not- yet in beta:  They are big projects
          in their own right, and\ntrying to beta them simultaneously with the Muq
          server proper was\n(I quickly realized) not a realistic proposition.  I'm
          informally\nprojecting a Brigadoon Day premier for them, but that is not
          yet\na promise -- I have to see how much spare time Cisco is going to\nleave
          me before I can schedule that rationally.\n\nMuq source:  ftp://ftp.cistron.nl/pub/people/cynbe/muq.0.0.0-src.tar.gz\nMuq
          docs:   http://muq.org/~cynbe/muq/muq.html\n\n(Updating the docs is a high
          near-term priority.)\n\nMuq mailing list subscriptions (manually maintained
          at present):\n\n muq-announce-request@muq.org     New releases\n muq-admin-request@muq.org
          \       For administratore\n muf-coder-request@muq.org        For MUF softcoders\n
          muc-coder-request@muq.org        For MUC softcoders\n muq-coder-request@muq.org
          \       For server hackers\n muq-user-request@muq.org         For end users\n
          muq-bugs-request@muq.org         For bug reports\n\nAll are deathly quiet
          at present;  I expect traffic to ramp up\nrather slowly over the next year
          or so.\n\n\n\nI'll close with a return to Joe's server laundry list, seen
          from\n(surprise?) the Muq perspective:\n\n| I think I have my object/class/code/driver
          concepts all muddled.\n| \n| All I want in a mud server is this:\n| \n|
          -stores things in a database file(s). No more 4000 player files.\n\nWith
          Muq I'm trying to push the envelope on nice handling of\npersistence.\n\nThis
          means partly little touches like support for logarithmic backup\nsequences,
          so that a scattering of older dbs are preserved as well as\nthe last N.\n\nIt
          also means dividing the full server state up into lots of logically\nindependent
          sections which I call 'db's -- in general, one per system\nlibrary and one
          per user, allowing them to be individually installed,\nremoved, updated
          or rolled back.\n\nI believe this will prove to be an enormous win over
          monolithic server\ndatabase files without such update possibilities.\n\nMost
          of this support was written in 1999, and will undoubtedly need\nsome refining
          in the light of practical experience.\n\nAll of the above is unrelated to
          physical organization of the server\nstate in terms of hostfiles.  Currently
          the state is kept in a single\nhostfile, but future releases are likely
          to support such things as\nkeeping system libraries in a separate read-only
          dbfile -- to avoid\nwasting space by backing them up with user data, and
          to simplify\neven further updating of standard softcode libraries.\n\n\n\n|
          -allows me to define objects online. Ie. I can decide I need an object that\n|
          will act like a boat, and I can code and modify this online.\n\nMuq's OOP
          facilities are based on the CommonLisp Object System, the\nmost stable and
          general standard I could find.  In particular, CLOS\ndefines what should
          happen to existing instances of a class when the\nclass is redefined, something
          essential in a persistent programming\nenvironment such as a mud, but absent
          from such standards as Java and\nC++, which limit themselves to throw-away
          one-session datastructures.\n\nBoats are actually an example I use in my
          tutorials. :)\n\n\n\n| -doesn't have every object in memory, only when needed,
          otherwise on file.\n\nMuq keeps objects on disk and can demand-page any
          object as needed\nin a single read() (i.e., half the time of gdbm or such
          solutions)\nwhile still efficiently supporting large numbers of small objects\n--
          the norm for mud-style systems.\n\nA ram buffer (typically set to 8Meg,
          but resizable) caches recently\nused objects, with an MMU-style hashtable
          for locating them quickly.\nOverhead due to the hashtable is about 3% of
          CPU used by the server\n-- thanks to careful efficiency tuning!\n\nThe main
          caveat on all this at the moment is that the current\ngarbage collector
          is a simple-minded classic xlisp style\nmark-and-sweep, which will force
          all of the db into ram on\neach garbage collect:  This means that if you
          have much dynamic\nallocation going on, in practice your db currently has
          to fit in\nthe ram buffer.\n\nI've designed a two-generation production
          garbage collector to\naddress this issue, with garbage collection of generation\nzero
          done entirely in-ram and garbage collection of generation\none done incrementally:
          \ The design work was done in December\nand I expect implementation to take
          about 1-2 weekends, and\nto happen sometime this year.\n\n\n\n| -doesn't
          require me to learn it's \"own custom embedded language\", this one\n| really
          gets to me\n\nI used to feel rather strongly about this myself:  It is one
          reason\nI picked CommonLisp as a model for Muq:  It is a well-known,\nstandardized
          language which can be sanely used in a sandbox\nenvironment.  I still expect
          MUL to eventually be close enough\nto CommonLisp as to make little practical
          difference for most\nusers.\n\nI looked at supporting ANSI Forth, but it
          really just isn't suitable\nfor sandbox programming of virtual world stuff.\n\nC
          and C++ are likewise simply flatly unsuitable for high-level\nscripting
          sorts of applications.  I've tried to make MUC look\nand feel as much like
          C as is reasonable in the Muq environment,\nhowever, and I believe that
          is what the typical C fan really wants.\n(Witness the success of languages
          like Tcl and Perl which look a\nlot like C superficially while having in
          fact only the vaguest\nsemantic relationship to it.)\n\nPerl is in some
          ways better, but really pretty lame when it comes\nto a lot of OOP-related
          stuff.\n\nIn the end, application languages really have their own set of\ndesign
          requirements, and trying to model them too closely on\nother kinds of languages
          is usually going to be a mistake.\n\nUsing an off-the-shelf app language
          implementation can of course\nbe sensible, if a good one is available at
          design time.  When\nMuq started in '93, Java and such really didn't exist...
          :)\n\n\n\n\n| -somehow allows for security and access levels while coding\n\nThis
          covers a lot of design decisions!  I've thought hard about\nthis stuff in
          Muq.  In general, Muq executes compiled functions\nwith the privileges of
          the caller (not of the author/installer,\nsomething which I believe to be
          a major security design mistake,\ncommon though it be) but allows SUID-style
          assumption of author/\ninstaller privileges via specific source code syntax
          where\ndesired, allowing controlled access to protected resources.\n\n\n\n|
          -somehow allows for an event type system\n\nWhen I first studied the CommonLisp
          Exception System spec, I thought\nit one of the most baroque, overgrown
          monstrosities in the history\nof committee software design.\n\nI -still-
          think the document describing it is one of the most\npointlessly opaque
          documents in the software world, but I have\ngradually come to regard the
          design as potentially a big step\nforward in software design and implementation,
          perhaps on a\npar with the OOP paradigm.\n\nCLES essentially opens a marketplace
          in which software can post\nhelp-wanted ads and negotiate needed services
          in a much higher-level\nfashion than OOP allows, much as OOP does it in
          a much high level\nfashion than simple function calls or tables allow.\n\nCLES
          also opens up the execution of programs to make them inspectable\nand controllable
          in a high-level sort of way suitable for general\nGUI-driven browsing of
          code execution on a system, vs the current\nstate of the software art of
          programs which hang endlessly and\nfunction as sealed black boxes beyond
          end-user inspection or control\n(except as explicitly provided via special
          GUI hacking).\n\nI'd like to take Muq in the direction of leveraging Muq's\nexisting
          CLES-style exception handling with traditional\nstyle GUI event streams,
          in place of the usual simple-minded\ncallback paradigm:  I think this has
          great potential.\n\n\n\n\n\n| -allows code to be contained in packages and
          has appropriate management\n| features. Ie. I can write the code offline
          in a file and then upload the\n| file to the server\n\nMuq has \"packages\"
          at the source level ala CommonLisp, similar to the\nconcepts of the same
          name in Java or such.\n\nThese complement rather than competing with the
          above-described\nlower-level \"db\" concept:  A Muq db can contain many
          packages,\nand can be exported or imported as a cross-platform portable\nbinary
          hostfile.  \"db\"s are essentially a physical-layout notion,\nwhile \"packages\"
          are a logical-layout notion.  Both are useful,\neven critical in large systems.\n\n\n\n|
          -will allow for http access to the database\n\nSomeone needs to write an
          httpd internal daemon for Muq.  I'm\nhoping to stall on this until someone
          else gets impatient\nenough to do it. :)\n\nNot a very big or difficult
          project.\n\n\n\n| An added bonus would be, but hardly nessesary:\n| -driver
          ported to both Win32 platform and *nix platforms and database is\n| independent
          of platform.\n\nMuq runs 64-bits on all platforms, as future-proofing and
          to promote\nsmooth networked operation between WAN-distributed nodes running
          on\ndifferent host architectures.  (I timed this at slowing down CPU\nintensive
          stuff by about 15% on 32-bit intell machines, which I\nconsider a very reasonable
          cost.)\n\nThe Muq binary db files use the host byte ordering in order to
          allow\nmmapp()ing of the files into memory and direct access via C memory\nreads:
          This means that the db files can exist in either big-endian or\nlittle-endian
          formats.  However, the Muq server will automatically\nconvert as needed
          between the two, so normally no portability issues\nwill arise.  An exception
          would be if you wanted to NFS-share a single\nread-only copy of a library
          between processors running different byte\nsexes: This wouldn't work, separate
          big-endian and little-endian\ncopies would have to be maintained.\n\nI've
          thought of porting the Muq server to Windows:  It shouldn't be\nany harder
          than porting TinyMUCK or such to Windows, which has been\ndone.  I've tried
          to keep the code as portable as reasonably possible,\nwith I think good
          success.  (The 32- to 64-bit conversion of Muq took\nmuch less than a month,
          for example, whereas it would likely be\nvirtually impossible for many comparable
          servers.  Clean use of types\nmade the difference.)\n\nHowever, I do not
          plan to port to Windows myself:  I feel that if I\ncan get 10,000 to 100,000
          Linux users of Muq, someone will step\nforward and do the port for me.  And
          if Muq cannot get that level\nof support on Linux, why bother inflicting
          it on the Windows world? :)\n\n\n\nad astra!\n  Cynbe\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Cynbe ru Taren <cynbe@muq.org>'
                name: From
                value: Cynbe ru Taren <cynbe@muq.org>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Sat, 1 Jan 2000 14:10:17 -0600'
                name: Date
                value: Sat, 1 Jan 2000 14:10:17 -0600
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] Muq update'
                name: Subject
                value: "[MUD-Dev] Muq update"
              mbox_from: 
            body: "On Wed, 29 Dec 1999 01:03:00 -0800 \"Joe Kingry\" <jkingry@uwaterloo.ca>
              wrote:\n\n| Muq seems to have most of these except for MUF, I got tired
              of programming\n| backwards ;).\n\n*grin*\n\nMe too, actually!\n\nMuq
              has \"always\" had the design goal of supporting application languages,\nbut
              in the last couple of releases I've actually started implementing\nthis.\n\nMUF
              (Multi-User Forth) is still the best-developed Muq softcode language,
              and\nMUL (Multi-User Lisp) is still in limbo waiting for user demand,
              but we now have\nMUC (Multi-User C) coming along pretty quickly.\n\nI
              wrote MUC over a weekend or so because I was testing the Muq OpenGL
              bindings\nand when it comes to 3D graphics, I'm too much of a C chauvinist
              to be willing\nto write heaps of OpenGL test code in anything else.\n\nMUC
              now implements all the basic C control structures except 'switch' (which\nI
              expect to come along very shortly) and 'goto' (might take a bit longer).\n\nMUC
              also provides some Perl4 level regular expression syntax and such.\n\nMuq
              provides lots of functionality beyond the basic C model, most of which\nis
              not yet available in MUC.\n\nI expect to add in the needed hooks a few
              at a time over roughly the\nnext year, after which MUC will probably
              be the primary Muq softcoding\nlanguage.\n\nBut never the only one!
              \ I expect and intend Muq to support a wide\nvariety of softcoding languages
              from the conventional and general\n(MUF, MUL, MUC) to the specialized
              (I've barely started SQL) to the\noutre' (APL, Prolog and Smalltalk
              would each be a kick to have\naround for occasional use, in their varied
              ways) to the purely\nexperimental (why not HTML as a source syntax for
              programming?)\n\n\n\nAs long as I'm on the horn here, a quick Muq status
              report:\n\nFirst beta (version 0.0.0) was released 99Dec29 as promised
              about\nyear go:  All future Muq server and library releases will be\nupward
              compatible from here on out.\n\nThe Muq worldkit \"oldmud\" and distributed
              world \"Micronesia\" are\n-not- yet in beta:  They are big projects
              in their own right, and\ntrying to beta them simultaneously with the
              Muq server proper was\n(I quickly realized) not a realistic proposition.
              \ I'm informally\nprojecting a Brigadoon Day premier for them, but that
              is not yet\na promise -- I have to see how much spare time Cisco is
              going to\nleave me before I can schedule that rationally.\n\nMuq source:
              \ ftp://ftp.cistron.nl/pub/people/cynbe/muq.0.0.0-src.tar.gz\nMuq docs:
              \  http://muq.org/~cynbe/muq/muq.html\n\n(Updating the docs is a high
              near-term priority.)\n\nMuq mailing list subscriptions (manually maintained
              at present):\n\n muq-announce-request@muq.org     New releases\n muq-admin-request@muq.org
              \       For administratore\n muf-coder-request@muq.org        For MUF
              softcoders\n muc-coder-request@muq.org        For MUC softcoders\n muq-coder-request@muq.org
              \       For server hackers\n muq-user-request@muq.org         For end
              users\n muq-bugs-request@muq.org         For bug reports\n\nAll are
              deathly quiet at present;  I expect traffic to ramp up\nrather slowly
              over the next year or so.\n\n\n\nI'll close with a return to Joe's server
              laundry list, seen from\n(surprise?) the Muq perspective:\n\n| I think
              I have my object/class/code/driver concepts all muddled.\n| \n| All
              I want in a mud server is this:\n| \n| -stores things in a database
              file(s). No more 4000 player files.\n\nWith Muq I'm trying to push the
              envelope on nice handling of\npersistence.\n\nThis means partly little
              touches like support for logarithmic backup\nsequences, so that a scattering
              of older dbs are preserved as well as\nthe last N.\n\nIt also means
              dividing the full server state up into lots of logically\nindependent
              sections which I call 'db's -- in general, one per system\nlibrary and
              one per user, allowing them to be individually installed,\nremoved,
              updated or rolled back.\n\nI believe this will prove to be an enormous
              win over monolithic server\ndatabase files without such update possibilities.\n\nMost
              of this support was written in 1999, and will undoubtedly need\nsome
              refining in the light of practical experience.\n\nAll of the above is
              unrelated to physical organization of the server\nstate in terms of
              hostfiles.  Currently the state is kept in a single\nhostfile, but future
              releases are likely to support such things as\nkeeping system libraries
              in a separate read-only dbfile -- to avoid\nwasting space by backing
              them up with user data, and to simplify\neven further updating of standard
              softcode libraries.\n\n\n\n| -allows me to define objects online. Ie.
              I can decide I need an object that\n| will act like a boat, and I can
              code and modify this online.\n\nMuq's OOP facilities are based on the
              CommonLisp Object System, the\nmost stable and general standard I could
              find.  In particular, CLOS\ndefines what should happen to existing instances
              of a class when the\nclass is redefined, something essential in a persistent
              programming\nenvironment such as a mud, but absent from such standards
              as Java and\nC++, which limit themselves to throw-away one-session datastructures.\n\nBoats
              are actually an example I use in my tutorials. :)\n\n\n\n| -doesn't
              have every object in memory, only when needed, otherwise on file.\n\nMuq
              keeps objects on disk and can demand-page any object as needed\nin a
              single read() (i.e., half the time of gdbm or such solutions)\nwhile
              still efficiently supporting large numbers of small objects\n-- the
              norm for mud-style systems.\n\nA ram buffer (typically set to 8Meg,
              but resizable) caches recently\nused objects, with an MMU-style hashtable
              for locating them quickly.\nOverhead due to the hashtable is about 3%
              of CPU used by the server\n-- thanks to careful efficiency tuning!\n\nThe
              main caveat on all this at the moment is that the current\ngarbage collector
              is a simple-minded classic xlisp style\nmark-and-sweep, which will force
              all of the db into ram on\neach garbage collect:  This means that if
              you have much dynamic\nallocation going on, in practice your db currently
              has to fit in\nthe ram buffer.\n\nI've designed a two-generation production
              garbage collector to\naddress this issue, with garbage collection of
              generation\nzero done entirely in-ram and garbage collection of generation\none
              done incrementally:  The design work was done in December\nand I expect
              implementation to take about 1-2 weekends, and\nto happen sometime this
              year.\n\n\n\n| -doesn't require me to learn it's \"own custom embedded
              language\", this one\n| really gets to me\n\nI used to feel rather strongly
              about this myself:  It is one reason\nI picked CommonLisp as a model
              for Muq:  It is a well-known,\nstandardized language which can be sanely
              used in a sandbox\nenvironment.  I still expect MUL to eventually be
              close enough\nto CommonLisp as to make little practical difference for
              most\nusers.\n\nI looked at supporting ANSI Forth, but it really just
              isn't suitable\nfor sandbox programming of virtual world stuff.\n\nC
              and C++ are likewise simply flatly unsuitable for high-level\nscripting
              sorts of applications.  I've tried to make MUC look\nand feel as much
              like C as is reasonable in the Muq environment,\nhowever, and I believe
              that is what the typical C fan really wants.\n(Witness the success of
              languages like Tcl and Perl which look a\nlot like C superficially while
              having in fact only the vaguest\nsemantic relationship to it.)\n\nPerl
              is in some ways better, but really pretty lame when it comes\nto a lot
              of OOP-related stuff.\n\nIn the end, application languages really have
              their own set of\ndesign requirements, and trying to model them too
              closely on\nother kinds of languages is usually going to be a mistake.\n\nUsing
              an off-the-shelf app language implementation can of course\nbe sensible,
              if a good one is available at design time.  When\nMuq started in '93,
              Java and such really didn't exist... :)\n\n\n\n\n| -somehow allows for
              security and access levels while coding\n\nThis covers a lot of design
              decisions!  I've thought hard about\nthis stuff in Muq.  In general,
              Muq executes compiled functions\nwith the privileges of the caller (not
              of the author/installer,\nsomething which I believe to be a major security
              design mistake,\ncommon though it be) but allows SUID-style assumption
              of author/\ninstaller privileges via specific source code syntax where\ndesired,
              allowing controlled access to protected resources.\n\n\n\n| -somehow
              allows for an event type system\n\nWhen I first studied the CommonLisp
              Exception System spec, I thought\nit one of the most baroque, overgrown
              monstrosities in the history\nof committee software design.\n\nI -still-
              think the document describing it is one of the most\npointlessly opaque
              documents in the software world, but I have\ngradually come to regard
              the design as potentially a big step\nforward in software design and
              implementation, perhaps on a\npar with the OOP paradigm.\n\nCLES essentially
              opens a marketplace in which software can post\nhelp-wanted ads and
              negotiate needed services in a much higher-level\nfashion than OOP allows,
              much as OOP does it in a much high level\nfashion than simple function
              calls or tables allow.\n\nCLES also opens up the execution of programs
              to make them inspectable\nand controllable in a high-level sort of way
              suitable for general\nGUI-driven browsing of code execution on a system,
              vs the current\nstate of the software art of programs which hang endlessly
              and\nfunction as sealed black boxes beyond end-user inspection or control\n(except
              as explicitly provided via special GUI hacking).\n\nI'd like to take
              Muq in the direction of leveraging Muq's\nexisting CLES-style exception
              handling with traditional\nstyle GUI event streams, in place of the
              usual simple-minded\ncallback paradigm:  I think this has great potential.\n\n\n\n\n\n|
              -allows code to be contained in packages and has appropriate management\n|
              features. Ie. I can write the code offline in a file and then upload
              the\n| file to the server\n\nMuq has \"packages\" at the source level
              ala CommonLisp, similar to the\nconcepts of the same name in Java or
              such.\n\nThese complement rather than competing with the above-described\nlower-level
              \"db\" concept:  A Muq db can contain many packages,\nand can be exported
              or imported as a cross-platform portable\nbinary hostfile.  \"db\"s
              are essentially a physical-layout notion,\nwhile \"packages\" are a
              logical-layout notion.  Both are useful,\neven critical in large systems.\n\n\n\n|
              -will allow for http access to the database\n\nSomeone needs to write
              an httpd internal daemon for Muq.  I'm\nhoping to stall on this until
              someone else gets impatient\nenough to do it. :)\n\nNot a very big or
              difficult project.\n\n\n\n| An added bonus would be, but hardly nessesary:\n|
              -driver ported to both Win32 platform and *nix platforms and database
              is\n| independent of platform.\n\nMuq runs 64-bits on all platforms,
              as future-proofing and to promote\nsmooth networked operation between
              WAN-distributed nodes running on\ndifferent host architectures.  (I
              timed this at slowing down CPU\nintensive stuff by about 15% on 32-bit
              intell machines, which I\nconsider a very reasonable cost.)\n\nThe Muq
              binary db files use the host byte ordering in order to allow\nmmapp()ing
              of the files into memory and direct access via C memory\nreads: This
              means that the db files can exist in either big-endian or\nlittle-endian
              formats.  However, the Muq server will automatically\nconvert as needed
              between the two, so normally no portability issues\nwill arise.  An
              exception would be if you wanted to NFS-share a single\nread-only copy
              of a library between processors running different byte\nsexes: This
              wouldn't work, separate big-endian and little-endian\ncopies would have
              to be maintained.\n\nI've thought of porting the Muq server to Windows:
              \ It shouldn't be\nany harder than porting TinyMUCK or such to Windows,
              which has been\ndone.  I've tried to keep the code as portable as reasonably
              possible,\nwith I think good success.  (The 32- to 64-bit conversion
              of Muq took\nmuch less than a month, for example, whereas it would likely
              be\nvirtually impossible for many comparable servers.  Clean use of
              types\nmade the difference.)\n\nHowever, I do not plan to port to Windows
              myself:  I feel that if I\ncan get 10,000 to 100,000 Linux users of
              Muq, someone will step\nforward and do the port for me.  And if Muq
              cannot get that level\nof support on Linux, why bother inflicting it
              on the Windows world? :)\n\n\n\nad astra!\n  Cynbe\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] Muq update"
        from: Cynbe ru Taren <cynbe@muq.org>
        references: []
        date: 2000-01-01 20:10:17.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: JzBSj0e8
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *442
    parent: 
    children: []
  *293: *300
  *338: *443
  *364: *367
  *324: *444
  *123: *126
  *25: *445
  *95: *98
  *320: *322
  *188: *190
  *334: *446
  *19: *21
  *116: *118
  *157: *159
  ? &447 !ruby/object:MessageId
    raw: 00bj5f2u@generated-message-id.chibrary.org
  : &498 !ruby/object:MessageContainer
    key: *447
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: |
          From: J C Lawrence <claw@kanga.nu>
          Date: Mon, 03 Jan 2000 08:40:01 -0800
          Subject: [MUD-Dev] Library submission notification and updates

          I've touched up the Library to automatically email an alert to the
          library mailing list when someone successfully submits a new
          reference.  The alert message contains the full details on the new
          submission.  This way I won't miss new submissions (which has
          happened), and y'all can catch an early view of what people think is
          worth adding.

          On a more minor note:

            -- There is now a facility to vote for particular references as
               being more or less useful than others.  I'll add the ability to
               search for references with high vote scores soon.

            -- The Library now shows how many people have visited a
               particular reference (ie what people think is worth visiting
               from the Library).

            -- It should be about 30% faster now.

          --
          J C Lawrence                                 Home: claw@kanga.nu
          ----------(*)                              Other: coder@kanga.nu
          --=| A man is as sane as he is dangerous to his environment |=--


          _______________________________________________
          MUD-Dev maillist  -  MUD-Dev@kanga.nu
          http://www.kanga.nu/lists/listinfo/mud-dev
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Mon, 03 Jan 2000 08:40:01 -0800'
                name: Date
                value: Mon, 03 Jan 2000 08:40:01 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] Library submission notification and updates'
                name: Subject
                value: "[MUD-Dev] Library submission notification and updates"
              mbox_from: 
            body: |
              I've touched up the Library to automatically email an alert to the
              library mailing list when someone successfully submits a new
              reference.  The alert message contains the full details on the new
              submission.  This way I won't miss new submissions (which has
              happened), and y'all can catch an early view of what people think is
              worth adding.

              On a more minor note:

                -- There is now a facility to vote for particular references as
                   being more or less useful than others.  I'll add the ability to
                   search for references with high vote scores soon.

                -- The Library now shows how many people have visited a
                   particular reference (ie what people think is worth visiting
                   from the Library).

                -- It should be about 30% faster now.

              --
              J C Lawrence                                 Home: claw@kanga.nu
              ----------(*)                              Other: coder@kanga.nu
              --=| A man is as sane as he is dangerous to his environment |=--


              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] Library submission notification and updates"
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-03 16:40:01.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00bj5f2u
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *447
    parent: 
    children: []
  *199: *202
  *73: *75
  *14: *16
  *32: *448
  *39: *42
  *43: *449
  *90: *450
  *221: *451
  *174: *176
  *288: *290
  ? &452 !ruby/object:MessageId
    raw: Jysr9C1g@generated-message-id.chibrary.org
  : &499 !ruby/object:MessageContainer
    key: *452
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: Ola Fosheim Gr��stad <olag@ifi.uio.no>\nDate: Tue, 01 Feb 2000
          00:32:45 +0100\nSubject: datagram protocol design theory? (Re: [MUD-Dev]
          Question about multithreaded servers)\n\nJ C Lawrence wrote:\r\n> Essentially
          you're talking about locking strategies, which hit for\r\n> multi-threading,
          multi-process, cluster, and parallel programming\r\n> cases.  I don't know
          of a decent web site which discusses or coveres\r\n> the area well (if you
          do, please add them to the Library at\r\n> Kanga.Nu), but there are various
          techniques, from the lockless\r\n> rollback system i use, to ordered lock
          handling, to various\r\n> applications of graph theory for deadlock detection.
          \ A good OS\r\n> desing book should cover -- I've heard good comments on
          tanenbaum's\r\n> books in particular.\r\n\r\nI guess he got himself established
          in the university curriculum with\r\nMinix. We used \"operating systems:
          design and implementation\" (1987). It\r\nwas pragmatic enough to be an
          easy read...\r\n\r\nWhen looking for theory that might ease the design of
          protocols built on\r\nunreliable datagram passing I went to the library
          and picked up\r\nBen-Ari's \"Principles of Concurrent and Distributed Programming\"
          (1990)\r\nfrom the CAR Hoare series. I gather it is a decent read even though
          it\r\nis the kind of book that provides proofs, but not particularly helpful\r\nfor
          what I am interested in as distributed in this context doesn't\r\ntarget
          the kind of topology or problems that are relevant for a MUD with\r\nclients.\r\n\r\nDoes
          anyone know of a book or books that provide a decent theoretical\r\nfoundation
          for designing the kinds of datagram protocols that would be\r\nuseful in
          a MUD? I am basically talking about application specific\r\nprotocols optimized
          for speed and bandwidth considerations. It is also\r\ndesirable to not have
          too much bookkeeping on the server side.\r\n\r\nAnd, what kind of comp.sci./discrete
          math theory is useful for\r\ndesigning/thinking about message based protocols
          (on a unreliable\r\ndatagram layer).\r\n\r\nOla.\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Ola Fosheim Gr��stad <olag@ifi.uio.no>'
                name: From
                value: Ola Fosheim Gr��stad <olag@ifi.uio.no>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Tue, 01 Feb 2000 00:32:45 +0100'
                name: Date
                value: Tue, 01 Feb 2000 00:32:45 +0100
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: datagram protocol design theory? (Re: [MUD-Dev] Question
                  about multithreaded servers)'
                name: Subject
                value: 'datagram protocol design theory? (Re: [MUD-Dev] Question about
                  multithreaded servers)'
              mbox_from: 
            body: "J C Lawrence wrote:\r\n> Essentially you're talking about locking
              strategies, which hit for\r\n> multi-threading, multi-process, cluster,
              and parallel programming\r\n> cases.  I don't know of a decent web site
              which discusses or coveres\r\n> the area well (if you do, please add
              them to the Library at\r\n> Kanga.Nu), but there are various techniques,
              from the lockless\r\n> rollback system i use, to ordered lock handling,
              to various\r\n> applications of graph theory for deadlock detection.
              \ A good OS\r\n> desing book should cover -- I've heard good comments
              on tanenbaum's\r\n> books in particular.\r\n\r\nI guess he got himself
              established in the university curriculum with\r\nMinix. We used \"operating
              systems: design and implementation\" (1987). It\r\nwas pragmatic enough
              to be an easy read...\r\n\r\nWhen looking for theory that might ease
              the design of protocols built on\r\nunreliable datagram passing I went
              to the library and picked up\r\nBen-Ari's \"Principles of Concurrent
              and Distributed Programming\" (1990)\r\nfrom the CAR Hoare series. I
              gather it is a decent read even though it\r\nis the kind of book that
              provides proofs, but not particularly helpful\r\nfor what I am interested
              in as distributed in this context doesn't\r\ntarget the kind of topology
              or problems that are relevant for a MUD with\r\nclients.\r\n\r\nDoes
              anyone know of a book or books that provide a decent theoretical\r\nfoundation
              for designing the kinds of datagram protocols that would be\r\nuseful
              in a MUD? I am basically talking about application specific\r\nprotocols
              optimized for speed and bandwidth considerations. It is also\r\ndesirable
              to not have too much bookkeeping on the server side.\r\n\r\nAnd, what
              kind of comp.sci./discrete math theory is useful for\r\ndesigning/thinking
              about message based protocols (on a unreliable\r\ndatagram layer).\r\n\r\nOla.\r\n\r\n\r\n\r\n_______________________________________________\r\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\r\nhttp://www.kanga.nu/lists/listinfo/mud-dev\r\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'datagram protocol design theory? (Re: [MUD-Dev] Question about
            multithreaded servers)'
        from: Ola Fosheim Gr��stad <olag@ifi.uio.no>
        references: []
        date: 2000-01-31 23:32:45.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jysr9C1g
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *452
    parent: 
    children: []
  *89: *91
  *209: *453
  *56: *454
  *330: *335
  *12: *455
  *33: *456
  *172: *457
  *189: *192
  *74: *458
  *214: *217
  *301: *459
  *66: *70
  *51: *54
  ? &460 !ruby/object:MessageId
    raw: Jysr9Awa@generated-message-id.chibrary.org
  : &500 !ruby/object:MessageContainer
    key: *460
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: |
          From: J C Lawrence <claw@kanga.nu>
          Date: Mon, 03 Jan 2000 23:03:09 -0800
          Subject: [MUD-Dev] For those interested in parsers and compilers

          I've stocked the Library with a number of references to parser
          generators and related toolsets under
          /Top/Programming/Languages/Compiler & Language Writing:

            http://www.kanga.nu/library.php3?viewCat=136

          Some look rather interesting.  Enjoy.

          --
          J C Lawrence                                 Home: claw@kanga.nu
          ----------(*)                              Other: coder@kanga.nu
          --=| A man is as sane as he is dangerous to his environment |=--


          _______________________________________________
          MUD-Dev maillist  -  MUD-Dev@kanga.nu
          http://www.kanga.nu/lists/listinfo/mud-dev
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Mon, 03 Jan 2000 23:03:09 -0800'
                name: Date
                value: Mon, 03 Jan 2000 23:03:09 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] For those interested in parsers and compilers'
                name: Subject
                value: "[MUD-Dev] For those interested in parsers and compilers"
              mbox_from: 
            body: |
              I've stocked the Library with a number of references to parser
              generators and related toolsets under
              /Top/Programming/Languages/Compiler & Language Writing:

                http://www.kanga.nu/library.php3?viewCat=136

              Some look rather interesting.  Enjoy.

              --
              J C Lawrence                                 Home: claw@kanga.nu
              ----------(*)                              Other: coder@kanga.nu
              --=| A man is as sane as he is dangerous to his environment |=--


              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] For those interested in parsers and compilers"
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-04 07:03:09.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jysr9Awa
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *460
    parent: 
    children: []
  ? &461 !ruby/object:MessageId
    raw: Jysr6yYK@generated-message-id.chibrary.org
  : &501 !ruby/object:MessageContainer
    key: *461
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: Ben Greear <greearb@candelatech.com>\nDate: Tue, 04 Jan 2000 19:19:48
          -0700\nSubject: [MUD-Dev] ScryMUD 2.0.9 released (compiles on Windows (cygwin))\n\nFixes
          and improvements include:\nremort and sacrifice commands, to better handle
          re-mort'ing players\n(letting them start over slightly  more powerful when
          they reach the\nhighest level.)\n\nAlso fixed bug with mob scripting, and
          made lots of other little\ntweaks.\n\n*****\nIt now compiles on Window's
          computers using the Cygwin(sp?) tools,\nbut no idea if, or how well it runs....\n*****\n\nBen\n\n--\nBen
          Greear (greearb@candelatech.com)  http://scry.wanfear.com/~greear \nAuthor
          of ScryMUD:  scry.wanfear.com 4444        (Released under GPL)\nhttp://scry.wanfear.com\n\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: Ben Greear <greearb@candelatech.com>'
                name: From
                value: Ben Greear <greearb@candelatech.com>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Tue, 04 Jan 2000 19:19:48 -0700'
                name: Date
                value: Tue, 04 Jan 2000 19:19:48 -0700
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] ScryMUD 2.0.9 released (compiles on Windows
                  (cygwin))'
                name: Subject
                value: "[MUD-Dev] ScryMUD 2.0.9 released (compiles on Windows (cygwin))"
              mbox_from: 
            body: "Fixes and improvements include:\nremort and sacrifice commands,
              to better handle re-mort'ing players\n(letting them start over slightly
              \ more powerful when they reach the\nhighest level.)\n\nAlso fixed bug
              with mob scripting, and made lots of other little\ntweaks.\n\n*****\nIt
              now compiles on Window's computers using the Cygwin(sp?) tools,\nbut
              no idea if, or how well it runs....\n*****\n\nBen\n\n--\nBen Greear
              (greearb@candelatech.com)  http://scry.wanfear.com/~greear \nAuthor
              of ScryMUD:  scry.wanfear.com 4444        (Released under GPL)\nhttp://scry.wanfear.com\n\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] ScryMUD 2.0.9 released (compiles on Windows (cygwin))"
        from: Ben Greear <greearb@candelatech.com>
        references: []
        date: 2000-01-05 02:19:48.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jysr6yYK
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *461
    parent: 
    children: []
  *323: *325
  *34: *36
  ? &462 !ruby/object:MessageId
    raw: 00uTmqBs@generated-message-id.chibrary.org
  : &502 !ruby/object:MessageContainer
    key: *462
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Tue, 18 Jan 2000 00:35:27
          -0800\nSubject: META: List goals (was Re: [MUD-Dev] OS Inspiration)\n\nOn
          Sun, 02 Jan 2000 04:10:57 -0600 \nGreg Miller <gmiller@classic-games.com>
          wrote:\n\n> Threading is fairly popular on the list, but we don't have a\n>
          terribly large amount of agreement on how to go about it.  \n\n__NOT__ writing
          as list owner:\n\n  Having done a little survey of the rest of the MUDding
          public\n(lotsa probing about the web, Usenet, and half a dozen other MUD\nlists),
          the general view seems to be that MUD-Dev is a research\nestablishment first
          and an educational venue second (lurkers benefit\nfrom the research we do).
          \ This probably best echoes my own\ninterests and shouldn't be a surprise.
          \ (I don't think I have the\npatience or the interest to run an educational
          list, or that we'd\nkeep many of our more, umm, august and entertaining
          members if I\ndid).\n\n  If we are going to take the research position,
          we need to be\nsupremely careful of assumed othodoxies (nod Keegan).  If
          the\nfunction of the list is to arrive at agreed upon dogma and recipes\nfor
          \"how something is done\", we've failed before we've started.\nCurrently
          we have at least four different threading models\nrepresented on the list,
          five different DB models, 3 different\nclient/server models, half a dozen
          or more internal scripting\nlanguages, at least 3 OS platforms, 6 different
          social/cultural\nmodels, any of several score different target markets (Furcadia's\ntarget
          market is certainly not UOL's for instance), etc etc etc.\n\n  This is a
          Good Thing.  Difference is good.  Knowing and\nunderstanding the implications
          of why that difference is there is\neven better. \n\n--\nJ C Lawrence                                 Home:
          claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
          A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Tue, 18 Jan 2000 00:35:27 -0800'
                name: Date
                value: Tue, 18 Jan 2000 00:35:27 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: META: List goals (was Re: [MUD-Dev] OS Inspiration)'
                name: Subject
                value: 'META: List goals (was Re: [MUD-Dev] OS Inspiration)'
              mbox_from: 
            body: "On Sun, 02 Jan 2000 04:10:57 -0600 \nGreg Miller <gmiller@classic-games.com>
              wrote:\n\n> Threading is fairly popular on the list, but we don't have
              a\n> terribly large amount of agreement on how to go about it.  \n\n__NOT__
              writing as list owner:\n\n  Having done a little survey of the rest
              of the MUDding public\n(lotsa probing about the web, Usenet, and half
              a dozen other MUD\nlists), the general view seems to be that MUD-Dev
              is a research\nestablishment first and an educational venue second (lurkers
              benefit\nfrom the research we do).  This probably best echoes my own\ninterests
              and shouldn't be a surprise.  (I don't think I have the\npatience or
              the interest to run an educational list, or that we'd\nkeep many of
              our more, umm, august and entertaining members if I\ndid).\n\n  If we
              are going to take the research position, we need to be\nsupremely careful
              of assumed othodoxies (nod Keegan).  If the\nfunction of the list is
              to arrive at agreed upon dogma and recipes\nfor \"how something is done\",
              we've failed before we've started.\nCurrently we have at least four
              different threading models\nrepresented on the list, five different
              DB models, 3 different\nclient/server models, half a dozen or more internal
              scripting\nlanguages, at least 3 OS platforms, 6 different social/cultural\nmodels,
              any of several score different target markets (Furcadia's\ntarget market
              is certainly not UOL's for instance), etc etc etc.\n\n  This is a Good
              Thing.  Difference is good.  Knowing and\nunderstanding the implications
              of why that difference is there is\neven better. \n\n--\nJ C Lawrence
              \                                Home: claw@kanga.nu\n----------(*)
              \                             Other: coder@kanga.nu\n--=| A man is as
              sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: 'META: List goals (was Re: [MUD-Dev] OS Inspiration)'
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-18 08:35:27.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00uTmqBs
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *462
    parent: 
    children: []
  *413: *418
  *240: *463
  *83: *92
  *182: *464
  ? &465 !ruby/object:MessageId
    raw: Jzn75usa@generated-message-id.chibrary.org
  : &503 !ruby/object:MessageContainer
    key: *465
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: |
          From: J C Lawrence <claw@kanga.nu>
          Date: Mon, 03 Jan 2000 11:35:20 -0800
          Subject: [MUD-Dev] Catalog of Compiler Construction Tools

          Given the current thread, this seems applicable:

            http://www.first.gmd.de/cogent/catalog/

          --
          J C Lawrence                                 Home: claw@kanga.nu
          ----------(*)                              Other: coder@kanga.nu
          --=| A man is as sane as he is dangerous to his environment |=--


          _______________________________________________
          MUD-Dev maillist  -  MUD-Dev@kanga.nu
          http://www.kanga.nu/lists/listinfo/mud-dev
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Mon, 03 Jan 2000 11:35:20 -0800'
                name: Date
                value: Mon, 03 Jan 2000 11:35:20 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] Catalog of Compiler Construction Tools'
                name: Subject
                value: "[MUD-Dev] Catalog of Compiler Construction Tools"
              mbox_from: 
            body: |
              Given the current thread, this seems applicable:

                http://www.first.gmd.de/cogent/catalog/

              --
              J C Lawrence                                 Home: claw@kanga.nu
              ----------(*)                              Other: coder@kanga.nu
              --=| A man is as sane as he is dangerous to his environment |=--


              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] Catalog of Compiler Construction Tools"
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-03 19:35:20.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jzn75usa
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *465
    parent: 
    children: []
  *153: *155
  ? &466 !ruby/object:MessageId
    raw: Jzn75vxg@generated-message-id.chibrary.org
  : &504 !ruby/object:MessageContainer
    key: *466
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Thu, 20 Jan 2000 15:40:55
          -0800\nSubject: [MUD-Dev] [adv-mud] Re: Topic list repost (fwd)\n\n-------
          Forwarded Message\n\nDate: Thu, 20 Jan 2000 16:06:31 -0600\nFrom: Chris
          Jacobson <fear@technologist.com>\nTo: \"Advanced MUD Design\" <adv-mud@egroups.com>\n\nOn
          1/20/00 2:22 PM, Erwin S. Andreasen (erwin@andreasen.com) stated:\n\nLexiMUD
          0.3 (http://avp.dhs.org/leximud) features some things that may be \nof interest:\n\n>STL\n\nI
          have implemented my own derivative of STL.  It is fully compliant to \nthe
          STL interface, and is safe for drop-in use in existing MUDs.  To do \nthis,
          one of the things I did with <list> is to make the nodes reference \ncounted
          and \"purged\"-flagged (which causes iterators to step over the \nnode).
          \ As for the other classes, well, doing something like this with \n<vector>
          would involve a little more overhead, and the preferred \nmechanism for
          accessing a <vector> is incrementally with numbers (hence \nwhy the optimized
          <vector> uses vector<>::__start and vector<>::__end+1 \nfor its begin()
          and end() iters).\n\nThe implemented classes include <list>, <vector>, <map>,
          <multimap>.  So \nfar these classes pass all the STLport tests that I have
          thrown at it \n(although I haven't fully tested <vector> with the STLport
          tests, it runs \ngreat in the MUD).  There are other important portions
          of the STL \nincluded as well, and it supports the full type_traits and
          \niterator_traits scheme.\n\nThe LexiSTL is in lexi/stl.\n\n>Strings\n\nI
          have a semi-tested String class in lexi/src/string.{h,cp}  Strings are \nreference
          counted and use a sub-string mechanism to allow for optimum \nmemory efficiency,
          and the operations are a bit optimized towards the \nmechanism.  All Strings
          are effectively substrings, referencing the \ninternal String class, and
          storing the offset and length.  These strings \nare also compatible with
          C strings in that attempting to access them in \nC-like ways causes them
          to convert themselves over to a single-reference \nof only the content string
          itself (thus de-referencing the shared string).\n\n>Virtual overlaid filesystem
          (not REALLY an OO issue, it just happens the\n>thing is implemented in an
          OO way)\n\nI'd love to see something like this, and if I ever get the time
          I might \neven do it.\n\n>gcc switches, gcc vs egcs, -fexternal-templates
          or not\n\nIsn't this a NULL issue with GCC 2.95 being done by the EGCS committee
          \n(GCC is Dead, Long Live GCC)\n\n>OO Interpreters\n>Pointerless Muds\n>Non
          C++ OO implementation/how-tos\n\nThis brings me to something I've been looking
          into - reimplementing the \nwhole codebase in Python <g>.  I bought the
          book Erwin recommended, and I \nlove the language.\n\n- - Chris Jacobson\n\n-------
          End of Forwarded Message\n\n--\nJ C Lawrence                                 Home:
          claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
          A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Thu, 20 Jan 2000 15:40:55 -0800'
                name: Date
                value: Thu, 20 Jan 2000 15:40:55 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] [adv-mud] Re: Topic list repost (fwd)'
                name: Subject
                value: "[MUD-Dev] [adv-mud] Re: Topic list repost (fwd)"
              mbox_from: 
            body: "------- Forwarded Message\n\nDate: Thu, 20 Jan 2000 16:06:31 -0600\nFrom:
              Chris Jacobson <fear@technologist.com>\nTo: \"Advanced MUD Design\"
              <adv-mud@egroups.com>\n\nOn 1/20/00 2:22 PM, Erwin S. Andreasen (erwin@andreasen.com)
              stated:\n\nLexiMUD 0.3 (http://avp.dhs.org/leximud) features some things
              that may be \nof interest:\n\n>STL\n\nI have implemented my own derivative
              of STL.  It is fully compliant to \nthe STL interface, and is safe for
              drop-in use in existing MUDs.  To do \nthis, one of the things I did
              with <list> is to make the nodes reference \ncounted and \"purged\"-flagged
              (which causes iterators to step over the \nnode).  As for the other
              classes, well, doing something like this with \n<vector> would involve
              a little more overhead, and the preferred \nmechanism for accessing
              a <vector> is incrementally with numbers (hence \nwhy the optimized
              <vector> uses vector<>::__start and vector<>::__end+1 \nfor its begin()
              and end() iters).\n\nThe implemented classes include <list>, <vector>,
              <map>, <multimap>.  So \nfar these classes pass all the STLport tests
              that I have thrown at it \n(although I haven't fully tested <vector>
              with the STLport tests, it runs \ngreat in the MUD).  There are other
              important portions of the STL \nincluded as well, and it supports the
              full type_traits and \niterator_traits scheme.\n\nThe LexiSTL is in
              lexi/stl.\n\n>Strings\n\nI have a semi-tested String class in lexi/src/string.{h,cp}
              \ Strings are \nreference counted and use a sub-string mechanism to
              allow for optimum \nmemory efficiency, and the operations are a bit
              optimized towards the \nmechanism.  All Strings are effectively substrings,
              referencing the \ninternal String class, and storing the offset and
              length.  These strings \nare also compatible with C strings in that
              attempting to access them in \nC-like ways causes them to convert themselves
              over to a single-reference \nof only the content string itself (thus
              de-referencing the shared string).\n\n>Virtual overlaid filesystem (not
              REALLY an OO issue, it just happens the\n>thing is implemented in an
              OO way)\n\nI'd love to see something like this, and if I ever get the
              time I might \neven do it.\n\n>gcc switches, gcc vs egcs, -fexternal-templates
              or not\n\nIsn't this a NULL issue with GCC 2.95 being done by the EGCS
              committee \n(GCC is Dead, Long Live GCC)\n\n>OO Interpreters\n>Pointerless
              Muds\n>Non C++ OO implementation/how-tos\n\nThis brings me to something
              I've been looking into - reimplementing the \nwhole codebase in Python
              <g>.  I bought the book Erwin recommended, and I \nlove the language.\n\n-
              - Chris Jacobson\n\n------- End of Forwarded Message\n\n--\nJ C Lawrence
              \                                Home: claw@kanga.nu\n----------(*)
              \                             Other: coder@kanga.nu\n--=| A man is as
              sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] [adv-mud] Re: Topic list repost (fwd)"
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-20 23:40:55.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jzn75vxg
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *466
    parent: 
    children: []
  *344: *347
  *109: *204
  *297: *467
  *147: *150
  *414: *416
  *216: *468
  *236: *239
  *177: *180
  *336: *469
  *45: *47
  *219: *222
  *29: *470
  *305: *311
  *115: *135
  *307: *309
  *26: *28
  *112: *144
  ? &471 !ruby/object:MessageId
    raw: Jysi41rs@generated-message-id.chibrary.org
  : &505 !ruby/object:MessageContainer
    key: *471
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: |
          From: "Raph & Kristen Koster" <koster@eden.com>
          Date: Sun, 9 Jan 2000 10:04:49 -0600
          Subject: [MUD-Dev] Laws website moves

          Hello all, just a quick note to let you know that LegendMUD's website has
          moved to its own domain:

          http://www.legendmud.org

          Why does this matter to MUD-Dev? Well, because my personal website has also
          moved:

          http://www.legendmud.org/raph/

          and that also means that the webpage for the Laws of Online World Design
          (and my various other writings on mud design) has moved:

          http://www.legendmud.org/raph/gaming/
          http://www.legendmud.org/raph/gaming/laws.html

          I know many of you on the list have bookmarks--the old links will have a
          reminder to move for a while, but after a couple of weeks (I believe by
          February) they will cease to function. So please update any bookmarks you
          may have... sorry for the inconvenience!

          -Raph




          _______________________________________________
          MUD-Dev maillist  -  MUD-Dev@kanga.nu
          http://www.kanga.nu/lists/listinfo/mud-dev
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: "Raph & Kristen Koster" <koster@eden.com>'
                name: From
                value: '"Raph & Kristen Koster" <koster@eden.com>'
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Sun, 9 Jan 2000 10:04:49 -0600'
                name: Date
                value: Sun, 9 Jan 2000 10:04:49 -0600
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] Laws website moves'
                name: Subject
                value: "[MUD-Dev] Laws website moves"
              mbox_from: 
            body: |
              Hello all, just a quick note to let you know that LegendMUD's website has
              moved to its own domain:

              http://www.legendmud.org

              Why does this matter to MUD-Dev? Well, because my personal website has also
              moved:

              http://www.legendmud.org/raph/

              and that also means that the webpage for the Laws of Online World Design
              (and my various other writings on mud design) has moved:

              http://www.legendmud.org/raph/gaming/
              http://www.legendmud.org/raph/gaming/laws.html

              I know many of you on the list have bookmarks--the old links will have a
              reminder to move for a while, but after a couple of weeks (I believe by
              February) they will cease to function. So please update any bookmarks you
              may have... sorry for the inconvenience!

              -Raph




              _______________________________________________
              MUD-Dev maillist  -  MUD-Dev@kanga.nu
              http://www.kanga.nu/lists/listinfo/mud-dev
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] Laws website moves"
        from: Raph & Kristen Koster <koster@eden.com>
        references: []
        date: 2000-01-09 16:04:49.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: Jysi41rs
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *471
    parent: 
    children: []
  *58: *60
  ? &472 !ruby/object:MessageId
    raw: 00uTkcka@generated-message-id.chibrary.org
  : &506 !ruby/object:MessageContainer
    key: *472
    value: !ruby/object:Message
      email: !ruby/object:Email
        raw: "From: J C Lawrence <claw@kanga.nu>\nDate: Thu, 20 Jan 2000 20:49:21
          -0800\nSubject: [MUD-Dev] Re: [adv-mud] Better Grammer Detection\n\n<<Crossed
          to MUD-Dev>>\n\nOn Thu, 20 Jan 2000 22:53:56 -0500 \nphlUID  <phluid@mindless.com>
          wrote:\n\n>   I just got a copy of the \"Definitive Book of Grammer\" from
          one\n> of my English teachers, and I was interested in the possibilites\n>
          of using English grammer in my command interpreter.\n\nHit the MUD-Dev archives
          and dig up some of the posts (I think)\nMartin Keegan and one of the Brandons
          (forget which) made about a\nyear, year and a half ago.  If you dig around
          a bit further you'll\nalso find a general discussion of simple NLP (Natual
          Language\nProcessing) and ways to fake it in MUD Servers.  I don't recall
          the\ndetails, but I recall some work going into trying to make a semi-BNF\nstyle
          set of grammars (simple parts of speech patterns) and then\nmoving from
          there.\n\nYes, the MUD-Dev archives are getting way too big to find things
          in.\n\n> My question is how much work has been done towards grammer, and\n>
          if it is possible to make a sophisticated enough engine to\n> understand
          simple clauses and decompile verbs/nouns. \n\nAbsolutely.  This is a well
          expored field.\n\n> The possibilities for this is a much easier user interface
          that\n> understands more variations of commands, leading to less \"Huh?\"s\n>
          and more successful commands.\n\nGeorge Reese has made a number of fairly
          cogent arguments on r.g.m.*\narguing the advantages of a centralised grammar
          over having the\ngrammer bound to the objects it affects.  There have also
          been\nextensive threads on MUD-Dev regarding basic grammaer design and\nimplementation.\n\n>
          I had a pretty interesting discussion in #rom about natural\n> language
          processing, and I've realized that it can become very\n> complicated. As
          an example, I'm just going to throw out the idea\n> of the conjunction.
          If we wanted the mud to recognize\n> conjunctions, it would make the game
          extremely powerful. I will\n> use the following examples: and: \"Get the
          dog and the cat\" but:\n> \"get all the swords but not the blue one\" (except
          works too) if:\n> \"kill bob if he smiles\" when: \"drop the bag when bill
          drops the\n> money\"\n\nI'd recommend digging out the parsers for the various
          Interactive\nFiction bases.  Several of them have expored this area quite
          ell.\nTravis Casy (FAQer for rec.games.design and MUD-Dev member) can\nprobably
          point you further.\n\n--\nJ C Lawrence                                 Home:
          claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
          A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
          maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
        header: !ruby/object:Headers
          rmail: !ruby/object:RMail::Message
            header: !ruby/object:RMail::Header
              fields:
              - !ruby/object:RMail::Header::Field
                raw: 'From: J C Lawrence <claw@kanga.nu>'
                name: From
                value: J C Lawrence <claw@kanga.nu>
              - !ruby/object:RMail::Header::Field
                raw: 'Date: Thu, 20 Jan 2000 20:49:21 -0800'
                name: Date
                value: Thu, 20 Jan 2000 20:49:21 -0800
              - !ruby/object:RMail::Header::Field
                raw: 'Subject: [MUD-Dev] Re: [adv-mud] Better Grammer Detection'
                name: Subject
                value: "[MUD-Dev] Re: [adv-mud] Better Grammer Detection"
              mbox_from: 
            body: "<<Crossed to MUD-Dev>>\n\nOn Thu, 20 Jan 2000 22:53:56 -0500 \nphlUID
              \ <phluid@mindless.com> wrote:\n\n>   I just got a copy of the \"Definitive
              Book of Grammer\" from one\n> of my English teachers, and I was interested
              in the possibilites\n> of using English grammer in my command interpreter.\n\nHit
              the MUD-Dev archives and dig up some of the posts (I think)\nMartin
              Keegan and one of the Brandons (forget which) made about a\nyear, year
              and a half ago.  If you dig around a bit further you'll\nalso find a
              general discussion of simple NLP (Natual Language\nProcessing) and ways
              to fake it in MUD Servers.  I don't recall the\ndetails, but I recall
              some work going into trying to make a semi-BNF\nstyle set of grammars
              (simple parts of speech patterns) and then\nmoving from there.\n\nYes,
              the MUD-Dev archives are getting way too big to find things in.\n\n>
              My question is how much work has been done towards grammer, and\n> if
              it is possible to make a sophisticated enough engine to\n> understand
              simple clauses and decompile verbs/nouns. \n\nAbsolutely.  This is a
              well expored field.\n\n> The possibilities for this is a much easier
              user interface that\n> understands more variations of commands, leading
              to less \"Huh?\"s\n> and more successful commands.\n\nGeorge Reese has
              made a number of fairly cogent arguments on r.g.m.*\narguing the advantages
              of a centralised grammar over having the\ngrammer bound to the objects
              it affects.  There have also been\nextensive threads on MUD-Dev regarding
              basic grammaer design and\nimplementation.\n\n> I had a pretty interesting
              discussion in #rom about natural\n> language processing, and I've realized
              that it can become very\n> complicated. As an example, I'm just going
              to throw out the idea\n> of the conjunction. If we wanted the mud to
              recognize\n> conjunctions, it would make the game extremely powerful.
              I will\n> use the following examples: and: \"Get the dog and the cat\"
              but:\n> \"get all the swords but not the blue one\" (except works too)
              if:\n> \"kill bob if he smiles\" when: \"drop the bag when bill drops
              the\n> money\"\n\nI'd recommend digging out the parsers for the various
              Interactive\nFiction bases.  Several of them have expored this area
              quite ell.\nTravis Casy (FAQer for rec.games.design and MUD-Dev member)
              can\nprobably point you further.\n\n--\nJ C Lawrence                                 Home:
              claw@kanga.nu\n----------(*)                              Other: coder@kanga.nu\n--=|
              A man is as sane as he is dangerous to his environment |=--\n\n\n_______________________________________________\nMUD-Dev
              maillist  -  MUD-Dev@kanga.nu\nhttp://www.kanga.nu/lists/listinfo/mud-dev\n"
            epilogue: 
            preamble: 
        message_id: !ruby/object:MessageId
          raw: "[invalid or missing message id]"
        subject: !ruby/object:Subject
          original: "[MUD-Dev] Re: [adv-mud] Better Grammer Detection"
        from: J C Lawrence <claw@kanga.nu>
        references: []
        date: 2000-01-21 04:49:21.000000000 Z
        no_archive: false
      call_number: !ruby/object:CallNumber
        str: 00uTkcka
      source: archive
      list: !ruby/object:List
        slug: mud-dev
        name: 
        description: 
        homepage: 
        footer: 
      message_id: *472
    parent: 
    children: []
  *319: *326
  *79: *473
  *4: *7
subjects:
  "[MUD-Dev] Storing tokens with flex & bison": *3
  "[MUD-Dev] A quick business question...": *52
  "[MUD-Dev] Embedded languages, object persistance... ack.": *57
  '[MUD-Dev] Clay Shirky''s "Playfulness in 3-D Spaces"': *69
  "[MUD-Dev] Admins as Mortals twist": *78
  "[MUD-Dev] Signing off...": *474
  "[MUD-Dev] Question about multithreaded servers": *266
  "[MUD-Dev] Community Relations": *118
  "[MUD-Dev] Simulated Populations": *217
  "[MUD-Dev] How to handle/display partial language skill": *316
  "[MUD-Dev] OS Inspiration": *234
  "[MUD-Dev] Fair/Unfair? Scenarios (fwd)": *237
  "[MUD-Dev] Hello!": *352
  "[MUD-Dev] Chomsky's recursive theory of grammar": *475
  "[MUD-Dev] EQ packet analyzer is gone?": *265
  "[MUD-Dev] [adv-mud] What good is a hero when nobody knows? (fwd)": *362
  "[MUD-Dev][adv-mud] What good is a hero when nobody knows?": *284
  "[MUD-Dev] Valhalla license?": *350
  "[MUD-Dev] concerning tokenization, compilation, performance, and other fun stuff.": *296
  player politics (was[MUD-Dev] An introduction...): *440
  "[MUD-Dev] The grass is always greener in the other field": *476
  "[MUD-Dev] Planet/Solar System Generation": *433
  "[MUD-Dev]Databases": *333
  "[MUD-Dev] EQ packet sniffer": *477
  "[MUD-Dev] Business Licenses": *347
  "[MUD-Dev] hoho": *478
  "[MUD-Dev] Starlane test": *479
  "[MUD-Dev] Current Status of Middle Earth Online": *480
  "[MUD-Dev][adv-mud] MUD-Dev vs. adv-mud": *481
  "[MUD-Dev] Multiply oriented interactive worlds...": *482
  "[MUD-Dev] JavaWorld: Build an object database": *483
  "[MUD-Dev] code base inquiry": *365
  "[MUD-Dev] MUD-Dev vs. adv-mud": *484
  "[MUD-Dev] ShowEQ": *485
  "[MUD-Dev] New link support": *486
  "[MUD-Dev]Commercial-use Restrictions on Code Bases (was: help me find 100% fre (fwd)": *381
  "[MUD-Dev] RFC: Worldforge project": *487
  "[MUD-Dev] Matching and Maximizing: How players choose between activities": *488
  "[MUD-Dev] (fwd)Avatarism and Role-Playing Game Design": *489
  "[MUD-Dev] An introduction...": *392
  "[MUD-Dev] [adv-mud] Spellbound Hierarchy and Keys (fwd)": *398
  "[MUD-Dev] ScryMUD 2.0.10 released.": *490
  "[MUD-Dev] Mud-Dev FAQ part II": *491
  "[MUD-Dev] Databases (wasCommercial-use Restrictions on Code Bases)": *416
  "[MUD-Dev]Ok, got some brand new core dumps.": *492
  "[MUD-Dev] Optimized Object Storage": *493
  "[MUD-Dev] Y2K archives": *494
  "[MUD-Dev] Mud-Dev FAQ part I": *495
  "[MUD-Dev] Microthreads for Python": *496
  "[MUD-Dev] Muq update": *497
  "[MUD-Dev] Library submission notification and updates": *498
  datagram protocol design theory? ([MUD-Dev] Question about multithreaded servers): *499
  "[MUD-Dev] For those interested in parsers and compilers": *500
  "[MUD-Dev] ScryMUD 2.0.9 released (compiles on Windows (cygwin))": *501
  'META: List goals (was[MUD-Dev] OS Inspiration)': *502
  "[MUD-Dev] Catalog of Compiler Construction Tools": *503
  "[MUD-Dev] [adv-mud]Topic list repost (fwd)": *504
  "[MUD-Dev] Laws website moves": *505
  "[MUD-Dev][adv-mud] Better Grammer Detection": *506
redirect_map: !ruby/object:RedirectMap
  sym: *507
  redirects: {}
threads:
- *3
- *52
- *57
- *71
- *78
- *38
- *474
- *93
- *205
- *210
- *211
- *212
- *215
- *230
- *234
- *237
- *243
- *194
- *178
- *9
- *244
- *251
- *252
- *253
- *254
- *255
- *256
- *257
- *475
- *259
- *260
- *263
- *266
- *267
- *44
- *268
- *277
- *286
- *291
- *302
- *313
- *128
- *314
- *315
- *316
- *476
- *276
- *282
- *131
- *327
- *337
- *139
- *339
- *340
- *477
- *342
- *345
- *478
- *479
- *350
- *480
- *352
- *96
- *353
- *173
- *481
- *355
- *312
- *145
- *148
- *356
- *357
- *69
- *482
- *333
- *483
- *360
- *80
- *100
- *361
- *362
- *365
- *370
- *484
- *5
- *11
- *372
- *229
- *373
- *220
- *40
- *196
- *485
- *486
- *376
- *377
- *167
- *105
- *378
- *124
- *381
- *382
- *296
- *383
- *165
- *170
- *487
- *488
- *265
- *386
- *87
- *489
- *388
- *389
- *392
- *393
- *30
- *394
- *275
- *249
- *136
- *274
- *284
- *225
- *395
- *64
- *398
- *399
- *400
- *152
- *401
- *241
- *402
- *403
- *490
- *298
- *405
- *406
- *407
- *491
- *183
- *409
- *410
- *411
- *419
- *420
- *492
- *422
- *423
- *13
- *493
- *425
- *494
- *427
- *102
- *285
- *428
- *429
- *495
- *431
- *88
- *49
- *432
- *107
- *310
- *433
- *496
- *435
- *436
- *200
- *141
- *161
- *437
- *250
- *438
- *439
- *440
- *143
- *441
- *497
- *300
- *443
- *367
- *444
- *126
- *445
- *98
- *322
- *190
- *446
- *21
- *118
- *159
- *498
- *202
- *75
- *16
- *448
- *42
- *449
- *450
- *451
- *176
- *290
- *499
- *91
- *453
- *454
- *335
- *455
- *456
- *457
- *192
- *458
- *217
- *459
- *70
- *54
- *500
- *501
- *325
- *36
- *502
- *418
- *463
- *92
- *464
- *503
- *155
- *504
- *347
- *204
- *467
- *150
- *416
- *468
- *239
- *180
- *469
- *47
- *222
- *470
- *311
- *135
- *309
- *28
- *144
- *505
- *60
- *506
- *326
- *473
- *7
